<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.11.0" doxygen_gitid="9b424b03c9833626cd435af22a444888fbbb192d">
  <compound kind="file">
    <name>engine_directories.dox</name>
    <path>Documentation/</path>
    <filename>engine__directories_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>Documentation/</path>
    <filename>mainpage_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>namespace_ph.dox</name>
    <path>Documentation/</path>
    <filename>namespace__ph_8dox.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>namespace_ph_constant.dox</name>
    <path>Documentation/</path>
    <filename>namespace__ph__constant_8dox.html</filename>
    <namespace>ph::constant</namespace>
  </compound>
  <compound kind="file">
    <name>namespace_ph_detail.dox</name>
    <path>Documentation/</path>
    <filename>namespace__ph__detail_8dox.html</filename>
    <namespace>ph::detail</namespace>
  </compound>
  <compound kind="file">
    <name>namespace_ph_io_utils.dox</name>
    <path>Documentation/</path>
    <filename>namespace__ph__io__utils_8dox.html</filename>
    <namespace>ph::io_utils</namespace>
  </compound>
  <compound kind="file">
    <name>namespace_ph_lta.dox</name>
    <path>Documentation/</path>
    <filename>namespace__ph__lta_8dox.html</filename>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>namespace_ph_math.dox</name>
    <path>Documentation/</path>
    <filename>namespace__ph__math_8dox.html</filename>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>EEngineProject.h</name>
    <path>Include/</path>
    <filename>_e_engine_project_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EngineInitSettings.h</name>
    <path>Include/</path>
    <filename>_engine_init_settings_8h.html</filename>
    <includes id="_e_surface_refine_mode_8h" name="ESurfaceRefineMode.h" local="yes" import="no" module="no" objc="no">ESurfaceRefineMode.h</includes>
    <class kind="class">ph::EngineInitSettings</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESurfaceRefineMode.h</name>
    <path>Include/</path>
    <filename>_e_surface_refine_mode_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Include.dox</name>
    <path>Include/</path>
    <filename>_include_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>ph_core.h</name>
    <path>Include/</path>
    <filename>ph__core_8h.html</filename>
    <includes id="_engine_init_settings_8h" name="EngineInitSettings.h" local="yes" import="no" module="no" objc="no">EngineInitSettings.h</includes>
    <includes id="_e_engine_project_8h" name="EEngineProject.h" local="yes" import="no" module="no" objc="no">EEngineProject.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Actor.cpp</name>
    <path>Source/Actor/</path>
    <filename>_actor_8cpp.html</filename>
    <includes id="_actor_8h" name="Actor.h" local="yes" import="no" module="no" objc="no">Actor/Actor.h</includes>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <includes id="_cook_order_8h" name="CookOrder.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookOrder.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Actor.dox</name>
    <path>Source/Actor/</path>
    <filename>_actor_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>Actor.h</name>
    <path>Source/Actor/</path>
    <filename>_actor_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Actor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ADome.cpp</name>
    <path>Source/Actor/</path>
    <filename>_a_dome_8cpp.html</filename>
    <includes id="_a_dome_8h" name="ADome.h" local="yes" import="no" module="no" objc="no">Actor/ADome.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <includes id="_ideal_substance_8h" name="IdealSubstance.h" local="yes" import="no" module="no" objc="no">Actor/Material/IdealSubstance.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <includes id="_p_lat_long_env_sphere_8h" name="PLatLongEnvSphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PLatLongEnvSphere.h</includes>
    <includes id="_lat_long_env_emitter_8h" name="LatLongEnvEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/LatLongEnvEmitter.h</includes>
    <includes id="_a_image_dome_8h" name="AImageDome.h" local="yes" import="no" module="no" objc="no">Actor/Dome/AImageDome.h</includes>
    <includes id="_a_preetham_dome_8h" name="APreethamDome.h" local="yes" import="no" module="no" objc="no">Actor/Dome/APreethamDome.h</includes>
    <includes id="unary__texture__operators_8h" name="unary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/unary_texture_operators.h</includes>
    <includes id="_cook_order_8h" name="CookOrder.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookOrder.h</includes>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_t_meta_injection_primitive_8h" name="TMetaInjectionPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TMetaInjectionPrimitive.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ADome.h</name>
    <path>Source/Actor/</path>
    <filename>_a_dome_8h.html</filename>
    <includes id="_physical_actor_8h" name="PhysicalActor.h" local="yes" import="no" module="no" objc="no">Actor/PhysicalActor.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="struct">ph::DomeRadianceFunctionInfo</class>
    <class kind="class">ph::ADome</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AModel.cpp</name>
    <path>Source/Actor/</path>
    <filename>_a_model_8cpp.html</filename>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_transformed_intersectable_8h" name="TransformedIntersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedIntersectable.h</includes>
    <includes id="_t_meta_injection_primitive_8h" name="TMetaInjectionPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TMetaInjectionPrimitive.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_model_builder_8h" name="ModelBuilder.h" local="yes" import="no" module="no" objc="no">Actor/ModelBuilder.h</includes>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_cooked_geometry_8h" name="CookedGeometry.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedGeometry.h</includes>
    <includes id="_cooked_motion_8h" name="CookedMotion.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedMotion.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AModel.h</name>
    <path>Source/Actor/</path>
    <filename>_a_model_8h.html</filename>
    <includes id="_physical_actor_8h" name="PhysicalActor.h" local="yes" import="no" module="no" objc="no">Actor/PhysicalActor.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="_motion_source_8h" name="MotionSource.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/MotionSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::AModel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>APhantomModel.cpp</name>
    <path>Source/Actor/</path>
    <filename>_a_phantom_model_8cpp.html</filename>
    <includes id="_a_phantom_model_8h" name="APhantomModel.h" local="yes" import="no" module="no" objc="no">Actor/APhantomModel.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_transformed_intersectable_8h" name="TransformedIntersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedIntersectable.h</includes>
    <includes id="_motion_source_8h" name="MotionSource.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/MotionSource.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_model_builder_8h" name="ModelBuilder.h" local="yes" import="no" module="no" objc="no">Actor/ModelBuilder.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_classic_bvh_intersector_8h" name="ClassicBvhIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/ClassicBvhIntersector.h</includes>
    <includes id="_cook_order_8h" name="CookOrder.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookOrder.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>APhantomModel.h</name>
    <path>Source/Actor/</path>
    <filename>_a_phantom_model_8h.html</filename>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <class kind="class">ph::APhantomModel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ATransformedInstance.cpp</name>
    <path>Source/Actor/</path>
    <filename>_a_transformed_instance_8cpp.html</filename>
    <includes id="_a_transformed_instance_8h" name="ATransformedInstance.h" local="yes" import="no" module="no" objc="no">Actor/ATransformedInstance.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_transformed_intersectable_8h" name="TransformedIntersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedIntersectable.h</includes>
    <includes id="_motion_source_8h" name="MotionSource.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/MotionSource.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_model_builder_8h" name="ModelBuilder.h" local="yes" import="no" module="no" objc="no">Actor/ModelBuilder.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ATransformedInstance.h</name>
    <path>Source/Actor/</path>
    <filename>_a_transformed_instance_8h.html</filename>
    <includes id="_physical_actor_8h" name="PhysicalActor.h" local="yes" import="no" module="no" objc="no">Actor/PhysicalActor.h</includes>
    <class kind="class">ph::ATransformedInstance</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <path>Source/Actor/Basic/</path>
    <filename>exceptions_8h.html</filename>
    <class kind="class">ph::CookException</class>
    <class kind="class">ph::ActorCookException</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransformInfo.cpp</name>
    <path>Source/Actor/Basic/</path>
    <filename>_transform_info_8cpp.html</filename>
    <includes id="_transform_info_8h" name="TransformInfo.h" local="yes" import="no" module="no" objc="no">Actor/Basic/TransformInfo.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransformInfo.h</name>
    <path>Source/Actor/Basic/</path>
    <filename>_transform_info_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::TransformInfo</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>AImageDome.cpp</name>
    <path>Source/Actor/Dome/</path>
    <filename>_a_image_dome_8cpp.html</filename>
    <includes id="_a_image_dome_8h" name="AImageDome.h" local="yes" import="no" module="no" objc="no">Actor/Dome/AImageDome.h</includes>
    <includes id="_raster_file_image_8h" name="RasterFileImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterFileImage.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AImageDome.h</name>
    <path>Source/Actor/Dome/</path>
    <filename>_a_image_dome_8h.html</filename>
    <includes id="_a_dome_8h" name="ADome.h" local="yes" import="no" module="no" objc="no">Actor/ADome.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::AImageDome</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>APreethamDome.cpp</name>
    <path>Source/Actor/Dome/</path>
    <filename>_a_preetham_dome_8cpp.html</filename>
    <includes id="_a_preetham_dome_8h" name="APreethamDome.h" local="yes" import="no" module="no" objc="no">Actor/Dome/APreethamDome.h</includes>
    <includes id="_preetham_texture_8h" name="PreethamTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/Sky/PreethamTexture.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_math_2_time_8h" name="time.h" local="yes" import="no" module="no" objc="no">Math/time.h</includes>
    <includes id="location_8h" name="location.h" local="yes" import="no" module="no" objc="no">Math/Geometry/location.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>APreethamDome.h</name>
    <path>Source/Actor/Dome/</path>
    <filename>_a_preetham_dome_8h.html</filename>
    <includes id="_a_dome_8h" name="ADome.h" local="yes" import="no" module="no" objc="no">Actor/ADome.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::APreethamDome</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GCuboid.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_cuboid_8cpp.html</filename>
    <includes id="_g_cuboid_8h" name="GCuboid.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GCuboid.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_p_triangle_8h" name="PTriangle.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PTriangle.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_g_triangle_mesh_8h" name="GTriangleMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangleMesh.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GCuboid.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_cuboid_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector4_8h" name="TVector4.h" local="yes" import="no" module="no" objc="no">Math/TVector4.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GCuboid</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GEmpty.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_empty_8cpp.html</filename>
    <includes id="_g_empty_8h" name="GEmpty.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GEmpty.h</includes>
    <includes id="_p_empty_8h" name="PEmpty.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PEmpty.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GEmpty.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_empty_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <class kind="class">ph::GEmpty</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Geometry.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_geometry_8cpp.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_cooked_geometry_8h" name="CookedGeometry.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedGeometry.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Geometry.dox</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_actor_2_geometry_2_geometry_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>Geometry.dox</name>
    <path>Source/Math/Geometry/</path>
    <filename>_math_2_geometry_2_geometry_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>Geometry.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_actor_2_geometry_2_geometry_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Geometry</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>geometry.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_math_2_geometry_2_geometry_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::detail</namespace>
  </compound>
  <compound kind="file">
    <name>GeometrySoup.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_geometry_soup_8cpp.html</filename>
    <includes id="_geometry_soup_8h" name="GeometrySoup.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GeometrySoup.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GeometrySoup.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_geometry_soup_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GeometrySoup</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GIndexedTriangleMesh.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_indexed_triangle_mesh_8cpp.html</filename>
    <includes id="_g_indexed_triangle_mesh_8h" name="GIndexedTriangleMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GIndexedTriangleMesh.h</includes>
    <includes id="_ply_file_8h" name="PlyFile.h" local="yes" import="no" module="no" objc="no">DataIO/PlyFile.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GIndexedTriangleMesh.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_indexed_triangle_mesh_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GIndexedTriangleMesh</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GMengerSponge.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_menger_sponge_8cpp.html</filename>
    <includes id="_g_menger_sponge_8h" name="GMengerSponge.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GMengerSponge.h</includes>
    <includes id="_g_cuboid_8h" name="GCuboid.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GCuboid.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GMengerSponge.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_menger_sponge_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GMengerSponge</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GPlyPolygonMesh.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_ply_polygon_mesh_8cpp.html</filename>
    <includes id="_g_ply_polygon_mesh_8h" name="GPlyPolygonMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GPlyPolygonMesh.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="_ply_file_8h" name="PlyFile.h" local="yes" import="no" module="no" objc="no">DataIO/PlyFile.h</includes>
    <includes id="_t_indexed_polygon_buffer_8h" name="TIndexedPolygonBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TIndexedPolygonBuffer.h</includes>
    <includes id="_indexed_vertex_buffer_8h" name="IndexedVertexBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedVertexBuffer.h</includes>
    <includes id="_indexed_u_int_buffer_8h" name="IndexedUIntBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedUIntBuffer.h</includes>
    <includes id="_t_p_indexed_kd_tree_triangle_mesh_8h" name="TPIndexedKdTreeTriangleMesh.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TPIndexedKdTreeTriangleMesh.h</includes>
    <includes id="_cooked_geometry_8h" name="CookedGeometry.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedGeometry.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GPlyPolygonMesh.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_ply_polygon_mesh_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="data__structure__fwd_8h" name="data_structure_fwd.h" local="yes" import="no" module="no" objc="no">Core/Intersection/data_structure_fwd.h</includes>
    <class kind="class">ph::GPlyPolygonMesh</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GRectangle.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_rectangle_8cpp.html</filename>
    <includes id="_g_rectangle_8h" name="GRectangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GRectangle.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_p_triangle_8h" name="PTriangle.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PTriangle.h</includes>
    <includes id="_g_triangle_mesh_8h" name="GTriangleMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangleMesh.h</includes>
    <includes id="_g_triangle_8h" name="GTriangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangle.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GRectangle.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_rectangle_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GRectangle</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GSphere.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_sphere_8cpp.html</filename>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_p_lat_long01_sphere_8h" name="PLatLong01Sphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PLatLong01Sphere.h</includes>
    <includes id="_p_triangle_8h" name="PTriangle.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PTriangle.h</includes>
    <includes id="_g_triangle_8h" name="GTriangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangle.h</includes>
    <includes id="_t_sphere_8h" name="TSphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.h</includes>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_g_triangle_mesh_8h" name="GTriangleMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangleMesh.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_cooked_geometry_8h" name="CookedGeometry.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedGeometry.h</includes>
    <class kind="class">ph::IndexedTriangle</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GSphere.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_sphere_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GSphere</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GTriangle.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_triangle_8cpp.html</filename>
    <includes id="_g_triangle_8h" name="GTriangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangle.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_p_triangle_8h" name="PTriangle.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PTriangle.h</includes>
    <includes id="_uvw_mapper_8h" name="UvwMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/UvwMapper.h</includes>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_triangle_8h" name="TTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TTriangle.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GTriangle.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_triangle_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GTriangle</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GTriangleMesh.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_triangle_mesh_8cpp.html</filename>
    <includes id="_g_triangle_mesh_8h" name="GTriangleMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangleMesh.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_geometry_soup_8h" name="GeometrySoup.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GeometrySoup.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GTriangleMesh.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_triangle_mesh_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_g_triangle_8h" name="GTriangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangle.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::GTriangleMesh</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GWave.cpp</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_wave_8cpp.html</filename>
    <includes id="_g_wave_8h" name="GWave.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GWave.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_p_triangle_8h" name="PTriangle.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PTriangle.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GWave.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_g_wave_8h.html</filename>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <class kind="class">ph::GWave</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveBuildingMaterial.h</name>
    <path>Source/Actor/Geometry/</path>
    <filename>_primitive_building_material_8h.html</filename>
    <class kind="class">ph::PrimitiveBuildingMaterial</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryMixedImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_binary_mixed_image_8cpp.html</filename>
    <includes id="_binary_mixed_image_8h" name="BinaryMixedImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/BinaryMixedImage.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryMixedImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_binary_mixed_image_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <class kind="class">ph::BinaryMixedImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BlackBodyRadiationImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_black_body_radiation_image_8cpp.html</filename>
    <includes id="_black_body_radiation_image_8h" name="BlackBodyRadiationImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/BlackBodyRadiationImage.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BlackBodyRadiationImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_black_body_radiation_image_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="sdl__color__enums_8h" name="sdl_color_enums.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_color_enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::BlackBodyRadiationImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CheckerboardImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_checkerboard_image_8cpp.html</filename>
    <includes id="_checkerboard_image_8h" name="CheckerboardImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/CheckerboardImage.h</includes>
    <includes id="_t_checkerboard_texture_8h" name="TCheckerboardTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TCheckerboardTexture.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CheckerboardImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_checkerboard_image_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <class kind="class">ph::CheckerboardImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_constant_image_8cpp.html</filename>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_constant_image_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="sdl__color__enums_8h" name="sdl_color_enums.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_color_enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::ConstantImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GradientImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_gradient_image_8cpp.html</filename>
    <includes id="_gradient_image_8h" name="GradientImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/GradientImage.h</includes>
    <includes id="_t_linear_gradient_texture_8h" name="TLinearGradientTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TLinearGradientTexture.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GradientImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_gradient_image_8h.html</filename>
    <includes id="_binary_mixed_image_8h" name="BinaryMixedImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/BinaryMixedImage.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::GradientImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Image.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_image_8cpp.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Image.dox</name>
    <path>Source/Actor/Image/</path>
    <filename>_image_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>Image.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_image_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::Image</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MathImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_math_image_8cpp.html</filename>
    <includes id="_math_image_8h" name="MathImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/MathImage.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="unary__texture__operators_8h" name="unary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/unary_texture_operators.h</includes>
    <includes id="binary__texture__operators_8h" name="binary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/binary_texture_operators.h</includes>
    <includes id="ternary__texture__operators_8h" name="ternary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/ternary_texture_operators.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MathImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_math_image_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::MathImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RasterFileImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_raster_file_image_8cpp.html</filename>
    <includes id="_raster_file_image_8h" name="RasterFileImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterFileImage.h</includes>
    <includes id="_t_frame_buffer2_d_8h" name="TFrameBuffer2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TFrameBuffer2D.h</includes>
    <includes id="io__utils_8h" name="io_utils.h" local="yes" import="no" module="no" objc="no">DataIO/io_utils.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_numeric_pixel_texture2_d_8h" name="TNumericPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TNumericPixelTexture2D.h</includes>
    <includes id="_t_color_pixel_texture2_d_8h" name="TColorPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TColorPixelTexture2D.h</includes>
    <includes id="_regular_picture_8h" name="RegularPicture.h" local="yes" import="no" module="no" objc="no">Frame/RegularPicture.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RasterFileImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_raster_file_image_8h.html</filename>
    <includes id="_raster_image_base_8h" name="RasterImageBase.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterImageBase.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="pixel__texture__basics_8h" name="pixel_texture_basics.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/pixel_texture_basics.h</includes>
    <includes id="_pixel_buffer2_d_8h" name="PixelBuffer2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/PixelBuffer2D.h</includes>
    <includes id="sdl__color__enums_8h" name="sdl_color_enums.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_color_enums.h</includes>
    <class kind="class">ph::RasterFileImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RasterImageBase.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_raster_image_base_8cpp.html</filename>
    <includes id="_raster_image_base_8h" name="RasterImageBase.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterImageBase.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RasterImageBase.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_raster_image_base_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="sdl__image__enums_8h" name="sdl_image_enums.h" local="yes" import="no" module="no" objc="no">Actor/Image/sdl_image_enums.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::RasterImageBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_image_enums.h</name>
    <path>Source/Actor/Image/</path>
    <filename>sdl__image__enums_8h.html</filename>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SwizzledImage.cpp</name>
    <path>Source/Actor/Image/</path>
    <filename>_swizzled_image_8cpp.html</filename>
    <includes id="_swizzled_image_8h" name="SwizzledImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/SwizzledImage.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector4_8h" name="TVector4.h" local="yes" import="no" module="no" objc="no">Math/TVector4.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="_t_swizzled_texture_8h" name="TSwizzledTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSwizzledTexture.h</includes>
    <includes id="unary__texture__operators_8h" name="unary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/unary_texture_operators.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SwizzledImage.h</name>
    <path>Source/Actor/Image/</path>
    <filename>_swizzled_image_8h.html</filename>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::SwizzledImage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AAreaLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_area_light_8cpp.html</filename>
    <includes id="_a_area_light_8h" name="AAreaLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AAreaLight.h</includes>
    <includes id="_diffuse_surface_emitter_8h" name="DiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitter.h</includes>
    <includes id="_grouped_diffuse_surface_emitter_8h" name="GroupedDiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/GroupedDiffuseSurfaceEmitter.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_ideal_substance_8h" name="IdealSubstance.h" local="yes" import="no" module="no" objc="no">Actor/Material/IdealSubstance.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AAreaLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_area_light_8h.html</filename>
    <includes id="_a_geometric_light_8h" name="AGeometricLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AGeometricLight.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_sdl_spectrum_8h" name="TSdlSpectrum.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/TSdlSpectrum.h</includes>
    <class kind="class">ph::AAreaLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AGeometricLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_geometric_light_8cpp.html</filename>
    <includes id="_a_geometric_light_8h" name="AGeometricLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AGeometricLight.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_matte_opaque_8h" name="MatteOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/MatteOpaque.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_transformed_intersectable_8h" name="TransformedIntersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedIntersectable.h</includes>
    <includes id="_transformed_primitive_8h" name="TransformedPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedPrimitive.h</includes>
    <includes id="_t_meta_injection_primitive_8h" name="TMetaInjectionPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TMetaInjectionPrimitive.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AGeometricLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_geometric_light_8h.html</filename>
    <includes id="_a_light_8h" name="ALight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ALight.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::AGeometricLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AIesAttenuatedLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_ies_attenuated_light_8cpp.html</filename>
    <includes id="_a_ies_attenuated_light_8h" name="AIesAttenuatedLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AIesAttenuatedLight.h</includes>
    <includes id="_ies_data_8h" name="IesData.h" local="yes" import="no" module="no" objc="no">DataIO/Data/IesData.h</includes>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_transient_resource_cache_8h" name="TransientResourceCache.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientResourceCache.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_omni_modulated_emitter_8h" name="OmniModulatedEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/OmniModulatedEmitter.h</includes>
    <includes id="_t_frame_buffer2_d_8h" name="TFrameBuffer2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TFrameBuffer2D.h</includes>
    <includes id="_t_scalar_pixel_texture2_d_8h" name="TScalarPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TScalarPixelTexture2D.h</includes>
    <includes id="unary__texture__operators_8h" name="unary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/unary_texture_operators.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_t_meta_injection_primitive_8h" name="TMetaInjectionPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TMetaInjectionPrimitive.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AIesAttenuatedLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_ies_attenuated_light_8h.html</filename>
    <includes id="_a_light_8h" name="ALight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ALight.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::AIesAttenuatedLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ALight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_light_8cpp.html</filename>
    <includes id="_a_light_8h" name="ALight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ALight.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ALight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_light_8h.html</filename>
    <includes id="_physical_actor_8h" name="PhysicalActor.h" local="yes" import="no" module="no" objc="no">Actor/PhysicalActor.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::ALight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AModelLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_model_light_8cpp.html</filename>
    <includes id="_a_model_light_8h" name="AModelLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AModelLight.h</includes>
    <includes id="_diffuse_surface_emitter_8h" name="DiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitter.h</includes>
    <includes id="_grouped_diffuse_surface_emitter_8h" name="GroupedDiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/GroupedDiffuseSurfaceEmitter.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AModelLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_model_light_8h.html</filename>
    <includes id="_a_geometric_light_8h" name="AGeometricLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AGeometricLight.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::AModelLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>APointLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_point_light_8cpp.html</filename>
    <includes id="_a_point_light_8h" name="APointLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/APointLight.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>APointLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_point_light_8h.html</filename>
    <includes id="_a_area_light_8h" name="AAreaLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AAreaLight.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::APointLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ARectangleLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_rectangle_light_8cpp.html</filename>
    <includes id="_a_rectangle_light_8h" name="ARectangleLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ARectangleLight.h</includes>
    <includes id="_g_rectangle_8h" name="GRectangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GRectangle.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ARectangleLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_rectangle_light_8h.html</filename>
    <includes id="_a_area_light_8h" name="AAreaLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AAreaLight.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::ARectangleLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ASphereLight.cpp</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_sphere_light_8cpp.html</filename>
    <includes id="_a_sphere_light_8h" name="ASphereLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ASphereLight.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ASphereLight.h</name>
    <path>Source/Actor/Light/</path>
    <filename>_a_sphere_light_8h.html</filename>
    <includes id="_a_area_light_8h" name="AAreaLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AAreaLight.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::ASphereLight</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Light.dox</name>
    <path>Source/Actor/Light/</path>
    <filename>_light_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>AreaSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_area_source_8cpp.html</filename>
    <includes id="_area_source_8h" name="AreaSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/AreaSource.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_emitter_building_material_8h" name="EmitterBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/EmitterBuildingMaterial.h</includes>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <includes id="_transformed_primitive_8h" name="TransformedPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedPrimitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_diffuse_surface_emitter_8h" name="DiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitter.h</includes>
    <includes id="_grouped_diffuse_surface_emitter_8h" name="GroupedDiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/GroupedDiffuseSurfaceEmitter.h</includes>
    <includes id="_lambertian_diffuse_8h" name="LambertianDiffuse.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LambertianDiffuse.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_primitive_building_material_8h" name="PrimitiveBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/PrimitiveBuildingMaterial.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AreaSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_area_source_8h.html</filename>
    <includes id="_light_source_8h" name="LightSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/LightSource.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_sdl_spectrum_8h" name="TSdlSpectrum.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/TSdlSpectrum.h</includes>
    <class kind="class">ph::AreaSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EmitterBuildingMaterial.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_emitter_building_material_8h.html</filename>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <class kind="class">ph::EmitterBuildingMaterial</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IesAttenuatedSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_ies_attenuated_source_8cpp.html</filename>
    <includes id="_ies_attenuated_source_8h" name="IesAttenuatedSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/IesAttenuatedSource.h</includes>
    <includes id="_ies_data_8h" name="IesData.h" local="yes" import="no" module="no" objc="no">DataIO/Data/IesData.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_channel_8h" name="PrimitiveChannel.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveChannel.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_frame_buffer2_d_8h" name="TFrameBuffer2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TFrameBuffer2D.h</includes>
    <includes id="_t_scalar_pixel_texture2_d_8h" name="TScalarPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TScalarPixelTexture2D.h</includes>
    <includes id="unary__texture__operators_8h" name="unary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/unary_texture_operators.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_omni_modulated_emitter_8h" name="OmniModulatedEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/OmniModulatedEmitter.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IesAttenuatedSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_ies_attenuated_source_8h.html</filename>
    <includes id="_light_source_8h" name="LightSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/LightSource.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::IesAttenuatedSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LightSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_light_source_8cpp.html</filename>
    <includes id="_light_source_8h" name="LightSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/LightSource.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_matte_opaque_8h" name="MatteOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/MatteOpaque.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LightSource.dox</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_light_source_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>LightSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_light_source_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="_emitter_building_material_8h" name="EmitterBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/EmitterBuildingMaterial.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::LightSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ModelSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_model_source_8cpp.html</filename>
    <includes id="_model_source_8h" name="ModelSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/ModelSource.h</includes>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="_diffuse_surface_emitter_8h" name="DiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitter.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_ldr_rgb_texture2_d_8h" name="LdrRgbTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/LdrRgbTexture2D.h</includes>
    <includes id="_texture_loader_8h" name="TextureLoader.h" local="yes" import="no" module="no" objc="no">Core/Texture/TextureLoader.h</includes>
    <includes id="_emitter_building_material_8h" name="EmitterBuildingMaterial.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/EmitterBuildingMaterial.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="_raster_file_image_8h" name="RasterFileImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterFileImage.h</includes>
    <includes id="_grouped_diffuse_surface_emitter_8h" name="GroupedDiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/GroupedDiffuseSurfaceEmitter.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_matte_opaque_8h" name="MatteOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/MatteOpaque.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ModelSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_model_source_8h.html</filename>
    <includes id="_light_source_8h" name="LightSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/LightSource.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::ModelSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PointSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_point_source_8cpp.html</filename>
    <includes id="_point_source_8h" name="PointSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/PointSource.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PointSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_point_source_8h.html</filename>
    <includes id="_area_source_8h" name="AreaSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/AreaSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::PointSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RectangleSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_rectangle_source_8cpp.html</filename>
    <includes id="_rectangle_source_8h" name="RectangleSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/RectangleSource.h</includes>
    <includes id="_g_rectangle_8h" name="GRectangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GRectangle.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RectangleSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_rectangle_source_8h.html</filename>
    <includes id="_area_source_8h" name="AreaSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/AreaSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::RectangleSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SphereSource.cpp</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_sphere_source_8cpp.html</filename>
    <includes id="_sphere_source_8h" name="SphereSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/SphereSource.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SphereSource.h</name>
    <path>Source/Actor/LightSource/</path>
    <filename>_sphere_source_8h.html</filename>
    <includes id="_area_source_8h" name="AreaSource.h" local="yes" import="no" module="no" objc="no">Actor/LightSource/AreaSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::SphereSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AbradedOpaque.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_abraded_opaque_8cpp.html</filename>
    <includes id="_abraded_opaque_8h" name="AbradedOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedOpaque.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_opaque_microfacet_8h" name="OpaqueMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/OpaqueMicrofacet.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AbradedOpaque.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_abraded_opaque_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_conductive_interface_info_8h" name="ConductiveInterfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/ConductiveInterfaceInfo.h</includes>
    <includes id="_microsurface_info_8h" name="MicrosurfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/MicrosurfaceInfo.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::AbradedOpaque</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AbradedSurface.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_abraded_surface_8cpp.html</filename>
    <includes id="_abraded_surface_8h" name="AbradedSurface.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedSurface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AbradedSurface.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_abraded_surface_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <class kind="class">ph::AbradedSurface</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AbradedTranslucent.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_abraded_translucent_8cpp.html</filename>
    <includes id="_abraded_translucent_8h" name="AbradedTranslucent.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedTranslucent.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_translucent_microfacet_8h" name="TranslucentMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/TranslucentMicrofacet.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AbradedTranslucent.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_abraded_translucent_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_dielectric_interface_info_8h" name="DielectricInterfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/DielectricInterfaceInfo.h</includes>
    <includes id="_microsurface_info_8h" name="MicrosurfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/MicrosurfaceInfo.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::AbradedTranslucent</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryMixedSurfaceMaterial.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_binary_mixed_surface_material_8cpp.html</filename>
    <includes id="_binary_mixed_surface_material_8h" name="BinaryMixedSurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/BinaryMixedSurfaceMaterial.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_lerped_surface_optics_8h" name="LerpedSurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LerpedSurfaceOptics.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryMixedSurfaceMaterial.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_binary_mixed_surface_material_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::BinaryMixedSurfaceMaterial</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Component.dox</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_component_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>ConductiveInterfaceInfo.cpp</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_conductive_interface_info_8cpp.html</filename>
    <includes id="_conductive_interface_info_8h" name="ConductiveInterfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/ConductiveInterfaceInfo.h</includes>
    <includes id="_schlick_approx_conductor_fresnel_8h" name="SchlickApproxConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/SchlickApproxConductorFresnel.h</includes>
    <includes id="_exact_conductor_fresnel_8h" name="ExactConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactConductorFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConductiveInterfaceInfo.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_conductive_interface_info_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="sdl__component__enums_8h" name="sdl_component_enums.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/sdl_component_enums.h</includes>
    <includes id="_t_sdl_spectrum_8h" name="TSdlSpectrum.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/TSdlSpectrum.h</includes>
    <class kind="class">ph::ConductiveInterfaceInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DielectricInterfaceInfo.cpp</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_dielectric_interface_info_8cpp.html</filename>
    <includes id="_dielectric_interface_info_8h" name="DielectricInterfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/DielectricInterfaceInfo.h</includes>
    <includes id="_schlick_approx_dielectric_fresnel_8h" name="SchlickApproxDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/SchlickApproxDielectricFresnel.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DielectricInterfaceInfo.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_dielectric_interface_info_8h.html</filename>
    <includes id="sdl__component__enums_8h" name="sdl_component_enums.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/sdl_component_enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::DielectricInterfaceInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MacrosurfaceInfo.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_macrosurface_info_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>MicrosurfaceInfo.cpp</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_microsurface_info_8cpp.html</filename>
    <includes id="_microsurface_info_8h" name="MicrosurfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/MicrosurfaceInfo.h</includes>
    <includes id="_roughness_to_alpha_mapping_8h" name="RoughnessToAlphaMapping.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/RoughnessToAlphaMapping.h</includes>
    <includes id="_iso_trowbridge_reitz_constant_8h" name="IsoTrowbridgeReitzConstant.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoTrowbridgeReitzConstant.h</includes>
    <includes id="_iso_beckmann_8h" name="IsoBeckmann.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoBeckmann.h</includes>
    <includes id="_aniso_trowbridge_reitz_8h" name="AnisoTrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/AnisoTrowbridgeReitz.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MicrosurfaceInfo.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_microsurface_info_8h.html</filename>
    <includes id="sdl__component__enums_8h" name="sdl_component_enums.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/sdl_component_enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::MicrosurfaceInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RoughnessToAlphaMapping.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_roughness_to_alpha_mapping_8h.html</filename>
    <includes id="sdl__component__enums_8h" name="sdl_component_enums.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/sdl_component_enums.h</includes>
    <class kind="class">ph::RoughnessToAlphaMapping</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_component_enums.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>sdl__component__enums_8h.html</filename>
    <includes id="_surface_behavior_2_property_2enums_8h" name="enums.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceLayerInfo.cpp</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_surface_layer_info_8cpp.html</filename>
    <includes id="_surface_layer_info_8h" name="SurfaceLayerInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/SurfaceLayerInfo.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceLayerInfo.h</name>
    <path>Source/Actor/Material/Component/</path>
    <filename>_surface_layer_info_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_roughness_to_alpha_mapping_8h" name="RoughnessToAlphaMapping.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/RoughnessToAlphaMapping.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_sdl_spectrum_8h" name="TSdlSpectrum.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/TSdlSpectrum.h</includes>
    <class kind="class">ph::SurfaceLayerInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullMaterial.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_full_material_8cpp.html</filename>
    <includes id="_full_material_8h" name="FullMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/FullMaterial.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_volume_material_8h" name="VolumeMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/VolumeMaterial.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullMaterial.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_full_material_8h.html</filename>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::FullMaterial</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealSubstance.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_ideal_substance_8cpp.html</filename>
    <includes id="_ideal_substance_8h" name="IdealSubstance.h" local="yes" import="no" module="no" objc="no">Actor/Material/IdealSubstance.h</includes>
    <includes id="_ideal_reflector_8h" name="IdealReflector.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealReflector.h</includes>
    <includes id="_ideal_transmitter_8h" name="IdealTransmitter.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealTransmitter.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <includes id="_schlick_approx_conductor_fresnel_8h" name="SchlickApproxConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/SchlickApproxConductorFresnel.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ideal_absorber_8h" name="IdealAbsorber.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealAbsorber.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_ideal_dielectric_8h" name="IdealDielectric.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealDielectric.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" import="no" module="no" objc="no">Actor/Basic/exceptions.h</includes>
    <includes id="_dielectric_interface_info_8h" name="DielectricInterfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/DielectricInterfaceInfo.h</includes>
    <includes id="_conductive_interface_info_8h" name="ConductiveInterfaceInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/ConductiveInterfaceInfo.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealSubstance.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_ideal_substance_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="sdl__component__enums_8h" name="sdl_component_enums.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/sdl_component_enums.h</includes>
    <includes id="_t_sdl_spectrum_8h" name="TSdlSpectrum.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/TSdlSpectrum.h</includes>
    <class kind="class">ph::IdealSubstance</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LayeredSurface.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_layered_surface_8cpp.html</filename>
    <includes id="_layered_surface_8h" name="LayeredSurface.h" local="yes" import="no" module="no" objc="no">Actor/Material/LayeredSurface.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_lb_layered_surface_8h" name="LbLayeredSurface.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/LbLayeredSurface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LayeredSurface.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_layered_surface_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_surface_layer_info_8h" name="SurfaceLayerInfo.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/SurfaceLayerInfo.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::LayeredSurface</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Material.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_material_8cpp.html</filename>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Material.dox</name>
    <path>Source/Actor/Material/</path>
    <filename>_material_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>Material.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_material_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Material</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MatteOpaque.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_matte_opaque_8cpp.html</filename>
    <includes id="_matte_opaque_8h" name="MatteOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/MatteOpaque.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_lambertian_diffuse_8h" name="LambertianDiffuse.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LambertianDiffuse.h</includes>
    <includes id="_oren_nayar_8h" name="OrenNayar.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/OrenNayar.h</includes>
    <includes id="_swizzled_image_8h" name="SwizzledImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/SwizzledImage.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MatteOpaque.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_matte_opaque_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::MatteOpaque</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceMaterial.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_surface_material_8cpp.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceMaterial.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_surface_material_8h.html</filename>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::SurfaceMaterial</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ThinFilm.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_thin_film_8cpp.html</filename>
    <includes id="_thin_film_8h" name="ThinFilm.h" local="yes" import="no" module="no" objc="no">Actor/Material/ThinFilm.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_thin_dielectric_film_8h" name="ThinDielectricFilm.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/ThinDielectricFilm.h</includes>
    <includes id="_t_sampled_spectrum_8h" name="TSampledSpectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/TSampledSpectrum.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ThinFilm.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_thin_film_8h.html</filename>
    <includes id="_surface_material_8h" name="SurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/SurfaceMaterial.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::ThinFilm</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VAbsorptionOnly.cpp</name>
    <path>Source/Actor/Material/Volume/</path>
    <filename>_v_absorption_only_8cpp.html</filename>
    <includes id="_v_absorption_only_8h" name="VAbsorptionOnly.h" local="yes" import="no" module="no" objc="no">Actor/Material/Volume/VAbsorptionOnly.h</includes>
    <includes id="_volume_behavior_8h" name="VolumeBehavior.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeBehavior.h</includes>
    <includes id="_vo_homo_absorption_8h" name="VoHomoAbsorption.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeOptics/VoHomoAbsorption.h</includes>
    <includes id="_bf_constant_8h" name="BfConstant.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/BlockFunction/BfConstant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VAbsorptionOnly.h</name>
    <path>Source/Actor/Material/Volume/</path>
    <filename>_v_absorption_only_8h.html</filename>
    <includes id="_volume_material_8h" name="VolumeMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/VolumeMaterial.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <class kind="class">ph::VAbsorptionOnly</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VolumeMaterial.cpp</name>
    <path>Source/Actor/Material/</path>
    <filename>_volume_material_8cpp.html</filename>
    <includes id="_v_absorption_only_8h" name="VAbsorptionOnly.h" local="yes" import="no" module="no" objc="no">Actor/Material/Volume/VAbsorptionOnly.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VolumeMaterial.h</name>
    <path>Source/Actor/Material/</path>
    <filename>_volume_material_8h.html</filename>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <class kind="class">ph::VolumeMaterial</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ModelBuilder.cpp</name>
    <path>Source/Actor/</path>
    <filename>_model_builder_8cpp.html</filename>
    <includes id="_model_builder_8h" name="ModelBuilder.h" local="yes" import="no" module="no" objc="no">Actor/ModelBuilder.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_transformed_intersectable_8h" name="TransformedIntersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedIntersectable.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ModelBuilder.h</name>
    <path>Source/Actor/</path>
    <filename>_model_builder_8h.html</filename>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ModelLoader.cpp</name>
    <path>Source/Actor/</path>
    <filename>_model_loader_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>ModelLoader.h</name>
    <path>Source/Actor/</path>
    <filename>_model_loader_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>AiMaterialParser.cpp</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_ai_material_parser_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>AiMaterialParser.h</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_ai_material_parser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>AiMeshParser.cpp</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_ai_mesh_parser_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>AiMeshParser.h</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_ai_mesh_parser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>AssimpModelParser.cpp</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_assimp_model_parser_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>AssimpModelParser.h</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_assimp_model_parser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ModelParser.cpp</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_model_parser_8cpp.html</filename>
    <includes id="_model_parser_8h" name="ModelParser.h" local="yes" import="no" module="no" objc="no">Actor/ModelParser/ModelParser.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ModelParser.h</name>
    <path>Source/Actor/ModelParser/</path>
    <filename>_model_parser_8h.html</filename>
    <class kind="class">ph::ModelParser</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantVelocityMotion.cpp</name>
    <path>Source/Actor/MotionSource/</path>
    <filename>_constant_velocity_motion_8cpp.html</filename>
    <includes id="_constant_velocity_motion_8h" name="ConstantVelocityMotion.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/ConstantVelocityMotion.h</includes>
    <includes id="_dynamic_linear_translation_8h" name="DynamicLinearTranslation.h" local="yes" import="no" module="no" objc="no">Math/Transform/DynamicLinearTranslation.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_cooked_motion_8h" name="CookedMotion.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedMotion.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantVelocityMotion.h</name>
    <path>Source/Actor/MotionSource/</path>
    <filename>_constant_velocity_motion_8h.html</filename>
    <includes id="_motion_source_8h" name="MotionSource.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/MotionSource.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::ConstantVelocityMotion</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MotionSource.cpp</name>
    <path>Source/Actor/MotionSource/</path>
    <filename>_motion_source_8cpp.html</filename>
    <includes id="_motion_source_8h" name="MotionSource.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/MotionSource.h</includes>
    <includes id="_cooked_motion_8h" name="CookedMotion.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedMotion.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MotionSource.dox</name>
    <path>Source/Actor/MotionSource/</path>
    <filename>_motion_source_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>MotionSource.h</name>
    <path>Source/Actor/MotionSource/</path>
    <filename>_motion_source_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <class kind="class">ph::MotionSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicalActor.cpp</name>
    <path>Source/Actor/</path>
    <filename>_physical_actor_8cpp.html</filename>
    <includes id="_physical_actor_8h" name="PhysicalActor.h" local="yes" import="no" module="no" objc="no">Actor/PhysicalActor.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicalActor.h</name>
    <path>Source/Actor/</path>
    <filename>_physical_actor_8h.html</filename>
    <includes id="_actor_8h" name="Actor.h" local="yes" import="no" module="no" objc="no">Actor/Actor.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_transform_info_8h" name="TransformInfo.h" local="yes" import="no" module="no" objc="no">Actor/Basic/TransformInfo.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::PhysicalActor</class>
    <class kind="struct">ph::PhysicalActor::SdlTranslate</class>
    <class kind="struct">ph::PhysicalActor::SdlRotate</class>
    <class kind="struct">ph::PhysicalActor::SdlScale</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_color_enums.h</name>
    <path>Source/Actor/SDLExtension/</path>
    <filename>sdl__color__enums_8h.html</filename>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_spectrum_io.cpp</name>
    <path>Source/Actor/SDLExtension/</path>
    <filename>sdl__spectrum__io_8cpp.html</filename>
    <includes id="sdl__spectrum__io_8h" name="sdl_spectrum_io.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_spectrum_io.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_input_clause_8h" name="SdlInputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClause.h</includes>
    <includes id="_t_sdl_enum_8h" name="TSdlEnum.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlEnum.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_spectrum_io.h</name>
    <path>Source/Actor/SDLExtension/</path>
    <filename>sdl__spectrum__io_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="sdl__color__enums_8h" name="sdl_color_enums.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_color_enums.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlSpectrum.h</name>
    <path>Source/Actor/SDLExtension/</path>
    <filename>_t_sdl_spectrum_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_resource_locator_8h" name="SdlResourceLocator.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceLocator.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="io__utils_8h" name="io_utils.h" local="yes" import="no" module="no" objc="no">DataIO/io_utils.h</includes>
    <includes id="sdl__spectrum__io_8h" name="sdl_spectrum_io.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_spectrum_io.h</includes>
    <includes id="sdl__color__enums_8h" name="sdl_color_enums.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_color_enums.h</includes>
    <class kind="class">ph::TSdlSpectrum</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StandaloneSdlResource.h</name>
    <path>Source/Actor/</path>
    <filename>_standalone_sdl_resource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ApiDatabase.cpp</name>
    <path>Source/Api/</path>
    <filename>_api_database_8cpp.html</filename>
    <includes id="_api_database_8h" name="ApiDatabase.h" local="yes" import="no" module="no" objc="no">Api/ApiDatabase.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ApiDatabase.h</name>
    <path>Source/Api/</path>
    <filename>_api_database_8h.html</filename>
    <includes id="_t_stable_index_dense_vector_8h" name="TStableIndexDenseVector.h" local="yes" import="no" module="no" objc="no">Utility/TStableIndexDenseVector.h</includes>
    <includes id="_engine_8h" name="Engine.h" local="yes" import="no" module="no" objc="no">Core/Engine.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_byte_buffer_8h" name="ByteBuffer.h" local="yes" import="no" module="no" objc="no">Utility/ByteBuffer.h</includes>
    <class kind="class">ph::ApiDatabase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ApiHelper.h</name>
    <path>Source/Api/</path>
    <filename>_api_helper_8h.html</filename>
    <includes id="ph__core_8h" name="ph_core.h" local="yes" import="no" module="no" objc="no">ph_core.h</includes>
    <includes id="_e_attribute_8h" name="EAttribute.h" local="yes" import="no" module="no" objc="no">Core/Renderer/EAttribute.h</includes>
    <class kind="class">ph::ApiHelper</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EEngineProject.cpp</name>
    <path>Source/Api/</path>
    <filename>_e_engine_project_8cpp.html</filename>
    <includes id="_e_engine_project_8h" name="EEngineProject.h" local="yes" import="no" module="no" objc="no">EEngineProject.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EngineInitSettings.cpp</name>
    <path>Source/Api/</path>
    <filename>_engine_init_settings_8cpp.html</filename>
    <includes id="_engine_init_settings_8h" name="EngineInitSettings.h" local="yes" import="no" module="no" objc="no">EngineInitSettings.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>init_and_exit.cpp</name>
    <path>Source/Api/</path>
    <filename>init__and__exit_8cpp.html</filename>
    <includes id="init__and__exit_8h" name="init_and_exit.h" local="yes" import="no" module="no" objc="no">Api/init_and_exit.h</includes>
    <includes id="_api_database_8h" name="ApiDatabase.h" local="yes" import="no" module="no" objc="no">Api/ApiDatabase.h</includes>
    <includes id="io__utils_8h" name="io_utils.h" local="yes" import="no" module="no" objc="no">DataIO/io_utils.h</includes>
    <includes id="_surface_hit_refinery_8h" name="SurfaceHitRefinery.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceHitRefinery.h</includes>
    <includes id="_deterministic_seeder_8h" name="DeterministicSeeder.h" local="yes" import="no" module="no" objc="no">Math/Random/DeterministicSeeder.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>init_and_exit.h</name>
    <path>Source/Api/</path>
    <filename>init__and__exit_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ph_core.cpp</name>
    <path>Source/Api/</path>
    <filename>ph__core_8cpp.html</filename>
    <includes id="ph__core_8h" name="ph_core.h" local="yes" import="no" module="no" objc="no">ph_core.h</includes>
    <includes id="init__and__exit_8h" name="init_and_exit.h" local="yes" import="no" module="no" objc="no">Api/init_and_exit.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <includes id="_g_rectangle_8h" name="GRectangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GRectangle.h</includes>
    <includes id="_g_triangle_8h" name="GTriangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangle.h</includes>
    <includes id="_g_triangle_mesh_8h" name="GTriangleMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GTriangleMesh.h</includes>
    <includes id="_g_menger_sponge_8h" name="GMengerSponge.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GMengerSponge.h</includes>
    <includes id="_g_cuboid_8h" name="GCuboid.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GCuboid.h</includes>
    <includes id="_g_empty_8h" name="GEmpty.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GEmpty.h</includes>
    <includes id="_geometry_soup_8h" name="GeometrySoup.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GeometrySoup.h</includes>
    <includes id="_g_ply_polygon_mesh_8h" name="GPlyPolygonMesh.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GPlyPolygonMesh.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="_matte_opaque_8h" name="MatteOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/MatteOpaque.h</includes>
    <includes id="_abraded_opaque_8h" name="AbradedOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedOpaque.h</includes>
    <includes id="_abraded_translucent_8h" name="AbradedTranslucent.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedTranslucent.h</includes>
    <includes id="_ideal_substance_8h" name="IdealSubstance.h" local="yes" import="no" module="no" objc="no">Actor/Material/IdealSubstance.h</includes>
    <includes id="_binary_mixed_surface_material_8h" name="BinaryMixedSurfaceMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/BinaryMixedSurfaceMaterial.h</includes>
    <includes id="_full_material_8h" name="FullMaterial.h" local="yes" import="no" module="no" objc="no">Actor/Material/FullMaterial.h</includes>
    <includes id="_v_absorption_only_8h" name="VAbsorptionOnly.h" local="yes" import="no" module="no" objc="no">Actor/Material/Volume/VAbsorptionOnly.h</includes>
    <includes id="_layered_surface_8h" name="LayeredSurface.h" local="yes" import="no" module="no" objc="no">Actor/Material/LayeredSurface.h</includes>
    <includes id="_thin_film_8h" name="ThinFilm.h" local="yes" import="no" module="no" objc="no">Actor/Material/ThinFilm.h</includes>
    <includes id="_motion_source_8h" name="MotionSource.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/MotionSource.h</includes>
    <includes id="_constant_velocity_motion_8h" name="ConstantVelocityMotion.h" local="yes" import="no" module="no" objc="no">Actor/MotionSource/ConstantVelocityMotion.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" import="no" module="no" objc="no">Actor/Image/Image.h</includes>
    <includes id="_constant_image_8h" name="ConstantImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/ConstantImage.h</includes>
    <includes id="_raster_image_base_8h" name="RasterImageBase.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterImageBase.h</includes>
    <includes id="_raster_file_image_8h" name="RasterFileImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/RasterFileImage.h</includes>
    <includes id="_math_image_8h" name="MathImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/MathImage.h</includes>
    <includes id="_swizzled_image_8h" name="SwizzledImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/SwizzledImage.h</includes>
    <includes id="_checkerboard_image_8h" name="CheckerboardImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/CheckerboardImage.h</includes>
    <includes id="_gradient_image_8h" name="GradientImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/GradientImage.h</includes>
    <includes id="_black_body_radiation_image_8h" name="BlackBodyRadiationImage.h" local="yes" import="no" module="no" objc="no">Actor/Image/BlackBodyRadiationImage.h</includes>
    <includes id="_observer_8h" name="Observer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/Observer.h</includes>
    <includes id="_oriented_raster_observer_8h" name="OrientedRasterObserver.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/OrientedRasterObserver.h</includes>
    <includes id="_single_lens_observer_8h" name="SingleLensObserver.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/SingleLensObserver.h</includes>
    <includes id="_sample_source_8h" name="SampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/SampleSource.h</includes>
    <includes id="_runtime_sample_source_8h" name="RuntimeSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/RuntimeSampleSource.h</includes>
    <includes id="_uniform_random_sample_source_8h" name="UniformRandomSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/UniformRandomSampleSource.h</includes>
    <includes id="_stratified_sample_source_8h" name="StratifiedSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/StratifiedSampleSource.h</includes>
    <includes id="_halton_sample_source_8h" name="HaltonSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/HaltonSampleSource.h</includes>
    <includes id="_visualizer_8h" name="Visualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/Visualizer.h</includes>
    <includes id="_frame_visualizer_8h" name="FrameVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/FrameVisualizer.h</includes>
    <includes id="_path_tracing_visualizer_8h" name="PathTracingVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/PathTracingVisualizer.h</includes>
    <includes id="_photon_mapping_visualizer_8h" name="PhotonMappingVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/PhotonMappingVisualizer.h</includes>
    <includes id="_option_8h" name="Option.h" local="yes" import="no" module="no" objc="no">SDL/Option.h</includes>
    <includes id="_render_session_8h" name="RenderSession.h" local="yes" import="no" module="no" objc="no">EngineEnv/Session/RenderSession.h</includes>
    <includes id="_single_frame_render_session_8h" name="SingleFrameRenderSession.h" local="yes" import="no" module="no" objc="no">EngineEnv/Session/SingleFrameRenderSession.h</includes>
    <includes id="_object_8h" name="Object.h" local="yes" import="no" module="no" objc="no">SDL/Object.h</includes>
    <includes id="_actor_8h" name="Actor.h" local="yes" import="no" module="no" objc="no">Actor/Actor.h</includes>
    <includes id="_physical_actor_8h" name="PhysicalActor.h" local="yes" import="no" module="no" objc="no">Actor/PhysicalActor.h</includes>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="_a_dome_8h" name="ADome.h" local="yes" import="no" module="no" objc="no">Actor/ADome.h</includes>
    <includes id="_a_phantom_model_8h" name="APhantomModel.h" local="yes" import="no" module="no" objc="no">Actor/APhantomModel.h</includes>
    <includes id="_a_transformed_instance_8h" name="ATransformedInstance.h" local="yes" import="no" module="no" objc="no">Actor/ATransformedInstance.h</includes>
    <includes id="_a_image_dome_8h" name="AImageDome.h" local="yes" import="no" module="no" objc="no">Actor/Dome/AImageDome.h</includes>
    <includes id="_a_preetham_dome_8h" name="APreethamDome.h" local="yes" import="no" module="no" objc="no">Actor/Dome/APreethamDome.h</includes>
    <includes id="_a_light_8h" name="ALight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ALight.h</includes>
    <includes id="_a_geometric_light_8h" name="AGeometricLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AGeometricLight.h</includes>
    <includes id="_a_area_light_8h" name="AAreaLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AAreaLight.h</includes>
    <includes id="_a_model_light_8h" name="AModelLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AModelLight.h</includes>
    <includes id="_a_point_light_8h" name="APointLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/APointLight.h</includes>
    <includes id="_a_rectangle_light_8h" name="ARectangleLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ARectangleLight.h</includes>
    <includes id="_a_sphere_light_8h" name="ASphereLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/ASphereLight.h</includes>
    <includes id="_a_ies_attenuated_light_8h" name="AIesAttenuatedLight.h" local="yes" import="no" module="no" objc="no">Actor/Light/AIesAttenuatedLight.h</includes>
    <includes id="sdl__halton__randomization__types_8h" name="sdl_halton_randomization_types.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/sdl_halton_randomization_types.h</includes>
    <includes id="sdl__accelerator__type_8h" name="sdl_accelerator_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/sdl_accelerator_type.h</includes>
    <includes id="sdl__ray__energy__estimator__type_8h" name="sdl_ray_energy_estimator_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_ray_energy_estimator_type.h</includes>
    <includes id="sdl__sample__filter__type_8h" name="sdl_sample_filter_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_sample_filter_type.h</includes>
    <includes id="sdl__scheduler__type_8h" name="sdl_scheduler_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_scheduler_type.h</includes>
    <includes id="sdl__photon__mapping__mode_8h" name="sdl_photon_mapping_mode.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_photon_mapping_mode.h</includes>
    <includes id="sdl__image__enums_8h" name="sdl_image_enums.h" local="yes" import="no" module="no" objc="no">Actor/Image/sdl_image_enums.h</includes>
    <includes id="sdl__color__enums_8h" name="sdl_color_enums.h" local="yes" import="no" module="no" objc="no">Actor/SDLExtension/sdl_color_enums.h</includes>
    <includes id="sdl__component__enums_8h" name="sdl_component_enums.h" local="yes" import="no" module="no" objc="no">Actor/Material/Component/sdl_component_enums.h</includes>
    <includes id="sdl__picture__file__type_8h" name="sdl_picture_file_type.h" local="yes" import="no" module="no" objc="no">DataIO/sdl_picture_file_type.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>test_scene.cpp</name>
    <path>Source/Api/</path>
    <filename>test__scene_8cpp.html</filename>
    <includes id="test__scene_8h" name="test_scene.h" local="yes" import="no" module="no" objc="no">Api/test_scene.h</includes>
    <includes id="_a_model_8h" name="AModel.h" local="yes" import="no" module="no" objc="no">Actor/AModel.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" import="no" module="no" objc="no">Actor/Material/Material.h</includes>
    <includes id="_g_sphere_8h" name="GSphere.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GSphere.h</includes>
    <includes id="_matte_opaque_8h" name="MatteOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/MatteOpaque.h</includes>
    <includes id="_abraded_opaque_8h" name="AbradedOpaque.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedOpaque.h</includes>
    <includes id="_abraded_translucent_8h" name="AbradedTranslucent.h" local="yes" import="no" module="no" objc="no">Actor/Material/AbradedTranslucent.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_g_rectangle_8h" name="GRectangle.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GRectangle.h</includes>
    <includes id="_model_loader_8h" name="ModelLoader.h" local="yes" import="no" module="no" objc="no">Actor/ModelLoader.h</includes>
    <includes id="_g_cuboid_8h" name="GCuboid.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GCuboid.h</includes>
    <includes id="_g_wave_8h" name="GWave.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/GWave.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>test_scene.h</name>
    <path>Source/Api/</path>
    <filename>test__scene_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Common.dox</name>
    <path>Source/Common/</path>
    <filename>_common_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>lib_openexr.h</name>
    <path>Source/Common/ThirdParty/</path>
    <filename>lib__openexr_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>lib_stb.h</name>
    <path>Source/Common/ThirdParty/</path>
    <filename>lib__stb_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>lib_stb_impl.cpp</name>
    <path>Source/Common/ThirdParty/</path>
    <filename>lib__stb__impl_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>STB_IMAGE_IMPLEMENTATION</name>
      <anchorfile>lib__stb__impl_8cpp.html</anchorfile>
      <anchor>a18372412ad2fc3ce1e3240b3cf0efe78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STBI_FAILURE_USERMSG</name>
      <anchorfile>lib__stb__impl_8cpp.html</anchorfile>
      <anchor>a03f11c185c278fd82e6d2624e9ce9214</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STB_IMAGE_WRITE_IMPLEMENTATION</name>
      <anchorfile>lib__stb__impl_8cpp.html</anchorfile>
      <anchor>aefe397a94e8feddc652f92ef40ce9597</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Core.dox</name>
    <path>Source/Core/</path>
    <filename>_core_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>ECoordSys.h</name>
    <path>Source/Core/</path>
    <filename>_e_coord_sys_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DiffuseSurfaceEmitter.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_diffuse_surface_emitter_8cpp.html</filename>
    <includes id="_diffuse_surface_emitter_8h" name="DiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitter.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DiffuseSurfaceEmitter.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_diffuse_surface_emitter_8h.html</filename>
    <includes id="_diffuse_surface_emitter_base_8h" name="DiffuseSurfaceEmitterBase.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitterBase.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <class kind="class">ph::DiffuseSurfaceEmitter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DiffuseSurfaceEmitterBase.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_diffuse_surface_emitter_base_8cpp.html</filename>
    <includes id="_diffuse_surface_emitter_base_8h" name="DiffuseSurfaceEmitterBase.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitterBase.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_energy_emission_sample_query_8h" name="EnergyEmissionSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/EnergyEmissionSampleQuery.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="_t_hemisphere_8h" name="THemisphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/THemisphere.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DiffuseSurfaceEmitterBase.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_diffuse_surface_emitter_base_8h.html</filename>
    <includes id="_surface_emitter_8h" name="SurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/SurfaceEmitter.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <class kind="class">ph::DiffuseSurfaceEmitterBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Emitter.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_emitter_8cpp.html</filename>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Emitter.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_emitter_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_bit_flags_8h" name="TBitFlags.h" local="yes" import="no" module="no" objc="no">Utility/TBitFlags.h</includes>
    <class kind="class">ph::Emitter</class>
    <namespace>ph</namespace>
    <namespace>ph::detail</namespace>
  </compound>
  <compound kind="file">
    <name>GroupedDiffuseSurfaceEmitter.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_grouped_diffuse_surface_emitter_8cpp.html</filename>
    <includes id="_grouped_diffuse_surface_emitter_8h" name="GroupedDiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/GroupedDiffuseSurfaceEmitter.h</includes>
    <includes id="_diffuse_surface_emitter_8h" name="DiffuseSurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitter.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_energy_emission_sample_query_8h" name="EnergyEmissionSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/EnergyEmissionSampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GroupedDiffuseSurfaceEmitter.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_grouped_diffuse_surface_emitter_8h.html</filename>
    <includes id="_diffuse_surface_emitter_base_8h" name="DiffuseSurfaceEmitterBase.h" local="yes" import="no" module="no" objc="no">Core/Emitter/DiffuseSurfaceEmitterBase.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::GroupedDiffuseSurfaceEmitter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LatLongEnvEmitter.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_lat_long_env_emitter_8cpp.html</filename>
    <includes id="_lat_long_env_emitter_8h" name="LatLongEnvEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/LatLongEnvEmitter.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_energy_emission_sample_query_8h" name="EnergyEmissionSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/EnergyEmissionSampleQuery.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_disk_8h" name="TDisk.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TDisk.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LatLongEnvEmitter.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_lat_long_env_emitter_8h.html</filename>
    <includes id="_surface_emitter_8h" name="SurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/SurfaceEmitter.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_pwc_distribution2_d_8h" name="TPwcDistribution2D.h" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::LatLongEnvEmitter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OmniModulatedEmitter.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_omni_modulated_emitter_8cpp.html</filename>
    <includes id="_omni_modulated_emitter_8h" name="OmniModulatedEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/OmniModulatedEmitter.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_energy_emission_sample_query_8h" name="EnergyEmissionSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/EnergyEmissionSampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OmniModulatedEmitter.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_omni_modulated_emitter_8h.html</filename>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spherical_mapper_8h" name="SphericalMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/SphericalMapper.h</includes>
    <class kind="class">ph::OmniModulatedEmitter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DirectEnergyPdfQuery.h</name>
    <path>Source/Core/Emitter/Query/</path>
    <filename>_direct_energy_pdf_query_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <class kind="class">ph::DirectEnergyPdfInput</class>
    <class kind="class">ph::DirectEnergyPdfOutput</class>
    <class kind="class">ph::DirectEnergyPdfQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DirectEnergySampleQuery.cpp</name>
    <path>Source/Core/Emitter/Query/</path>
    <filename>_direct_energy_sample_query_8cpp.html</filename>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DirectEnergySampleQuery.h</name>
    <path>Source/Core/Emitter/Query/</path>
    <filename>_direct_energy_sample_query_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::DirectEnergySampleInput</class>
    <class kind="class">ph::DirectEnergySampleOutput</class>
    <class kind="class">ph::DirectEnergySampleQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EnergyEmissionSampleQuery.h</name>
    <path>Source/Core/Emitter/Query/</path>
    <filename>_energy_emission_sample_query_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::EnergyEmissionSampleInput</class>
    <class kind="class">ph::EnergyEmissionSampleOutput</class>
    <class kind="class">ph::EnergyEmissionSampleQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EmitterSampler.cpp</name>
    <path>Source/Core/Emitter/Sampler/</path>
    <filename>_emitter_sampler_8cpp.html</filename>
    <includes id="_emitter_sampler_8h" name="EmitterSampler.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/EmitterSampler.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EmitterSampler.h</name>
    <path>Source/Core/Emitter/Sampler/</path>
    <filename>_emitter_sampler_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::EmitterSampler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESPowerFavoring.cpp</name>
    <path>Source/Core/Emitter/Sampler/</path>
    <filename>_e_s_power_favoring_8cpp.html</filename>
    <includes id="_e_s_power_favoring_8h" name="ESPowerFavoring.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/ESPowerFavoring.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESPowerFavoring.h</name>
    <path>Source/Core/Emitter/Sampler/</path>
    <filename>_e_s_power_favoring_8h.html</filename>
    <includes id="_emitter_sampler_8h" name="EmitterSampler.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/EmitterSampler.h</includes>
    <includes id="_t_pwc_distribution1_d_8h" name="TPwcDistribution1D.h" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution1D.h</includes>
    <class kind="class">ph::ESPowerFavoring</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESUniformRandom.cpp</name>
    <path>Source/Core/Emitter/Sampler/</path>
    <filename>_e_s_uniform_random_8cpp.html</filename>
    <includes id="_e_s_uniform_random_8h" name="ESUniformRandom.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/ESUniformRandom.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESUniformRandom.h</name>
    <path>Source/Core/Emitter/Sampler/</path>
    <filename>_e_s_uniform_random_8h.html</filename>
    <includes id="_emitter_sampler_8h" name="EmitterSampler.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/EmitterSampler.h</includes>
    <class kind="class">ph::ESUniformRandom</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceEmitter.cpp</name>
    <path>Source/Core/Emitter/</path>
    <filename>_surface_emitter_8cpp.html</filename>
    <includes id="_surface_emitter_8h" name="SurfaceEmitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/SurfaceEmitter.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceEmitter.h</name>
    <path>Source/Core/Emitter/</path>
    <filename>_surface_emitter_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <class kind="class">ph::SurfaceEmitter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Engine.cpp</name>
    <path>Source/Core/</path>
    <filename>_engine_8cpp.html</filename>
    <includes id="_engine_8h" name="Engine.h" local="yes" import="no" module="no" objc="no">Core/Engine.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_frame_processor_8h" name="FrameProcessor.h" local="yes" import="no" module="no" objc="no">Frame/FrameProcessor.h</includes>
    <includes id="_j_r_tone_mapping_8h" name="JRToneMapping.h" local="yes" import="no" module="no" objc="no">Frame/Operator/JRToneMapping.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_render_session_8h" name="RenderSession.h" local="yes" import="no" module="no" objc="no">EngineEnv/Session/RenderSession.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Engine.h</name>
    <path>Source/Core/</path>
    <filename>_engine_8h.html</filename>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_sdl_scene_file_reader_8h" name="SdlSceneFileReader.h" local="yes" import="no" module="no" objc="no">SDL/SdlSceneFileReader.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_frame_processor_8h" name="FrameProcessor.h" local="yes" import="no" module="no" objc="no">Frame/FrameProcessor.h</includes>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <class kind="class">ph::Engine</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BackwardLightIntegrator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_backward_light_integrator_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>BackwardLightIntegrator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_backward_light_integrator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>BNEEPTEstimator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_b_n_e_e_p_t_estimator_8cpp.html</filename>
    <includes id="_b_n_e_e_p_t_estimator_8h" name="BNEEPTEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BNEEPTEstimator.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_m_i_s_8h" name="TMIS.h" local="yes" import="no" module="no" objc="no">Core/LTA/TMIS.h</includes>
    <includes id="_t_direct_light_estimator_8h" name="TDirectLightEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/TDirectLightEstimator.h</includes>
    <includes id="_russian_roulette_8h" name="RussianRoulette.h" local="yes" import="no" module="no" objc="no">Core/LTA/RussianRoulette.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <namespace>ph</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_RAY_BOUNCES</name>
      <anchorfile>_b_n_e_e_p_t_estimator_8cpp.html</anchorfile>
      <anchor>a64908854464aa720775321939240ec31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BNEEPTEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_b_n_e_e_p_t_estimator_8h.html</filename>
    <includes id="_full_ray_energy_estimator_8h" name="FullRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/FullRayEnergyEstimator.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::BNEEPTEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BVPTDLEstimator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_b_v_p_t_d_l_estimator_8cpp.html</filename>
    <includes id="_b_v_p_t_d_l_estimator_8h" name="BVPTDLEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BVPTDLEstimator.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BVPTDLEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_b_v_p_t_d_l_estimator_8h.html</filename>
    <includes id="_partial_ray_energy_estimator_8h" name="PartialRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/PartialRayEnergyEstimator.h</includes>
    <class kind="class">ph::BVPTDLEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BVPTEstimator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_b_v_p_t_estimator_8cpp.html</filename>
    <includes id="_b_v_p_t_estimator_8h" name="BVPTEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BVPTEstimator.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_pt_volumetric_estimator_8h" name="PtVolumetricEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/PtVolumetricEstimator.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="_russian_roulette_8h" name="RussianRoulette.h" local="yes" import="no" module="no" objc="no">Core/LTA/RussianRoulette.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <namespace>ph</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_RAY_BOUNCES</name>
      <anchorfile>_b_v_p_t_estimator_8cpp.html</anchorfile>
      <anchor>a64908854464aa720775321939240ec31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVPTEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_b_v_p_t_estimator_8h.html</filename>
    <includes id="_full_ray_energy_estimator_8h" name="FullRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/FullRayEnergyEstimator.h</includes>
    <class kind="class">ph::BVPTEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DebugIntegrator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_debug_integrator_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>DebugIntegrator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_debug_integrator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>estimator_fwd.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>estimator__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullRayEnergyEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_full_ray_energy_estimator_8h.html</filename>
    <includes id="_i_ray_energy_estimator_8h" name="IRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/IRayEnergyEstimator.h</includes>
    <class kind="class">ph::FullRayEnergyEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Integrand.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_integrand_8h.html</filename>
    <class kind="class">ph::Integrand</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IRayEnergyEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_i_ray_energy_estimator_8h.html</filename>
    <includes id="_t_i_ray_estimator_8h" name="TIRayEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/TIRayEstimator.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::IRayEnergyEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LightTracingIntegrator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_light_tracing_integrator_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>LightTracingIntegrator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_light_tracing_integrator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>NormalBufferIntegrator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_normal_buffer_integrator_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>NormalBufferIntegrator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_normal_buffer_integrator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>PartialRayEnergyEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_partial_ray_energy_estimator_8h.html</filename>
    <includes id="_i_ray_energy_estimator_8h" name="IRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/IRayEnergyEstimator.h</includes>
    <class kind="class">ph::PartialRayEnergyEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PathEstimator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_path_estimator_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>PathEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_path_estimator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>SurfaceAttributeEstimator.cpp</name>
    <path>Source/Core/Estimator/</path>
    <filename>_surface_attribute_estimator_8cpp.html</filename>
    <includes id="_surface_attribute_estimator_8h" name="SurfaceAttributeEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/SurfaceAttributeEstimator.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_t_hemisphere_8h" name="THemisphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/THemisphere.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceAttributeEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_surface_attribute_estimator_8h.html</filename>
    <includes id="_t_i_ray_estimator_8h" name="TIRayEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/TIRayEstimator.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::SurfaceAttributeEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TEstimationArray.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_t_estimation_array_8h.html</filename>
    <class kind="class">ph::TEstimationArray</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TIRayEstimator.h</name>
    <path>Source/Core/Estimator/</path>
    <filename>_t_i_ray_estimator_8h.html</filename>
    <includes id="_t_estimation_array_8h" name="TEstimationArray.h" local="yes" import="no" module="no" objc="no">Core/Estimator/TEstimationArray.h</includes>
    <class kind="class">ph::TIRayEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FaceTopology.h</name>
    <path>Source/Core/</path>
    <filename>_face_topology_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_bit_flags_8h" name="TBitFlags.h" local="yes" import="no" module="no" objc="no">Utility/TBitFlags.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Film.cpp</name>
    <path>Source/Core/Filmic/</path>
    <filename>_film_8cpp.html</filename>
    <includes id="_film_8h" name="Film.h" local="yes" import="no" module="no" objc="no">Core/Filmic/Film.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Film.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>_film_8h.html</filename>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <class kind="class">ph::Film</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>filmic_fwd.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>filmic__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HdrRgbFilm.cpp</name>
    <path>Source/Core/Filmic/</path>
    <filename>_hdr_rgb_film_8cpp.html</filename>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_t_constant2_d_8h" name="TConstant2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TConstant2D.h</includes>
    <includes id="_t_gaussian2_d_8h" name="TGaussian2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TGaussian2D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HdrRgbFilm.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>_hdr_rgb_film_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_radiance_sensor_8h" name="RadianceSensor.h" local="yes" import="no" module="no" objc="no">Core/Receiver/RadianceSensor.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::HdrRgbFilm</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleFilter.cpp</name>
    <path>Source/Core/Filmic/</path>
    <filename>_sample_filter_8cpp.html</filename>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_t_constant2_d_8h" name="TConstant2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TConstant2D.h</includes>
    <includes id="_t_gaussian2_d_8h" name="TGaussian2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TGaussian2D.h</includes>
    <includes id="_t_mitchell_netravali_cubic2_d_8h" name="TMitchellNetravaliCubic2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMitchellNetravaliCubic2D.h</includes>
    <includes id="_t_blackman_harris2_d_8h" name="TBlackmanHarris2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TBlackmanHarris2D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleFilter.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>_sample_filter_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::SampleFilter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplingFilmDimensions.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>_sampling_film_dimensions_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <class kind="struct">ph::SamplingFilmDimensions</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSamplingFilm.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>_t_sampling_film_8h.html</filename>
    <includes id="_film_8h" name="Film.h" local="yes" import="no" module="no" objc="no">Core/Filmic/Film.h</includes>
    <includes id="filmic__fwd_8h" name="filmic_fwd.h" local="yes" import="no" module="no" objc="no">Core/Filmic/filmic_fwd.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_sampling_film_dimensions_8h" name="SamplingFilmDimensions.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SamplingFilmDimensions.h</includes>
    <includes id="_t_sampling_film_8ipp" name="TSamplingFilm.ipp" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.ipp</includes>
    <class kind="class">ph::TSamplingFilm</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSamplingFilm.ipp</name>
    <path>Source/Core/Filmic/</path>
    <filename>_t_sampling_film_8ipp.html</filename>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_constant2_d_8h" name="TConstant2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TConstant2D.h</includes>
    <includes id="_t_gaussian2_d_8h" name="TGaussian2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TGaussian2D.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Vector3Film.h</name>
    <path>Source/Core/Filmic/</path>
    <filename>_vector3_film_8h.html</filename>
    <includes id="filmic__fwd_8h" name="filmic_fwd.h" local="yes" import="no" module="no" objc="no">Core/Filmic/filmic_fwd.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <class kind="class">ph::Vector3Film</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullRay.cpp</name>
    <path>Source/Core/</path>
    <filename>_full_ray_8cpp.html</filename>
    <includes id="_full_ray_8h" name="FullRay.h" local="yes" import="no" module="no" objc="no">Core/FullRay.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullRay.h</name>
    <path>Source/Core/</path>
    <filename>_full_ray_8h.html</filename>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <class kind="class">ph::FullRay</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HitDetail.cpp</name>
    <path>Source/Core/</path>
    <filename>_hit_detail_8cpp.html</filename>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HitDetail.h</name>
    <path>Source/Core/</path>
    <filename>_hit_detail_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_e_coord_sys_8h" name="ECoordSys.h" local="yes" import="no" module="no" objc="no">Core/ECoordSys.h</includes>
    <includes id="_hit_info_8h" name="HitInfo.h" local="yes" import="no" module="no" objc="no">Core/HitInfo.h</includes>
    <includes id="_face_topology_8h" name="FaceTopology.h" local="yes" import="no" module="no" objc="no">Core/FaceTopology.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::HitDetail</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HitInfo.cpp</name>
    <path>Source/Core/</path>
    <filename>_hit_info_8cpp.html</filename>
    <includes id="_hit_info_8h" name="HitInfo.h" local="yes" import="no" module="no" objc="no">Core/HitInfo.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HitInfo.h</name>
    <path>Source/Core/</path>
    <filename>_hit_info_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_e_coord_sys_8h" name="ECoordSys.h" local="yes" import="no" module="no" objc="no">Core/ECoordSys.h</includes>
    <class kind="class">ph::HitInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HitProbe.cpp</name>
    <path>Source/Core/</path>
    <filename>_hit_probe_8cpp.html</filename>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HitProbe.h</name>
    <path>Source/Core/</path>
    <filename>_hit_probe_8h.html</filename>
    <includes id="_t_array_stack_8h" name="TArrayStack.h" local="yes" import="no" module="no" objc="no">Utility/TArrayStack.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::HitProbe</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BruteForceIntersector.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_brute_force_intersector_8cpp.html</filename>
    <includes id="_brute_force_intersector_8h" name="BruteForceIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/BruteForceIntersector.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BruteForceIntersector.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_brute_force_intersector_8h.html</filename>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <class kind="class">ph::BruteForceIntersector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhBuilder.cpp</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_builder_8cpp.html</filename>
    <includes id="_bvh_builder_8h" name="BvhBuilder.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhBuilder.h</includes>
    <includes id="_bvh_info_node_8h" name="BvhInfoNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhInfoNode.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <class kind="class">ph::BvhSahBucket</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhBuilder.h</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_builder_8h.html</filename>
    <includes id="_e_bvh_type_8h" name="EBvhType.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/EBvhType.h</includes>
    <includes id="_bvh_intersectable_info_8h" name="BvhIntersectableInfo.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhIntersectableInfo.h</includes>
    <includes id="_bvh_linear_node_8h" name="BvhLinearNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhLinearNode.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::BvhBuilder</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhInfoNode.cpp</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_info_node_8cpp.html</filename>
    <includes id="_bvh_info_node_8h" name="BvhInfoNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhInfoNode.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhInfoNode.h</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_info_node_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_bvh_intersectable_info_8h" name="BvhIntersectableInfo.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhIntersectableInfo.h</includes>
    <class kind="class">ph::BvhInfoNode</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhIntersectableInfo.cpp</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_intersectable_info_8cpp.html</filename>
    <includes id="_bvh_intersectable_info_8h" name="BvhIntersectableInfo.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhIntersectableInfo.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhIntersectableInfo.h</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_intersectable_info_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::BvhIntersectableInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhLinearNode.cpp</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_linear_node_8cpp.html</filename>
    <includes id="_bvh_linear_node_8h" name="BvhLinearNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhLinearNode.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BvhLinearNode.h</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_bvh_linear_node_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <class kind="class">ph::BvhLinearNode</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ClassicBvhIntersector.cpp</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_classic_bvh_intersector_8cpp.html</filename>
    <includes id="_classic_bvh_intersector_8h" name="ClassicBvhIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/ClassicBvhIntersector.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_bvh_info_node_8h" name="BvhInfoNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhInfoNode.h</includes>
    <includes id="_bvh_builder_8h" name="BvhBuilder.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhBuilder.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ClassicBvhIntersector.h</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_classic_bvh_intersector_8h.html</filename>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <includes id="_bvh_linear_node_8h" name="BvhLinearNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/BvhLinearNode.h</includes>
    <class kind="class">ph::ClassicBvhIntersector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EBvhType.h</name>
    <path>Source/Core/Intersection/Bvh/</path>
    <filename>_e_bvh_type_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>data_structure_fwd.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>data__structure__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IndexedTriMesh.h</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_indexed_tri_mesh_8h.html</filename>
    <includes id="_tri_face_8h" name="TriFace.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TriFace.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::IndexedTriMesh</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IndexedUIntBuffer.cpp</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_indexed_u_int_buffer_8cpp.html</filename>
    <includes id="_indexed_u_int_buffer_8h" name="IndexedUIntBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedUIntBuffer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IndexedUIntBuffer.h</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_indexed_u_int_buffer_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::IndexedUIntBuffer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IndexedVertexBuffer.cpp</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_indexed_vertex_buffer_8cpp.html</filename>
    <includes id="_indexed_vertex_buffer_8h" name="IndexedVertexBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedVertexBuffer.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_math_2_geometry_2_geometry_8h" name="geometry.h" local="yes" import="no" module="no" objc="no">Math/Geometry/geometry.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IndexedVertexBuffer.h</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_indexed_vertex_buffer_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::IndexedVertexBuffer</class>
    <class kind="struct">ph::IndexedVertexBuffer::AttributeDeclaration</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TAosTriMesh.h</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_t_aos_tri_mesh_8h.html</filename>
    <includes id="_indexed_tri_mesh_8h" name="IndexedTriMesh.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedTriMesh.h</includes>
    <includes id="_t_aos_tri_mesh_8ipp" name="TAosTriMesh.ipp" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TAosTriMesh.ipp</includes>
    <class kind="class">ph::TAosTriMesh</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TAosTriMesh.ipp</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_t_aos_tri_mesh_8ipp.html</filename>
    <includes id="_t_aos_tri_mesh_8h" name="TAosTriMesh.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TAosTriMesh.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedPolygonBuffer.h</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_t_indexed_polygon_buffer_8h.html</filename>
    <includes id="data__structure__fwd_8h" name="data_structure_fwd.h" local="yes" import="no" module="no" objc="no">Core/Intersection/data_structure_fwd.h</includes>
    <includes id="_indexed_vertex_buffer_8h" name="IndexedVertexBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedVertexBuffer.h</includes>
    <includes id="_indexed_u_int_buffer_8h" name="IndexedUIntBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedUIntBuffer.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_indexed_polygon_buffer_8ipp" name="TIndexedPolygonBuffer.ipp" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TIndexedPolygonBuffer.ipp</includes>
    <class kind="class">ph::TIndexedPolygonBuffer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedPolygonBuffer.ipp</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_t_indexed_polygon_buffer_8ipp.html</filename>
    <includes id="_t_indexed_polygon_buffer_8h" name="TIndexedPolygonBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TIndexedPolygonBuffer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TriFace.h</name>
    <path>Source/Core/Intersection/DataStructure/</path>
    <filename>_tri_face_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::TriFace</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Intersectable.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_intersectable_8cpp.html</filename>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Intersectable.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_intersectable_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <class kind="class">ph::Intersectable</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Intersector.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_intersector_8cpp.html</filename>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Intersector.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_intersector_8h.html</filename>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::Intersector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedKdtreeIntersector.h</name>
    <path>Source/Core/Intersection/Intersector/</path>
    <filename>_t_indexed_kdtree_intersector_8h.html</filename>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <includes id="_t_indexed_kdtree_8h" name="TIndexedKdtree.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtree.h</includes>
    <includes id="_t_indexed_kdtree_intersector_8ipp" name="TIndexedKdtreeIntersector.ipp" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector/TIndexedKdtreeIntersector.ipp</includes>
    <class kind="class">ph::TIndexedKdtreeIntersector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedKdtreeIntersector.ipp</name>
    <path>Source/Core/Intersection/Intersector/</path>
    <filename>_t_indexed_kdtree_intersector_8ipp.html</filename>
    <includes id="_t_indexed_kdtree_intersector_8h" name="TIndexedKdtreeIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector/TIndexedKdtreeIntersector.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>kdtree_core.h</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>kdtree__core_8h.html</filename>
    <namespace>ph</namespace>
    <member kind="define">
      <type>#define</type>
      <name>KDTREE_UNKNOWN_AXIS</name>
      <anchorfile>kdtree__core_8h.html</anchorfile>
      <anchor>ab189da3bc41c43bb74482ac8b4ba42fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KDTREE_X_AXIS</name>
      <anchorfile>kdtree__core_8h.html</anchorfile>
      <anchor>a46200bc8b907feaea9ebb2397d43912d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KDTREE_Y_AXIS</name>
      <anchorfile>kdtree__core_8h.html</anchorfile>
      <anchor>ac9bf7685180d4110345df6d7b7df7b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KDTREE_Z_AXIS</name>
      <anchorfile>kdtree__core_8h.html</anchorfile>
      <anchor>aaa6999fd1c0db9d54e86fbc220abca0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KDTREE_NUM_AXES</name>
      <anchorfile>kdtree__core_8h.html</anchorfile>
      <anchor>ab8325ef0375c96a0484b29bb03387ff1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KdtreeAABB.cpp</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>_kdtree_a_a_b_b_8cpp.html</filename>
    <includes id="_kdtree_a_a_b_b_8h" name="KdtreeAABB.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/KdtreeAABB.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>KdtreeAABB.h</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>_kdtree_a_a_b_b_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="kdtree__core_8h" name="kdtree_core.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/kdtree_core.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <class kind="class">ph::KdtreeAABB</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>KdtreeIntersector.cpp</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>_kdtree_intersector_8cpp.html</filename>
    <includes id="_kdtree_intersector_8h" name="KdtreeIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/KdtreeIntersector.h</includes>
    <includes id="_cooked_data_storage_8h" name="CookedDataStorage.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedDataStorage.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>KdtreeIntersector.h</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>_kdtree_intersector_8h.html</filename>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <includes id="_kdtree_node_8h" name="KdtreeNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/KdtreeNode.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <class kind="class">ph::KdtreeIntersector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>KdtreeNode.cpp</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>_kdtree_node_8cpp.html</filename>
    <includes id="_kdtree_node_8h" name="KdtreeNode.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/KdtreeNode.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::TestPoint</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>KdtreeNode.h</name>
    <path>Source/Core/Intersection/Kdtree/</path>
    <filename>_kdtree_node_8h.html</filename>
    <includes id="_kdtree_a_a_b_b_8h" name="KdtreeAABB.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/KdtreeAABB.h</includes>
    <class kind="class">ph::KdtreeNode</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PBasicSphere.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_basic_sphere_8cpp.html</filename>
    <includes id="_p_basic_sphere_8h" name="PBasicSphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PBasicSphere.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_t_sphere_8h" name="TSphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PBasicSphere.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_basic_sphere_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::PBasicSphere</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PEmpty.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_empty_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <class kind="class">ph::PEmpty</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PLatLong01Sphere.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_lat_long01_sphere_8cpp.html</filename>
    <includes id="_p_lat_long01_sphere_8h" name="PLatLong01Sphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PLatLong01Sphere.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_sphere_8h" name="TSphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PLatLong01Sphere.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_lat_long01_sphere_8h.html</filename>
    <includes id="_p_basic_sphere_8h" name="PBasicSphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PBasicSphere.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <class kind="class">ph::PLatLong01Sphere</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PLatLongEnvSphere.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_lat_long_env_sphere_8cpp.html</filename>
    <includes id="_p_lat_long_env_sphere_8h" name="PLatLongEnvSphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PLatLongEnvSphere.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_sphere_8h" name="TSphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.h</includes>
    <includes id="_t_hemisphere_8h" name="THemisphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/THemisphere.h</includes>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PLatLongEnvSphere.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_lat_long_env_sphere_8h.html</filename>
    <includes id="_p_basic_sphere_8h" name="PBasicSphere.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PBasicSphere.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <class kind="class">ph::PLatLongEnvSphere</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Primitive.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_primitive_8cpp.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Primitive.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_primitive_8h.html</filename>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <class kind="class">ph::Primitive</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveChannel.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_primitive_channel_8cpp.html</filename>
    <includes id="_primitive_channel_8h" name="PrimitiveChannel.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveChannel.h</includes>
    <includes id="_spherical_mapper_8h" name="SphericalMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/SphericalMapper.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveChannel.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_primitive_channel_8h.html</filename>
    <includes id="_uvw_mapper_8h" name="UvwMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/UvwMapper.h</includes>
    <class kind="class">ph::PrimitiveChannel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveMetadata.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_primitive_metadata_8cpp.html</filename>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_primitive_channel_8h" name="PrimitiveChannel.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveChannel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveMetadata.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_primitive_metadata_8h.html</filename>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_uvw_mapper_8h" name="UvwMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/UvwMapper.h</includes>
    <includes id="_primitive_channel_8h" name="PrimitiveChannel.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveChannel.h</includes>
    <includes id="_volume_behavior_8h" name="VolumeBehavior.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeBehavior.h</includes>
    <class kind="class">ph::PrimitiveMetadata</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PTriangle.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_triangle_8cpp.html</filename>
    <includes id="_p_triangle_8h" name="PTriangle.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PTriangle.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PTriangle.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_p_triangle_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_watertight_triangle_8h" name="TWatertightTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TWatertightTriangle.h</includes>
    <class kind="class">ph::PTriangle</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitivePosPdfQuery.cpp</name>
    <path>Source/Core/Intersection/Query/</path>
    <filename>_primitive_pos_pdf_query_8cpp.html</filename>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitivePosPdfQuery.h</name>
    <path>Source/Core/Intersection/Query/</path>
    <filename>_primitive_pos_pdf_query_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <class kind="class">ph::PrimitivePosPdfInput</class>
    <class kind="class">ph::PrimitivePosPdfOutput</class>
    <class kind="class">ph::PrimitivePosPdfQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitivePosSampleQuery.cpp</name>
    <path>Source/Core/Intersection/Query/</path>
    <filename>_primitive_pos_sample_query_8cpp.html</filename>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitivePosSampleQuery.h</name>
    <path>Source/Core/Intersection/Query/</path>
    <filename>_primitive_pos_sample_query_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <class kind="class">ph::PrimitivePosSampleInput</class>
    <class kind="class">ph::PrimitivePosSampleOutput</class>
    <class kind="class">ph::PrimitivePosSampleQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TMetaInjectionPrimitive.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_t_meta_injection_primitive_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <class kind="struct">ph::ReferencedPrimitiveMetaGetter</class>
    <class kind="struct">ph::EmbeddedPrimitiveMetaGetter</class>
    <class kind="struct">ph::TReferencedPrimitiveGetter</class>
    <class kind="struct">ph::TEmbeddedPrimitiveGetter</class>
    <class kind="class">ph::TMetaInjectionPrimitive</class>
    <namespace>ph</namespace>
    <namespace>ph::detail</namespace>
    <concept>ph::detail::CPrimitiveMetaGetter</concept>
    <concept>ph::detail::CPrimitiveGetter</concept>
  </compound>
  <compound kind="file">
    <name>TPIndexedKdTreeTriangleMesh.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_t_p_indexed_kd_tree_triangle_mesh_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_t_indexed_polygon_buffer_8h" name="TIndexedPolygonBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TIndexedPolygonBuffer.h</includes>
    <includes id="_t_indexed_kdtree_8h" name="TIndexedKdtree.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtree.h</includes>
    <includes id="_t_watertight_triangle_8h" name="TWatertightTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TWatertightTriangle.h</includes>
    <includes id="_t_p_indexed_kd_tree_triangle_mesh_8ipp" name="TPIndexedKdTreeTriangleMesh.ipp" local="yes" import="no" module="no" objc="no">Core/Intersection/TPIndexedKdTreeTriangleMesh.ipp</includes>
    <class kind="class">ph::TPIndexedKdTreeTriangleMesh</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPIndexedKdTreeTriangleMesh.ipp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_t_p_indexed_kd_tree_triangle_mesh_8ipp.html</filename>
    <includes id="_t_p_indexed_kd_tree_triangle_mesh_8h" name="TPIndexedKdTreeTriangleMesh.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TPIndexedKdTreeTriangleMesh.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPKdTreeTriangleMesh.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_t_p_kd_tree_triangle_mesh_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_indexed_tri_mesh_8h" name="IndexedTriMesh.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/IndexedTriMesh.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_indexed_kdtree_8h" name="TIndexedKdtree.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtree.h</includes>
    <includes id="_t_watertight_triangle_8h" name="TWatertightTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TWatertightTriangle.h</includes>
    <includes id="_t_p_kd_tree_triangle_mesh_8ipp" name="TPKdTreeTriangleMesh.ipp" local="yes" import="no" module="no" objc="no">Core/Intersection/TPKdTreeTriangleMesh.ipp</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPKdTreeTriangleMesh.ipp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_t_p_kd_tree_triangle_mesh_8ipp.html</filename>
    <includes id="_t_p_kd_tree_triangle_mesh_8h" name="TPKdTreeTriangleMesh.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TPKdTreeTriangleMesh.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedIntersectable.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_transformed_intersectable_8cpp.html</filename>
    <includes id="_transformed_intersectable_8h" name="TransformedIntersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedIntersectable.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedIntersectable.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_transformed_intersectable_8h.html</filename>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <class kind="class">ph::TransformedIntersectable</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedPrimitive.cpp</name>
    <path>Source/Core/Intersection/</path>
    <filename>_transformed_primitive_8cpp.html</filename>
    <includes id="_transformed_primitive_8h" name="TransformedPrimitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/TransformedPrimitive.h</includes>
    <includes id="_primitive_pos_sample_query_8h" name="PrimitivePosSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosSampleQuery.h</includes>
    <includes id="_primitive_pos_pdf_query_8h" name="PrimitivePosPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Query/PrimitivePosPdfQuery.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedPrimitive.h</name>
    <path>Source/Core/Intersection/</path>
    <filename>_transformed_primitive_8h.html</filename>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <class kind="class">ph::TransformedPrimitive</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>SphericalMapper.cpp</name>
    <path>Source/Core/Intersection/UvwMapper/</path>
    <filename>_spherical_mapper_8cpp.html</filename>
    <includes id="_spherical_mapper_8h" name="SphericalMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/SphericalMapper.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SphericalMapper.h</name>
    <path>Source/Core/Intersection/UvwMapper/</path>
    <filename>_spherical_mapper_8h.html</filename>
    <includes id="_uvw_mapper_8h" name="UvwMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/UvwMapper.h</includes>
    <class kind="class">ph::SphericalMapper</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>UvwMapper.cpp</name>
    <path>Source/Core/Intersection/UvwMapper/</path>
    <filename>_uvw_mapper_8cpp.html</filename>
    <includes id="_uvw_mapper_8h" name="UvwMapper.h" local="yes" import="no" module="no" objc="no">Core/Intersection/UvwMapper/UvwMapper.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>UvwMapper.h</name>
    <path>Source/Core/Intersection/UvwMapper/</path>
    <filename>_uvw_mapper_8h.html</filename>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::UvwMapper</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>enums.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_l_t_a_2enums_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>enums.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_surface_behavior_2_property_2enums_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LTA.dox</name>
    <path>Source/Core/LTA/</path>
    <filename>_l_t_a_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>lta.h</name>
    <path>Source/Core/LTA/</path>
    <filename>lta_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>PDF.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_p_d_f_8h.html</filename>
    <includes id="_l_t_a_2enums_8h" name="enums.h" local="yes" import="no" module="no" objc="no">Core/LTA/enums.h</includes>
    <class kind="class">ph::lta::PDF</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>PtVolumetricEstimator.cpp</name>
    <path>Source/Core/LTA/</path>
    <filename>_pt_volumetric_estimator_8cpp.html</filename>
    <includes id="_pt_volumetric_estimator_8h" name="PtVolumetricEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/PtVolumetricEstimator.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_volume_optics_8h" name="VolumeOptics.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeOptics.h</includes>
    <includes id="_volume_distance_sample_8h" name="VolumeDistanceSample.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeDistanceSample.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>PtVolumetricEstimator.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_pt_volumetric_estimator_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::lta::PtVolumetricEstimator</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>RussianRoulette.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_russian_roulette_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <class kind="class">ph::lta::RussianRoulette</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>SenseEvent.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_sense_event_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::lta::SenseEvent</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>SidednessAgreement.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_sidedness_agreement_8h.html</filename>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::lta::SidednessAgreement</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceHitRefinery.cpp</name>
    <path>Source/Core/LTA/</path>
    <filename>_surface_hit_refinery_8cpp.html</filename>
    <includes id="_surface_hit_refinery_8h" name="SurfaceHitRefinery.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceHitRefinery.h</includes>
    <includes id="_engine_init_settings_8h" name="EngineInitSettings.h" local="yes" import="no" module="no" objc="no">EngineInitSettings.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceHitRefinery.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_surface_hit_refinery_8h.html</filename>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_e_surface_refine_mode_8h" name="ESurfaceRefineMode.h" local="yes" import="no" module="no" objc="no">ESurfaceRefineMode.h</includes>
    <class kind="class">ph::lta::SurfaceHitRefinery</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceTracer.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_surface_tracer_8h.html</filename>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_surface_hit_refinery_8h" name="SurfaceHitRefinery.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceHitRefinery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <class kind="class">ph::lta::SurfaceTracer</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>TDirectLightEstimator.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_t_direct_light_estimator_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_t_direct_light_estimator_8ipp" name="TDirectLightEstimator.ipp" local="yes" import="no" module="no" objc="no">Core/LTA/TDirectLightEstimator.ipp</includes>
    <class kind="class">ph::lta::TDirectLightEstimator</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>TDirectLightEstimator.ipp</name>
    <path>Source/Core/LTA/</path>
    <filename>_t_direct_light_estimator_8ipp.html</filename>
    <includes id="_t_direct_light_estimator_8h" name="TDirectLightEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/TDirectLightEstimator.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_direct_energy_sample_query_8h" name="DirectEnergySampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergySampleQuery.h</includes>
    <includes id="_direct_energy_pdf_query_8h" name="DirectEnergyPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/DirectEnergyPdfQuery.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="_t_m_i_s_8h" name="TMIS.h" local="yes" import="no" module="no" objc="no">Core/LTA/TMIS.h</includes>
    <includes id="_surface_hit_refinery_8h" name="SurfaceHitRefinery.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceHitRefinery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>TIndirectLightEstimator.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_t_indirect_light_estimator_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_t_indirect_light_estimator_8ipp" name="TIndirectLightEstimator.ipp" local="yes" import="no" module="no" objc="no">Core/LTA/TIndirectLightEstimator.ipp</includes>
    <class kind="class">ph::lta::TIndirectLightEstimator</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>TIndirectLightEstimator.ipp</name>
    <path>Source/Core/LTA/</path>
    <filename>_t_indirect_light_estimator_8ipp.html</filename>
    <includes id="_t_indirect_light_estimator_8h" name="TIndirectLightEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/TIndirectLightEstimator.h</includes>
    <includes id="_t_direct_light_estimator_8h" name="TDirectLightEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/TDirectLightEstimator.h</includes>
    <includes id="_russian_roulette_8h" name="RussianRoulette.h" local="yes" import="no" module="no" objc="no">Core/LTA/RussianRoulette.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>TMIS.h</name>
    <path>Source/Core/LTA/</path>
    <filename>_t_m_i_s_8h.html</filename>
    <includes id="_l_t_a_2enums_8h" name="enums.h" local="yes" import="no" module="no" objc="no">Core/LTA/enums.h</includes>
    <class kind="class">ph::lta::TMIS</class>
    <namespace>ph</namespace>
    <namespace>ph::lta</namespace>
  </compound>
  <compound kind="file">
    <name>Time.h</name>
    <path>Source/Core/Quantity/</path>
    <filename>_core_2_quantity_2_time_8h.html</filename>
    <class kind="class">ph::Time</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>time.h</name>
    <path>Source/Math/</path>
    <filename>_math_2_time_8h.html</filename>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Ray.h</name>
    <path>Source/Core/</path>
    <filename>_ray_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <class kind="class">ph::Ray</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RayDifferential.cpp</name>
    <path>Source/Core/</path>
    <filename>_ray_differential_8cpp.html</filename>
    <includes id="_ray_differential_8h" name="RayDifferential.h" local="yes" import="no" module="no" objc="no">Core/RayDifferential.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RayDifferential.h</name>
    <path>Source/Core/</path>
    <filename>_ray_differential_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::RayDifferential</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EnvironmentCamera.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_environment_camera_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>EnvironmentCamera.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_environment_camera_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>PinholeCamera.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_pinhole_camera_8cpp.html</filename>
    <includes id="_pinhole_camera_8h" name="PinholeCamera.h" local="yes" import="no" module="no" objc="no">Core/Receiver/PinholeCamera.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PinholeCamera.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_pinhole_camera_8h.html</filename>
    <includes id="_rectangular_sensor_receiver_8h" name="RectangularSensorReceiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/RectangularSensorReceiver.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::PinholeCamera</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RadianceSensor.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_radiance_sensor_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::RadianceSensor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RadiantFluxPanel.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_radiant_flux_panel_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>RadiantFluxPanel.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_radiant_flux_panel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>RadiantFluxPanelArray.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_radiant_flux_panel_array_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>RadiantFluxPanelArray.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_radiant_flux_panel_array_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Receiver.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_receiver_8cpp.html</filename>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_ray_differential_8h" name="RayDifferential.h" local="yes" import="no" module="no" objc="no">Core/RayDifferential.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Receiver.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_receiver_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::Receiver</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>RectangularSensorReceiver.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_rectangular_sensor_receiver_8cpp.html</filename>
    <includes id="_rectangular_sensor_receiver_8h" name="RectangularSensorReceiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/RectangularSensorReceiver.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RectangularSensorReceiver.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_rectangular_sensor_receiver_8h.html</filename>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::RectangularSensorReceiver</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>ThinLensCamera.cpp</name>
    <path>Source/Core/Receiver/</path>
    <filename>_thin_lens_camera_8cpp.html</filename>
    <includes id="_thin_lens_camera_8h" name="ThinLensCamera.h" local="yes" import="no" module="no" objc="no">Core/Receiver/ThinLensCamera.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="_t_disk_8h" name="TDisk.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TDisk.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ThinLensCamera.h</name>
    <path>Source/Core/Receiver/</path>
    <filename>_thin_lens_camera_8h.html</filename>
    <includes id="_rectangular_sensor_receiver_8h" name="RectangularSensorReceiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/RectangularSensorReceiver.h</includes>
    <class kind="class">ph::ThinLensCamera</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AttributeRenderer.cpp</name>
    <path>Source/Core/Renderer/Attribute/</path>
    <filename>_attribute_renderer_8cpp.html</filename>
    <includes id="_attribute_renderer_8h" name="AttributeRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Attribute/AttributeRenderer.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <includes id="_renderer_proxy_8h" name="RendererProxy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RendererProxy.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="_vector3_film_8h" name="Vector3Film.h" local="yes" import="no" module="no" objc="no">Core/Filmic/Vector3Film.h</includes>
    <includes id="_plate_scheduler_8h" name="PlateScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/PlateScheduler.h</includes>
    <includes id="_stripe_scheduler_8h" name="StripeScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/StripeScheduler.h</includes>
    <includes id="_grid_scheduler_8h" name="GridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/GridScheduler.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_spiral_grid_scheduler_8h" name="SpiralGridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/SpiralGridScheduler.h</includes>
    <includes id="_tile_scheduler_8h" name="TileScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/TileScheduler.h</includes>
    <includes id="_work_unit_8h" name="WorkUnit.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkUnit.h</includes>
    <includes id="_surface_attribute_estimator_8h" name="SurfaceAttributeEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/SurfaceAttributeEstimator.h</includes>
    <includes id="_math_2_random_2_sample_8h" name="sample.h" local="yes" import="no" module="no" objc="no">Math/Random/sample.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AttributeRenderer.h</name>
    <path>Source/Core/Renderer/Attribute/</path>
    <filename>_attribute_renderer_8h.html</filename>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_vector3_film_8h" name="Vector3Film.h" local="yes" import="no" module="no" objc="no">Core/Filmic/Vector3Film.h</includes>
    <includes id="_receiver_sampling_work_8h" name="ReceiverSamplingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/ReceiverSamplingWork.h</includes>
    <includes id="_t_receiver_measurement_estimator_8h" name="TReceiverMeasurementEstimator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TReceiverMeasurementEstimator.h</includes>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="_meta_recording_processor_8h" name="MetaRecordingProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/MetaRecordingProcessor.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::AttributeRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AttributeTags.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_attribute_tags_8h.html</filename>
    <includes id="_e_attribute_8h" name="EAttribute.h" local="yes" import="no" module="no" objc="no">Core/Renderer/EAttribute.h</includes>
    <class kind="class">ph::AttributeTags</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EAttribute.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_e_attribute_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ERegionStatus.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_e_region_status_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullPhoton.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_full_photon_8h.html</filename>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::FullPhoton</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FullViewpoint.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_full_viewpoint_8h.html</filename>
    <includes id="_t_viewpoint_8h" name="TViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewpoint.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="surface__optics__fwd_8h" name="surface_optics_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/surface_optics_fwd.h</includes>
    <class kind="class">ph::FullViewpoint</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>photon_map_light_transport.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>photon__map__light__transport_8h.html</filename>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_p_m_common_params_8h" name="PMCommonParams.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMCommonParams.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_russian_roulette_8h" name="RussianRoulette.h" local="yes" import="no" module="no" objc="no">Core/LTA/RussianRoulette.h</includes>
    <includes id="_t_direct_light_estimator_8h" name="TDirectLightEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/TDirectLightEstimator.h</includes>
    <includes id="_t_indirect_light_estimator_8h" name="TIndirectLightEstimator.h" local="yes" import="no" module="no" objc="no">Core/LTA/TIndirectLightEstimator.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PMAtomicStatistics.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_p_m_atomic_statistics_8h.html</filename>
    <class kind="class">ph::PMAtomicStatistics</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PMCommonParams.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_p_m_common_params_8h.html</filename>
    <class kind="class">ph::PMCommonParams</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PMRendererBase.cpp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_p_m_renderer_base_8cpp.html</filename>
    <includes id="_p_m_renderer_base_8h" name="PMRendererBase.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMRendererBase.h</includes>
    <includes id="_render_region_status_8h" name="RenderRegionStatus.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderRegionStatus.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PMRendererBase.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_p_m_renderer_base_8h.html</filename>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_p_m_atomic_statistics_8h" name="PMAtomicStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMAtomicStatistics.h</includes>
    <includes id="_p_m_common_params_8h" name="PMCommonParams.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMCommonParams.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <class kind="class">ph::PMRendererBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ProbabilisticProgressivePMRenderer.cpp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_probabilistic_progressive_p_m_renderer_8cpp.html</filename>
    <includes id="_probabilistic_progressive_p_m_renderer_8h" name="ProbabilisticProgressivePMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/ProbabilisticProgressivePMRenderer.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_p_m_atomic_statistics_8h" name="PMAtomicStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMAtomicStatistics.h</includes>
    <includes id="_full_photon_8h" name="FullPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullPhoton.h</includes>
    <includes id="_full_viewpoint_8h" name="FullViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullViewpoint.h</includes>
    <includes id="_t_photon_path_tracing_work_8h" name="TPhotonPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonPathTracingWork.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_t_v_p_m_radiance_evaluator_8h" name="TVPMRadianceEvaluator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TVPMRadianceEvaluator.h</includes>
    <includes id="_t_view_path_tracing_work_8h" name="TViewPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathTracingWork.h</includes>
    <includes id="_render_observation_info_8h" name="RenderObservationInfo.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderObservationInfo.h</includes>
    <includes id="_render_progress_8h" name="RenderProgress.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderProgress.h</includes>
    <includes id="_render_stats_8h" name="RenderStats.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderStats.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="concurrent_8h" name="concurrent.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/concurrent.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ProbabilisticProgressivePMRenderer.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_probabilistic_progressive_p_m_renderer_8h.html</filename>
    <includes id="_p_m_renderer_base_8h" name="PMRendererBase.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMRendererBase.h</includes>
    <class kind="class">ph::ProbabilisticProgressivePMRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressivePMRenderer.cpp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_progressive_p_m_renderer_8cpp.html</filename>
    <includes id="_progressive_p_m_renderer_8h" name="ProgressivePMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/ProgressivePMRenderer.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_p_m_atomic_statistics_8h" name="PMAtomicStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMAtomicStatistics.h</includes>
    <includes id="_full_photon_8h" name="FullPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullPhoton.h</includes>
    <includes id="_full_viewpoint_8h" name="FullViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullViewpoint.h</includes>
    <includes id="_t_photon_path_tracing_work_8h" name="TPhotonPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonPathTracingWork.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_t_view_path_tracing_work_8h" name="TViewPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathTracingWork.h</includes>
    <includes id="_t_p_p_m_viewpoint_collector_8h" name="TPPMViewpointCollector.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPPMViewpointCollector.h</includes>
    <includes id="_t_p_p_m_radiance_evaluation_work_8h" name="TPPMRadianceEvaluationWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPPMRadianceEvaluationWork.h</includes>
    <includes id="_render_observation_info_8h" name="RenderObservationInfo.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderObservationInfo.h</includes>
    <includes id="_render_progress_8h" name="RenderProgress.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderProgress.h</includes>
    <includes id="_render_stats_8h" name="RenderStats.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderStats.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="concurrent_8h" name="concurrent.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/concurrent.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressivePMRenderer.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_progressive_p_m_renderer_8h.html</filename>
    <includes id="_p_m_renderer_base_8h" name="PMRendererBase.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMRendererBase.h</includes>
    <class kind="class">ph::ProgressivePMRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StochasticProgressivePMRenderer.cpp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_stochastic_progressive_p_m_renderer_8cpp.html</filename>
    <includes id="_stochastic_progressive_p_m_renderer_8h" name="StochasticProgressivePMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/StochasticProgressivePMRenderer.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_p_m_atomic_statistics_8h" name="PMAtomicStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMAtomicStatistics.h</includes>
    <includes id="_full_photon_8h" name="FullPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullPhoton.h</includes>
    <includes id="_full_viewpoint_8h" name="FullViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullViewpoint.h</includes>
    <includes id="_t_photon_path_tracing_work_8h" name="TPhotonPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonPathTracingWork.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_t_view_path_tracing_work_8h" name="TViewPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathTracingWork.h</includes>
    <includes id="_t_s_p_p_m_radiance_evaluator_8h" name="TSPPMRadianceEvaluator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TSPPMRadianceEvaluator.h</includes>
    <includes id="_render_observation_info_8h" name="RenderObservationInfo.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderObservationInfo.h</includes>
    <includes id="_render_progress_8h" name="RenderProgress.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderProgress.h</includes>
    <includes id="_render_stats_8h" name="RenderStats.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderStats.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="concurrent_8h" name="concurrent.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/concurrent.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StochasticProgressivePMRenderer.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_stochastic_progressive_p_m_renderer_8h.html</filename>
    <includes id="_p_m_renderer_base_8h" name="PMRendererBase.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMRendererBase.h</includes>
    <class kind="class">ph::StochasticProgressivePMRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPhoton.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_photon_8h.html</filename>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <class kind="class">ph::TPhoton</class>
    <namespace>ph</namespace>
    <concept>ph::CPhoton</concept>
  </compound>
  <compound kind="file">
    <name>TPhotonMap.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_photon_map_8h.html</filename>
    <includes id="_t_indexed_point_kdtree_8h" name="TIndexedPointKdtree.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedPointKdtree.h</includes>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_p_m_common_params_8h" name="PMCommonParams.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMCommonParams.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::TPhotonMapInfo</class>
    <class kind="class">ph::TPhotonMap</class>
    <class kind="struct">ph::TPhotonMap::PhotonCenterCalculator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPhotonPathTracingWork.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_photon_path_tracing_work_8h.html</filename>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_p_m_common_params_8h" name="PMCommonParams.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMCommonParams.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_t_photon_path_tracing_work_8ipp" name="TPhotonPathTracingWork.ipp" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonPathTracingWork.ipp</includes>
    <class kind="class">ph::TPhotonPathTracingWork</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPhotonPathTracingWork.ipp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_photon_path_tracing_work_8ipp.html</filename>
    <includes id="_t_photon_path_tracing_work_8h" name="TPhotonPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonPathTracingWork.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_russian_roulette_8h" name="RussianRoulette.h" local="yes" import="no" module="no" objc="no">Core/LTA/RussianRoulette.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <includes id="_p_m_atomic_statistics_8h" name="PMAtomicStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMAtomicStatistics.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_energy_emission_sample_query_8h" name="EnergyEmissionSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/EnergyEmissionSampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPPMRadianceEvaluationWork.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_p_p_m_radiance_evaluation_work_8h.html</filename>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_t_viewpoint_8h" name="TViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewpoint.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_t_p_p_m_radiance_evaluation_work_8ipp" name="TPPMRadianceEvaluationWork.ipp" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPPMRadianceEvaluationWork.ipp</includes>
    <class kind="class">ph::TPPMRadianceEvaluationWork</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPPMRadianceEvaluationWork.ipp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_p_p_m_radiance_evaluation_work_8ipp.html</filename>
    <includes id="_t_p_p_m_radiance_evaluation_work_8h" name="TPPMRadianceEvaluationWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPPMRadianceEvaluationWork.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="lta_8h" name="lta.h" local="yes" import="no" module="no" objc="no">Core/LTA/lta.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="photon__map__light__transport_8h" name="photon_map_light_transport.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/photon_map_light_transport.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPPMViewpointCollector.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_p_p_m_viewpoint_collector_8h.html</filename>
    <includes id="_t_view_path_handler_8h" name="TViewPathHandler.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathHandler.h</includes>
    <includes id="_t_viewpoint_8h" name="TViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewpoint.h</includes>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="photon__map__light__transport_8h" name="photon_map_light_transport.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/photon_map_light_transport.h</includes>
    <class kind="class">ph::TPPMViewpointCollector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSPPMRadianceEvaluator.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_s_p_p_m_radiance_evaluator_8h.html</filename>
    <includes id="_t_view_path_handler_8h" name="TViewPathHandler.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathHandler.h</includes>
    <includes id="_t_viewpoint_8h" name="TViewpoint.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewpoint.h</includes>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="photon__map__light__transport_8h" name="photon_map_light_transport.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/photon_map_light_transport.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::TSPPMRadianceEvaluator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TViewPathHandler.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_view_path_handler_8h.html</filename>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_view_path_tracing_policy_8h" name="ViewPathTracingPolicy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/ViewPathTracingPolicy.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <class kind="class">ph::TViewPathHandler</class>
    <namespace>ph</namespace>
    <concept>ph::CViewPathHandler</concept>
  </compound>
  <compound kind="file">
    <name>TViewPathTracingWork.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_view_path_tracing_work_8h.html</filename>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_t_view_path_handler_8h" name="TViewPathHandler.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathHandler.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_view_path_tracing_work_8ipp" name="TViewPathTracingWork.ipp" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathTracingWork.ipp</includes>
    <class kind="class">ph::TViewPathTracingWork</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TViewPathTracingWork.ipp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_view_path_tracing_work_8ipp.html</filename>
    <includes id="_t_view_path_tracing_work_8h" name="TViewPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathTracingWork.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_surface_tracer_8h" name="SurfaceTracer.h" local="yes" import="no" module="no" objc="no">Core/LTA/SurfaceTracer.h</includes>
    <includes id="_russian_roulette_8h" name="RussianRoulette.h" local="yes" import="no" module="no" objc="no">Core/LTA/RussianRoulette.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_math_2_random_2_sample_8h" name="sample.h" local="yes" import="no" module="no" objc="no">Math/Random/sample.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TViewpoint.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_viewpoint_8h.html</filename>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <class kind="class">ph::TViewpoint</class>
    <namespace>ph</namespace>
    <concept>ph::CViewpoint</concept>
  </compound>
  <compound kind="file">
    <name>TVPMRadianceEvaluator.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_t_v_p_m_radiance_evaluator_8h.html</filename>
    <includes id="_t_view_path_handler_8h" name="TViewPathHandler.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathHandler.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_t_photon_8h" name="TPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhoton.h</includes>
    <includes id="_p_m_common_params_8h" name="PMCommonParams.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMCommonParams.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="photon__map__light__transport_8h" name="photon_map_light_transport.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/photon_map_light_transport.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::TVPMRadianceEvaluator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VanillaPMRenderer.cpp</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_vanilla_p_m_renderer_8cpp.html</filename>
    <includes id="_vanilla_p_m_renderer_8h" name="VanillaPMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/VanillaPMRenderer.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_p_m_atomic_statistics_8h" name="PMAtomicStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMAtomicStatistics.h</includes>
    <includes id="_full_photon_8h" name="FullPhoton.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/FullPhoton.h</includes>
    <includes id="_t_photon_path_tracing_work_8h" name="TPhotonPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonPathTracingWork.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_t_photon_map_8h" name="TPhotonMap.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TPhotonMap.h</includes>
    <includes id="_t_v_p_m_radiance_evaluator_8h" name="TVPMRadianceEvaluator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TVPMRadianceEvaluator.h</includes>
    <includes id="_t_view_path_tracing_work_8h" name="TViewPathTracingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/TViewPathTracingWork.h</includes>
    <includes id="_render_observation_info_8h" name="RenderObservationInfo.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderObservationInfo.h</includes>
    <includes id="_render_progress_8h" name="RenderProgress.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderProgress.h</includes>
    <includes id="_render_stats_8h" name="RenderStats.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderStats.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="concurrent_8h" name="concurrent.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/concurrent.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VanillaPMRenderer.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_vanilla_p_m_renderer_8h.html</filename>
    <includes id="_p_m_renderer_base_8h" name="PMRendererBase.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMRendererBase.h</includes>
    <class kind="class">ph::VanillaPMRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ViewPathTracingPolicy.h</name>
    <path>Source/Core/Renderer/PM/</path>
    <filename>_view_path_tracing_policy_8h.html</filename>
    <includes id="surface__optics__fwd_8h" name="surface_optics_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/surface_optics_fwd.h</includes>
    <class kind="class">ph::ViewPathTracingPolicy</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Renderer.cpp</name>
    <path>Source/Core/Renderer/</path>
    <filename>_renderer_8cpp.html</filename>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_film_8h" name="Film.h" local="yes" import="no" module="no" objc="no">Core/Filmic/Film.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <includes id="_renderer_proxy_8h" name="RendererProxy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RendererProxy.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Renderer.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_renderer_8h.html</filename>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_e_region_status_8h" name="ERegionStatus.h" local="yes" import="no" module="no" objc="no">Core/Renderer/ERegionStatus.h</includes>
    <includes id="_statistics_8h" name="Statistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Statistics.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_attribute_tags_8h" name="AttributeTags.h" local="yes" import="no" module="no" objc="no">Core/Renderer/AttributeTags.h</includes>
    <includes id="_render_stats_8h" name="RenderStats.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderStats.h</includes>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <includes id="_render_region_status_8h" name="RenderRegionStatus.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderRegionStatus.h</includes>
    <includes id="_render_observation_info_8h" name="RenderObservationInfo.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderObservationInfo.h</includes>
    <includes id="_viewport_8h" name="Viewport.h" local="yes" import="no" module="no" objc="no">Frame/Viewport.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::Renderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RendererProxy.cpp</name>
    <path>Source/Core/Renderer/</path>
    <filename>_renderer_proxy_8cpp.html</filename>
    <includes id="_renderer_proxy_8h" name="RendererProxy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RendererProxy.h</includes>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RendererProxy.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_renderer_proxy_8h.html</filename>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <class kind="class">ph::RendererProxy</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderObservationInfo.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_observation_info_8h.html</filename>
    <class kind="class">ph::RenderObservationInfo</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderProgress.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_progress_8h.html</filename>
    <class kind="class">ph::RenderProgress</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderRegionStatus.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_region_status_8h.html</filename>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <includes id="_e_region_status_8h" name="ERegionStatus.h" local="yes" import="no" module="no" objc="no">Core/Renderer/ERegionStatus.h</includes>
    <class kind="class">ph::RenderRegionStatus</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderStats.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_stats_8h.html</filename>
    <class kind="class">ph::RenderStats</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderWork.cpp</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_work_8cpp.html</filename>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderWork.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_work_8h.html</filename>
    <includes id="filmic__fwd_8h" name="filmic_fwd.h" local="yes" import="no" module="no" objc="no">Core/Filmic/filmic_fwd.h</includes>
    <includes id="_render_progress_8h" name="RenderProgress.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderProgress.h</includes>
    <class kind="class">ph::RenderWork</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderWorker.cpp</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_worker_8cpp.html</filename>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderWorker.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_render_worker_8h.html</filename>
    <includes id="_renderer_proxy_8h" name="RendererProxy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RendererProxy.h</includes>
    <includes id="_statistics_8h" name="Statistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Statistics.h</includes>
    <includes id="_render_progress_8h" name="RenderProgress.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderProgress.h</includes>
    <class kind="class">ph::RenderWorker</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AdaptiveSamplingRenderer.cpp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_adaptive_sampling_renderer_8cpp.html</filename>
    <includes id="_adaptive_sampling_renderer_8h" name="AdaptiveSamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/AdaptiveSamplingRenderer.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <includes id="_renderer_proxy_8h" name="RendererProxy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RendererProxy.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AdaptiveSamplingRenderer.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_adaptive_sampling_renderer_8h.html</filename>
    <includes id="_sampling_renderer_8h" name="SamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/SamplingRenderer.h</includes>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <includes id="_dammertz_dispatcher_8h" name="DammertzDispatcher.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/DammertzDispatcher.h</includes>
    <includes id="_receiver_sampling_work_8h" name="ReceiverSamplingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/ReceiverSamplingWork.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_stepper_receiver_measurement_estimator_8h" name="TStepperReceiverMeasurementEstimator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TStepperReceiverMeasurementEstimator.h</includes>
    <includes id="_meta_recording_processor_8h" name="MetaRecordingProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/MetaRecordingProcessor.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_atomic_quasi_queue_8h" name="TAtomicQuasiQueue.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TAtomicQuasiQueue.h</includes>
    <class kind="class">ph::AdaptiveSamplingRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EqualSamplingRenderer.cpp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_equal_sampling_renderer_8cpp.html</filename>
    <includes id="_equal_sampling_renderer_8h" name="EqualSamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/EqualSamplingRenderer.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_render_worker_8h" name="RenderWorker.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWorker.h</includes>
    <includes id="_renderer_proxy_8h" name="RendererProxy.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RendererProxy.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="_vector3_film_8h" name="Vector3Film.h" local="yes" import="no" module="no" objc="no">Core/Filmic/Vector3Film.h</includes>
    <includes id="_plate_scheduler_8h" name="PlateScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/PlateScheduler.h</includes>
    <includes id="_stripe_scheduler_8h" name="StripeScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/StripeScheduler.h</includes>
    <includes id="_grid_scheduler_8h" name="GridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/GridScheduler.h</includes>
    <includes id="_spiral_grid_scheduler_8h" name="SpiralGridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/SpiralGridScheduler.h</includes>
    <includes id="_tile_scheduler_8h" name="TileScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/TileScheduler.h</includes>
    <includes id="_work_unit_8h" name="WorkUnit.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkUnit.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EqualSamplingRenderer.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_equal_sampling_renderer_8h.html</filename>
    <includes id="_sampling_renderer_8h" name="SamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/SamplingRenderer.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_receiver_sampling_work_8h" name="ReceiverSamplingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/ReceiverSamplingWork.h</includes>
    <includes id="_t_receiver_measurement_estimator_8h" name="TReceiverMeasurementEstimator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TReceiverMeasurementEstimator.h</includes>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="_e_scheduler_8h" name="EScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/EScheduler.h</includes>
    <includes id="_meta_recording_processor_8h" name="MetaRecordingProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/MetaRecordingProcessor.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_atomic_quasi_queue_8h" name="TAtomicQuasiQueue.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TAtomicQuasiQueue.h</includes>
    <class kind="class">ph::EqualSamplingRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IReceivedRayProcessor.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_i_received_ray_processor_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::IReceivedRayProcessor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MetaRecordingProcessor.cpp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_meta_recording_processor_8cpp.html</filename>
    <includes id="_meta_recording_processor_8h" name="MetaRecordingProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/MetaRecordingProcessor.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MetaRecordingProcessor.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_meta_recording_processor_8h.html</filename>
    <includes id="_i_received_ray_processor_8h" name="IReceivedRayProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/IReceivedRayProcessor.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <class kind="class">ph::MetaRecordingProcessor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ReceiverSamplingWork.cpp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_receiver_sampling_work_8cpp.html</filename>
    <includes id="_receiver_sampling_work_8h" name="ReceiverSamplingWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/ReceiverSamplingWork.h</includes>
    <includes id="_sampling_renderer_8h" name="SamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/SamplingRenderer.h</includes>
    <includes id="_t_sampling_film_8h" name="TSamplingFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/TSamplingFilm.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_math_2_random_2_sample_8h" name="sample.h" local="yes" import="no" module="no" objc="no">Math/Random/sample.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ReceiverSamplingWork.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_receiver_sampling_work_8h.html</filename>
    <includes id="_render_work_8h" name="RenderWork.h" local="yes" import="no" module="no" objc="no">Core/Renderer/RenderWork.h</includes>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <includes id="_sampling_statistics_8h" name="SamplingStatistics.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/SamplingStatistics.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_i_received_ray_processor_8h" name="IReceivedRayProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/IReceivedRayProcessor.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_sampling_film_dimensions_8h" name="SamplingFilmDimensions.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SamplingFilmDimensions.h</includes>
    <class kind="class">ph::ReceiverSamplingWork</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplingRenderer.cpp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_sampling_renderer_8cpp.html</filename>
    <includes id="_sampling_renderer_8h" name="SamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/SamplingRenderer.h</includes>
    <includes id="_b_v_p_t_estimator_8h" name="BVPTEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BVPTEstimator.h</includes>
    <includes id="_b_n_e_e_p_t_estimator_8h" name="BNEEPTEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BNEEPTEstimator.h</includes>
    <includes id="_b_v_p_t_d_l_estimator_8h" name="BVPTDLEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BVPTDLEstimator.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplingRenderer.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_sampling_renderer_8h.html</filename>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_full_ray_energy_estimator_8h" name="FullRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/FullRayEnergyEstimator.h</includes>
    <class kind="class">ph::SamplingRenderer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplingStatistics.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_sampling_statistics_8h.html</filename>
    <class kind="struct">ph::SamplingStatistics</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceAttributeRenderer.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_surface_attribute_renderer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>TReceiverMeasurementEstimator.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_t_receiver_measurement_estimator_8h.html</filename>
    <includes id="_i_received_ray_processor_8h" name="IReceivedRayProcessor.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/IReceivedRayProcessor.h</includes>
    <includes id="estimator__fwd_8h" name="estimator_fwd.h" local="yes" import="no" module="no" objc="no">Core/Estimator/estimator_fwd.h</includes>
    <includes id="_t_estimation_array_8h" name="TEstimationArray.h" local="yes" import="no" module="no" objc="no">Core/Estimator/TEstimationArray.h</includes>
    <includes id="_integrand_8h" name="Integrand.h" local="yes" import="no" module="no" objc="no">Core/Estimator/Integrand.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_t_receiver_measurement_estimator_8ipp" name="TReceiverMeasurementEstimator.ipp" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TReceiverMeasurementEstimator.ipp</includes>
    <class kind="class">ph::TReceiverMeasurementEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TReceiverMeasurementEstimator.ipp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_t_receiver_measurement_estimator_8ipp.html</filename>
    <includes id="_t_receiver_measurement_estimator_8h" name="TReceiverMeasurementEstimator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TReceiverMeasurementEstimator.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_i_ray_energy_estimator_8h" name="IRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/IRayEnergyEstimator.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TStepperReceiverMeasurementEstimator.h</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_t_stepper_receiver_measurement_estimator_8h.html</filename>
    <includes id="_t_receiver_measurement_estimator_8h" name="TReceiverMeasurementEstimator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TReceiverMeasurementEstimator.h</includes>
    <includes id="_hdr_rgb_film_8h" name="HdrRgbFilm.h" local="yes" import="no" module="no" objc="no">Core/Filmic/HdrRgbFilm.h</includes>
    <includes id="_t_stepper_receiver_measurement_estimator_8ipp" name="TStepperReceiverMeasurementEstimator.ipp" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TStepperReceiverMeasurementEstimator.ipp</includes>
    <class kind="class">ph::TStepperReceiverMeasurementEstimator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TStepperReceiverMeasurementEstimator.ipp</name>
    <path>Source/Core/Renderer/Sampling/</path>
    <filename>_t_stepper_receiver_measurement_estimator_8ipp.html</filename>
    <includes id="_t_stepper_receiver_measurement_estimator_8h" name="TStepperReceiverMeasurementEstimator.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/TStepperReceiverMeasurementEstimator.h</includes>
    <includes id="_i_ray_energy_estimator_8h" name="IRayEnergyEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/IRayEnergyEstimator.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Statistics.h</name>
    <path>Source/Core/Renderer/</path>
    <filename>_statistics_8h.html</filename>
    <class kind="class">ph::Statistics</class>
    <class kind="class">ph::Statistics::Record</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Sample.h</name>
    <path>Source/Core/</path>
    <filename>_core_2_sample_8h.html</filename>
    <class kind="class">ph::Sample</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sample.h</name>
    <path>Source/Math/Random/</path>
    <filename>_math_2_random_2_sample_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>halton.h</name>
    <path>Source/Core/SampleGenerator/Halton/</path>
    <filename>halton_8h.html</filename>
    <includes id="halton__fwd_8h" name="halton_fwd.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/Halton/halton_fwd.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="math__table_8h" name="math_table.h" local="yes" import="no" module="no" objc="no">Math/math_table.h</includes>
    <includes id="radical__inverse_8h" name="radical_inverse.h" local="yes" import="no" module="no" objc="no">Math/Random/Quasi/radical_inverse.h</includes>
    <includes id="shuffle_8h" name="shuffle.h" local="yes" import="no" module="no" objc="no">Math/Random/shuffle.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <class kind="class">ph::halton_detail::FixedPermuter</class>
    <class kind="class">ph::halton_detail::PerDigitPermuter</class>
    <class kind="class">ph::halton_detail::OwenScrambledPermuter</class>
    <namespace>ph</namespace>
    <namespace>ph::halton_detail</namespace>
  </compound>
  <compound kind="file">
    <name>halton_fwd.h</name>
    <path>Source/Core/SampleGenerator/Halton/</path>
    <filename>halton__fwd_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::halton_detail</namespace>
  </compound>
  <compound kind="file">
    <name>halton_randomization_enums.h</name>
    <path>Source/Core/SampleGenerator/Halton/</path>
    <filename>halton__randomization__enums_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RadicalInversePermutations.h</name>
    <path>Source/Core/SampleGenerator/Halton/</path>
    <filename>_radical_inverse_permutations_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>SampleContext.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_sample_context_8h.html</filename>
    <class kind="class">ph::SampleContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleFlow.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_sample_flow_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="_math_2_random_2_sample_8h" name="sample.h" local="yes" import="no" module="no" objc="no">Math/Random/sample.h</includes>
    <class kind="class">ph::SampleFlow</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleGenerator.cpp</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_sample_generator_8cpp.html</filename>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="_sample_context_8h" name="SampleContext.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleContext.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleGenerator.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_sample_generator_8h.html</filename>
    <includes id="_core_2_sample_8h" name="Sample.h" local="yes" import="no" module="no" objc="no">Core/Sample.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <includes id="_sample_stage_8h" name="SampleStage.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleStage.h</includes>
    <includes id="_sample_stage_reviser_8h" name="SampleStageReviser.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleStageReviser.h</includes>
    <includes id="_samples_n_d_handle_8h" name="SamplesNDHandle.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SamplesNDHandle.h</includes>
    <includes id="_samples_n_d_8h" name="SamplesND.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SamplesND.h</includes>
    <includes id="_samples_n_d_stream_8h" name="SamplesNDStream.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SamplesNDStream.h</includes>
    <class kind="class">ph::SampleGenerator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplesND.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_samples_n_d_8h.html</filename>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <includes id="shuffle_8h" name="shuffle.h" local="yes" import="no" module="no" objc="no">Math/Random/shuffle.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <class kind="class">ph::SamplesND</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplesNDHandle.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_samples_n_d_handle_8h.html</filename>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::SamplesNDHandle</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SamplesNDStream.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_samples_n_d_stream_8h.html</filename>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <class kind="class">ph::SamplesNDStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleStage.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_sample_stage_8h.html</filename>
    <class kind="class">ph::SampleStage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleStageReviser.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_sample_stage_reviser_8h.html</filename>
    <includes id="_sample_stage_8h" name="SampleStage.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleStage.h</includes>
    <class kind="class">ph::SampleStageReviser</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGHalton.cpp</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_halton_8cpp.html</filename>
    <includes id="_s_g_halton_8h" name="SGHalton.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGHalton.h</includes>
    <includes id="_core_2_sample_8h" name="Sample.h" local="yes" import="no" module="no" objc="no">Core/Sample.h</includes>
    <includes id="_samples_n_d_8h" name="SamplesND.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SamplesND.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="halton_8h" name="halton.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/Halton/halton.h</includes>
    <includes id="_sample_context_8h" name="SampleContext.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleContext.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="math__table_8h" name="math_table.h" local="yes" import="no" module="no" objc="no">Math/math_table.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGHalton.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_halton_8h.html</filename>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <includes id="halton__randomization__enums_8h" name="halton_randomization_enums.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/Halton/halton_randomization_enums.h</includes>
    <includes id="halton__fwd_8h" name="halton_fwd.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/Halton/halton_fwd.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::SGHalton</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGStratified.cpp</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_stratified_8cpp.html</filename>
    <includes id="_s_g_stratified_8h" name="SGStratified.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGStratified.h</includes>
    <includes id="_core_2_sample_8h" name="Sample.h" local="yes" import="no" module="no" objc="no">Core/Sample.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="_samples_n_d_8h" name="SamplesND.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SamplesND.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_sample_stage_reviser_8h" name="SampleStageReviser.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleStageReviser.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGStratified.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_stratified_8h.html</filename>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <class kind="class">ph::SGStratified</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGUniformRandom.cpp</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_uniform_random_8cpp.html</filename>
    <includes id="_s_g_uniform_random_8h" name="SGUniformRandom.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGUniformRandom.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGUniformRandom.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_uniform_random_8h.html</filename>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <class kind="class">ph::SGUniformRandom</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGUtil.cpp</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_util_8cpp.html</filename>
    <includes id="_s_g_util_8h" name="SGUtil.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGUtil.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SGUtil.h</name>
    <path>Source/Core/SampleGenerator/</path>
    <filename>_s_g_util_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::SGUtil</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DammertzDispatcher.cpp</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_dammertz_dispatcher_8cpp.html</filename>
    <includes id="_dammertz_dispatcher_8h" name="DammertzDispatcher.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/DammertzDispatcher.h</includes>
    <includes id="_grid_scheduler_8h" name="GridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/GridScheduler.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DammertzDispatcher.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_dammertz_dispatcher_8h.html</filename>
    <includes id="_i_work_dispatcher_8h" name="IWorkDispatcher.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/IWorkDispatcher.h</includes>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::DammertzDispatcher</class>
    <class kind="class">ph::DammertzDispatcher::TAnalyzer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_e_scheduler_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GridScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_grid_scheduler_8h.html</filename>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <class kind="class">ph::GridScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IWorkDispatcher.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_i_work_dispatcher_8h.html</filename>
    <includes id="_work_unit_8h" name="WorkUnit.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkUnit.h</includes>
    <class kind="class">ph::IWorkDispatcher</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PlateScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_plate_scheduler_8h.html</filename>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::PlateScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Region.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_region_8h.html</filename>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Scheduler.dox</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_scheduler_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>SpiralGridScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_spiral_grid_scheduler_8h.html</filename>
    <includes id="_spiral_scheduler_8h" name="SpiralScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/SpiralScheduler.h</includes>
    <includes id="_grid_scheduler_8h" name="GridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/GridScheduler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::SpiralGridScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SpiralScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_spiral_scheduler_8h.html</filename>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::SpiralScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StripeScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_stripe_scheduler_8h.html</filename>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <class kind="class">ph::StripeScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TileScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_tile_scheduler_8h.html</filename>
    <includes id="_work_scheduler_8h" name="WorkScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkScheduler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_grid_scheduler_8h" name="GridScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/GridScheduler.h</includes>
    <class kind="class">ph::TileScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>WorkScheduler.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_work_scheduler_8h.html</filename>
    <includes id="_i_work_dispatcher_8h" name="IWorkDispatcher.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/IWorkDispatcher.h</includes>
    <includes id="_work_unit_8h" name="WorkUnit.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/WorkUnit.h</includes>
    <class kind="class">ph::WorkScheduler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>WorkUnit.h</name>
    <path>Source/Core/Scheduler/</path>
    <filename>_work_unit_8h.html</filename>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_region_8h" name="Region.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/Region.h</includes>
    <class kind="class">ph::WorkUnit</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>bsdf_query_fwd.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>bsdf__query__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfEvalQuery.cpp</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_eval_query_8cpp.html</filename>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfEvalQuery.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_eval_query_8h.html</filename>
    <includes id="bsdf__query__fwd_8h" name="bsdf_query_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/bsdf_query_fwd.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="surface__optics__fwd_8h" name="surface_optics_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/surface_optics_fwd.h</includes>
    <class kind="class">ph::BsdfEvalInput</class>
    <class kind="class">ph::BsdfEvalOutput</class>
    <class kind="class">ph::BsdfEvalQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfHelper.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_helper_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::BsdfHelper</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfPdfQuery.cpp</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_pdf_query_8cpp.html</filename>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfPdfQuery.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_pdf_query_8h.html</filename>
    <includes id="bsdf__query__fwd_8h" name="bsdf_query_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/bsdf_query_fwd.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <class kind="class">ph::BsdfPdfInput</class>
    <class kind="class">ph::BsdfPdfOutput</class>
    <class kind="class">ph::BsdfPdfQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfQueryContext.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_query_context_8h.html</filename>
    <includes id="surface__optics__fwd_8h" name="surface_optics_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/surface_optics_fwd.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_l_t_a_2enums_8h" name="enums.h" local="yes" import="no" module="no" objc="no">Core/LTA/enums.h</includes>
    <class kind="class">ph::BsdfQueryContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfSampleQuery.cpp</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_sample_query_8cpp.html</filename>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BsdfSampleQuery.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_bsdf_sample_query_8h.html</filename>
    <includes id="bsdf__query__fwd_8h" name="bsdf_query_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/bsdf_query_fwd.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <class kind="class">ph::BsdfSampleInput</class>
    <class kind="class">ph::BsdfSampleOutput</class>
    <class kind="class">ph::BsdfSampleQuery</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AnisoTrowbridgeReitz.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_aniso_trowbridge_reitz_8cpp.html</filename>
    <includes id="_aniso_trowbridge_reitz_8h" name="AnisoTrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/AnisoTrowbridgeReitz.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AnisoTrowbridgeReitz.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_aniso_trowbridge_reitz_8h.html</filename>
    <includes id="_trowbridge_reitz_8h" name="TrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/TrowbridgeReitz.h</includes>
    <class kind="class">ph::AnisoTrowbridgeReitz</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConductorFresnel.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_conductor_fresnel_8cpp.html</filename>
    <includes id="_conductor_fresnel_8h" name="ConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ConductorFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ConductorFresnel.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_conductor_fresnel_8h.html</filename>
    <includes id="_fresnel_effect_8h" name="FresnelEffect.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/FresnelEffect.h</includes>
    <class kind="class">ph::ConductorFresnel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DielectricFresnel.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_dielectric_fresnel_8cpp.html</filename>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>DielectricFresnel.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_dielectric_fresnel_8h.html</filename>
    <includes id="_fresnel_effect_8h" name="FresnelEffect.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/FresnelEffect.h</includes>
    <class kind="class">ph::DielectricFresnel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExactConductorFresnel.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_exact_conductor_fresnel_8cpp.html</filename>
    <includes id="_exact_conductor_fresnel_8h" name="ExactConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactConductorFresnel.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExactConductorFresnel.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_exact_conductor_fresnel_8h.html</filename>
    <includes id="_conductor_fresnel_8h" name="ConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ConductorFresnel.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::ExactConductorFresnel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExactDielectricFresnel.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_exact_dielectric_fresnel_8cpp.html</filename>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExactDielectricFresnel.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_exact_dielectric_fresnel_8h.html</filename>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <class kind="class">ph::ExactDielectricFresnel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FresnelEffect.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_fresnel_effect_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::FresnelEffect</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IsoBeckmann.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_iso_beckmann_8cpp.html</filename>
    <includes id="_iso_beckmann_8h" name="IsoBeckmann.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoBeckmann.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IsoBeckmann.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_iso_beckmann_8h.html</filename>
    <includes id="_shape_invariant_microfacet_8h" name="ShapeInvariantMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ShapeInvariantMicrofacet.h</includes>
    <class kind="class">ph::IsoBeckmann</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IsoTrowbridgeReitz.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_iso_trowbridge_reitz_8cpp.html</filename>
    <includes id="_iso_trowbridge_reitz_8h" name="IsoTrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoTrowbridgeReitz.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IsoTrowbridgeReitz.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_iso_trowbridge_reitz_8h.html</filename>
    <includes id="_trowbridge_reitz_8h" name="TrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/TrowbridgeReitz.h</includes>
    <class kind="class">ph::IsoTrowbridgeReitz</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IsoTrowbridgeReitzConstant.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_iso_trowbridge_reitz_constant_8h.html</filename>
    <includes id="_iso_trowbridge_reitz_8h" name="IsoTrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoTrowbridgeReitz.h</includes>
    <class kind="class">ph::IsoTrowbridgeReitzConstant</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IsoTrowbridgeReitzTextured.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_iso_trowbridge_reitz_textured_8h.html</filename>
    <includes id="_iso_trowbridge_reitz_8h" name="IsoTrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoTrowbridgeReitz.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <class kind="class">ph::IsoTrowbridgeReitzTextured</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Microfacet.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_microfacet_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_p_d_f_8h" name="PDF.h" local="yes" import="no" module="no" objc="no">Core/LTA/PDF.h</includes>
    <class kind="class">ph::Microfacet</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SchlickApproxConductorFresnel.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_schlick_approx_conductor_fresnel_8cpp.html</filename>
    <includes id="_schlick_approx_conductor_fresnel_8h" name="SchlickApproxConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/SchlickApproxConductorFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SchlickApproxConductorFresnel.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_schlick_approx_conductor_fresnel_8h.html</filename>
    <includes id="_conductor_fresnel_8h" name="ConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ConductorFresnel.h</includes>
    <class kind="class">ph::SchlickApproxConductorFresnel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SchlickApproxDielectricFresnel.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_schlick_approx_dielectric_fresnel_8cpp.html</filename>
    <includes id="_schlick_approx_dielectric_fresnel_8h" name="SchlickApproxDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/SchlickApproxDielectricFresnel.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SchlickApproxDielectricFresnel.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_schlick_approx_dielectric_fresnel_8h.html</filename>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <class kind="class">ph::SchlickApproxDielectricFresnel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ShapeInvariantMicrofacet.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_shape_invariant_microfacet_8cpp.html</filename>
    <includes id="_shape_invariant_microfacet_8h" name="ShapeInvariantMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ShapeInvariantMicrofacet.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ShapeInvariantMicrofacet.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_shape_invariant_microfacet_8h.html</filename>
    <includes id="_microfacet_8h" name="Microfacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/Microfacet.h</includes>
    <includes id="_surface_behavior_2_property_2enums_8h" name="enums.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/enums.h</includes>
    <class kind="class">ph::ShapeInvariantMicrofacet</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TrowbridgeReitz.cpp</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_trowbridge_reitz_8cpp.html</filename>
    <includes id="_trowbridge_reitz_8h" name="TrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/TrowbridgeReitz.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TrowbridgeReitz.h</name>
    <path>Source/Core/SurfaceBehavior/Property/</path>
    <filename>_trowbridge_reitz_8h.html</filename>
    <includes id="_shape_invariant_microfacet_8h" name="ShapeInvariantMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ShapeInvariantMicrofacet.h</includes>
    <class kind="class">ph::TrowbridgeReitz</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>surface_optics_fwd.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>surface__optics__fwd_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_bit_flags_8h" name="TBitFlags.h" local="yes" import="no" module="no" objc="no">Utility/TBitFlags.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceBehavior.cpp</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_surface_behavior_8cpp.html</filename>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceBehavior.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_surface_behavior_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <class kind="class">ph::SurfaceBehavior</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceOptics.cpp</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_surface_optics_8cpp.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_bsdf_query_context_8h" name="BsdfQueryContext.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfQueryContext.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceOptics.h</name>
    <path>Source/Core/SurfaceBehavior/</path>
    <filename>_surface_optics_8h.html</filename>
    <includes id="surface__optics__fwd_8h" name="surface_optics_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/surface_optics_fwd.h</includes>
    <includes id="bsdf__query__fwd_8h" name="bsdf_query_fwd.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/bsdf_query_fwd.h</includes>
    <class kind="class">ph::SurfaceOptics</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealAbsorber.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_absorber_8cpp.html</filename>
    <includes id="_ideal_absorber_8h" name="IdealAbsorber.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealAbsorber.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealAbsorber.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_absorber_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <class kind="class">ph::IdealAbsorber</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealDielectric.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_dielectric_8cpp.html</filename>
    <includes id="_ideal_dielectric_8h" name="IdealDielectric.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealDielectric.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealDielectric.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_dielectric_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::IdealDielectric</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealReflector.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_reflector_8cpp.html</filename>
    <includes id="_ideal_reflector_8h" name="IdealReflector.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealReflector.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealReflector.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_reflector_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_fresnel_effect_8h" name="FresnelEffect.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/FresnelEffect.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::IdealReflector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealTransmitter.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_transmitter_8cpp.html</filename>
    <includes id="_ideal_transmitter_8h" name="IdealTransmitter.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/IdealTransmitter.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IdealTransmitter.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_ideal_transmitter_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::IdealTransmitter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LambertianDiffuse.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_lambertian_diffuse_8cpp.html</filename>
    <includes id="_lambertian_diffuse_8h" name="LambertianDiffuse.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LambertianDiffuse.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_t_hemisphere_8h" name="THemisphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/THemisphere.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LambertianDiffuse.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_lambertian_diffuse_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::LambertianDiffuse</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>conversions.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>conversions_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::lbconv</namespace>
  </compound>
  <compound kind="file">
    <name>InterfaceStatistics.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_interface_statistics_8cpp.html</filename>
    <includes id="_interface_statistics_8h" name="InterfaceStatistics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/InterfaceStatistics.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/conversions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>InterfaceStatistics.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_interface_statistics_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_lb_layer_8h" name="LbLayer.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/LbLayer.h</includes>
    <includes id="_table_f_g_d_8h" name="TableFGD.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/TableFGD.h</includes>
    <includes id="_table_t_i_r_8h" name="TableTIR.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/TableTIR.h</includes>
    <includes id="_core_resource_8h" name="CoreResource.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/CoreResource.h</includes>
    <class kind="class">ph::InterfaceStatistics</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LbLayer.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_lb_layer_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::LbLayer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LbLayeredSurface.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_lb_layered_surface_8cpp.html</filename>
    <includes id="_lb_layered_surface_8h" name="LbLayeredSurface.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/LbLayeredSurface.h</includes>
    <includes id="_bsdf_helper_8h" name="BsdfHelper.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfHelper.h</includes>
    <includes id="_interface_statistics_8h" name="InterfaceStatistics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/InterfaceStatistics.h</includes>
    <includes id="_lb_layer_8h" name="LbLayer.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/LbLayer.h</includes>
    <includes id="_iso_trowbridge_reitz_constant_8h" name="IsoTrowbridgeReitzConstant.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoTrowbridgeReitzConstant.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LbLayeredSurface.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_lb_layered_surface_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_lb_layer_8h" name="LbLayer.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/LbLayer.h</includes>
    <class kind="class">ph::LbLayeredSurface</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TableFGD.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_table_f_g_d_8cpp.html</filename>
    <includes id="_table_f_g_d_8h" name="TableFGD.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/TableFGD.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TableFGD.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_table_f_g_d_8h.html</filename>
    <includes id="_binary_file_reader_8h" name="BinaryFileReader.h" local="yes" import="no" module="no" objc="no">DataIO/BinaryFileReader.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::TableFGD</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TableTIR.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_table_t_i_r_8cpp.html</filename>
    <includes id="_table_t_i_r_8h" name="TableTIR.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/TableTIR.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TableTIR.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/LaurentBelcour/</path>
    <filename>_table_t_i_r_8h.html</filename>
    <includes id="_binary_file_reader_8h" name="BinaryFileReader.h" local="yes" import="no" module="no" objc="no">DataIO/BinaryFileReader.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::TableTIR</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LerpedSurfaceOptics.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_lerped_surface_optics_8cpp.html</filename>
    <includes id="_lerped_surface_optics_8h" name="LerpedSurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/LerpedSurfaceOptics.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LerpedSurfaceOptics.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_lerped_surface_optics_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="texture__fwd_8h" name="texture_fwd.h" local="yes" import="no" module="no" objc="no">Core/Texture/texture_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <class kind="class">ph::LerpedSurfaceOptics</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OpaqueMicrofacet.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_opaque_microfacet_8cpp.html</filename>
    <includes id="_opaque_microfacet_8h" name="OpaqueMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/OpaqueMicrofacet.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_iso_trowbridge_reitz_8h" name="IsoTrowbridgeReitz.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/IsoTrowbridgeReitz.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_bsdf_helper_8h" name="BsdfHelper.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfHelper.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OpaqueMicrofacet.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_opaque_microfacet_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_microfacet_8h" name="Microfacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/Microfacet.h</includes>
    <includes id="_conductor_fresnel_8h" name="ConductorFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ConductorFresnel.h</includes>
    <class kind="class">ph::OpaqueMicrofacet</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OrenNayar.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_oren_nayar_8cpp.html</filename>
    <includes id="_oren_nayar_8h" name="OrenNayar.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/OrenNayar.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_t_hemisphere_8h" name="THemisphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/THemisphere.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OrenNayar.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_oren_nayar_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::OrenNayar</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ThinDielectricFilm.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_thin_dielectric_film_8cpp.html</filename>
    <includes id="_thin_dielectric_film_8h" name="ThinDielectricFilm.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/ThinDielectricFilm.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_exact_dielectric_fresnel_8h" name="ExactDielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/ExactDielectricFresnel.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ThinDielectricFilm.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_thin_dielectric_film_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::ThinDielectricFilm</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TranslucentMicrofacet.cpp</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_translucent_microfacet_8cpp.html</filename>
    <includes id="_translucent_microfacet_8h" name="TranslucentMicrofacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics/TranslucentMicrofacet.h</includes>
    <includes id="_bsdf_eval_query_8h" name="BsdfEvalQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfEvalQuery.h</includes>
    <includes id="_bsdf_sample_query_8h" name="BsdfSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfSampleQuery.h</includes>
    <includes id="_bsdf_pdf_query_8h" name="BsdfPdfQuery.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfPdfQuery.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_bsdf_helper_8h" name="BsdfHelper.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/BsdfHelper.h</includes>
    <includes id="_sidedness_agreement_8h" name="SidednessAgreement.h" local="yes" import="no" module="no" objc="no">Core/LTA/SidednessAgreement.h</includes>
    <includes id="_sample_flow_8h" name="SampleFlow.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleFlow.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TranslucentMicrofacet.h</name>
    <path>Source/Core/SurfaceBehavior/SurfaceOptics/</path>
    <filename>_translucent_microfacet_8h.html</filename>
    <includes id="_surface_optics_8h" name="SurfaceOptics.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceOptics.h</includes>
    <includes id="_dielectric_fresnel_8h" name="DielectricFresnel.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/DielectricFresnel.h</includes>
    <includes id="_microfacet_8h" name="Microfacet.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/Property/Microfacet.h</includes>
    <class kind="class">ph::TranslucentMicrofacet</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceHit.cpp</name>
    <path>Source/Core/</path>
    <filename>_surface_hit_8cpp.html</filename>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceHit.h</name>
    <path>Source/Core/</path>
    <filename>_surface_hit_8h.html</filename>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_bit_flags_8h" name="TBitFlags.h" local="yes" import="no" module="no" objc="no">Utility/TBitFlags.h</includes>
    <class kind="class">ph::SurfaceHit</class>
    <namespace>ph</namespace>
    <namespace>ph::detail</namespace>
  </compound>
  <compound kind="file">
    <name>constant_textures.h</name>
    <path>Source/Core/Texture/</path>
    <filename>constant__textures_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <class kind="class">ph::TConstantTexture</class>
    <class kind="class">ph::TConstantTristimulusTexture</class>
    <class kind="class">ph::TConstantSpectralTexture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>binary_texture_operators.h</name>
    <path>Source/Core/Texture/Function/</path>
    <filename>binary__texture__operators_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::texfunc::TAdd</class>
    <class kind="class">ph::texfunc::TSubtract</class>
    <class kind="class">ph::texfunc::TMultiply</class>
    <class kind="class">ph::texfunc::TDivide</class>
    <class kind="class">ph::texfunc::TPower</class>
    <class kind="class">ph::TBinaryTextureOperator</class>
    <namespace>ph</namespace>
    <namespace>ph::texfunc</namespace>
    <concept>ph::texfunc::CBinaryOperator</concept>
  </compound>
  <compound kind="file">
    <name>ternary_texture_operators.h</name>
    <path>Source/Core/Texture/Function/</path>
    <filename>ternary__texture__operators_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::texfunc::TClamp</class>
    <class kind="class">ph::TTernaryTextureOperator</class>
    <namespace>ph</namespace>
    <namespace>ph::texfunc</namespace>
    <concept>ph::texfunc::CTernaryOperator</concept>
  </compound>
  <compound kind="file">
    <name>texture_parametrics.h</name>
    <path>Source/Core/Texture/Function/</path>
    <filename>texture__parametrics_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::texfunc</namespace>
  </compound>
  <compound kind="file">
    <name>unary_texture_operators.h</name>
    <path>Source/Core/Texture/Function/</path>
    <filename>unary__texture__operators_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="binary__texture__operators_8h" name="binary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/binary_texture_operators.h</includes>
    <includes id="ternary__texture__operators_8h" name="ternary_texture_operators.h" local="yes" import="no" module="no" objc="no">Core/Texture/Function/ternary_texture_operators.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::texfunc::TDefaultConversion</class>
    <class kind="class">ph::texfunc::TScalarToSpectrum</class>
    <class kind="class">ph::texfunc::TAbsolute</class>
    <class kind="class">ph::texfunc::TUnaryFromBinary</class>
    <class kind="class">ph::texfunc::TUnaryFromTernary</class>
    <class kind="class">ph::TUnaryTextureOperator</class>
    <namespace>ph</namespace>
    <namespace>ph::texfunc</namespace>
    <concept>ph::texfunc::CUnaryOperator</concept>
  </compound>
  <compound kind="file">
    <name>HdrRgbTexture2D.cpp</name>
    <path>Source/Core/Texture/</path>
    <filename>_hdr_rgb_texture2_d_8cpp.html</filename>
    <includes id="_hdr_rgb_texture2_d_8h" name="HdrRgbTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/HdrRgbTexture2D.h</includes>
    <includes id="_t_nearest_pixel_tex2_d_8h" name="TNearestPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TNearestPixelTex2D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HdrRgbTexture2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_hdr_rgb_texture2_d_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_abstract_pixel_tex2_d_8h" name="TAbstractPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TAbstractPixelTex2D.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::HdrRgbTexture2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LdrRgbTexture2D.cpp</name>
    <path>Source/Core/Texture/</path>
    <filename>_ldr_rgb_texture2_d_8cpp.html</filename>
    <includes id="_ldr_rgb_texture2_d_8h" name="LdrRgbTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/LdrRgbTexture2D.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_texture_loader_8h" name="TextureLoader.h" local="yes" import="no" module="no" objc="no">Core/Texture/TextureLoader.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="_t_nearest_pixel_tex2_d_8h" name="TNearestPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TNearestPixelTex2D.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>LdrRgbTexture2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_ldr_rgb_texture2_d_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_abstract_pixel_tex2_d_8h" name="TAbstractPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TAbstractPixelTex2D.h</includes>
    <class kind="class">ph::LdrRgbTexture2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>pixel_texture_basics.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>pixel__texture__basics_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::pixel_texture</namespace>
  </compound>
  <compound kind="file">
    <name>PixelBuffer2D.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_pixel_buffer2_d_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::pixel_buffer::TPixel</class>
    <class kind="class">ph::PixelBuffer2D</class>
    <namespace>ph</namespace>
    <namespace>ph::pixel_buffer</namespace>
  </compound>
  <compound kind="file">
    <name>TColorPixelTexture2D.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_t_color_pixel_texture2_d_8h.html</filename>
    <includes id="_t_pixel_texture2_d_8h" name="TPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TPixelTexture2D.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="pixel__texture__basics_8h" name="pixel_texture_basics.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/pixel_texture_basics.h</includes>
    <class kind="class">ph::TColorPixelTexture2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TFrameBuffer2D.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_t_frame_buffer2_d_8h.html</filename>
    <includes id="_pixel_buffer2_d_8h" name="PixelBuffer2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/PixelBuffer2D.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::TFrameBuffer2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TNumericPixelTexture2D.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_t_numeric_pixel_texture2_d_8h.html</filename>
    <includes id="_t_pixel_texture2_d_8h" name="TPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TPixelTexture2D.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <class kind="class">ph::TNumericPixelTexture2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPixelTexture2D.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_t_pixel_texture2_d_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="pixel__texture__basics_8h" name="pixel_texture_basics.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/pixel_texture_basics.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_pixel_buffer2_d_8h" name="PixelBuffer2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/PixelBuffer2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_pixel_texture2_d_8ipp" name="TPixelTexture2D.ipp" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TPixelTexture2D.ipp</includes>
    <class kind="class">ph::TPixelTexture2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPixelTexture2D.ipp</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_t_pixel_texture2_d_8ipp.html</filename>
    <includes id="_t_pixel_texture2_d_8h" name="TPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TPixelTexture2D.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TScalarPixelTexture2D.h</name>
    <path>Source/Core/Texture/Pixel/</path>
    <filename>_t_scalar_pixel_texture2_d_8h.html</filename>
    <includes id="_t_numeric_pixel_texture2_d_8h" name="TNumericPixelTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/TNumericPixelTexture2D.h</includes>
    <includes id="pixel__texture__basics_8h" name="pixel_texture_basics.h" local="yes" import="no" module="no" objc="no">Core/Texture/Pixel/pixel_texture_basics.h</includes>
    <class kind="class">ph::TScalarPixelTexture2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleLocation.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_sample_location_8h.html</filename>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <class kind="class">ph::SampleLocation</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PreethamTexture.cpp</name>
    <path>Source/Core/Texture/Sky/</path>
    <filename>_preetham_texture_8cpp.html</filename>
    <includes id="_preetham_texture_8h" name="PreethamTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/Sky/PreethamTexture.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_t_sphere_8h" name="TSphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PreethamTexture.h</name>
    <path>Source/Core/Texture/Sky/</path>
    <filename>_preetham_texture_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::PreethamTexture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TAbstractPixelTex2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_abstract_pixel_tex2_d_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="_t_tex_pixel_8h" name="TTexPixel.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexPixel.h</includes>
    <class kind="class">ph::TAbstractPixelTex2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TBilinearPixelTex2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_bilinear_pixel_tex2_d_8h.html</filename>
    <includes id="_t_pixel_tex2_d_8h" name="TPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TPixelTex2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::TBilinearPixelTex2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TCheckerboardTexture.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_checkerboard_texture_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_checkerboard_texture_8ipp" name="TCheckerboardTexture.ipp" local="yes" import="no" module="no" objc="no">Core/Texture/TCheckerboardTexture.ipp</includes>
    <class kind="class">ph::TCheckerboardTexture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TCheckerboardTexture.ipp</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_checkerboard_texture_8ipp.html</filename>
    <includes id="_t_checkerboard_texture_8h" name="TCheckerboardTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TCheckerboardTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>texture_fwd.h</name>
    <path>Source/Core/Texture/</path>
    <filename>texture__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TextureLoader.cpp</name>
    <path>Source/Core/Texture/</path>
    <filename>_texture_loader_8cpp.html</filename>
    <includes id="_texture_loader_8h" name="TextureLoader.h" local="yes" import="no" module="no" objc="no">Core/Texture/TextureLoader.h</includes>
    <includes id="_ldr_rgb_texture2_d_8h" name="LdrRgbTexture2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/LdrRgbTexture2D.h</includes>
    <includes id="lib__stb_8h" name="lib_stb.h" local="yes" import="no" module="no" objc="no">Common/ThirdParty/lib_stb.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TextureLoader.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_texture_loader_8h.html</filename>
    <class kind="class">ph::TextureLoader</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TLinearGradientTexture.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_linear_gradient_texture_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_linear_gradient_texture_8ipp" name="TLinearGradientTexture.ipp" local="yes" import="no" module="no" objc="no">Core/Texture/TLinearGradientTexture.ipp</includes>
    <class kind="class">ph::TLinearGradientTexture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TLinearGradientTexture.ipp</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_linear_gradient_texture_8ipp.html</filename>
    <includes id="_t_linear_gradient_texture_8h" name="TLinearGradientTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TLinearGradientTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TMipmap.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_mipmap_8h.html</filename>
    <includes id="_t_abstract_pixel_tex2_d_8h" name="TAbstractPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TAbstractPixelTex2D.h</includes>
    <class kind="class">ph::TMipmap</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TNearestPixelTex2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_nearest_pixel_tex2_d_8h.html</filename>
    <includes id="_t_pixel_tex2_d_8h" name="TPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TPixelTex2D.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::TNearestPixelTex2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TPixelTex2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_pixel_tex2_d_8h.html</filename>
    <includes id="_t_abstract_pixel_tex2_d_8h" name="TAbstractPixelTex2D.h" local="yes" import="no" module="no" objc="no">Core/Texture/TAbstractPixelTex2D.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <class kind="class">ph::TPixelTex2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSampler.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_sampler_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <class kind="class">ph::TSampler</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSwizzledTexture.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_swizzled_texture_8h.html</filename>
    <includes id="_t_texture_8h" name="TTexture.h" local="yes" import="no" module="no" objc="no">Core/Texture/TTexture.h</includes>
    <includes id="_sample_location_8h" name="SampleLocation.h" local="yes" import="no" module="no" objc="no">Core/Texture/SampleLocation.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <class kind="class">ph::TSwizzledTexture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TTexPixel.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_tex_pixel_8h.html</filename>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TTexture.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_texture_8h.html</filename>
    <includes id="texture__fwd_8h" name="texture_fwd.h" local="yes" import="no" module="no" objc="no">Core/Texture/texture_fwd.h</includes>
    <class kind="class">ph::TTexture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TTrilinearPixelTex2D.h</name>
    <path>Source/Core/Texture/</path>
    <filename>_t_trilinear_pixel_tex2_d_8h.html</filename>
    <includes id="_t_mipmap_8h" name="TMipmap.h" local="yes" import="no" module="no" objc="no">Core/Texture/TMipmap.h</includes>
    <class kind="class">ph::TTrilinearPixelTex2D</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BlockFunction.cpp</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_block_function_8cpp.html</filename>
    <includes id="_block_function_8h" name="BlockFunction.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/BlockFunction.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BlockFunction.h</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_block_function_8h.html</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::BlockFunction</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BfConstant.h</name>
    <path>Source/Core/VolumeBehavior/BlockFunction/</path>
    <filename>_bf_constant_8h.html</filename>
    <includes id="_block_function_8h" name="BlockFunction.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/BlockFunction.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::BfConstant</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EmitFunction.cpp</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_emit_function_8cpp.html</filename>
    <includes id="_emit_function_8h" name="EmitFunction.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/EmitFunction.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EmitFunction.h</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_emit_function_8h.html</filename>
    <class kind="class">ph::EmitFunction</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ScatterFunction.cpp</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_scatter_function_8cpp.html</filename>
    <includes id="_scatter_function_8h" name="ScatterFunction.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/ScatterFunction.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ScatterFunction.h</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_scatter_function_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <class kind="class">ph::ScatterFunction</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HenyeyGreenstein.cpp</name>
    <path>Source/Core/VolumeBehavior/ScatterFunction/</path>
    <filename>_henyey_greenstein_8cpp.html</filename>
    <includes id="_henyey_greenstein_8h" name="HenyeyGreenstein.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/ScatterFunction/HenyeyGreenstein.h</includes>
    <includes id="constant__textures_8h" name="constant_textures.h" local="yes" import="no" module="no" objc="no">Core/Texture/constant_textures.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <includes id="_t_sampler_8h" name="TSampler.h" local="yes" import="no" module="no" objc="no">Core/Texture/TSampler.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HenyeyGreenstein.h</name>
    <path>Source/Core/VolumeBehavior/ScatterFunction/</path>
    <filename>_henyey_greenstein_8h.html</filename>
    <includes id="_scatter_function_8h" name="ScatterFunction.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/ScatterFunction.h</includes>
    <includes id="texture__fwd_8h" name="texture_fwd.h" local="yes" import="no" module="no" objc="no">Core/Texture/texture_fwd.h</includes>
    <class kind="class">ph::HenyeyGreenstein</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VolumeBehavior.h</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_volume_behavior_8h.html</filename>
    <includes id="_volume_optics_8h" name="VolumeOptics.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeOptics.h</includes>
    <class kind="class">ph::VolumeBehavior</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VolumeDistanceSample.h</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_volume_distance_sample_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <includes id="_surface_hit_8h" name="SurfaceHit.h" local="yes" import="no" module="no" objc="no">Core/SurfaceHit.h</includes>
    <class kind="class">ph::VolumeDistanceSample</class>
    <class kind="class">ph::VolumeDistanceSample::Input</class>
    <class kind="class">ph::VolumeDistanceSample::Output</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VolumeOptics.cpp</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_volume_optics_8cpp.html</filename>
    <includes id="_volume_optics_8h" name="VolumeOptics.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeOptics.h</includes>
    <includes id="_volume_distance_sample_8h" name="VolumeDistanceSample.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeDistanceSample.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VolumeOptics.h</name>
    <path>Source/Core/VolumeBehavior/</path>
    <filename>_volume_optics_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::VolumeOptics</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VoHomoAbsorption.cpp</name>
    <path>Source/Core/VolumeBehavior/VolumeOptics/</path>
    <filename>_vo_homo_absorption_8cpp.html</filename>
    <includes id="_vo_homo_absorption_8h" name="VoHomoAbsorption.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeOptics/VoHomoAbsorption.h</includes>
    <includes id="_bf_constant_8h" name="BfConstant.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/BlockFunction/BfConstant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VoHomoAbsorption.h</name>
    <path>Source/Core/VolumeBehavior/VolumeOptics/</path>
    <filename>_vo_homo_absorption_8h.html</filename>
    <includes id="_volume_optics_8h" name="VolumeOptics.h" local="yes" import="no" module="no" objc="no">Core/VolumeBehavior/VolumeOptics.h</includes>
    <class kind="class">ph::VoHomoAbsorption</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryFileReader.cpp</name>
    <path>Source/DataIO/</path>
    <filename>_binary_file_reader_8cpp.html</filename>
    <includes id="_binary_file_reader_8h" name="BinaryFileReader.h" local="yes" import="no" module="no" objc="no">DataIO/BinaryFileReader.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryFileReader.h</name>
    <path>Source/DataIO/</path>
    <filename>_binary_file_reader_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::BinaryFileReader</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CsvFile.cpp</name>
    <path>Source/DataIO/Data/</path>
    <filename>_csv_file_8cpp.html</filename>
    <includes id="_csv_file_8h" name="CsvFile.h" local="yes" import="no" module="no" objc="no">DataIO/Data/CsvFile.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_formatted_text_input_stream_8h" name="FormattedTextInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/FormattedTextInputStream.h</includes>
    <includes id="_formatted_text_output_stream_8h" name="FormattedTextOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/FormattedTextOutputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CsvFile.h</name>
    <path>Source/DataIO/Data/</path>
    <filename>_csv_file_8h.html</filename>
    <class kind="class">ph::CsvFileRow</class>
    <class kind="class">ph::CsvFile</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IesData.cpp</name>
    <path>Source/DataIO/Data/</path>
    <filename>_ies_data_8cpp.html</filename>
    <includes id="_ies_data_8h" name="IesData.h" local="yes" import="no" module="no" objc="no">DataIO/Data/IesData.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IesData.h</name>
    <path>Source/DataIO/Data/</path>
    <filename>_ies_data_8h.html</filename>
    <includes id="_ies_file_8h" name="IesFile.h" local="yes" import="no" module="no" objc="no">DataIO/Data/IesFile.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::IesData</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IesFile.cpp</name>
    <path>Source/DataIO/Data/</path>
    <filename>_ies_file_8cpp.html</filename>
    <includes id="_ies_file_8h" name="IesFile.h" local="yes" import="no" module="no" objc="no">DataIO/Data/IesFile.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IesFile.h</name>
    <path>Source/DataIO/Data/</path>
    <filename>_ies_file_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::IesFile</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EPictureFile.cpp</name>
    <path>Source/DataIO/</path>
    <filename>_e_picture_file_8cpp.html</filename>
    <includes id="_e_picture_file_8h" name="EPictureFile.h" local="yes" import="no" module="no" objc="no">DataIO/EPictureFile.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EPictureFile.h</name>
    <path>Source/DataIO/</path>
    <filename>_e_picture_file_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>exr_io_common.cpp</name>
    <path>Source/DataIO/EXR/</path>
    <filename>exr__io__common_8cpp.html</filename>
    <includes id="exr__io__common_8h" name="exr_io_common.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/exr_io_common.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_byte_buffer_8h" name="ByteBuffer.h" local="yes" import="no" module="no" objc="no">Utility/ByteBuffer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>exr_io_common.h</name>
    <path>Source/DataIO/EXR/</path>
    <filename>exr__io__common_8h.html</filename>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="lib__openexr_8h" name="lib_openexr.h" local="yes" import="no" module="no" objc="no">Common/ThirdParty/lib_openexr.h</includes>
    <includes id="exr__io__common_8ipp" name="exr_io_common.ipp" local="yes" import="no" module="no" objc="no">DataIO/EXR/exr_io_common.ipp</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>exr_io_common.ipp</name>
    <path>Source/DataIO/EXR/</path>
    <filename>exr__io__common_8ipp.html</filename>
    <includes id="exr__io__common_8h" name="exr_io_common.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/exr_io_common.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExrFileReader.cpp</name>
    <path>Source/DataIO/EXR/</path>
    <filename>_exr_file_reader_8cpp.html</filename>
    <includes id="_exr_file_reader_8h" name="ExrFileReader.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/ExrFileReader.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="exr__io__common_8h" name="exr_io_common.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/exr_io_common.h</includes>
    <includes id="lib__openexr_8h" name="lib_openexr.h" local="yes" import="no" module="no" objc="no">Common/ThirdParty/lib_openexr.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExrFileReader.h</name>
    <path>Source/DataIO/EXR/</path>
    <filename>_exr_file_reader_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <class kind="class">ph::ExrFileReader</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExrFileWriter.cpp</name>
    <path>Source/DataIO/EXR/</path>
    <filename>_exr_file_writer_8cpp.html</filename>
    <includes id="_exr_file_writer_8h" name="ExrFileWriter.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/ExrFileWriter.h</includes>
    <includes id="exr__io__common_8h" name="exr_io_common.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/exr_io_common.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_byte_buffer_8h" name="ByteBuffer.h" local="yes" import="no" module="no" objc="no">Utility/ByteBuffer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ExrFileWriter.h</name>
    <path>Source/DataIO/EXR/</path>
    <filename>_exr_file_writer_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <class kind="class">ph::ExrFileWriter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>AltPath.h</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_alt_path_8h.html</filename>
    <class kind="class">ph::AltPath</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CoreResource.cpp</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_core_resource_8cpp.html</filename>
    <includes id="_core_resource_8h" name="CoreResource.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/CoreResource.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CoreResource.h</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_core_resource_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::CoreResource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Filesystem.cpp</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_filesystem_8cpp.html</filename>
    <includes id="_filesystem_8h" name="Filesystem.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Filesystem.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Filesystem.h</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_filesystem_8h.html</filename>
    <class kind="class">ph::Filesystem</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IResourceIdentifierResolver.cpp</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_i_resource_identifier_resolver_8cpp.html</filename>
    <includes id="_i_resource_identifier_resolver_8h" name="IResourceIdentifierResolver.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/IResourceIdentifierResolver.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IResourceIdentifierResolver.h</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_i_resource_identifier_resolver_8h.html</filename>
    <class kind="class">ph::IResourceIdentifierResolver</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Path.cpp</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_path_8cpp.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Path.h</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_path_8h.html</filename>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_alt_path_8h" name="AltPath.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/AltPath.h</includes>
    <namespace>ph</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PH_USE_ALTERNATIVE_PATH_IMPL</name>
      <anchorfile>_path_8h.html</anchorfile>
      <anchor>a5939549a7f38df9d131df2fbbc88610e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ResourceIdentifier.cpp</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_resource_identifier_8cpp.html</filename>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="_i_resource_identifier_resolver_8h" name="IResourceIdentifierResolver.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/IResourceIdentifierResolver.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceIdentifier.h</name>
    <path>Source/DataIO/FileSystem/</path>
    <filename>_resource_identifier_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::ResourceIdentifier</class>
    <namespace>ph</namespace>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_TO_STRING_FORMATTER</name>
      <anchorfile>_resource_identifier_8h.html</anchorfile>
      <anchor>a7da21862ab2211de1009ae6636d9dd10</anchor>
      <arglist>(ph::ResourceIdentifier)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io_utils.cpp</name>
    <path>Source/DataIO/</path>
    <filename>io__utils_8cpp.html</filename>
    <includes id="io__utils_8h" name="io_utils.h" local="yes" import="no" module="no" objc="no">DataIO/io_utils.h</includes>
    <includes id="_exr_file_reader_8h" name="ExrFileReader.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/ExrFileReader.h</includes>
    <includes id="_exr_file_writer_8h" name="ExrFileWriter.h" local="yes" import="no" module="no" objc="no">DataIO/EXR/ExrFileWriter.h</includes>
    <includes id="frame__utils_8h" name="frame_utils.h" local="yes" import="no" module="no" objc="no">Frame/frame_utils.h</includes>
    <includes id="_regular_picture_8h" name="RegularPicture.h" local="yes" import="no" module="no" objc="no">Frame/RegularPicture.h</includes>
    <includes id="_picture_meta_8h" name="PictureMeta.h" local="yes" import="no" module="no" objc="no">Frame/PictureMeta.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_pfm_file_8h" name="PfmFile.h" local="yes" import="no" module="no" objc="no">DataIO/PfmFile.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="sdl__picture__file__type_8h" name="sdl_picture_file_type.h" local="yes" import="no" module="no" objc="no">DataIO/sdl_picture_file_type.h</includes>
    <includes id="_byte_buffer_8h" name="ByteBuffer.h" local="yes" import="no" module="no" objc="no">Utility/ByteBuffer.h</includes>
    <includes id="lib__stb_8h" name="lib_stb.h" local="yes" import="no" module="no" objc="no">Common/ThirdParty/lib_stb.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::io_utils</namespace>
    <namespace>ph::io_utils::detail</namespace>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af6b9201cabac0ca79886015e6844f0ad</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_LDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1978bc25913af8602657119f6c2a3dd9</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_HDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>acaaa62539992a1e1f8ac5af21f4223c6</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af6b9201cabac0ca79886015e6844f0ad</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_LDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1978bc25913af8602657119f6c2a3dd9</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_HDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>acaaa62539992a1e1f8ac5af21f4223c6</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io_utils.h</name>
    <path>Source/DataIO/</path>
    <filename>io__utils_8h.html</filename>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_e_picture_file_8h" name="EPictureFile.h" local="yes" import="no" module="no" objc="no">DataIO/EPictureFile.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::io_utils</namespace>
    <namespace>ph::io_utils::detail</namespace>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af6b9201cabac0ca79886015e6844f0ad</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_LDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1978bc25913af8602657119f6c2a3dd9</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_HDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>acaaa62539992a1e1f8ac5af21f4223c6</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af6b9201cabac0ca79886015e6844f0ad</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_LDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1978bc25913af8602657119f6c2a3dd9</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_HDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>acaaa62539992a1e1f8ac5af21f4223c6</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PfmFile.cpp</name>
    <path>Source/DataIO/</path>
    <filename>_pfm_file_8cpp.html</filename>
    <includes id="_pfm_file_8h" name="PfmFile.h" local="yes" import="no" module="no" objc="no">DataIO/PfmFile.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_binary_file_input_stream_8h" name="BinaryFileInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/BinaryFileInputStream.h</includes>
    <includes id="_binary_file_output_stream_8h" name="BinaryFileOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/BinaryFileOutputStream.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PfmFile.h</name>
    <path>Source/DataIO/</path>
    <filename>_pfm_file_8h.html</filename>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <class kind="class">ph::PfmFile</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PlyFile.cpp</name>
    <path>Source/DataIO/</path>
    <filename>_ply_file_8cpp.html</filename>
    <includes id="_ply_file_8h" name="PlyFile.h" local="yes" import="no" module="no" objc="no">DataIO/PlyFile.h</includes>
    <includes id="_binary_file_input_stream_8h" name="BinaryFileInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/BinaryFileInputStream.h</includes>
    <includes id="_byte_buffer_input_stream_8h" name="ByteBufferInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/ByteBufferInputStream.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PlyFile.h</name>
    <path>Source/DataIO/</path>
    <filename>_ply_file_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_semantic_version_8h" name="SemanticVersion.h" local="yes" import="no" module="no" objc="no">Utility/SemanticVersion.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <class kind="struct">ph::PlyIOConfig</class>
    <class kind="struct">ph::PlyProperty</class>
    <class kind="struct">ph::PlyElement</class>
    <class kind="class">ph::PlyPropertyValues</class>
    <class kind="class">ph::PlyPropertyListValues</class>
    <class kind="class">ph::PlyFile</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_picture_file_type.h</name>
    <path>Source/DataIO/</path>
    <filename>sdl__picture__file__type_8h.html</filename>
    <includes id="_e_picture_file_8h" name="EPictureFile.h" local="yes" import="no" module="no" objc="no">DataIO/EPictureFile.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryFileInputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_binary_file_input_stream_8cpp.html</filename>
    <includes id="_binary_file_input_stream_8h" name="BinaryFileInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/BinaryFileInputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryFileInputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_binary_file_input_stream_8h.html</filename>
    <includes id="_std_input_stream_8h" name="StdInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/StdInputStream.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::BinaryFileInputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryFileOutputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_binary_file_output_stream_8cpp.html</filename>
    <includes id="_binary_file_output_stream_8h" name="BinaryFileOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/BinaryFileOutputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryFileOutputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_binary_file_output_stream_8h.html</filename>
    <includes id="_std_output_stream_8h" name="StdOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/StdOutputStream.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::BinaryFileOutputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ByteBufferInputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_byte_buffer_input_stream_8cpp.html</filename>
    <includes id="_byte_buffer_input_stream_8h" name="ByteBufferInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/ByteBufferInputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ByteBufferInputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_byte_buffer_input_stream_8h.html</filename>
    <includes id="_i_input_stream_8h" name="IInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/IInputStream.h</includes>
    <class kind="class">ph::ByteBufferInputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FilteredInputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_filtered_input_stream_8h.html</filename>
    <includes id="_i_input_stream_8h" name="IInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/IInputStream.h</includes>
    <class kind="class">ph::FilteredInputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FormattedTextInputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_formatted_text_input_stream_8cpp.html</filename>
    <includes id="_formatted_text_input_stream_8h" name="FormattedTextInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/FormattedTextInputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FormattedTextInputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_formatted_text_input_stream_8h.html</filename>
    <includes id="_std_input_stream_8h" name="StdInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/StdInputStream.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::FormattedTextInputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FormattedTextOutputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_formatted_text_output_stream_8cpp.html</filename>
    <includes id="_formatted_text_output_stream_8h" name="FormattedTextOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/FormattedTextOutputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FormattedTextOutputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_formatted_text_output_stream_8h.html</filename>
    <includes id="_std_output_stream_8h" name="StdOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/StdOutputStream.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::FormattedTextOutputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IDataStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_i_data_stream_8h.html</filename>
    <class kind="class">ph::IDataStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IInputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_i_input_stream_8h.html</filename>
    <includes id="_i_data_stream_8h" name="IDataStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/IDataStream.h</includes>
    <class kind="class">ph::IInputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IOutputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_i_output_stream_8h.html</filename>
    <includes id="_i_data_stream_8h" name="IDataStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/IDataStream.h</includes>
    <class kind="class">ph::IOutputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StdInputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_std_input_stream_8cpp.html</filename>
    <includes id="_std_input_stream_8h" name="StdInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/StdInputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StdInputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_std_input_stream_8h.html</filename>
    <includes id="_i_input_stream_8h" name="IInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/IInputStream.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::StdInputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StdOutputStream.cpp</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_std_output_stream_8cpp.html</filename>
    <includes id="_std_output_stream_8h" name="StdOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/StdOutputStream.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StdOutputStream.h</name>
    <path>Source/DataIO/Stream/</path>
    <filename>_std_output_stream_8h.html</filename>
    <includes id="_i_output_stream_8h" name="IOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/IOutputStream.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::StdOutputStream</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TextFileLoader.cpp</name>
    <path>Source/DataIO/</path>
    <filename>_text_file_loader_8cpp.html</filename>
    <includes id="_text_file_loader_8h" name="TextFileLoader.h" local="yes" import="no" module="no" objc="no">DataIO/TextFileLoader.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TextFileLoader.h</name>
    <path>Source/DataIO/</path>
    <filename>_text_file_loader_8h.html</filename>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::TextFileLoader</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CoreCookedUnit.cpp</name>
    <path>Source/EngineEnv/</path>
    <filename>_core_cooked_unit_8cpp.html</filename>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_renderer_8h" name="Renderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Renderer.h</includes>
    <includes id="_receiver_8h" name="Receiver.h" local="yes" import="no" module="no" objc="no">Core/Receiver/Receiver.h</includes>
    <includes id="_sample_generator_8h" name="SampleGenerator.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SampleGenerator.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CoreCookedUnit.h</name>
    <path>Source/EngineEnv/</path>
    <filename>_core_cooked_unit_8h.html</filename>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <class kind="class">ph::CoreCookedUnit</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CoreCookingContext.h</name>
    <path>Source/EngineEnv/</path>
    <filename>_core_cooking_context_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_e_accelerator_8h" name="EAccelerator.h" local="yes" import="no" module="no" objc="no">EngineEnv/EAccelerator.h</includes>
    <class kind="class">ph::CoreCookingContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CoreSdlResource.h</name>
    <path>Source/EngineEnv/</path>
    <filename>_core_sdl_resource_8h.html</filename>
    <includes id="_sdl_resource_base_8h" name="SdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceBase.h</includes>
    <class kind="class">ph::CoreSdlResource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>EAccelerator.h</name>
    <path>Source/EngineEnv/</path>
    <filename>_e_accelerator_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Observer.h</name>
    <path>Source/EngineEnv/Observer/</path>
    <filename>_observer_8h.html</filename>
    <includes id="_core_sdl_resource_8h" name="CoreSdlResource.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreSdlResource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Observer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OrientedRasterObserver.cpp</name>
    <path>Source/EngineEnv/Observer/</path>
    <filename>_oriented_raster_observer_8cpp.html</filename>
    <includes id="_oriented_raster_observer_8h" name="OrientedRasterObserver.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/OrientedRasterObserver.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_matrix4_8h" name="TMatrix4.h" local="yes" import="no" module="no" objc="no">Math/TMatrix4.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>OrientedRasterObserver.h</name>
    <path>Source/EngineEnv/Observer/</path>
    <filename>_oriented_raster_observer_8h.html</filename>
    <includes id="_observer_8h" name="Observer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/Observer.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <class kind="class">ph::OrientedRasterObserver</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SingleLensObserver.cpp</name>
    <path>Source/EngineEnv/Observer/</path>
    <filename>_single_lens_observer_8cpp.html</filename>
    <includes id="_single_lens_observer_8h" name="SingleLensObserver.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/SingleLensObserver.h</includes>
    <includes id="_pinhole_camera_8h" name="PinholeCamera.h" local="yes" import="no" module="no" objc="no">Core/Receiver/PinholeCamera.h</includes>
    <includes id="_thin_lens_camera_8h" name="ThinLensCamera.h" local="yes" import="no" module="no" objc="no">Core/Receiver/ThinLensCamera.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SingleLensObserver.h</name>
    <path>Source/EngineEnv/Observer/</path>
    <filename>_single_lens_observer_8h.html</filename>
    <includes id="_oriented_raster_observer_8h" name="OrientedRasterObserver.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/OrientedRasterObserver.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::SingleLensObserver</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HaltonSampleSource.cpp</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_halton_sample_source_8cpp.html</filename>
    <includes id="_halton_sample_source_8h" name="HaltonSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/HaltonSampleSource.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_s_g_halton_8h" name="SGHalton.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGHalton.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HaltonSampleSource.h</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_halton_sample_source_8h.html</filename>
    <includes id="_runtime_sample_source_8h" name="RuntimeSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/RuntimeSampleSource.h</includes>
    <includes id="sdl__halton__randomization__types_8h" name="sdl_halton_randomization_types.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/sdl_halton_randomization_types.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::HaltonSampleSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeSampleSource.h</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_runtime_sample_source_8h.html</filename>
    <includes id="_sample_source_8h" name="SampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/SampleSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::RuntimeSampleSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SampleSource.h</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_sample_source_8h.html</filename>
    <includes id="_core_sdl_resource_8h" name="CoreSdlResource.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreSdlResource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::SampleSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_halton_randomization_types.h</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>sdl__halton__randomization__types_8h.html</filename>
    <includes id="halton__randomization__enums_8h" name="halton_randomization_enums.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/Halton/halton_randomization_enums.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StratifiedSampleSource.cpp</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_stratified_sample_source_8cpp.html</filename>
    <includes id="_stratified_sample_source_8h" name="StratifiedSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/StratifiedSampleSource.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_s_g_stratified_8h" name="SGStratified.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGStratified.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>StratifiedSampleSource.h</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_stratified_sample_source_8h.html</filename>
    <includes id="_runtime_sample_source_8h" name="RuntimeSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/RuntimeSampleSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::StratifiedSampleSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>UniformRandomSampleSource.cpp</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_uniform_random_sample_source_8cpp.html</filename>
    <includes id="_uniform_random_sample_source_8h" name="UniformRandomSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/UniformRandomSampleSource.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_s_g_uniform_random_8h" name="SGUniformRandom.h" local="yes" import="no" module="no" objc="no">Core/SampleGenerator/SGUniformRandom.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>UniformRandomSampleSource.h</name>
    <path>Source/EngineEnv/SampleSource/</path>
    <filename>_uniform_random_sample_source_8h.html</filename>
    <includes id="_runtime_sample_source_8h" name="RuntimeSampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/RuntimeSampleSource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::UniformRandomSampleSource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_accelerator_type.h</name>
    <path>Source/EngineEnv/</path>
    <filename>sdl__accelerator__type_8h.html</filename>
    <includes id="_e_accelerator_8h" name="EAccelerator.h" local="yes" import="no" module="no" objc="no">EngineEnv/EAccelerator.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderSession.cpp</name>
    <path>Source/EngineEnv/Session/</path>
    <filename>_render_session_8cpp.html</filename>
    <includes id="_render_session_8h" name="RenderSession.h" local="yes" import="no" module="no" objc="no">EngineEnv/Session/RenderSession.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RenderSession.h</name>
    <path>Source/EngineEnv/Session/</path>
    <filename>_render_session_8h.html</filename>
    <includes id="_option_8h" name="Option.h" local="yes" import="no" module="no" objc="no">SDL/Option.h</includes>
    <includes id="_core_sdl_resource_8h" name="CoreSdlResource.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreSdlResource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::RenderSession</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SingleFrameRenderSession.cpp</name>
    <path>Source/EngineEnv/Session/</path>
    <filename>_single_frame_render_session_8cpp.html</filename>
    <includes id="_single_frame_render_session_8h" name="SingleFrameRenderSession.h" local="yes" import="no" module="no" objc="no">EngineEnv/Session/SingleFrameRenderSession.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_observer_8h" name="Observer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Observer/Observer.h</includes>
    <includes id="_sample_source_8h" name="SampleSource.h" local="yes" import="no" module="no" objc="no">EngineEnv/SampleSource/SampleSource.h</includes>
    <includes id="_visualizer_8h" name="Visualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/Visualizer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SingleFrameRenderSession.h</name>
    <path>Source/EngineEnv/Session/</path>
    <filename>_single_frame_render_session_8h.html</filename>
    <includes id="_render_session_8h" name="RenderSession.h" local="yes" import="no" module="no" objc="no">EngineEnv/Session/RenderSession.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="sdl__accelerator__type_8h" name="sdl_accelerator_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/sdl_accelerator_type.h</includes>
    <class kind="class">ph::SingleFrameRenderSession</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FrameVisualizer.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>_frame_visualizer_8h.html</filename>
    <includes id="_visualizer_8h" name="Visualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/Visualizer.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::FrameVisualizer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PathTracingVisualizer.cpp</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>_path_tracing_visualizer_8cpp.html</filename>
    <includes id="_path_tracing_visualizer_8h" name="PathTracingVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/PathTracingVisualizer.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_b_v_p_t_estimator_8h" name="BVPTEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BVPTEstimator.h</includes>
    <includes id="_b_n_e_e_p_t_estimator_8h" name="BNEEPTEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BNEEPTEstimator.h</includes>
    <includes id="_b_v_p_t_d_l_estimator_8h" name="BVPTDLEstimator.h" local="yes" import="no" module="no" objc="no">Core/Estimator/BVPTDLEstimator.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_equal_sampling_renderer_8h" name="EqualSamplingRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/Sampling/EqualSamplingRenderer.h</includes>
    <includes id="_viewport_8h" name="Viewport.h" local="yes" import="no" module="no" objc="no">Frame/Viewport.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PathTracingVisualizer.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>_path_tracing_visualizer_8h.html</filename>
    <includes id="_frame_visualizer_8h" name="FrameVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/FrameVisualizer.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="sdl__scheduler__type_8h" name="sdl_scheduler_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_scheduler_type.h</includes>
    <includes id="sdl__ray__energy__estimator__type_8h" name="sdl_ray_energy_estimator_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_ray_energy_estimator_type.h</includes>
    <includes id="sdl__sample__filter__type_8h" name="sdl_sample_filter_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_sample_filter_type.h</includes>
    <class kind="class">ph::PathTracingVisualizer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PhotonMappingVisualizer.cpp</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>_photon_mapping_visualizer_8cpp.html</filename>
    <includes id="_photon_mapping_visualizer_8h" name="PhotonMappingVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/PhotonMappingVisualizer.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_sample_filter_8h" name="SampleFilter.h" local="yes" import="no" module="no" objc="no">Core/Filmic/SampleFilter.h</includes>
    <includes id="_viewport_8h" name="Viewport.h" local="yes" import="no" module="no" objc="no">Frame/Viewport.h</includes>
    <includes id="_vanilla_p_m_renderer_8h" name="VanillaPMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/VanillaPMRenderer.h</includes>
    <includes id="_progressive_p_m_renderer_8h" name="ProgressivePMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/ProgressivePMRenderer.h</includes>
    <includes id="_stochastic_progressive_p_m_renderer_8h" name="StochasticProgressivePMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/StochasticProgressivePMRenderer.h</includes>
    <includes id="_probabilistic_progressive_p_m_renderer_8h" name="ProbabilisticProgressivePMRenderer.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/ProbabilisticProgressivePMRenderer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PhotonMappingVisualizer.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>_photon_mapping_visualizer_8h.html</filename>
    <includes id="_frame_visualizer_8h" name="FrameVisualizer.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/FrameVisualizer.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <includes id="sdl__photon__mapping__mode_8h" name="sdl_photon_mapping_mode.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_photon_mapping_mode.h</includes>
    <includes id="sdl__sample__filter__type_8h" name="sdl_sample_filter_type.h" local="yes" import="no" module="no" objc="no">EngineEnv/Visualizer/sdl_sample_filter_type.h</includes>
    <includes id="_p_m_common_params_8h" name="PMCommonParams.h" local="yes" import="no" module="no" objc="no">Core/Renderer/PM/PMCommonParams.h</includes>
    <class kind="class">ph::PhotonMappingVisualizer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_photon_mapping_mode.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>sdl__photon__mapping__mode_8h.html</filename>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_ray_energy_estimator_type.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>sdl__ray__energy__estimator__type_8h.html</filename>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_sample_filter_type.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>sdl__sample__filter__type_8h.html</filename>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_scheduler_type.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>sdl__scheduler__type_8h.html</filename>
    <includes id="_e_scheduler_8h" name="EScheduler.h" local="yes" import="no" module="no" objc="no">Core/Scheduler/EScheduler.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Visualizer.h</name>
    <path>Source/EngineEnv/Visualizer/</path>
    <filename>_visualizer_8h.html</filename>
    <includes id="_core_sdl_resource_8h" name="CoreSdlResource.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreSdlResource.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Visualizer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>_mipmap_gen.cpp</name>
    <path>Source/Frame/</path>
    <filename>__mipmap__gen_8cpp.html</filename>
    <includes id="__mipmap__gen_8h" name="_mipmap_gen.h" local="yes" import="no" module="no" objc="no">Frame/_mipmap_gen.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>_mipmap_gen.h</name>
    <path>Source/Frame/</path>
    <filename>__mipmap__gen_8h.html</filename>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <includes id="_t_constant2_d_8h" name="TConstant2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TConstant2D.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::mipmapgen</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Frame.dox</name>
    <path>Source/Frame/</path>
    <filename>_frame_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>frame_fwd.h</name>
    <path>Source/Frame/</path>
    <filename>frame__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>frame_utils.cpp</name>
    <path>Source/Frame/</path>
    <filename>frame__utils_8cpp.html</filename>
    <includes id="frame__utils_8h" name="frame_utils.h" local="yes" import="no" module="no" objc="no">Frame/frame_utils.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::frame_utils</namespace>
  </compound>
  <compound kind="file">
    <name>frame_utils.h</name>
    <path>Source/Frame/</path>
    <filename>frame__utils_8h.html</filename>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::frame_utils</namespace>
  </compound>
  <compound kind="file">
    <name>FrameProcessingPipeline.cpp</name>
    <path>Source/Frame/</path>
    <filename>_frame_processing_pipeline_8cpp.html</filename>
    <includes id="_frame_processing_pipeline_8h" name="FrameProcessingPipeline.h" local="yes" import="no" module="no" objc="no">Frame/FrameProcessingPipeline.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FrameProcessingPipeline.h</name>
    <path>Source/Frame/</path>
    <filename>_frame_processing_pipeline_8h.html</filename>
    <includes id="_frame_operator_8h" name="FrameOperator.h" local="yes" import="no" module="no" objc="no">Frame/Operator/FrameOperator.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <class kind="class">ph::FrameProcessingPipeline</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FrameProcessor.cpp</name>
    <path>Source/Frame/</path>
    <filename>_frame_processor_8cpp.html</filename>
    <includes id="_frame_processor_8h" name="FrameProcessor.h" local="yes" import="no" module="no" objc="no">Frame/FrameProcessor.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FrameProcessor.h</name>
    <path>Source/Frame/</path>
    <filename>_frame_processor_8h.html</filename>
    <includes id="_frame_processing_pipeline_8h" name="FrameProcessingPipeline.h" local="yes" import="no" module="no" objc="no">Frame/FrameProcessingPipeline.h</includes>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <class kind="class">ph::FrameProcessor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HdrOperator.cpp</name>
    <path>Source/Frame/HdrOperator/</path>
    <filename>_hdr_operator_8cpp.html</filename>
    <includes id="_hdr_operator_8h" name="HdrOperator.h" local="yes" import="no" module="no" objc="no">Frame/HdrOperator/HdrOperator.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>HdrOperator.h</name>
    <path>Source/Frame/HdrOperator/</path>
    <filename>_hdr_operator_8h.html</filename>
    <class kind="class">ph::HdrOperator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FrameOperator.h</name>
    <path>Source/Frame/Operator/</path>
    <filename>_frame_operator_8h.html</filename>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <class kind="class">ph::FrameOperator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>GammaCorrection.h</name>
    <path>Source/Frame/Operator/</path>
    <filename>_gamma_correction_8h.html</filename>
    <includes id="_frame_operator_8h" name="FrameOperator.h" local="yes" import="no" module="no" objc="no">Frame/Operator/FrameOperator.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::GammaCorrection</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>JRToneMapping.cpp</name>
    <path>Source/Frame/Operator/</path>
    <filename>_j_r_tone_mapping_8cpp.html</filename>
    <includes id="_j_r_tone_mapping_8h" name="JRToneMapping.h" local="yes" import="no" module="no" objc="no">Frame/Operator/JRToneMapping.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>JRToneMapping.h</name>
    <path>Source/Frame/Operator/</path>
    <filename>_j_r_tone_mapping_8h.html</filename>
    <includes id="_frame_operator_8h" name="FrameOperator.h" local="yes" import="no" module="no" objc="no">Frame/Operator/FrameOperator.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <class kind="class">ph::JRToneMapping</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>NaiveReinhardToneMapping.h</name>
    <path>Source/Frame/Operator/</path>
    <filename>_naive_reinhard_tone_mapping_8h.html</filename>
    <includes id="_frame_operator_8h" name="FrameOperator.h" local="yes" import="no" module="no" objc="no">Frame/Operator/FrameOperator.h</includes>
    <class kind="class">ph::NaiveReinhardToneMapping</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>picture_basics.h</name>
    <path>Source/Frame/</path>
    <filename>picture__basics_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PictureData.h</name>
    <path>Source/Frame/</path>
    <filename>_picture_data_8h.html</filename>
    <includes id="picture__basics_8h" name="picture_basics.h" local="yes" import="no" module="no" objc="no">Frame/picture_basics.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_picture_data_8ipp" name="PictureData.ipp" local="yes" import="no" module="no" objc="no">Frame/PictureData.ipp</includes>
    <class kind="class">ph::PictureData</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PictureData.ipp</name>
    <path>Source/Frame/</path>
    <filename>_picture_data_8ipp.html</filename>
    <includes id="_picture_data_8h" name="PictureData.h" local="yes" import="no" module="no" objc="no">Frame/PictureData.h</includes>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PictureMeta.h</name>
    <path>Source/Frame/</path>
    <filename>_picture_meta_8h.html</filename>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::PictureMeta</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RegularPicture.cpp</name>
    <path>Source/Frame/</path>
    <filename>_regular_picture_8cpp.html</filename>
    <includes id="_regular_picture_8h" name="RegularPicture.h" local="yes" import="no" module="no" objc="no">Frame/RegularPicture.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RegularPicture.h</name>
    <path>Source/Frame/</path>
    <filename>_regular_picture_8h.html</filename>
    <includes id="picture__basics_8h" name="picture_basics.h" local="yes" import="no" module="no" objc="no">Frame/picture_basics.h</includes>
    <includes id="_picture_data_8h" name="PictureData.h" local="yes" import="no" module="no" objc="no">Frame/PictureData.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::RegularPictureFormat</class>
    <class kind="class">ph::RegularPicture</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TFrame.h</name>
    <path>Source/Frame/</path>
    <filename>_t_frame_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="frame__fwd_8h" name="frame_fwd.h" local="yes" import="no" module="no" objc="no">Frame/frame_fwd.h</includes>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <includes id="texture__fwd_8h" name="texture_fwd.h" local="yes" import="no" module="no" objc="no">Core/Texture/texture_fwd.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_t_frame_8ipp" name="TFrame.ipp" local="yes" import="no" module="no" objc="no">Frame/TFrame.ipp</includes>
    <class kind="class">ph::TFrame</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TFrame.ipp</name>
    <path>Source/Frame/</path>
    <filename>_t_frame_8ipp.html</filename>
    <includes id="_t_frame_8h" name="TFrame.h" local="yes" import="no" module="no" objc="no">Frame/TFrame.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::frame_detail</namespace>
    <concept>ph::frame_detail::CIsGetPixelOp</concept>
    <concept>ph::frame_detail::CIsGetPixelWithCoordsOp</concept>
    <concept>ph::frame_detail::CIsSetPixelOp</concept>
    <concept>ph::frame_detail::CIsSetPixelWithCoordsOp</concept>
    <concept>ph::frame_detail::CIsGetAndSetPixelOp</concept>
    <concept>ph::frame_detail::CIsGetAndSetPixelWithCoordsOp</concept>
  </compound>
  <compound kind="file">
    <name>ToneMapper.cpp</name>
    <path>Source/Frame/ToneMapper/</path>
    <filename>_tone_mapper_8cpp.html</filename>
    <includes id="_tone_mapper_8h" name="ToneMapper.h" local="yes" import="no" module="no" objc="no">Frame/ToneMapper/ToneMapper.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ToneMapper.h</name>
    <path>Source/Frame/ToneMapper/</path>
    <filename>_tone_mapper_8h.html</filename>
    <class kind="class">ph::ToneMapper</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Viewport.h</name>
    <path>Source/Frame/</path>
    <filename>_viewport_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <class kind="class">ph::Viewport</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IndexedKdtreeParams.h</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_indexed_kdtree_params_8h.html</filename>
    <class kind="class">ph::math::IndexedKdtreeParams</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedItemEndpoint.h</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_t_indexed_item_endpoint_8h.html</filename>
    <class kind="struct">ph::math::TIndexedItemEndpoint</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedKdtree.h</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_t_indexed_kdtree_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_t_indexed_kdtree_node_8h" name="TIndexedKdtreeNode.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtreeNode.h</includes>
    <includes id="_t_indexed_item_endpoint_8h" name="TIndexedItemEndpoint.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedItemEndpoint.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <includes id="_indexed_kdtree_params_8h" name="IndexedKdtreeParams.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/IndexedKdtreeParams.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_indexed_kdtree_8ipp" name="TIndexedKdtree.ipp" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtree.ipp</includes>
    <class kind="class">ph::math::TIndexedKdtree</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <concept>ph::math::CItemSegmentIntersectionTesterVanilla</concept>
    <concept>ph::math::CItemSegmentIntersectionTesterWithIndex</concept>
    <concept>ph::math::CItemSegmentIntersectionTester</concept>
  </compound>
  <compound kind="file">
    <name>TIndexedKdtree.ipp</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_t_indexed_kdtree_8ipp.html</filename>
    <includes id="_t_indexed_kdtree_8h" name="TIndexedKdtree.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtree.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedKdtreeNode.h</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_t_indexed_kdtree_node_8h.html</filename>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::math::TIndexedKdtreeNode</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TIndexedPointKdtree.h</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_t_indexed_point_kdtree_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_indexed_kdtree_node_8h" name="TIndexedKdtreeNode.h" local="yes" import="no" module="no" objc="no">Math/Algorithm/IndexedKdtree/TIndexedKdtreeNode.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::math::TIndexedPointKdtree</class>
    <class kind="struct">ph::math::TIndexedPointKdtree::BuildCache</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <concept>ph::math::CIndexedPointKdtreeItemStorage</concept>
  </compound>
  <compound kind="file">
    <name>TSortedNNResult.h</name>
    <path>Source/Math/Algorithm/IndexedKdtree/</path>
    <filename>_t_sorted_n_n_result_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>chromatic_adaptations.h</name>
    <path>Source/Math/Color/</path>
    <filename>chromatic__adaptations_8h.html</filename>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="_t_matrix3_8h" name="TMatrix3.h" local="yes" import="no" module="no" objc="no">Math/TMatrix3.h</includes>
    <includes id="chromatic__adaptations_8ipp" name="chromatic_adaptations.ipp" local="yes" import="no" module="no" objc="no">Math/Color/chromatic_adaptations.ipp</includes>
    <class kind="class">ph::math::TChromaticAdaptationDefinition</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <concept>ph::math::CChromaticAdaptationDefinition</concept>
  </compound>
  <compound kind="file">
    <name>chromatic_adaptations.ipp</name>
    <path>Source/Math/Color/</path>
    <filename>chromatic__adaptations_8ipp.html</filename>
    <includes id="chromatic__adaptations_8h" name="chromatic_adaptations.h" local="yes" import="no" module="no" objc="no">Math/Color/chromatic_adaptations.h</includes>
    <includes id="_i_uninstantiable_8h" name="IUninstantiable.h" local="yes" import="no" module="no" objc="no">Utility/IUninstantiable.h</includes>
    <class kind="class">ph::math::TChromaticAdaptationDefinitionHelper</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::XYZScaling, T &gt;</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::Bradford, T &gt;</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::VonKries, T &gt;</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>color_basics.h</name>
    <path>Source/Math/Color/</path>
    <filename>color__basics_8h.html</filename>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <class kind="class">ph::math::DefaultSpectralSampleProps</class>
    <class kind="class">ph::math::detail::TColorSpaceDummy</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::detail</namespace>
    <concept>ph::math::CSpectralSampleProps</concept>
    <concept>ph::math::CColorValuesInterface</concept>
    <concept>ph::math::CRawColorValues</concept>
  </compound>
  <compound kind="file">
    <name>color_enums.h</name>
    <path>Source/Math/Color/</path>
    <filename>color__enums_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>color_spaces.h</name>
    <path>Source/Math/Color/</path>
    <filename>color__spaces_8h.html</filename>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="color__spaces_8ipp" name="color_spaces.ipp" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.ipp</includes>
    <class kind="class">ph::math::TColorSpaceDefinition</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <concept>ph::math::CHasColorSpaceProperties</concept>
    <concept>ph::math::CSupportsTristimulusConversions</concept>
    <concept>ph::math::CSupportsSpectralConversions</concept>
    <concept>ph::math::CTristimulusColorSpaceDefinition</concept>
    <concept>ph::math::CSpectralColorSpaceDefinition</concept>
    <concept>ph::math::CColorSpaceDefinition</concept>
  </compound>
  <compound kind="file">
    <name>color_spaces.ipp</name>
    <path>Source/Math/Color/</path>
    <filename>color__spaces_8ipp.html</filename>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <includes id="_t_matrix3_8h" name="TMatrix3.h" local="yes" import="no" module="no" objc="no">Math/TMatrix3.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <includes id="_i_uninstantiable_8h" name="IUninstantiable.h" local="yes" import="no" module="no" objc="no">Utility/IUninstantiable.h</includes>
    <includes id="math__exceptions_8h" name="math_exceptions.h" local="yes" import="no" module="no" objc="no">Math/math_exceptions.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="chromatic__adaptations_8h" name="chromatic_adaptations.h" local="yes" import="no" module="no" objc="no">Math/Color/chromatic_adaptations.h</includes>
    <class kind="class">ph::math::TColorSpaceDefinitionHelper</class>
    <class kind="class">ph::math::TTristimulusColorSpaceDefinitionHelper</class>
    <class kind="class">ph::math::TSpectralColorSpaceDefinitionHelper</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::CIE_XYZ, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::Linear_sRGB, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::sRGB, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::CIE_xyY, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::ACEScg, T &gt;</class>
    <class kind="struct">ph::math::detail::TSmitsSPDBasis</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::Spectral_Smits, T &gt;</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::detail</namespace>
  </compound>
  <compound kind="file">
    <name>spectral_data.cpp</name>
    <path>Source/Math/Color/</path>
    <filename>spectral__data_8cpp.html</filename>
    <includes id="spectral__data_8h" name="spectral_data.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_data.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::spectral_data</namespace>
  </compound>
  <compound kind="file">
    <name>spectral_data.h</name>
    <path>Source/Math/Color/</path>
    <filename>spectral__data_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::spectral_data</namespace>
  </compound>
  <compound kind="file">
    <name>spectral_samples.h</name>
    <path>Source/Math/Color/</path>
    <filename>spectral__samples_8h.html</filename>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="spectral__samples_8ipp" name="spectral_samples.ipp" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.ipp</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_E</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b208c3dfc7024c379877d689ae7db08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_D65</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3d128c7225063c77e89c60595769355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_E</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b208c3dfc7024c379877d689ae7db08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_D65</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3d128c7225063c77e89c60595769355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spectral_samples.ipp</name>
    <path>Source/Math/Color/</path>
    <filename>spectral__samples_8ipp.html</filename>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <includes id="_t_piecewise_linear1_d_8h" name="TPiecewiseLinear1D.h" local="yes" import="no" module="no" objc="no">Math/Function/TPiecewiseLinear1D.h</includes>
    <includes id="_t_analytical_integrator1_d_8h" name="TAnalyticalIntegrator1D.h" local="yes" import="no" module="no" objc="no">Math/Solver/TAnalyticalIntegrator1D.h</includes>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <includes id="_t_vector_n_8h" name="TVectorN.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorN.h</includes>
    <includes id="spectral__data_8h" name="spectral_data.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_data.h</includes>
    <includes id="black__body_8h" name="black_body.h" local="yes" import="no" module="no" objc="no">Math/Physics/black_body.h</includes>
    <includes id="math__exceptions_8h" name="math_exceptions.h" local="yes" import="no" module="no" objc="no">Math/math_exceptions.h</includes>
    <class kind="struct">ph::math::detail::TCIEXYZCmfKernel</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::detail</namespace>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_E</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b208c3dfc7024c379877d689ae7db08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_D65</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3d128c7225063c77e89c60595769355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_E</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b208c3dfc7024c379877d689ae7db08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_D65</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3d128c7225063c77e89c60595769355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spectrum.h</name>
    <path>Source/Math/Color/</path>
    <filename>_spectrum_8h.html</filename>
    <includes id="spectrum__fwd_8h" name="spectrum_fwd.h" local="yes" import="no" module="no" objc="no">Math/Color/spectrum_fwd.h</includes>
    <includes id="_t_tristimulus_spectrum_8h" name="TTristimulusSpectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/TTristimulusSpectrum.h</includes>
    <includes id="_t_sampled_spectrum_8h" name="TSampledSpectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/TSampledSpectrum.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>spectrum_fwd.h</name>
    <path>Source/Math/Color/</path>
    <filename>spectrum__fwd_8h.html</filename>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TSampledSpectrum.h</name>
    <path>Source/Math/Color/</path>
    <filename>_t_sampled_spectrum_8h.html</filename>
    <includes id="_t_spectrum_base_8h" name="TSpectrumBase.h" local="yes" import="no" module="no" objc="no">Math/Color/TSpectrumBase.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="_t_sampled_spectrum_8ipp" name="TSampledSpectrum.ipp" local="yes" import="no" module="no" objc="no">Math/Color/TSampledSpectrum.ipp</includes>
    <class kind="class">ph::math::TSampledSpectrum</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TSampledSpectrum.ipp</name>
    <path>Source/Math/Color/</path>
    <filename>_t_sampled_spectrum_8ipp.html</filename>
    <includes id="_t_sampled_spectrum_8h" name="TSampledSpectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/TSampledSpectrum.h</includes>
    <includes id="spectral__samples_8h" name="spectral_samples.h" local="yes" import="no" module="no" objc="no">Math/Color/spectral_samples.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TSpectrumBase.h</name>
    <path>Source/Math/Color/</path>
    <filename>_t_spectrum_base_8h.html</filename>
    <includes id="_t_arithmetic_array_base_8h" name="TArithmeticArrayBase.h" local="yes" import="no" module="no" objc="no">Math/General/TArithmeticArrayBase.h</includes>
    <includes id="spectrum__fwd_8h" name="spectrum_fwd.h" local="yes" import="no" module="no" objc="no">Math/Color/spectrum_fwd.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="color__enums_8h" name="color_enums.h" local="yes" import="no" module="no" objc="no">Math/Color/color_enums.h</includes>
    <includes id="color__basics_8h" name="color_basics.h" local="yes" import="no" module="no" objc="no">Math/Color/color_basics.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_spectrum_base_8ipp" name="TSpectrumBase.ipp" local="yes" import="no" module="no" objc="no">Math/Color/TSpectrumBase.ipp</includes>
    <class kind="class">ph::math::TSpectrumBase</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TSpectrumBase.ipp</name>
    <path>Source/Math/Color/</path>
    <filename>_t_spectrum_base_8ipp.html</filename>
    <includes id="_t_spectrum_base_8h" name="TSpectrumBase.h" local="yes" import="no" module="no" objc="no">Math/Color/TSpectrumBase.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="color__spaces_8h" name="color_spaces.h" local="yes" import="no" module="no" objc="no">Math/Color/color_spaces.h</includes>
    <includes id="math__exceptions_8h" name="math_exceptions.h" local="yes" import="no" module="no" objc="no">Math/math_exceptions.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TTristimulusSpectrum.h</name>
    <path>Source/Math/Color/</path>
    <filename>_t_tristimulus_spectrum_8h.html</filename>
    <includes id="_t_spectrum_base_8h" name="TSpectrumBase.h" local="yes" import="no" module="no" objc="no">Math/Color/TSpectrumBase.h</includes>
    <includes id="_t_tristimulus_spectrum_8ipp" name="TTristimulusSpectrum.ipp" local="yes" import="no" module="no" objc="no">Math/Color/TTristimulusSpectrum.ipp</includes>
    <class kind="class">ph::math::TTristimulusSpectrum</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TTristimulusSpectrum.ipp</name>
    <path>Source/Math/Color/</path>
    <filename>_t_tristimulus_spectrum_8ipp.html</filename>
    <includes id="_t_tristimulus_spectrum_8h" name="TTristimulusSpectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/TTristimulusSpectrum.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>constant.h</name>
    <path>Source/Math/</path>
    <filename>constant_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::constant</namespace>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>UNKNOWN_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2c2f5d7f6b274f594b7b09ba38ed3ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>X_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a700e65439fa95e5ea186c96d06614a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Y_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a111d5e146845b82d5e977e6d0cf6fd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Z_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2eaa067caf050a0557eae1109de58e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>UNKNOWN_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2c2f5d7f6b274f594b7b09ba38ed3ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>X_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a700e65439fa95e5ea186c96d06614a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Y_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a111d5e146845b82d5e977e6d0cf6fd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Z_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2eaa067caf050a0557eae1109de58e15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TBlackmanHarris2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_blackman_harris2_d_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <class kind="class">ph::math::TBlackmanHarris2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TConstant2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_constant2_d_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <class kind="class">ph::math::TConstant2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TGaussian2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_gaussian2_d_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <class kind="class">ph::math::TGaussian2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>THeavisideStep2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_heaviside_step2_d_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::math::THeavisideStep2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TLinearGradient2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_linear_gradient2_d_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::math::TLinearGradient2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMathFunction2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_math_function2_d_8h.html</filename>
    <class kind="class">ph::math::TMathFunction2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMitchellNetravaliCubic2D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_mitchell_netravali_cubic2_d_8h.html</filename>
    <includes id="_t_math_function2_d_8h" name="TMathFunction2D.h" local="yes" import="no" module="no" objc="no">Math/Function/TMathFunction2D.h</includes>
    <class kind="class">ph::math::TMitchellNetravaliCubic2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TPiecewiseLinear1D.h</name>
    <path>Source/Math/Function/</path>
    <filename>_t_piecewise_linear1_d_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <class kind="class">ph::math::TPiecewiseLinear1D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TArithmeticArrayBase.h</name>
    <path>Source/Math/General/</path>
    <filename>_t_arithmetic_array_base_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_t_arithmetic_array_base_8ipp" name="TArithmeticArrayBase.ipp" local="yes" import="no" module="no" objc="no">Math/General/TArithmeticArrayBase.ipp</includes>
    <class kind="class">ph::math::TArithmeticArrayBase</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TArithmeticArrayBase.ipp</name>
    <path>Source/Math/General/</path>
    <filename>_t_arithmetic_array_base_8ipp.html</filename>
    <includes id="_t_arithmetic_array_base_8h" name="TArithmeticArrayBase.h" local="yes" import="no" module="no" objc="no">Math/General/TArithmeticArrayBase.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrixMxNBase.h</name>
    <path>Source/Math/General/</path>
    <filename>_t_matrix_mx_n_base_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_matrix_mx_n_base_8ipp" name="TMatrixMxNBase.ipp" local="yes" import="no" module="no" objc="no">Math/General/TMatrixMxNBase.ipp</includes>
    <class kind="class">ph::math::TMatrixMxNBase</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrixMxNBase.ipp</name>
    <path>Source/Math/General/</path>
    <filename>_t_matrix_mx_n_base_8ipp.html</filename>
    <includes id="_t_matrix_mx_n_base_8h" name="TMatrixMxNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TMatrixMxNBase.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrixNBase.h</name>
    <path>Source/Math/General/</path>
    <filename>_t_matrix_n_base_8h.html</filename>
    <includes id="_t_matrix_mx_n_base_8h" name="TMatrixMxNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TMatrixMxNBase.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_matrix_n_base_8ipp" name="TMatrixNBase.ipp" local="yes" import="no" module="no" objc="no">Math/General/TMatrixNBase.ipp</includes>
    <class kind="class">ph::math::TMatrixNBase</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrixNBase.ipp</name>
    <path>Source/Math/General/</path>
    <filename>_t_matrix_n_base_8ipp.html</filename>
    <includes id="_t_matrix_n_base_8h" name="TMatrixNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TMatrixNBase.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVectorN.h</name>
    <path>Source/Math/General/</path>
    <filename>_t_vector_n_8h.html</filename>
    <includes id="_t_vector_n_base_8h" name="TVectorNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorNBase.h</includes>
    <includes id="_t_vector_n_8ipp" name="TVectorN.ipp" local="yes" import="no" module="no" objc="no">Math/General/TVectorN.ipp</includes>
    <class kind="class">ph::math::TVectorN</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVectorN.ipp</name>
    <path>Source/Math/General/</path>
    <filename>_t_vector_n_8ipp.html</filename>
    <includes id="_t_vector_n_8h" name="TVectorN.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorN.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVectorNBase.h</name>
    <path>Source/Math/General/</path>
    <filename>_t_vector_n_base_8h.html</filename>
    <includes id="_t_arithmetic_array_base_8h" name="TArithmeticArrayBase.h" local="yes" import="no" module="no" objc="no">Math/General/TArithmeticArrayBase.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_vector_n_base_8ipp" name="TVectorNBase.ipp" local="yes" import="no" module="no" objc="no">Math/General/TVectorNBase.ipp</includes>
    <class kind="class">ph::math::TVectorNBase</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVectorNBase.ipp</name>
    <path>Source/Math/General/</path>
    <filename>_t_vector_n_base_8ipp.html</filename>
    <includes id="_t_vector_n_base_8h" name="TVectorNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorNBase.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>location.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>location_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_math_2_time_8h" name="time.h" local="yes" import="no" module="no" objc="no">Math/time.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TAABB2D.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_a_a_b_b2_d_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <includes id="_t_a_a_b_b2_d_8ipp" name="TAABB2D.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.ipp</includes>
    <class kind="class">ph::math::TAABB2D</class>
    <class kind="struct">std::hash&lt; ph::math::TAABB2D&lt; T &gt; &gt;</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>TAABB2D.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_a_a_b_b2_d_8ipp.html</filename>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TAABB3D.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_a_a_b_b3_d_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <includes id="_t_a_a_b_b3_d_8ipp" name="TAABB3D.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.ipp</includes>
    <class kind="class">ph::math::TAABB3D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TAABB3D.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_a_a_b_b3_d_8ipp.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TBasicTriangle.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_basic_triangle_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_basic_triangle_8ipp" name="TBasicTriangle.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TBasicTriangle.ipp</includes>
    <class kind="class">ph::math::TBasicTriangle</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TBasicTriangle.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_basic_triangle_8ipp.html</filename>
    <includes id="_t_basic_triangle_8h" name="TBasicTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TBasicTriangle.h</includes>
    <includes id="_t_matrix2_8h" name="TMatrix2.h" local="yes" import="no" module="no" objc="no">Math/TMatrix2.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TDisk.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_disk_8h.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_t_disk_8ipp" name="TDisk.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TDisk.ipp</includes>
    <class kind="class">ph::math::TDisk</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TDisk.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_disk_8ipp.html</filename>
    <includes id="_t_disk_8h" name="TDisk.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TDisk.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>THemisphere.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_hemisphere_8h.html</filename>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <class kind="class">ph::math::THemisphere</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TLineSegment.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_line_segment_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_line_segment_8ipp" name="TLineSegment.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.ipp</includes>
    <class kind="class">ph::math::TLineSegment</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TLineSegment.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_line_segment_8ipp.html</filename>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TSphere.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_sphere_8h.html</filename>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_t_sphere_8ipp" name="TSphere.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.ipp</includes>
    <class kind="class">ph::math::TSphere</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TSphere.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_sphere_8ipp.html</filename>
    <includes id="_t_sphere_8h" name="TSphere.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TSphere.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_matrix2_8h" name="TMatrix2.h" local="yes" import="no" module="no" objc="no">Math/TMatrix2.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TTriangle.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_triangle_8h.html</filename>
    <includes id="_t_basic_triangle_8h" name="TBasicTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TBasicTriangle.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <class kind="class">ph::math::TTriangle</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TWatertightTriangle.h</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_watertight_triangle_8h.html</filename>
    <includes id="_t_basic_triangle_8h" name="TBasicTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TBasicTriangle.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_line_segment_8h" name="TLineSegment.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TLineSegment.h</includes>
    <includes id="_t_watertight_triangle_8ipp" name="TWatertightTriangle.ipp" local="yes" import="no" module="no" objc="no">Math/Geometry/TWatertightTriangle.ipp</includes>
    <class kind="class">ph::math::TWatertightTriangle</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TWatertightTriangle.ipp</name>
    <path>Source/Math/Geometry/</path>
    <filename>_t_watertight_triangle_8ipp.html</filename>
    <includes id="_t_watertight_triangle_8h" name="TWatertightTriangle.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TWatertightTriangle.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>hash.h</name>
    <path>Source/Math/</path>
    <filename>hash_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="hash_8ipp" name="hash.ipp" local="yes" import="no" module="no" objc="no">Math/hash.ipp</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>hash.ipp</name>
    <path>Source/Math/</path>
    <filename>hash_8ipp.html</filename>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>math.cpp</name>
    <path>Source/Math/</path>
    <filename>math_8cpp.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Math.dox</name>
    <path>Source/Math/</path>
    <filename>_math_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>Source/Math/</path>
    <filename>math_8h.html</filename>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="math__table_8h" name="math_table.h" local="yes" import="no" module="no" objc="no">Math/math_table.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="math_8ipp" name="math.ipp" local="yes" import="no" module="no" objc="no">Math/math.ipp</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a423ca1404e587fb97e03569f02f95861</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafd95c335ca3cea8382e4664fcb2e071</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49a2a687b51def083e81e22e8aadd871</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a688dbf6563c86608204cf755dc0be5cd</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af88ea36316f4e3c2a63d8ff7342e3038</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46cc1344fc73d1e20da595d6e62bbb57</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7c44afb09e2610c07148d4b1120e4614</anchor>
      <arglist>(const UIntType bitIdx)</arglist>
    </member>
    <member kind="function">
      <type>consteval UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a00c7265b62195ee8215d3a07ee97d8a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>fp32_to_fp16_bits</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a91780ac8e52ddfdd3f0314cc36b882c2</anchor>
      <arglist>(const float32 value)</arglist>
    </member>
    <member kind="function">
      <type>float32</type>
      <name>fp16_bits_to_fp32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a050fd048afd360173b15c10a05c21f7c</anchor>
      <arglist>(const uint16 fp16Bits)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e1143174acd6afb8b6c9be755307c4b</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abd30caa18de616eaa04f98f75a8c9753</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7ff2861977711d396858e5b6aef1436c</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a271473c0e491fe4c7c0cb02fcfa88bb0</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0a1c02f0fa48517a643a221c4200dc1e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4d686d16a731cfaf96c02424b9215798</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4ff51da9284135e078f892589a4816cc</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2f4af840af27b7877140cb250d0b2cba</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a41e68b91f571234574a62deddcf6b47e</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f0591b11fba7210f6dd38cfbbcbc9f7</anchor>
      <arglist>(std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3cf4f52c15a3def1081a81e736a7a4f8</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a82c62fe543155f8ea8d4fa031f8f3d85</anchor>
      <arglist>(TSpan&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03f8a077523cb1f8d667a39529300e98</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vecA, const std::array&lt; T, N &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1338f031a910337ae964bb3bc4ac6fe1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vecA, const std::vector&lt; T &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8bee0579f0647a84c49161d6ae0dba6f</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vecA, TSpanView&lt; T, EXTENT &gt; vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a423ca1404e587fb97e03569f02f95861</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafd95c335ca3cea8382e4664fcb2e071</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49a2a687b51def083e81e22e8aadd871</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a688dbf6563c86608204cf755dc0be5cd</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af88ea36316f4e3c2a63d8ff7342e3038</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46cc1344fc73d1e20da595d6e62bbb57</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7c44afb09e2610c07148d4b1120e4614</anchor>
      <arglist>(const UIntType bitIdx)</arglist>
    </member>
    <member kind="function">
      <type>consteval UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a00c7265b62195ee8215d3a07ee97d8a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>fp32_to_fp16_bits</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a91780ac8e52ddfdd3f0314cc36b882c2</anchor>
      <arglist>(const float32 value)</arglist>
    </member>
    <member kind="function">
      <type>float32</type>
      <name>fp16_bits_to_fp32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a050fd048afd360173b15c10a05c21f7c</anchor>
      <arglist>(const uint16 fp16Bits)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e1143174acd6afb8b6c9be755307c4b</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abd30caa18de616eaa04f98f75a8c9753</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7ff2861977711d396858e5b6aef1436c</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a271473c0e491fe4c7c0cb02fcfa88bb0</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0a1c02f0fa48517a643a221c4200dc1e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4d686d16a731cfaf96c02424b9215798</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4ff51da9284135e078f892589a4816cc</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2f4af840af27b7877140cb250d0b2cba</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a41e68b91f571234574a62deddcf6b47e</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f0591b11fba7210f6dd38cfbbcbc9f7</anchor>
      <arglist>(std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3cf4f52c15a3def1081a81e736a7a4f8</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a82c62fe543155f8ea8d4fa031f8f3d85</anchor>
      <arglist>(TSpan&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03f8a077523cb1f8d667a39529300e98</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vecA, const std::array&lt; T, N &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1338f031a910337ae964bb3bc4ac6fe1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vecA, const std::vector&lt; T &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8bee0579f0647a84c49161d6ae0dba6f</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vecA, TSpanView&lt; T, EXTENT &gt; vecB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math.ipp</name>
    <path>Source/Math/</path>
    <filename>math_8ipp.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a423ca1404e587fb97e03569f02f95861</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafd95c335ca3cea8382e4664fcb2e071</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49a2a687b51def083e81e22e8aadd871</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a688dbf6563c86608204cf755dc0be5cd</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af88ea36316f4e3c2a63d8ff7342e3038</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46cc1344fc73d1e20da595d6e62bbb57</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e1143174acd6afb8b6c9be755307c4b</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abd30caa18de616eaa04f98f75a8c9753</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7ff2861977711d396858e5b6aef1436c</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a271473c0e491fe4c7c0cb02fcfa88bb0</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0a1c02f0fa48517a643a221c4200dc1e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4d686d16a731cfaf96c02424b9215798</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4ff51da9284135e078f892589a4816cc</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2f4af840af27b7877140cb250d0b2cba</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a41e68b91f571234574a62deddcf6b47e</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f0591b11fba7210f6dd38cfbbcbc9f7</anchor>
      <arglist>(std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3cf4f52c15a3def1081a81e736a7a4f8</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a82c62fe543155f8ea8d4fa031f8f3d85</anchor>
      <arglist>(TSpan&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03f8a077523cb1f8d667a39529300e98</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vecA, const std::array&lt; T, N &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1338f031a910337ae964bb3bc4ac6fe1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vecA, const std::vector&lt; T &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8bee0579f0647a84c49161d6ae0dba6f</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vecA, TSpanView&lt; T, EXTENT &gt; vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a423ca1404e587fb97e03569f02f95861</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafd95c335ca3cea8382e4664fcb2e071</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49a2a687b51def083e81e22e8aadd871</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a688dbf6563c86608204cf755dc0be5cd</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af88ea36316f4e3c2a63d8ff7342e3038</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46cc1344fc73d1e20da595d6e62bbb57</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e1143174acd6afb8b6c9be755307c4b</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abd30caa18de616eaa04f98f75a8c9753</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7ff2861977711d396858e5b6aef1436c</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a271473c0e491fe4c7c0cb02fcfa88bb0</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0a1c02f0fa48517a643a221c4200dc1e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4d686d16a731cfaf96c02424b9215798</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4ff51da9284135e078f892589a4816cc</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2f4af840af27b7877140cb250d0b2cba</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a41e68b91f571234574a62deddcf6b47e</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f0591b11fba7210f6dd38cfbbcbc9f7</anchor>
      <arglist>(std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3cf4f52c15a3def1081a81e736a7a4f8</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a82c62fe543155f8ea8d4fa031f8f3d85</anchor>
      <arglist>(TSpan&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03f8a077523cb1f8d667a39529300e98</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vecA, const std::array&lt; T, N &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1338f031a910337ae964bb3bc4ac6fe1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vecA, const std::vector&lt; T &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8bee0579f0647a84c49161d6ae0dba6f</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vecA, TSpanView&lt; T, EXTENT &gt; vecB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math_common.h</name>
    <path>Source/Math/</path>
    <filename>math__common_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>math_exceptions.h</name>
    <path>Source/Math/</path>
    <filename>math__exceptions_8h.html</filename>
    <class kind="class">ph::math::MathException</class>
    <class kind="class">ph::math::ColorError</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>math_fwd.h</name>
    <path>Source/Math/</path>
    <filename>math__fwd_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>math_table.h</name>
    <path>Source/Math/</path>
    <filename>math__table_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::table</namespace>
    <namespace>ph::math::table::detail</namespace>
  </compound>
  <compound kind="file">
    <name>black_body.h</name>
    <path>Source/Math/Physics/</path>
    <filename>black__body_8h.html</filename>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>DeterministicSeeder.cpp</name>
    <path>Source/Math/Random/</path>
    <filename>_deterministic_seeder_8cpp.html</filename>
    <includes id="_deterministic_seeder_8h" name="DeterministicSeeder.h" local="yes" import="no" module="no" objc="no">Math/Random/DeterministicSeeder.h</includes>
    <includes id="_engine_init_settings_8h" name="EngineInitSettings.h" local="yes" import="no" module="no" objc="no">EngineInitSettings.h</includes>
    <includes id="math__table_8h" name="math_table.h" local="yes" import="no" module="no" objc="no">Math/math_table.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>DeterministicSeeder.h</name>
    <path>Source/Math/Random/</path>
    <filename>_deterministic_seeder_8h.html</filename>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <class kind="class">ph::math::DeterministicSeeder</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Pcg32.h</name>
    <path>Source/Math/Random/</path>
    <filename>_pcg32_8h.html</filename>
    <includes id="_t_uniform_random_bit_generator_8h" name="TUniformRandomBitGenerator.h" local="yes" import="no" module="no" objc="no">Math/Random/TUniformRandomBitGenerator.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <class kind="class">ph::math::Pcg32</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Pcg64DXSM.h</name>
    <path>Source/Math/Random/</path>
    <filename>_pcg64_d_x_s_m_8h.html</filename>
    <includes id="_t_uniform_random_bit_generator_8h" name="TUniformRandomBitGenerator.h" local="yes" import="no" module="no" objc="no">Math/Random/TUniformRandomBitGenerator.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::math::detail::Pcg64UInt128</class>
    <class kind="class">ph::math::Pcg64DXSM</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PH_MATH_PCG64_FORCE_EMULATED_UINT128</name>
      <anchorfile>_pcg64_d_x_s_m_8h.html</anchorfile>
      <anchor>ae3244cde328e9d3df9056c056183fe3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_MATH_PCG64_EMULATED_UINT128</name>
      <anchorfile>_pcg64_d_x_s_m_8h.html</anchorfile>
      <anchor>a599d1704d9e5ca5e2c510da83b260ab8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>radical_inverse.h</name>
    <path>Source/Math/Random/Quasi/</path>
    <filename>radical__inverse_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::radical_inverse_detail</namespace>
  </compound>
  <compound kind="file">
    <name>Random.cpp</name>
    <path>Source/Math/Random/</path>
    <filename>_random_8cpp.html</filename>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_deterministic_seeder_8h" name="DeterministicSeeder.h" local="yes" import="no" module="no" objc="no">Math/Random/DeterministicSeeder.h</includes>
    <includes id="_t_mt19937_8h" name="TMt19937.h" local="yes" import="no" module="no" objc="no">Math/Random/TMt19937.h</includes>
    <includes id="_pcg32_8h" name="Pcg32.h" local="yes" import="no" module="no" objc="no">Math/Random/Pcg32.h</includes>
    <includes id="_pcg64_d_x_s_m_8h" name="Pcg64DXSM.h" local="yes" import="no" module="no" objc="no">Math/Random/Pcg64DXSM.h</includes>
    <includes id="_t_urbg32x2_8h" name="TUrbg32x2.h" local="yes" import="no" module="no" objc="no">Math/Random/TUrbg32x2.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Random.h</name>
    <path>Source/Math/Random/</path>
    <filename>_random_8h.html</filename>
    <includes id="_random_8ipp" name="Random.ipp" local="yes" import="no" module="no" objc="no">Math/Random/Random.ipp</includes>
    <class kind="class">ph::math::Random</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Random.ipp</name>
    <path>Source/Math/Random/</path>
    <filename>_random_8ipp.html</filename>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>shuffle.h</name>
    <path>Source/Math/Random/</path>
    <filename>shuffle_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="yes" import="no" module="no" objc="no">Math/Random/Random.h</includes>
    <class kind="struct">ph::math::detail::shuffle::StandardSwapper</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::math::detail</namespace>
    <namespace>ph::math::detail::shuffle</namespace>
  </compound>
  <compound kind="file">
    <name>TMt19937.h</name>
    <path>Source/Math/Random/</path>
    <filename>_t_mt19937_8h.html</filename>
    <includes id="_t_uniform_random_bit_generator_8h" name="TUniformRandomBitGenerator.h" local="yes" import="no" module="no" objc="no">Math/Random/TUniformRandomBitGenerator.h</includes>
    <class kind="class">ph::math::TMt19937</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TPwcDistribution1D.h</name>
    <path>Source/Math/Random/</path>
    <filename>_t_pwc_distribution1_d_8h.html</filename>
    <includes id="_t_pwc_distribution1_d_8ipp" name="TPwcDistribution1D.ipp" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution1D.ipp</includes>
    <class kind="class">ph::math::TPwcDistribution1D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TPwcDistribution1D.ipp</name>
    <path>Source/Math/Random/</path>
    <filename>_t_pwc_distribution1_d_8ipp.html</filename>
    <includes id="_t_pwc_distribution1_d_8h" name="TPwcDistribution1D.h" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution1D.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TPwcDistribution2D.h</name>
    <path>Source/Math/Random/</path>
    <filename>_t_pwc_distribution2_d_8h.html</filename>
    <includes id="_t_a_a_b_b2_d_8h" name="TAABB2D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB2D.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_pwc_distribution1_d_8h" name="TPwcDistribution1D.h" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution1D.h</includes>
    <includes id="_t_pwc_distribution2_d_8ipp" name="TPwcDistribution2D.ipp" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution2D.ipp</includes>
    <class kind="class">ph::math::TPwcDistribution2D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TPwcDistribution2D.ipp</name>
    <path>Source/Math/Random/</path>
    <filename>_t_pwc_distribution2_d_8ipp.html</filename>
    <includes id="_t_pwc_distribution2_d_8h" name="TPwcDistribution2D.h" local="yes" import="no" module="no" objc="no">Math/Random/TPwcDistribution2D.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TUniformRandomBitGenerator.h</name>
    <path>Source/Math/Random/</path>
    <filename>_t_uniform_random_bit_generator_8h.html</filename>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::math::TUniformRandomBitGenerator</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <concept>ph::math::CURBG</concept>
  </compound>
  <compound kind="file">
    <name>TUrbg32x2.h</name>
    <path>Source/Math/Random/</path>
    <filename>_t_urbg32x2_8h.html</filename>
    <includes id="_t_uniform_random_bit_generator_8h" name="TUniformRandomBitGenerator.h" local="yes" import="no" module="no" objc="no">Math/Random/TUniformRandomBitGenerator.h</includes>
    <class kind="class">ph::math::TUrbg32x2</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Real.h</name>
    <path>Source/Math/</path>
    <filename>_real_8h.html</filename>
    <class kind="class">ph::math::Real</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TAnalyticalIntegrator1D.h</name>
    <path>Source/Math/Solver/</path>
    <filename>_t_analytical_integrator1_d_8h.html</filename>
    <includes id="_t_piecewise_linear1_d_8h" name="TPiecewiseLinear1D.h" local="yes" import="no" module="no" objc="no">Math/Function/TPiecewiseLinear1D.h</includes>
    <includes id="_t_analytical_integrator1_d_8ipp" name="TAnalyticalIntegrator1D.ipp" local="yes" import="no" module="no" objc="no">Math/Solver/TAnalyticalIntegrator1D.ipp</includes>
    <class kind="class">ph::math::TAnalyticalIntegrator1D</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TAnalyticalIntegrator1D.ipp</name>
    <path>Source/Math/Solver/</path>
    <filename>_t_analytical_integrator1_d_8ipp.html</filename>
    <includes id="_t_analytical_integrator1_d_8h" name="TAnalyticalIntegrator1D.h" local="yes" import="no" module="no" objc="no">Math/Solver/TAnalyticalIntegrator1D.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TArithmeticArray.h</name>
    <path>Source/Math/</path>
    <filename>_t_arithmetic_array_8h.html</filename>
    <includes id="_t_arithmetic_array_base_8h" name="TArithmeticArrayBase.h" local="yes" import="no" module="no" objc="no">Math/General/TArithmeticArrayBase.h</includes>
    <includes id="_t_arithmetic_array_8ipp" name="TArithmeticArray.ipp" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.ipp</includes>
    <class kind="class">ph::math::TArithmeticArray</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TArithmeticArray.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_arithmetic_array_8ipp.html</filename>
    <includes id="_t_arithmetic_array_8h" name="TArithmeticArray.h" local="yes" import="no" module="no" objc="no">Math/TArithmeticArray.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TFraction.h</name>
    <path>Source/Math/</path>
    <filename>_t_fraction_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <class kind="class">ph::math::TFraction</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrix2.h</name>
    <path>Source/Math/</path>
    <filename>_t_matrix2_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_matrix2_8ipp" name="TMatrix2.ipp" local="yes" import="no" module="no" objc="no">Math/TMatrix2.ipp</includes>
    <class kind="class">ph::math::TMatrix2</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrix2.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_matrix2_8ipp.html</filename>
    <includes id="_t_matrix2_8h" name="TMatrix2.h" local="yes" import="no" module="no" objc="no">Math/TMatrix2.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrix3.h</name>
    <path>Source/Math/</path>
    <filename>_t_matrix3_8h.html</filename>
    <includes id="_t_matrix_n_base_8h" name="TMatrixNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TMatrixNBase.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_matrix3_8ipp" name="TMatrix3.ipp" local="yes" import="no" module="no" objc="no">Math/TMatrix3.ipp</includes>
    <class kind="class">ph::math::TMatrix3</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrix3.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_matrix3_8ipp.html</filename>
    <includes id="_t_matrix3_8h" name="TMatrix3.h" local="yes" import="no" module="no" objc="no">Math/TMatrix3.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrix4.h</name>
    <path>Source/Math/</path>
    <filename>_t_matrix4_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_matrix4_8ipp" name="TMatrix4.ipp" local="yes" import="no" module="no" objc="no">Math/TMatrix4.ipp</includes>
    <class kind="class">ph::math::TMatrix4</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TMatrix4.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_matrix4_8ipp.html</filename>
    <includes id="_t_matrix4_8h" name="TMatrix4.h" local="yes" import="no" module="no" objc="no">Math/TMatrix4.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TOrthonormalBasis3.h</name>
    <path>Source/Math/</path>
    <filename>_t_orthonormal_basis3_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_orthonormal_basis3_8ipp" name="TOrthonormalBasis3.ipp" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.ipp</includes>
    <class kind="class">ph::math::TOrthonormalBasis3</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TOrthonormalBasis3.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_orthonormal_basis3_8ipp.html</filename>
    <includes id="_t_orthonormal_basis3_8h" name="TOrthonormalBasis3.h" local="yes" import="no" module="no" objc="no">Math/TOrthonormalBasis3.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TQuaternion.h</name>
    <path>Source/Math/</path>
    <filename>_t_quaternion_8h.html</filename>
    <includes id="_t_arithmetic_array_base_8h" name="TArithmeticArrayBase.h" local="yes" import="no" module="no" objc="no">Math/General/TArithmeticArrayBase.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_quaternion_8ipp" name="TQuaternion.ipp" local="yes" import="no" module="no" objc="no">Math/TQuaternion.ipp</includes>
    <class kind="class">ph::math::TQuaternion</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TQuaternion.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_quaternion_8ipp.html</filename>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_matrix4_8h" name="TMatrix4.h" local="yes" import="no" module="no" objc="no">Math/TMatrix4.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicLinearTranslation.cpp</name>
    <path>Source/Math/Transform/</path>
    <filename>_dynamic_linear_translation_8cpp.html</filename>
    <includes id="_dynamic_linear_translation_8h" name="DynamicLinearTranslation.h" local="yes" import="no" module="no" objc="no">Math/Transform/DynamicLinearTranslation.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicLinearTranslation.h</name>
    <path>Source/Math/Transform/</path>
    <filename>_dynamic_linear_translation_8h.html</filename>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::math::DynamicLinearTranslation</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>RigidTransform.h</name>
    <path>Source/Math/Transform/</path>
    <filename>_rigid_transform_8h.html</filename>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <class kind="class">ph::math::RigidTransform</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>StaticAffineTransform.cpp</name>
    <path>Source/Math/Transform/</path>
    <filename>_static_affine_transform_8cpp.html</filename>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>StaticAffineTransform.h</name>
    <path>Source/Math/Transform/</path>
    <filename>_static_affine_transform_8h.html</filename>
    <includes id="_t_matrix4_8h" name="TMatrix4.h" local="yes" import="no" module="no" objc="no">Math/TMatrix4.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <class kind="class">ph::math::StaticAffineTransform</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>StaticRigidTransform.cpp</name>
    <path>Source/Math/Transform/</path>
    <filename>_static_rigid_transform_8cpp.html</filename>
    <includes id="_static_rigid_transform_8h" name="StaticRigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticRigidTransform.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>StaticRigidTransform.h</name>
    <path>Source/Math/Transform/</path>
    <filename>_static_rigid_transform_8h.html</filename>
    <includes id="_rigid_transform_8h" name="RigidTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/RigidTransform.h</includes>
    <includes id="_static_affine_transform_8h" name="StaticAffineTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/StaticAffineTransform.h</includes>
    <includes id="_t_decomposed_transform_8h" name="TDecomposedTransform.h" local="yes" import="no" module="no" objc="no">Math/Transform/TDecomposedTransform.h</includes>
    <class kind="class">ph::math::StaticRigidTransform</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TDecomposedTransform.h</name>
    <path>Source/Math/Transform/</path>
    <filename>_t_decomposed_transform_8h.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="_t_matrix4_8h" name="TMatrix4.h" local="yes" import="no" module="no" objc="no">Math/TMatrix4.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <class kind="class">ph::math::TDecomposedTransform</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Transform.cpp</name>
    <path>Source/Math/Transform/</path>
    <filename>_transform_8cpp.html</filename>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_hit_info_8h" name="HitInfo.h" local="yes" import="no" module="no" objc="no">Core/HitInfo.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>Transform.h</name>
    <path>Source/Math/Transform/</path>
    <filename>_transform_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <class kind="class">ph::math::Transform</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVector2.h</name>
    <path>Source/Math/</path>
    <filename>_t_vector2_8h.html</filename>
    <includes id="_t_vector_n_base_8h" name="TVectorNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorNBase.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" import="no" module="no" objc="no">Math/hash.h</includes>
    <includes id="_t_vector2_8ipp" name="TVector2.ipp" local="yes" import="no" module="no" objc="no">Math/TVector2.ipp</includes>
    <class kind="class">ph::math::TVector2</class>
    <class kind="struct">std::hash&lt; ph::math::TVector2&lt; T &gt; &gt;</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <namespace>std</namespace>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_TO_STRING_FORMATTER_TEMPLATE</name>
      <anchorfile>_t_vector2_8h.html</anchorfile>
      <anchor>a54b8cce16b1235124f265f7a0ec546ca</anchor>
      <arglist>(ph::math::TVector2&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TVector2.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_vector2_8ipp.html</filename>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVector3.h</name>
    <path>Source/Math/</path>
    <filename>_t_vector3_8h.html</filename>
    <includes id="_t_vector_n_base_8h" name="TVectorNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorNBase.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_vector3_8ipp" name="TVector3.ipp" local="yes" import="no" module="no" objc="no">Math/TVector3.ipp</includes>
    <class kind="class">ph::math::TVector3</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_TO_STRING_FORMATTER_TEMPLATE</name>
      <anchorfile>_t_vector3_8h.html</anchorfile>
      <anchor>a417d2dbb6d255120dd5e9d12dabf7e97</anchor>
      <arglist>(ph::math::TVector3&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TVector3.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_vector3_8ipp.html</filename>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVector4.h</name>
    <path>Source/Math/</path>
    <filename>_t_vector4_8h.html</filename>
    <includes id="_t_vector_n_base_8h" name="TVectorNBase.h" local="yes" import="no" module="no" objc="no">Math/General/TVectorNBase.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="constant_8h" name="constant.h" local="yes" import="no" module="no" objc="no">Math/constant.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_vector4_8ipp" name="TVector4.ipp" local="yes" import="no" module="no" objc="no">Math/TVector4.ipp</includes>
    <class kind="class">ph::math::TVector4</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>TVector4.ipp</name>
    <path>Source/Math/</path>
    <filename>_t_vector4_8ipp.html</filename>
    <includes id="_t_vector4_8h" name="TVector4.h" local="yes" import="no" module="no" objc="no">Math/TVector4.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>ESdlDataFormat.h</name>
    <path>Source/SDL/</path>
    <filename>_e_sdl_data_format_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESdlDataType.h</name>
    <path>Source/SDL/</path>
    <filename>_e_sdl_data_type_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ESdlTypeCategory.h</name>
    <path>Source/SDL/</path>
    <filename>_e_sdl_type_category_8h.html</filename>
    <namespace>ph</namespace>
    <namespace>ph::sdl</namespace>
    <namespace>ph::sdl::detail</namespace>
  </compound>
  <compound kind="file">
    <name>EFieldImportance.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_e_field_importance_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>field_set_op.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>field__set__op_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_e_field_importance_8h" name="EFieldImportance.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/EFieldImportance.h</includes>
    <includes id="field__set__op_8ipp" name="field_set_op.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/field_set_op.ipp</includes>
    <class kind="struct">ph::field_set_op::NoOpNoticeReceiver</class>
    <namespace>ph</namespace>
    <namespace>ph::field_set_op</namespace>
  </compound>
  <compound kind="file">
    <name>field_set_op.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>field__set__op_8ipp.html</filename>
    <includes id="field__set__op_8h" name="field_set_op.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/field_set_op.h</includes>
    <includes id="_sdl_input_clauses_8h" name="SdlInputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClauses.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::field_set_op</namespace>
  </compound>
  <compound kind="file">
    <name>ISdlInstantiable.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_i_sdl_instantiable_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <class kind="class">ph::ISdlInstantiable</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlClass.cpp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_class_8cpp.html</filename>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlClass.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_class_8h.html</filename>
    <includes id="_i_sdl_instantiable_8h" name="ISdlInstantiable.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/ISdlInstantiable.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_sdl_input_clauses_8h" name="SdlInputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClauses.h</includes>
    <includes id="_sdl_output_clauses_8h" name="SdlOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClauses.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <class kind="class">ph::SdlClass</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlEnum.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_enum_8h.html</filename>
    <class kind="class">ph::SdlEnum</class>
    <class kind="struct">ph::SdlEnum::TEntry</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlField.cpp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_field_8cpp.html</filename>
    <includes id="_sdl_field_8h" name="SdlField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlField.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlField.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_field_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_e_field_importance_8h" name="EFieldImportance.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/EFieldImportance.h</includes>
    <includes id="_sdl_native_data_8h" name="SdlNativeData.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlNativeData.h</includes>
    <class kind="class">ph::SdlField</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlFunction.cpp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_function_8cpp.html</filename>
    <includes id="_sdl_function_8h" name="SdlFunction.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlFunction.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlFunction.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_function_8h.html</filename>
    <includes id="_i_sdl_instantiable_8h" name="ISdlInstantiable.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/ISdlInstantiable.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <class kind="class">ph::SdlFunction</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlInputContext.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_input_context_8h.html</filename>
    <includes id="_sdl_i_o_context_8h" name="SdlIOContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlIOContext.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::SdlInputContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlIOContext.cpp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_i_o_context_8cpp.html</filename>
    <includes id="_sdl_i_o_context_8h" name="SdlIOContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlIOContext.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlIOContext.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_i_o_context_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <class kind="class">ph::SdlIOContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlNativeData.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_native_data_8h.html</filename>
    <includes id="_e_sdl_data_format_8h" name="ESdlDataFormat.h" local="yes" import="no" module="no" objc="no">SDL/ESdlDataFormat.h</includes>
    <includes id="_e_sdl_data_type_8h" name="ESdlDataType.h" local="yes" import="no" module="no" objc="no">SDL/ESdlDataType.h</includes>
    <includes id="_t_function_8h" name="TFunction.h" local="yes" import="no" module="no" objc="no">Utility/TFunction.h</includes>
    <includes id="spectrum__fwd_8h" name="spectrum_fwd.h" local="yes" import="no" module="no" objc="no">Math/Color/spectrum_fwd.h</includes>
    <includes id="_t_sdl_any_instance_8h" name="TSdlAnyInstance.h" local="yes" import="no" module="no" objc="no">SDL/TSdlAnyInstance.h</includes>
    <includes id="_t_any_ptr_8h" name="TAnyPtr.h" local="yes" import="no" module="no" objc="no">Utility/TAnyPtr.h</includes>
    <includes id="_sdl_native_data_8ipp" name="SdlNativeData.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlNativeData.ipp</includes>
    <class kind="class">ph::TSdlAccessorVariant</class>
    <class kind="class">ph::SdlNativeData</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlNativeData.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_native_data_8ipp.html</filename>
    <includes id="_sdl_native_data_8h" name="SdlNativeData.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlNativeData.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlOutputContext.cpp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_output_context_8cpp.html</filename>
    <includes id="_sdl_output_context_8h" name="SdlOutputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlOutputContext.h</includes>
    <includes id="_sdl_dependency_resolver_8h" name="SdlDependencyResolver.h" local="yes" import="no" module="no" objc="no">SDL/SdlDependencyResolver.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlOutputContext.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_output_context_8h.html</filename>
    <includes id="_sdl_i_o_context_8h" name="SdlIOContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlIOContext.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <class kind="class">ph::SdlOutputContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlStruct.cpp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_struct_8cpp.html</filename>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlStruct.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_struct_8h.html</filename>
    <includes id="_i_sdl_instantiable_8h" name="ISdlInstantiable.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/ISdlInstantiable.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_any_ptr_8h" name="TAnyPtr.h" local="yes" import="no" module="no" objc="no">Utility/TAnyPtr.h</includes>
    <class kind="class">ph::SdlStruct</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlStructFieldStump.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_struct_field_stump_8h.html</filename>
    <includes id="_t_sdl_brute_force_field_set_8h" name="TSdlBruteForceFieldSet.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlBruteForceFieldSet.h</includes>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_sdl_struct_field_stump_8ipp" name="SdlStructFieldStump.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStructFieldStump.ipp</includes>
    <class kind="class">ph::SdlStructFieldStump</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlStructFieldStump.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_sdl_struct_field_stump_8ipp.html</filename>
    <includes id="_sdl_struct_field_stump_8h" name="SdlStructFieldStump.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStructFieldStump.h</includes>
    <includes id="_t_sdl_nested_field_8h" name="TSdlNestedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlNestedField.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlAbstractValue.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_abstract_value_8h.html</filename>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_t_sdl_abstract_value_8ipp" name="TSdlAbstractValue.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlAbstractValue.ipp</includes>
    <class kind="class">ph::TSdlAbstractValue</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlAbstractValue.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_abstract_value_8ipp.html</filename>
    <includes id="_t_sdl_abstract_value_8h" name="TSdlAbstractValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlAbstractValue.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlBool.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_bool_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlBool</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlBruteForceFieldSet.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_brute_force_field_set_8h.html</filename>
    <includes id="_sdl_field_8h" name="SdlField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlField.h</includes>
    <includes id="_t_array_vector_8h" name="TArrayVector.h" local="yes" import="no" module="no" objc="no">Utility/TArrayVector.h</includes>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <class kind="class">ph::TSdlBruteForceFieldSet</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlEnum.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_enum_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <class kind="class">ph::TSdlEnum</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlEnumField.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_enum_field_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_t_sdl_enum_8h" name="TSdlEnum.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlEnum.h</includes>
    <class kind="class">ph::TSdlEnumField</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlGeneralEnum.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_general_enum_8h.html</filename>
    <includes id="_sdl_enum_8h" name="SdlEnum.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlEnum.h</includes>
    <includes id="_t_array_vector_8h" name="TArrayVector.h" local="yes" import="no" module="no" objc="no">Utility/TArrayVector.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::TSdlGeneralEnum</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlInteger.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_integer_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlInteger</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlMethod.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_method_8h.html</filename>
    <includes id="_sdl_function_8h" name="SdlFunction.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlFunction.h</includes>
    <includes id="_t_sdl_brute_force_field_set_8h" name="TSdlBruteForceFieldSet.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlBruteForceFieldSet.h</includes>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_t_sdl_method_8ipp" name="TSdlMethod.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlMethod.ipp</includes>
    <class kind="class">ph::TSdlMethod</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlMethod.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_method_8ipp.html</filename>
    <includes id="_t_sdl_method_8h" name="TSdlMethod.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlMethod.h</includes>
    <includes id="_sdl_input_clauses_8h" name="SdlInputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClauses.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="field__set__op_8h" name="field_set_op.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/field_set_op.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlNestedField.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_nested_field_8h.html</filename>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <class kind="class">ph::TSdlNestedField</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOptionalValue.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_optional_value_8h.html</filename>
    <includes id="_t_sdl_abstract_value_8h" name="TSdlAbstractValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlAbstractValue.h</includes>
    <includes id="_t_sdl_optional_value_8ipp" name="TSdlOptionalValue.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.ipp</includes>
    <class kind="class">ph::TSdlOptionalValue</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOptionalValue.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_optional_value_8ipp.html</filename>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOwnedField.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_owned_field_8h.html</filename>
    <includes id="_sdl_field_8h" name="SdlField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlField.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_sdl_owned_field_8ipp" name="TSdlOwnedField.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.ipp</includes>
    <class kind="class">ph::TSdlOwnedField</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOwnedField.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_owned_field_8ipp.html</filename>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_sdl_output_context_8h" name="SdlOutputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlOutputContext.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_input_clause_8h" name="SdlInputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClause.h</includes>
    <includes id="_sdl_output_clause_8h" name="SdlOutputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClause.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_t_sdl_any_instance_8h" name="TSdlAnyInstance.h" local="yes" import="no" module="no" objc="no">SDL/TSdlAnyInstance.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOwnerClass.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_owner_class_8h.html</filename>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_t_sdl_brute_force_field_set_8h" name="TSdlBruteForceFieldSet.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlBruteForceFieldSet.h</includes>
    <includes id="_t_array_vector_8h" name="TArrayVector.h" local="yes" import="no" module="no" objc="no">Utility/TArrayVector.h</includes>
    <includes id="_t_sdl_owner_class_8ipp" name="TSdlOwnerClass.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnerClass.ipp</includes>
    <class kind="class">ph::TSdlOwnerClass</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOwnerClass.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_owner_class_8ipp.html</filename>
    <includes id="_t_sdl_owner_class_8h" name="TSdlOwnerClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnerClass.h</includes>
    <includes id="field__set__op_8h" name="field_set_op.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/field_set_op.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="_sdl_struct_field_stump_8h" name="SdlStructFieldStump.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStructFieldStump.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="_sdl_function_8h" name="SdlFunction.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlFunction.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOwnerStruct.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_owner_struct_8h.html</filename>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_sdl_brute_force_field_set_8h" name="TSdlBruteForceFieldSet.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlBruteForceFieldSet.h</includes>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_t_sdl_owner_struct_8ipp" name="TSdlOwnerStruct.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnerStruct.ipp</includes>
    <class kind="class">ph::TSdlOwnerStruct</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlOwnerStruct.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_owner_struct_8ipp.html</filename>
    <includes id="_t_sdl_owner_struct_8h" name="TSdlOwnerStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnerStruct.h</includes>
    <includes id="_sdl_field_8h" name="SdlField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlField.h</includes>
    <includes id="_sdl_struct_field_stump_8h" name="SdlStructFieldStump.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStructFieldStump.h</includes>
    <includes id="field__set__op_8h" name="field_set_op.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/field_set_op.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlPath.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_path_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlPath</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlQuaternion.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_quaternion_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlQuaternion</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlReal.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_real_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlReal</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlRealArray.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_real_array_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_resource_locator_8h" name="SdlResourceLocator.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceLocator.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="io__utils_8h" name="io_utils.h" local="yes" import="no" module="no" objc="no">DataIO/io_utils.h</includes>
    <class kind="class">ph::TSdlRealArray</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlReference.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_reference_8h.html</filename>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="_t_sdl_reference_8ipp" name="TSdlReference.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReference.ipp</includes>
    <class kind="class">ph::TSdlReference</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlReference.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_reference_8ipp.html</filename>
    <includes id="_t_sdl_reference_8h" name="TSdlReference.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReference.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlReferenceArray.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_reference_array_8h.html</filename>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="_t_sdl_reference_array_8ipp" name="TSdlReferenceArray.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReferenceArray.ipp</includes>
    <class kind="class">ph::TSdlReferenceArray</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlReferenceArray.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_reference_array_8ipp.html</filename>
    <includes id="_t_sdl_reference_array_8h" name="TSdlReferenceArray.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReferenceArray.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_sdl_output_context_8h" name="SdlOutputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlOutputContext.h</includes>
    <includes id="_t_sdl_reference_8h" name="TSdlReference.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReference.h</includes>
    <includes id="_sdl_dependency_resolver_8h" name="SdlDependencyResolver.h" local="yes" import="no" module="no" objc="no">SDL/SdlDependencyResolver.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="sdl__parser_8h" name="sdl_parser.h" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlResourceIdentifier.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_resource_identifier_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_resource_locator_8h" name="SdlResourceLocator.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceLocator.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <class kind="class">ph::TSdlResourceIdentifier</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlString.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_string_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <class kind="class">ph::TSdlString</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlStructArray.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_struct_array_8h.html</filename>
    <includes id="_t_sdl_owned_field_8h" name="TSdlOwnedField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnedField.h</includes>
    <includes id="_t_sdl_struct_array_8ipp" name="TSdlStructArray.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlStructArray.ipp</includes>
    <class kind="class">ph::TSdlStructArray</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlStructArray.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_struct_array_8ipp.html</filename>
    <includes id="_t_sdl_struct_array_8ipp" name="TSdlStructArray.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlStructArray.ipp</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_sdl_output_context_8h" name="SdlOutputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlOutputContext.h</includes>
    <includes id="_i_sdl_data_packet_group_8h" name="ISdlDataPacketGroup.h" local="yes" import="no" module="no" objc="no">SDL/ISdlDataPacketGroup.h</includes>
    <includes id="_sdl_named_output_clauses_8h" name="SdlNamedOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlNamedOutputClauses.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <includes id="sdl__parser_8h" name="sdl_parser.h" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlValue.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_value_8h.html</filename>
    <includes id="_t_sdl_abstract_value_8h" name="TSdlAbstractValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlAbstractValue.h</includes>
    <includes id="_t_sdl_value_8ipp" name="TSdlValue.ipp" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.ipp</includes>
    <class kind="class">ph::TSdlValue</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlValue.ipp</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_value_8ipp.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlVector2.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_vector2_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlVector2</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlVector3.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_vector3_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlVector3</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlVector3Array.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_vector3_array_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_resource_locator_8h" name="SdlResourceLocator.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceLocator.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <class kind="class">ph::TSdlVector3Array</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlVector4.h</name>
    <path>Source/SDL/Introspect/</path>
    <filename>_t_sdl_vector4_8h.html</filename>
    <includes id="_t_sdl_value_8h" name="TSdlValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlValue.h</includes>
    <includes id="_t_sdl_optional_value_8h" name="TSdlOptionalValue.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOptionalValue.h</includes>
    <includes id="_t_vector4_8h" name="TVector4.h" local="yes" import="no" module="no" objc="no">Math/TVector4.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::TSdlVector4</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ISdlDataPacketGroup.h</name>
    <path>Source/SDL/</path>
    <filename>_i_sdl_data_packet_group_8h.html</filename>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::ISdlDataPacketGroup</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ISdlReferenceGroup.h</name>
    <path>Source/SDL/</path>
    <filename>_i_sdl_reference_group_8h.html</filename>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::ISdlReferenceGroup</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ISdlResource.cpp</name>
    <path>Source/SDL/</path>
    <filename>_i_sdl_resource_8cpp.html</filename>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>ISdlResource.h</name>
    <path>Source/SDL/</path>
    <filename>_i_sdl_resource_8h.html</filename>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <class kind="class">ph::ISdlResource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Object.cpp</name>
    <path>Source/SDL/</path>
    <filename>_object_8cpp.html</filename>
    <includes id="_object_8h" name="Object.h" local="yes" import="no" module="no" objc="no">SDL/Object.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Object.h</name>
    <path>Source/SDL/</path>
    <filename>_object_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Object</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Option.cpp</name>
    <path>Source/SDL/</path>
    <filename>_option_8cpp.html</filename>
    <includes id="_option_8h" name="Option.h" local="yes" import="no" module="no" objc="no">SDL/Option.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Option.h</name>
    <path>Source/SDL/</path>
    <filename>_option_8h.html</filename>
    <includes id="_t_sdl_resource_base_8h" name="TSdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/TSdlResourceBase.h</includes>
    <includes id="sdl__interface_8h" name="sdl_interface.h" local="yes" import="no" module="no" objc="no">SDL/sdl_interface.h</includes>
    <class kind="class">ph::Option</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RawResourceCollection.cpp</name>
    <path>Source/SDL/</path>
    <filename>_raw_resource_collection_8cpp.html</filename>
    <includes id="_raw_resource_collection_8h" name="RawResourceCollection.h" local="yes" import="no" module="no" objc="no">SDL/RawResourceCollection.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>RawResourceCollection.h</name>
    <path>Source/SDL/</path>
    <filename>_raw_resource_collection_8h.html</filename>
    <includes id="_i_sdl_reference_group_8h" name="ISdlReferenceGroup.h" local="yes" import="no" module="no" objc="no">SDL/ISdlReferenceGroup.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::RawResourceCollection</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SceneDescription.cpp</name>
    <path>Source/SDL/</path>
    <filename>_scene_description_8cpp.html</filename>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SceneDescription.h</name>
    <path>Source/SDL/</path>
    <filename>_scene_description_8h.html</filename>
    <includes id="_raw_resource_collection_8h" name="RawResourceCollection.h" local="yes" import="no" module="no" objc="no">SDL/RawResourceCollection.h</includes>
    <includes id="_i_sdl_reference_group_8h" name="ISdlReferenceGroup.h" local="yes" import="no" module="no" objc="no">SDL/ISdlReferenceGroup.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::SceneDescription</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_exceptions.h</name>
    <path>Source/SDL/</path>
    <filename>sdl__exceptions_8h.html</filename>
    <class kind="class">ph::SdlException</class>
    <class kind="class">ph::SdlLoadError</class>
    <class kind="class">ph::SdlSaveError</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_fwd.h</name>
    <path>Source/SDL/</path>
    <filename>sdl__fwd_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_helpers.cpp</name>
    <path>Source/SDL/</path>
    <filename>sdl__helpers_8cpp.html</filename>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="_sdl_field_8h" name="SdlField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlField.h</includes>
    <includes id="_sdl_function_8h" name="SdlFunction.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlFunction.h</includes>
    <includes id="_sdl_output_clause_8h" name="SdlOutputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClause.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a16ba8b83316ce0f172ca13981e342faf</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa46a7b173fbfb3a13b4f6de1a803ae30</anchor>
      <arglist>(const SdlStruct *const ztruct)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a001940d07ebe975ffd1562eeb550b72a</anchor>
      <arglist>(const SdlFunction *const func)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa7230747349b1f9ad12fb50b2f9d66c8</anchor>
      <arglist>(const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a4e0808d419e52c24054d06627f1756d6</anchor>
      <arglist>(const SdlClass *const clazz, const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_title_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7603a49e4786a51e7e4c084fe147b798</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_camel_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a105dde3d8cfa84b15c8c428f6d2439c0</anchor>
      <arglist>(std::string_view sdlName, bool capitalizedFront=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_snake_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adf870754b5d0db338dd2e71d3631a31c</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a16ba8b83316ce0f172ca13981e342faf</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa46a7b173fbfb3a13b4f6de1a803ae30</anchor>
      <arglist>(const SdlStruct *const ztruct)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a001940d07ebe975ffd1562eeb550b72a</anchor>
      <arglist>(const SdlFunction *const func)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa7230747349b1f9ad12fb50b2f9d66c8</anchor>
      <arglist>(const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a4e0808d419e52c24054d06627f1756d6</anchor>
      <arglist>(const SdlClass *const clazz, const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_title_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7603a49e4786a51e7e4c084fe147b798</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_camel_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a105dde3d8cfa84b15c8c428f6d2439c0</anchor>
      <arglist>(std::string_view sdlName, bool capitalizedFront=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_snake_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adf870754b5d0db338dd2e71d3631a31c</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sdl_helpers.h</name>
    <path>Source/SDL/</path>
    <filename>sdl__helpers_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="_e_sdl_data_type_8h" name="ESdlDataType.h" local="yes" import="no" module="no" objc="no">SDL/ESdlDataType.h</includes>
    <includes id="sdl__helpers_8ipp" name="sdl_helpers.ipp" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.ipp</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a16ba8b83316ce0f172ca13981e342faf</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa46a7b173fbfb3a13b4f6de1a803ae30</anchor>
      <arglist>(const SdlStruct *const ztruct)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa7230747349b1f9ad12fb50b2f9d66c8</anchor>
      <arglist>(const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a001940d07ebe975ffd1562eeb550b72a</anchor>
      <arglist>(const SdlFunction *const func)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a4e0808d419e52c24054d06627f1756d6</anchor>
      <arglist>(const SdlClass *const clazz, const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_title_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7603a49e4786a51e7e4c084fe147b798</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_camel_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a105dde3d8cfa84b15c8c428f6d2439c0</anchor>
      <arglist>(std::string_view sdlName, bool capitalizedFront=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_snake_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adf870754b5d0db338dd2e71d3631a31c</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a16ba8b83316ce0f172ca13981e342faf</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa46a7b173fbfb3a13b4f6de1a803ae30</anchor>
      <arglist>(const SdlStruct *const ztruct)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa7230747349b1f9ad12fb50b2f9d66c8</anchor>
      <arglist>(const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a001940d07ebe975ffd1562eeb550b72a</anchor>
      <arglist>(const SdlFunction *const func)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a4e0808d419e52c24054d06627f1756d6</anchor>
      <arglist>(const SdlClass *const clazz, const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_title_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7603a49e4786a51e7e4c084fe147b798</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_camel_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a105dde3d8cfa84b15c8c428f6d2439c0</anchor>
      <arglist>(std::string_view sdlName, bool capitalizedFront=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_snake_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adf870754b5d0db338dd2e71d3631a31c</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sdl_helpers.ipp</name>
    <path>Source/SDL/</path>
    <filename>sdl__helpers_8ipp.html</filename>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_t_vector2_8h" name="TVector2.h" local="yes" import="no" module="no" objc="no">Math/TVector2.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_t_vector4_8h" name="TVector4.h" local="yes" import="no" module="no" objc="no">Math/TVector4.h</includes>
    <includes id="_t_quaternion_8h" name="TQuaternion.h" local="yes" import="no" module="no" objc="no">Math/TQuaternion.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_interface.h</name>
    <path>Source/SDL/</path>
    <filename>sdl__interface_8h.html</filename>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_t_sdl_8h" name="TSdl.h" local="yes" import="no" module="no" objc="no">SDL/TSdl.h</includes>
    <includes id="_t_sdl_enum_8h" name="TSdlEnum.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlEnum.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="_sdl_function_8h" name="SdlFunction.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlFunction.h</includes>
    <includes id="_sdl_enum_8h" name="SdlEnum.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlEnum.h</includes>
    <includes id="_t_sdl_general_enum_8h" name="TSdlGeneralEnum.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlGeneralEnum.h</includes>
    <includes id="_t_sdl_owner_class_8h" name="TSdlOwnerClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnerClass.h</includes>
    <includes id="_t_sdl_owner_struct_8h" name="TSdlOwnerStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlOwnerStruct.h</includes>
    <includes id="_t_sdl_bool_8h" name="TSdlBool.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlBool.h</includes>
    <includes id="_t_sdl_integer_8h" name="TSdlInteger.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlInteger.h</includes>
    <includes id="_t_sdl_real_8h" name="TSdlReal.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReal.h</includes>
    <includes id="_t_sdl_string_8h" name="TSdlString.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlString.h</includes>
    <includes id="_t_sdl_vector2_8h" name="TSdlVector2.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlVector2.h</includes>
    <includes id="_t_sdl_vector3_8h" name="TSdlVector3.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlVector3.h</includes>
    <includes id="_t_sdl_vector4_8h" name="TSdlVector4.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlVector4.h</includes>
    <includes id="_t_sdl_quaternion_8h" name="TSdlQuaternion.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlQuaternion.h</includes>
    <includes id="_t_sdl_real_array_8h" name="TSdlRealArray.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlRealArray.h</includes>
    <includes id="_t_sdl_vector3_array_8h" name="TSdlVector3Array.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlVector3Array.h</includes>
    <includes id="_t_sdl_reference_8h" name="TSdlReference.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReference.h</includes>
    <includes id="_t_sdl_reference_array_8h" name="TSdlReferenceArray.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlReferenceArray.h</includes>
    <includes id="_t_sdl_enum_field_8h" name="TSdlEnumField.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlEnumField.h</includes>
    <includes id="_t_sdl_path_8h" name="TSdlPath.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlPath.h</includes>
    <includes id="_t_sdl_resource_identifier_8h" name="TSdlResourceIdentifier.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlResourceIdentifier.h</includes>
    <includes id="_t_sdl_struct_array_8h" name="TSdlStructArray.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlStructArray.h</includes>
    <includes id="_t_sdl_method_8h" name="TSdlMethod.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/TSdlMethod.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>sdl__interface_8h.html</anchorfile>
      <anchor>aa785f3184e079d748f0b8ea9787ea3d3</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_SDL_STRUCT</name>
      <anchorfile>sdl__interface_8h.html</anchorfile>
      <anchor>aad8e98c81fe0f8a9cfac9dd49db52e51</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_SDL_FUNCTION</name>
      <anchorfile>sdl__interface_8h.html</anchorfile>
      <anchor>a95b68ae6f343af7b73f8df3e00841975</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>sdl__interface_8h.html</anchorfile>
      <anchor>ab187cc7ca132bdef3853e09184d4bcdf</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sdl_parser.cpp</name>
    <path>Source/SDL/</path>
    <filename>sdl__parser_8cpp.html</filename>
    <includes id="sdl__parser_8h" name="sdl_parser.h" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl_parser</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_parser.h</name>
    <path>Source/SDL/</path>
    <filename>sdl__parser_8h.html</filename>
    <includes id="sdl__parser_8ipp" name="sdl_parser.ipp" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.ipp</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl_parser</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_parser.ipp</name>
    <path>Source/SDL/</path>
    <filename>sdl__parser_8ipp.html</filename>
    <includes id="sdl__parser_8h" name="sdl_parser.h" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::sdl_parser</namespace>
  </compound>
  <compound kind="file">
    <name>sdl_traits.h</name>
    <path>Source/SDL/</path>
    <filename>sdl__traits_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <namespace>ph</namespace>
    <concept>ph::CSdlResource</concept>
    <concept>ph::CHasStaticSdlCategoryInfo</concept>
    <concept>ph::CHasSdlClassDefinition</concept>
    <concept>ph::CHasSdlStructDefinition</concept>
    <concept>ph::CHasSdlFunctionDefinition</concept>
    <concept>ph::CHasSdlEnumDefinition</concept>
    <concept>ph::CSdlInstance</concept>
    <concept>ph::CSdlStructSupportsInitToDefault</concept>
  </compound>
  <compound kind="file">
    <name>SdlCommandGenerator.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_command_generator_8cpp.html</filename>
    <includes id="_sdl_command_generator_8h" name="SdlCommandGenerator.h" local="yes" import="no" module="no" objc="no">SDL/SdlCommandGenerator.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_output_context_8h" name="SdlOutputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlOutputContext.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="_sdl_output_clauses_8h" name="SdlOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClauses.h</includes>
    <includes id="_sdl_inline_packet_interface_8h" name="SdlInlinePacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlInlinePacketInterface.h</includes>
    <includes id="_sdl_named_output_clauses_8h" name="SdlNamedOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlNamedOutputClauses.h</includes>
    <includes id="_semantic_version_8h" name="SemanticVersion.h" local="yes" import="no" module="no" objc="no">Utility/SemanticVersion.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlCommandGenerator.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_command_generator_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_sdl_data_packet_interface_8h" name="SdlDataPacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlDataPacketInterface.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::SdlCommandGenerator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlCommandParser.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_command_parser_8cpp.html</filename>
    <includes id="_sdl_command_parser_8h" name="SdlCommandParser.h" local="yes" import="no" module="no" objc="no">SDL/SdlCommandParser.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_sdl_inline_packet_interface_8h" name="SdlInlinePacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlInlinePacketInterface.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__parser_8h" name="sdl_parser.h" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlCommandParser.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_command_parser_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_sdl_input_clauses_8h" name="SdlInputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClauses.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="_sdl_data_packet_interface_8h" name="SdlDataPacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlDataPacketInterface.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_semantic_version_8h" name="SemanticVersion.h" local="yes" import="no" module="no" objc="no">Utility/SemanticVersion.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::SdlCommandParser</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlDataPacketCollection.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_data_packet_collection_8cpp.html</filename>
    <includes id="_sdl_data_packet_collection_8h" name="SdlDataPacketCollection.h" local="yes" import="no" module="no" objc="no">SDL/SdlDataPacketCollection.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlDataPacketCollection.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_data_packet_collection_8h.html</filename>
    <includes id="_i_sdl_data_packet_group_8h" name="ISdlDataPacketGroup.h" local="yes" import="no" module="no" objc="no">SDL/ISdlDataPacketGroup.h</includes>
    <includes id="_sdl_input_clauses_8h" name="SdlInputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClauses.h</includes>
    <class kind="class">ph::SdlDataPacketCollection</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlDataPacketInterface.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_data_packet_interface_8cpp.html</filename>
    <includes id="_sdl_data_packet_interface_8h" name="SdlDataPacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlDataPacketInterface.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlDataPacketInterface.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_data_packet_interface_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <class kind="class">ph::SdlDataPacketInterface</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlDependencyResolver.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_dependency_resolver_8cpp.html</filename>
    <includes id="_sdl_dependency_resolver_8h" name="SdlDependencyResolver.h" local="yes" import="no" module="no" objc="no">SDL/SdlDependencyResolver.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlDependencyResolver.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_dependency_resolver_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::SdlDependencyResolver</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlInlinePacketInterface.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_inline_packet_interface_8cpp.html</filename>
    <includes id="_sdl_inline_packet_interface_8h" name="SdlInlinePacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlInlinePacketInterface.h</includes>
    <includes id="_sdl_input_clause_8h" name="SdlInputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClause.h</includes>
    <includes id="_sdl_input_clauses_8h" name="SdlInputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClauses.h</includes>
    <includes id="_sdl_output_clause_8h" name="SdlOutputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClause.h</includes>
    <includes id="_sdl_output_clauses_8h" name="SdlOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClauses.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="_i_sdl_data_packet_group_8h" name="ISdlDataPacketGroup.h" local="yes" import="no" module="no" objc="no">SDL/ISdlDataPacketGroup.h</includes>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <includes id="sdl__parser_8h" name="sdl_parser.h" local="yes" import="no" module="no" objc="no">SDL/sdl_parser.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlInlinePacketInterface.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_inline_packet_interface_8h.html</filename>
    <includes id="_sdl_data_packet_interface_8h" name="SdlDataPacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlDataPacketInterface.h</includes>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::SdlInlinePacketInterface</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlInputClause.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_input_clause_8cpp.html</filename>
    <includes id="_sdl_input_clause_8h" name="SdlInputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClause.h</includes>
    <includes id="_sdl_resource_locator_8h" name="SdlResourceLocator.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceLocator.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlInputClause.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_input_clause_8h.html</filename>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::SdlInputClause</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlInputClauses.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_input_clauses_8h.html</filename>
    <includes id="_sdl_input_clause_8h" name="SdlInputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlInputClause.h</includes>
    <class kind="class">ph::SdlInputClauses</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlNamedOutputClauses.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_named_output_clauses_8cpp.html</filename>
    <includes id="_sdl_named_output_clauses_8h" name="SdlNamedOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlNamedOutputClauses.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlNamedOutputClauses.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_named_output_clauses_8h.html</filename>
    <includes id="_sdl_output_clauses_8h" name="SdlOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClauses.h</includes>
    <class kind="class">ph::SdlNamedOutputClauses</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlOutputClause.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_output_clause_8h.html</filename>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <class kind="class">ph::SdlOutputClause</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlOutputClauses.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_output_clauses_8h.html</filename>
    <includes id="_sdl_output_clause_8h" name="SdlOutputClause.h" local="yes" import="no" module="no" objc="no">SDL/SdlOutputClause.h</includes>
    <class kind="class">ph::SdlOutputClauses</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlResourceBase.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_resource_base_8h.html</filename>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <class kind="class">ph::SdlResourceBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlResourceId.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_resource_id_8cpp.html</filename>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlResourceId.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_resource_id_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlResourceLocator.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_resource_locator_8cpp.html</filename>
    <includes id="_sdl_resource_locator_8h" name="SdlResourceLocator.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceLocator.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <includes id="_filesystem_8h" name="Filesystem.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Filesystem.h</includes>
    <includes id="_resource_identifier_8h" name="ResourceIdentifier.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/ResourceIdentifier.h</includes>
    <includes id="_sdl_i_o_context_8h" name="SdlIOContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlIOContext.h</includes>
    <includes id="sdl__exceptions_8h" name="sdl_exceptions.h" local="yes" import="no" module="no" objc="no">SDL/sdl_exceptions.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlResourceLocator.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_resource_locator_8h.html</filename>
    <includes id="_i_resource_identifier_resolver_8h" name="IResourceIdentifierResolver.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/IResourceIdentifierResolver.h</includes>
    <class kind="class">ph::SdlResourceLocator</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlSceneFileReader.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_scene_file_reader_8cpp.html</filename>
    <includes id="_sdl_scene_file_reader_8h" name="SdlSceneFileReader.h" local="yes" import="no" module="no" objc="no">SDL/SdlSceneFileReader.h</includes>
    <includes id="ph__core_8h" name="ph_core.h" local="yes" import="no" module="no" objc="no">ph_core.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_formatted_text_input_stream_8h" name="FormattedTextInputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/FormattedTextInputStream.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_input_context_8h" name="SdlInputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlInputContext.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlSceneFileReader.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_scene_file_reader_8h.html</filename>
    <includes id="_sdl_command_parser_8h" name="SdlCommandParser.h" local="yes" import="no" module="no" objc="no">SDL/SdlCommandParser.h</includes>
    <includes id="_sdl_data_packet_collection_8h" name="SdlDataPacketCollection.h" local="yes" import="no" module="no" objc="no">SDL/SdlDataPacketCollection.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::SdlSceneFileReader</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlSceneFileWriter.cpp</name>
    <path>Source/SDL/</path>
    <filename>_sdl_scene_file_writer_8cpp.html</filename>
    <includes id="_sdl_scene_file_writer_8h" name="SdlSceneFileWriter.h" local="yes" import="no" module="no" objc="no">SDL/SdlSceneFileWriter.h</includes>
    <includes id="_formatted_text_output_stream_8h" name="FormattedTextOutputStream.h" local="yes" import="no" module="no" objc="no">DataIO/Stream/FormattedTextOutputStream.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_output_context_8h" name="SdlOutputContext.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlOutputContext.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_filesystem_8h" name="Filesystem.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Filesystem.h</includes>
    <includes id="ph__core_8h" name="ph_core.h" local="yes" import="no" module="no" objc="no">ph_core.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_semantic_version_8h" name="SemanticVersion.h" local="yes" import="no" module="no" objc="no">Utility/SemanticVersion.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SdlSceneFileWriter.h</name>
    <path>Source/SDL/</path>
    <filename>_sdl_scene_file_writer_8h.html</filename>
    <includes id="_sdl_command_generator_8h" name="SdlCommandGenerator.h" local="yes" import="no" module="no" objc="no">SDL/SdlCommandGenerator.h</includes>
    <includes id="_sdl_dependency_resolver_8h" name="SdlDependencyResolver.h" local="yes" import="no" module="no" objc="no">SDL/SdlDependencyResolver.h</includes>
    <includes id="_sdl_named_output_clauses_8h" name="SdlNamedOutputClauses.h" local="yes" import="no" module="no" objc="no">SDL/SdlNamedOutputClauses.h</includes>
    <includes id="_path_8h" name="Path.h" local="yes" import="no" module="no" objc="no">DataIO/FileSystem/Path.h</includes>
    <class kind="class">ph::SdlSceneFileWriter</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Tokenizer.cpp</name>
    <path>Source/SDL/</path>
    <filename>_tokenizer_8cpp.html</filename>
    <includes id="_tokenizer_8h" name="Tokenizer.h" local="yes" import="no" module="no" objc="no">SDL/Tokenizer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Tokenizer.h</name>
    <path>Source/SDL/</path>
    <filename>_tokenizer_8h.html</filename>
    <class kind="class">ph::Tokenizer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdl.cpp</name>
    <path>Source/SDL/</path>
    <filename>_t_sdl_8cpp.html</filename>
    <includes id="_t_sdl_8h" name="TSdl.h" local="yes" import="no" module="no" objc="no">SDL/TSdl.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_sdl_scene_file_reader_8h" name="SdlSceneFileReader.h" local="yes" import="no" module="no" objc="no">SDL/SdlSceneFileReader.h</includes>
    <includes id="_sdl_scene_file_writer_8h" name="SdlSceneFileWriter.h" local="yes" import="no" module="no" objc="no">SDL/SdlSceneFileWriter.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_sdl_inline_packet_interface_8h" name="SdlInlinePacketInterface.h" local="yes" import="no" module="no" objc="no">SDL/SdlInlinePacketInterface.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::detail</namespace>
  </compound>
  <compound kind="file">
    <name>TSdl.h</name>
    <path>Source/SDL/</path>
    <filename>_t_sdl_8h.html</filename>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <includes id="_t_sdl_8ipp" name="TSdl.ipp" local="yes" import="no" module="no" objc="no">SDL/TSdl.ipp</includes>
    <class kind="class">ph::TSdl</class>
    <class kind="class">ph::TSdl&lt; void &gt;</class>
    <class kind="class">ph::TSdl&lt; T &gt;</class>
    <namespace>ph</namespace>
    <namespace>ph::detail</namespace>
  </compound>
  <compound kind="file">
    <name>TSdl.ipp</name>
    <path>Source/SDL/</path>
    <filename>_t_sdl_8ipp.html</filename>
    <includes id="_t_sdl_8h" name="TSdl.h" local="yes" import="no" module="no" objc="no">SDL/TSdl.h</includes>
    <includes id="_i_sdl_resource_8h" name="ISdlResource.h" local="yes" import="no" module="no" objc="no">SDL/ISdlResource.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlAnyInstance.h</name>
    <path>Source/SDL/</path>
    <filename>_t_sdl_any_instance_8h.html</filename>
    <includes id="sdl__fwd_8h" name="sdl_fwd.h" local="yes" import="no" module="no" objc="no">SDL/sdl_fwd.h</includes>
    <includes id="_t_sdl_any_instance_8ipp" name="TSdlAnyInstance.ipp" local="yes" import="no" module="no" objc="no">SDL/TSdlAnyInstance.ipp</includes>
    <class kind="class">ph::TSdlAnyInstance</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlAnyInstance.ipp</name>
    <path>Source/SDL/</path>
    <filename>_t_sdl_any_instance_8ipp.html</filename>
    <includes id="_t_sdl_any_instance_8h" name="TSdlAnyInstance.h" local="yes" import="no" module="no" objc="no">SDL/TSdlAnyInstance.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="sdl__traits_8h" name="sdl_traits.h" local="yes" import="no" module="no" objc="no">SDL/sdl_traits.h</includes>
    <includes id="sdl__helpers_8h" name="sdl_helpers.h" local="yes" import="no" module="no" objc="no">SDL/sdl_helpers.h</includes>
    <includes id="_sdl_class_8h" name="SdlClass.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlClass.h</includes>
    <includes id="_sdl_struct_8h" name="SdlStruct.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlStruct.h</includes>
    <includes id="_sdl_function_8h" name="SdlFunction.h" local="yes" import="no" module="no" objc="no">SDL/Introspect/SdlFunction.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSdlResourceBase.h</name>
    <path>Source/SDL/</path>
    <filename>_t_sdl_resource_base_8h.html</filename>
    <includes id="_sdl_resource_base_8h" name="SdlResourceBase.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceBase.h</includes>
    <includes id="_e_sdl_type_category_8h" name="ESdlTypeCategory.h" local="yes" import="no" module="no" objc="no">SDL/ESdlTypeCategory.h</includes>
    <class kind="class">ph::TSdlResourceBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Source.dox</name>
    <path>Source/</path>
    <filename>_source_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>ByteBuffer.h</name>
    <path>Source/Utility/</path>
    <filename>_byte_buffer_8h.html</filename>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::ByteBuffer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>concurrent.cpp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>concurrent_8cpp.html</filename>
    <includes id="concurrent_8h" name="concurrent.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/concurrent.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>concurrent.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>concurrent_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FixedSizeThreadPool.cpp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_fixed_size_thread_pool_8cpp.html</filename>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>FixedSizeThreadPool.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_fixed_size_thread_pool_8h.html</filename>
    <class kind="class">ph::FixedSizeThreadPool</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>InitiallyPausedThread.cpp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_initially_paused_thread_8cpp.html</filename>
    <includes id="_initially_paused_thread_8h" name="InitiallyPausedThread.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/InitiallyPausedThread.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>InitiallyPausedThread.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_initially_paused_thread_8h.html</filename>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <class kind="class">ph::InitiallyPausedThread</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodicSingleThreadExecutor.cpp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_periodic_single_thread_executor_8cpp.html</filename>
    <includes id="_periodic_single_thread_executor_8h" name="PeriodicSingleThreadExecutor.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/PeriodicSingleThreadExecutor.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" import="no" module="no" objc="no">Utility/Timer.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodicSingleThreadExecutor.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_periodic_single_thread_executor_8h.html</filename>
    <class kind="class">ph::PeriodicSingleThreadExecutor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TAtomicQuasiQueue.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_atomic_quasi_queue_8h.html</filename>
    <includes id="_t_atomic_quasi_queue_8ipp" name="TAtomicQuasiQueue.ipp" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TAtomicQuasiQueue.ipp</includes>
    <class kind="class">ph::TAtomicQuasiQueue</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TAtomicQuasiQueue.ipp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_atomic_quasi_queue_8ipp.html</filename>
    <includes id="_t_atomic_quasi_queue_8h" name="TAtomicQuasiQueue.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TAtomicQuasiQueue.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TBlockableAtomicQuasiQueue.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_blockable_atomic_quasi_queue_8h.html</filename>
    <includes id="_t_blockable_atomic_quasi_queue_8ipp" name="TBlockableAtomicQuasiQueue.ipp" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TBlockableAtomicQuasiQueue.ipp</includes>
    <class kind="class">ph::TBlockableAtomicQuasiQueue</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TBlockableAtomicQuasiQueue.ipp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_blockable_atomic_quasi_queue_8ipp.html</filename>
    <includes id="_t_blockable_atomic_quasi_queue_8h" name="TBlockableAtomicQuasiQueue.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TBlockableAtomicQuasiQueue.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TMRSWResource.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_m_r_s_w_resource_8h.html</filename>
    <includes id="_i_no_copy_and_move_8h" name="INoCopyAndMove.h" local="yes" import="no" module="no" objc="no">Utility/INoCopyAndMove.h</includes>
    <class kind="class">ph::TMRSWResource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TRelaxedAtomic.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_relaxed_atomic_8h.html</filename>
    <class kind="class">ph::TRelaxedAtomic</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSPSCExecutor.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_s_p_s_c_executor_8h.html</filename>
    <includes id="_t_blockable_atomic_quasi_queue_8h" name="TBlockableAtomicQuasiQueue.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TBlockableAtomicQuasiQueue.h</includes>
    <includes id="_initially_paused_thread_8h" name="InitiallyPausedThread.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/InitiallyPausedThread.h</includes>
    <includes id="_t_function_8h" name="TFunction.h" local="yes" import="no" module="no" objc="no">Utility/TFunction.h</includes>
    <includes id="_t_s_p_s_c_executor_8ipp" name="TSPSCExecutor.ipp" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSPSCExecutor.ipp</includes>
    <class kind="class">ph::TSPSCExecutor</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSPSCExecutor.ipp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_s_p_s_c_executor_8ipp.html</filename>
    <includes id="_t_s_p_s_c_executor_8h" name="TSPSCExecutor.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSPSCExecutor.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSPSCRingBuffer.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_s_p_s_c_ring_buffer_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">Math/math.h</includes>
    <includes id="_i_no_copy_and_move_8h" name="INoCopyAndMove.h" local="yes" import="no" module="no" objc="no">Utility/INoCopyAndMove.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <class kind="class">ph::TSPSCRingBuffer</class>
    <class kind="class">ph::TSPSCRingBuffer::ProducerGuard</class>
    <class kind="class">ph::TSPSCRingBuffer::ConsumerGuard</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSynchronized.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_t_synchronized_8h.html</filename>
    <includes id="_i_no_copy_and_move_8h" name="INoCopyAndMove.h" local="yes" import="no" module="no" objc="no">Utility/INoCopyAndMove.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Workflow.cpp</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_workflow_8cpp.html</filename>
    <includes id="_workflow_8h" name="Workflow.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/Workflow.h</includes>
    <includes id="_fixed_size_thread_pool_8h" name="FixedSizeThreadPool.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/FixedSizeThreadPool.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Workflow.h</name>
    <path>Source/Utility/Concurrent/</path>
    <filename>_workflow_8h.html</filename>
    <includes id="_i_no_copy_and_move_8h" name="INoCopyAndMove.h" local="yes" import="no" module="no" objc="no">Utility/INoCopyAndMove.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::Workflow</class>
    <class kind="class">ph::Workflow::WorkHandle</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TStackSentinel.h</name>
    <path>Source/Utility/Debug/</path>
    <filename>_t_stack_sentinel_8h.html</filename>
    <class kind="class">ph::TStackSentinel</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>fixed_map_base.h</name>
    <path>Source/Utility/</path>
    <filename>fixed__map__base_8h.html</filename>
    <class kind="class">ph::TFixedMapEntry</class>
    <class kind="class">ph::TFixedMapBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IMoveOnly.h</name>
    <path>Source/Utility/</path>
    <filename>_i_move_only_8h.html</filename>
    <class kind="class">ph::IMoveOnly</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>INoCopyAndMove.h</name>
    <path>Source/Utility/</path>
    <filename>_i_no_copy_and_move_8h.html</filename>
    <class kind="class">ph::INoCopyAndMove</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>IUninstantiable.h</name>
    <path>Source/Utility/</path>
    <filename>_i_uninstantiable_8h.html</filename>
    <class kind="class">ph::IUninstantiable</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryArena.cpp</name>
    <path>Source/Utility/</path>
    <filename>_memory_arena_8cpp.html</filename>
    <includes id="_memory_arena_8h" name="MemoryArena.h" local="yes" import="no" module="no" objc="no">Utility/MemoryArena.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryArena.h</name>
    <path>Source/Utility/</path>
    <filename>_memory_arena_8h.html</filename>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <includes id="_t_function_8h" name="TFunction.h" local="yes" import="no" module="no" objc="no">Utility/TFunction.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <includes id="_memory_arena_8ipp" name="MemoryArena.ipp" local="yes" import="no" module="no" objc="no">Utility/MemoryArena.ipp</includes>
    <class kind="class">ph::MemoryArena</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryArena.ipp</name>
    <path>Source/Utility/</path>
    <filename>_memory_arena_8ipp.html</filename>
    <includes id="_memory_arena_8h" name="MemoryArena.h" local="yes" import="no" module="no" objc="no">Utility/MemoryArena.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SemanticVersion.cpp</name>
    <path>Source/Utility/</path>
    <filename>_semantic_version_8cpp.html</filename>
    <includes id="_semantic_version_8h" name="SemanticVersion.h" local="yes" import="no" module="no" objc="no">Utility/SemanticVersion.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>SemanticVersion.h</name>
    <path>Source/Utility/</path>
    <filename>_semantic_version_8h.html</filename>
    <class kind="class">ph::SemanticVersion</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TAnyPtr.h</name>
    <path>Source/Utility/</path>
    <filename>_t_any_ptr_8h.html</filename>
    <class kind="class">ph::TAnyPtr</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TArrayStack.h</name>
    <path>Source/Utility/</path>
    <filename>_t_array_stack_8h.html</filename>
    <includes id="_t_array_stack_8ipp" name="TArrayStack.ipp" local="yes" import="no" module="no" objc="no">Utility/TArrayStack.ipp</includes>
    <class kind="class">ph::TArrayStack</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TArrayStack.ipp</name>
    <path>Source/Utility/</path>
    <filename>_t_array_stack_8ipp.html</filename>
    <includes id="_t_array_stack_8h" name="TArrayStack.h" local="yes" import="no" module="no" objc="no">Utility/TArrayStack.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TArrayVector.h</name>
    <path>Source/Utility/</path>
    <filename>_t_array_vector_8h.html</filename>
    <includes id="_t_array_vector_8ipp" name="TArrayVector.ipp" local="yes" import="no" module="no" objc="no">Utility/TArrayVector.ipp</includes>
    <class kind="class">ph::TArrayVector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TArrayVector.ipp</name>
    <path>Source/Utility/</path>
    <filename>_t_array_vector_8ipp.html</filename>
    <includes id="_t_array_vector_8h" name="TArrayVector.h" local="yes" import="no" module="no" objc="no">Utility/TArrayVector.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TBitFlags.h</name>
    <path>Source/Utility/</path>
    <filename>_t_bit_flags_8h.html</filename>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_t_bit_flags_8ipp" name="TBitFlags.ipp" local="yes" import="no" module="no" objc="no">Utility/TBitFlags.ipp</includes>
    <class kind="class">ph::TBitFlags</class>
    <namespace>ph</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_INLINE_ENUM_FLAG_OPERATORS</name>
      <anchorfile>_t_bit_flags_8h.html</anchorfile>
      <anchor>a64590046e16e534159ae243ff6a5e90a</anchor>
      <arglist>(EnumType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TBitFlags.ipp</name>
    <path>Source/Utility/</path>
    <filename>_t_bit_flags_8ipp.html</filename>
    <includes id="_t_bit_flags_8h" name="TBitFlags.h" local="yes" import="no" module="no" objc="no">Utility/TBitFlags.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TConstIteratorProxy.h</name>
    <path>Source/Utility/</path>
    <filename>_t_const_iterator_proxy_8h.html</filename>
    <class kind="class">ph::TConstIteratorProxy</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TFixedEnumMap.h</name>
    <path>Source/Utility/</path>
    <filename>_t_fixed_enum_map_8h.html</filename>
    <includes id="fixed__map__base_8h" name="fixed_map_base.h" local="yes" import="no" module="no" objc="no">Utility/fixed_map_base.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TFixedIntegerMap.h</name>
    <path>Source/Utility/</path>
    <filename>_t_fixed_integer_map_8h.html</filename>
    <includes id="fixed__map__base_8h" name="fixed_map_base.h" local="yes" import="no" module="no" objc="no">Utility/fixed_map_base.h</includes>
    <namespace>ph</namespace>
    <namespace>ph::fixed_integer_map_detail</namespace>
  </compound>
  <compound kind="file">
    <name>TFunction.h</name>
    <path>Source/Utility/</path>
    <filename>_t_function_8h.html</filename>
    <class kind="class">ph::function_detail::TFunction</class>
    <class kind="class">ph::function_detail::TFunction&lt; R(Args...), MIN_SIZE_HINT &gt;</class>
    <namespace>ph</namespace>
    <namespace>ph::function_detail</namespace>
    <concept>ph::function_detail::CFreeFunctionForm</concept>
    <concept>ph::function_detail::CConstCallableMethodForm</concept>
    <concept>ph::function_detail::CNonConstCallableMethodForm</concept>
    <concept>ph::function_detail::CEmptyFunctorForm</concept>
    <concept>ph::function_detail::CNonEmptyFunctorForm</concept>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>Source/Utility/</path>
    <filename>_timer_8h.html</filename>
    <class kind="class">ph::Timer</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TIteratorProxy.h</name>
    <path>Source/Utility/</path>
    <filename>_t_iterator_proxy_8h.html</filename>
    <class kind="class">ph::TIteratorProxy</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>traits.h</name>
    <path>Source/Utility/</path>
    <filename>traits_8h.html</filename>
    <class kind="struct">ph::IsBuildable</class>
    <class kind="struct">ph::IsBuildable&lt; Built, From, std::enable_if_t&lt; std::is_convertible_v&lt; From, Built &gt;||std::is_constructible_v&lt; Built, From &gt; &gt; &gt;</class>
    <namespace>ph</namespace>
    <concept>ph::CCanAdd</concept>
    <concept>ph::CCanSubtract</concept>
    <concept>ph::CCanMultiply</concept>
    <concept>ph::CCanDivide</concept>
    <concept>ph::CSubscriptable</concept>
    <concept>ph::CEnum</concept>
    <concept>ph::CEnumWithSizeInfo</concept>
    <concept>ph::CNumber</concept>
    <concept>ph::CSame</concept>
    <concept>ph::CNotSame</concept>
    <concept>ph::CDerived</concept>
    <concept>ph::CBase</concept>
  </compound>
  <compound kind="file">
    <name>TSortedMap.h</name>
    <path>Source/Utility/</path>
    <filename>_t_sorted_map_8h.html</filename>
    <includes id="_t_sorted_vector_8h" name="TSortedVector.h" local="yes" import="no" module="no" objc="no">Utility/TSortedVector.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">Utility/utility.h</includes>
    <includes id="_t_sorted_map_8ipp" name="TSortedMap.ipp" local="yes" import="no" module="no" objc="no">Utility/TSortedMap.ipp</includes>
    <class kind="class">ph::TSortedMap</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSortedMap.ipp</name>
    <path>Source/Utility/</path>
    <filename>_t_sorted_map_8ipp.html</filename>
    <includes id="_t_sorted_map_8h" name="TSortedMap.h" local="yes" import="no" module="no" objc="no">Utility/TSortedMap.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSortedVector.h</name>
    <path>Source/Utility/</path>
    <filename>_t_sorted_vector_8h.html</filename>
    <includes id="_t_sorted_vector_8ipp" name="TSortedVector.ipp" local="yes" import="no" module="no" objc="no">Utility/TSortedVector.ipp</includes>
    <class kind="class">ph::TSortedVector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSortedVector.ipp</name>
    <path>Source/Utility/</path>
    <filename>_t_sorted_vector_8ipp.html</filename>
    <includes id="_t_sorted_vector_8h" name="TSortedVector.h" local="yes" import="no" module="no" objc="no">Utility/TSortedVector.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TSpan.h</name>
    <path>Source/Utility/</path>
    <filename>_t_span_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TStableIndexDenseVector.h</name>
    <path>Source/Utility/</path>
    <filename>_t_stable_index_dense_vector_8h.html</filename>
    <class kind="class">ph::TStableIndexDenseVector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TUniquePtrVector.h</name>
    <path>Source/Utility/</path>
    <filename>_t_unique_ptr_vector_8h.html</filename>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <class kind="class">ph::TUniquePtrVector</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>utility.h</name>
    <path>Source/Utility/</path>
    <filename>utility_8h.html</filename>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <class kind="struct">ph::TNonTypeTemplateArgDummy</class>
    <namespace>ph</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PH_DECLARE_RULE_OF_5_MEMBERS_NO_DTOR</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>aa0635783c7f744c190efe53784387031</anchor>
      <arglist>(ClassType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_RULE_OF_5_MEMBERS_NO_DTOR</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>ac188ab6d555beb38f456af994f05ad72</anchor>
      <arglist>(ClassType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS_NO_DTOR</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>ad8e10a0e23436665e9b124f942489cbe</anchor>
      <arglist>(ClassType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DECLARE_RULE_OF_5_MEMBERS</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>a68432c8d4ab2916cfb74c4640ee88f6f</anchor>
      <arglist>(ClassType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>ae93ae26d1a22a69bbccaf8aba9cded3e</anchor>
      <arglist>(ClassType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>afa87532c3c11b8dad14d4cd25dfa00b7</anchor>
      <arglist>(ClassType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CookedDataStorage.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_data_storage_8cpp.html</filename>
    <includes id="_cooked_data_storage_8h" name="CookedDataStorage.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedDataStorage.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedDataStorage.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_data_storage_8h.html</filename>
    <includes id="_t_iterator_proxy_8h" name="TIteratorProxy.h" local="yes" import="no" module="no" objc="no">Utility/TIteratorProxy.h</includes>
    <includes id="_t_const_iterator_proxy_8h" name="TConstIteratorProxy.h" local="yes" import="no" module="no" objc="no">Utility/TConstIteratorProxy.h</includes>
    <includes id="_surface_behavior_8h" name="SurfaceBehavior.h" local="yes" import="no" module="no" objc="no">Core/SurfaceBehavior/SurfaceBehavior.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <class kind="class">ph::CookedDataStorage</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedGeometry.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_geometry_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>CookedGeometry.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_geometry_8h.html</filename>
    <includes id="data__structure__fwd_8h" name="data_structure_fwd.h" local="yes" import="no" module="no" objc="no">Core/Intersection/data_structure_fwd.h</includes>
    <class kind="class">ph::CookedGeometry</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedMaterial.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_material_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>CookedMaterial.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_material_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>CookedMotion.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_motion_8cpp.html</filename>
    <includes id="_cooked_motion_8h" name="CookedMotion.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedMotion.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedMotion.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_motion_8h.html</filename>
    <includes id="_core_2_quantity_2_time_8h" name="Time.h" local="yes" import="no" module="no" objc="no">Core/Quantity/Time.h</includes>
    <class kind="class">ph::MotionCookConfig</class>
    <class kind="class">ph::CookedMotion</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>CookedNamedResource.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_named_resource_8cpp.html</filename>
    <includes id="_cooked_named_resource_8h" name="CookedNamedResource.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedNamedResource.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedNamedResource.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_named_resource_8h.html</filename>
    <class kind="class">ph::CookedNamedResource</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedResourceCollection.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_resource_collection_8cpp.html</filename>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedResourceCollection.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_resource_collection_8h.html</filename>
    <includes id="_cooked_resource_collection_base_8h" name="CookedResourceCollectionBase.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollectionBase.h</includes>
    <includes id="_t_unique_ptr_vector_8h" name="TUniquePtrVector.h" local="yes" import="no" module="no" objc="no">Utility/TUniquePtrVector.h</includes>
    <includes id="_transform_8h" name="Transform.h" local="yes" import="no" module="no" objc="no">Math/Transform/Transform.h</includes>
    <includes id="_cooked_geometry_8h" name="CookedGeometry.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedGeometry.h</includes>
    <includes id="_cooked_motion_8h" name="CookedMotion.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedMotion.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <includes id="_primitive_metadata_8h" name="PrimitiveMetadata.h" local="yes" import="no" module="no" objc="no">Core/Intersection/PrimitiveMetadata.h</includes>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <includes id="_t_indexed_polygon_buffer_8h" name="TIndexedPolygonBuffer.h" local="yes" import="no" module="no" objc="no">Core/Intersection/DataStructure/TIndexedPolygonBuffer.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_cooked_named_resource_8h" name="CookedNamedResource.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedNamedResource.h</includes>
    <class kind="class">ph::CookedResourceCollection</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookedResourceCollectionBase.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooked_resource_collection_base_8h.html</filename>
    <includes id="_i_no_copy_and_move_8h" name="INoCopyAndMove.h" local="yes" import="no" module="no" objc="no">Utility/INoCopyAndMove.h</includes>
    <includes id="_t_unique_ptr_vector_8h" name="TUniquePtrVector.h" local="yes" import="no" module="no" objc="no">Utility/TUniquePtrVector.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <class kind="class">ph::CookedResourceCollectionBase</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookingConfig.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooking_config_8h.html</filename>
    <class kind="class">ph::CookingConfig</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookingContext.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooking_context_8cpp.html</filename>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_actor_2_geometry_2_geometry_8h" name="Geometry.h" local="yes" import="no" module="no" objc="no">Actor/Geometry/Geometry.h</includes>
    <includes id="_actor_8h" name="Actor.h" local="yes" import="no" module="no" objc="no">Actor/Actor.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookingContext.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cooking_context_8h.html</filename>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_cooking_config_8h" name="CookingConfig.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingConfig.h</includes>
    <class kind="class">ph::CookingContext</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>CookOrder.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_cook_order_8h.html</filename>
    <class kind="class">ph::CookOrder</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PostCookResourceCollectionProxy.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_post_cook_resource_collection_proxy_8h.html</filename>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PreCookReport.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_pre_cook_report_8cpp.html</filename>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>PreCookReport.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_pre_cook_report_8h.html</filename>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <class kind="class">ph::PreCookReport</class>
    <namespace>ph</namespace>
    <namespace>ph::math</namespace>
  </compound>
  <compound kind="file">
    <name>PreCookResourceCollectionProxy.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_pre_cook_resource_collection_proxy_8h.html</filename>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <class kind="class">ph::PreCookResourceCollectionProxy</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransientResourceCache.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_transient_resource_cache_8cpp.html</filename>
    <includes id="_transient_resource_cache_8h" name="TransientResourceCache.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientResourceCache.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransientResourceCache.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_transient_resource_cache_8h.html</filename>
    <includes id="_cooked_resource_collection_base_8h" name="CookedResourceCollectionBase.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollectionBase.h</includes>
    <includes id="_t_unique_ptr_vector_8h" name="TUniquePtrVector.h" local="yes" import="no" module="no" objc="no">Utility/TUniquePtrVector.h</includes>
    <includes id="_t_synchronized_8h" name="TSynchronized.h" local="yes" import="no" module="no" objc="no">Utility/Concurrent/TSynchronized.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">Utility/traits.h</includes>
    <includes id="_sdl_resource_id_8h" name="SdlResourceId.h" local="yes" import="no" module="no" objc="no">SDL/SdlResourceId.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <class kind="class">ph::TransientResourceCache</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransientVisualElement.cpp</name>
    <path>Source/World/Foundation/</path>
    <filename>_transient_visual_element_8cpp.html</filename>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>TransientVisualElement.h</name>
    <path>Source/World/Foundation/</path>
    <filename>_transient_visual_element_8h.html</filename>
    <includes id="_intersectable_8h" name="Intersectable.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersectable.h</includes>
    <class kind="class">ph::TransientVisualElement</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Scene.cpp</name>
    <path>Source/World/</path>
    <filename>_scene_8cpp.html</filename>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_emitter_sampler_8h" name="EmitterSampler.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/EmitterSampler.h</includes>
    <includes id="_hit_probe_8h" name="HitProbe.h" local="yes" import="no" module="no" objc="no">Core/HitProbe.h</includes>
    <includes id="_hit_detail_8h" name="HitDetail.h" local="yes" import="no" module="no" objc="no">Core/HitDetail.h</includes>
    <includes id="_ray_8h" name="Ray.h" local="yes" import="no" module="no" objc="no">Core/Ray.h</includes>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <includes id="_primitive_8h" name="Primitive.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Primitive.h</includes>
    <includes id="_emitter_8h" name="Emitter.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Emitter.h</includes>
    <includes id="_energy_emission_sample_query_8h" name="EnergyEmissionSampleQuery.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Query/EnergyEmissionSampleQuery.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>Scene.h</name>
    <path>Source/World/</path>
    <filename>_scene_8h.html</filename>
    <includes id="math__fwd_8h" name="math_fwd.h" local="yes" import="no" module="no" objc="no">Math/math_fwd.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" import="no" module="no" objc="no">Math/Color/Spectrum.h</includes>
    <class kind="class">ph::Scene</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VisualWorld.cpp</name>
    <path>Source/World/</path>
    <filename>_visual_world_8cpp.html</filename>
    <includes id="_visual_world_8h" name="VisualWorld.h" local="yes" import="no" module="no" objc="no">World/VisualWorld.h</includes>
    <includes id="_scene_description_8h" name="SceneDescription.h" local="yes" import="no" module="no" objc="no">SDL/SceneDescription.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_cooking_context_8h" name="CookingContext.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookingContext.h</includes>
    <includes id="_core_cooking_context_8h" name="CoreCookingContext.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookingContext.h</includes>
    <includes id="_core_cooked_unit_8h" name="CoreCookedUnit.h" local="yes" import="no" module="no" objc="no">EngineEnv/CoreCookedUnit.h</includes>
    <includes id="_actor_8h" name="Actor.h" local="yes" import="no" module="no" objc="no">Actor/Actor.h</includes>
    <includes id="_brute_force_intersector_8h" name="BruteForceIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/BruteForceIntersector.h</includes>
    <includes id="_classic_bvh_intersector_8h" name="ClassicBvhIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Bvh/ClassicBvhIntersector.h</includes>
    <includes id="_t_indexed_kdtree_intersector_8h" name="TIndexedKdtreeIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector/TIndexedKdtreeIntersector.h</includes>
    <includes id="_kdtree_intersector_8h" name="KdtreeIntersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Kdtree/KdtreeIntersector.h</includes>
    <includes id="_e_s_uniform_random_8h" name="ESUniformRandom.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/ESUniformRandom.h</includes>
    <includes id="_e_s_power_favoring_8h" name="ESPowerFavoring.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/ESPowerFavoring.h</includes>
    <includes id="_a_phantom_model_8h" name="APhantomModel.h" local="yes" import="no" module="no" objc="no">Actor/APhantomModel.h</includes>
    <includes id="_cook_order_8h" name="CookOrder.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookOrder.h</includes>
    <includes id="_pre_cook_report_8h" name="PreCookReport.h" local="yes" import="no" module="no" objc="no">World/Foundation/PreCookReport.h</includes>
    <namespace>ph</namespace>
  </compound>
  <compound kind="file">
    <name>VisualWorld.h</name>
    <path>Source/World/</path>
    <filename>_visual_world_8h.html</filename>
    <includes id="_cooked_data_storage_8h" name="CookedDataStorage.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedDataStorage.h</includes>
    <includes id="_transient_visual_element_8h" name="TransientVisualElement.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientVisualElement.h</includes>
    <includes id="_actor_8h" name="Actor.h" local="yes" import="no" module="no" objc="no">Actor/Actor.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" import="no" module="no" objc="no">World/Scene.h</includes>
    <includes id="_intersector_8h" name="Intersector.h" local="yes" import="no" module="no" objc="no">Core/Intersection/Intersector.h</includes>
    <includes id="_emitter_sampler_8h" name="EmitterSampler.h" local="yes" import="no" module="no" objc="no">Core/Emitter/Sampler/EmitterSampler.h</includes>
    <includes id="_t_a_a_b_b3_d_8h" name="TAABB3D.h" local="yes" import="no" module="no" objc="no">Math/Geometry/TAABB3D.h</includes>
    <includes id="_t_vector3_8h" name="TVector3.h" local="yes" import="no" module="no" objc="no">Math/TVector3.h</includes>
    <includes id="_i_move_only_8h" name="IMoveOnly.h" local="yes" import="no" module="no" objc="no">Utility/IMoveOnly.h</includes>
    <includes id="_e_accelerator_8h" name="EAccelerator.h" local="yes" import="no" module="no" objc="no">EngineEnv/EAccelerator.h</includes>
    <includes id="_cooked_resource_collection_8h" name="CookedResourceCollection.h" local="yes" import="no" module="no" objc="no">World/Foundation/CookedResourceCollection.h</includes>
    <includes id="_transient_resource_cache_8h" name="TransientResourceCache.h" local="yes" import="no" module="no" objc="no">World/Foundation/TransientResourceCache.h</includes>
    <includes id="_t_span_8h" name="TSpan.h" local="yes" import="no" module="no" objc="no">Utility/TSpan.h</includes>
    <class kind="class">ph::VisualWorld</class>
    <namespace>ph</namespace>
  </compound>
  <compound kind="class">
    <name>ph::AAreaLight</name>
    <filename>classph_1_1_a_area_light.html</filename>
    <base>ph::AGeometricLight</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Geometry &gt;</type>
      <name>getArea</name>
      <anchorfile>classph_1_1_a_area_light.html</anchorfile>
      <anchor>a488cacd0cbc002c83e3b66cdce65ed0f</anchor>
      <arglist>(const CookingContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>getGeometry</name>
      <anchorfile>classph_1_1_a_area_light.html</anchorfile>
      <anchor>ad871706ea9b7689c1b48d2736622f9ab</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Material &gt;</type>
      <name>getMaterial</name>
      <anchorfile>classph_1_1_a_area_light.html</anchorfile>
      <anchor>a159200dc4d48ff45e418e08ef7c70490</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>buildEmitter</name>
      <anchorfile>classph_1_1_a_area_light.html</anchorfile>
      <anchor>a9990624d9550958662ef9817e035fb60</anchor>
      <arglist>(const CookingContext &amp;ctx, TSpanView&lt; const Primitive * &gt; lightPrimitives) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_area_light.html</anchorfile>
      <anchor>ab1255438851d934f66dff0553718dbd2</anchor>
      <arglist>(TSdlOwnerClass&lt; AAreaLight &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AbradedOpaque</name>
    <filename>classph_1_1_abraded_opaque.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type></type>
      <name>AbradedOpaque</name>
      <anchorfile>classph_1_1_abraded_opaque.html</anchorfile>
      <anchor>a31d36fa8d8cf81d0bf20164cc9ee7974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_abraded_opaque.html</anchorfile>
      <anchor>a7fa7ba9abd6da19fd982a3ee3af63a0a</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_abraded_opaque.html</anchorfile>
      <anchor>acbcb56b24e999b4d9219c01d293cb105</anchor>
      <arglist>(TSdlOwnerClass&lt; AbradedOpaque &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AbradedSurface</name>
    <filename>classph_1_1_abraded_surface.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_abraded_surface.html</anchorfile>
      <anchor>ae211a5f8a6dd0474eab4cde164a9eaab</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AbradedTranslucent</name>
    <filename>classph_1_1_abraded_translucent.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type></type>
      <name>AbradedTranslucent</name>
      <anchorfile>classph_1_1_abraded_translucent.html</anchorfile>
      <anchor>a387e71909168ad4a6d883113b27bd399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_abraded_translucent.html</anchorfile>
      <anchor>a8dfed85b036beb7952630eaa22722160</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_abraded_translucent.html</anchorfile>
      <anchor>a73406a8ad1d1f98d78566faa3db578d8</anchor>
      <arglist>(TSdlOwnerClass&lt; AbradedTranslucent &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Actor</name>
    <filename>classph_1_1_actor.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Actor &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PreCookReport</type>
      <name>preCook</name>
      <anchorfile>classph_1_1_actor.html</anchorfile>
      <anchor>abdd063fbdc995b5144a936a583ca6244</anchor>
      <arglist>(const CookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_actor.html</anchorfile>
      <anchor>a3f88bb3c058a518f540ee49c4dac94c3</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postCook</name>
      <anchorfile>classph_1_1_actor.html</anchorfile>
      <anchor>a192c4bfd05995ea0f1bf3b69768e7e5d</anchor>
      <arglist>(const CookingContext &amp;ctx, TransientVisualElement &amp;element) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CookOrder</type>
      <name>getCookOrder</name>
      <anchorfile>classph_1_1_actor.html</anchorfile>
      <anchor>ae588f941475efffdae007195c8e13adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>stagelessCook</name>
      <anchorfile>classph_1_1_actor.html</anchorfile>
      <anchor>ad1d2a20cbb34215d57d6b2824218e7f3</anchor>
      <arglist>(const CookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_actor.html</anchorfile>
      <anchor>a04dd2c9ce19fef89fdffdd9a4e90ff9a</anchor>
      <arglist>(TSdlOwnerClass&lt; Actor &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ActorCookException</name>
    <filename>classph_1_1_actor_cook_exception.html</filename>
    <base>ph::CookException</base>
  </compound>
  <compound kind="class">
    <name>ph::AdaptiveSamplingRenderer</name>
    <filename>classph_1_1_adaptive_sampling_renderer.html</filename>
    <base>ph::SamplingRenderer</base>
    <member kind="function">
      <type>void</type>
      <name>doUpdate</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>a5c41d80ea5f1f63760fd73a9bb29e4e3</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>af371754d875de3fa0edf5e81a741a0b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>a8788f8b27299026ce7e461733ff00a54</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>asyncPollUpdatedRegions</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>a8cc7d7d356988b1a6d769dcbe626a0bc</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>a811c5ede2c22028a7bbfea9874a5a277</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>ace8427003c789a6dff1308e627d2300c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>a4127a7f8697756f8cee5aee62fc66482</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_adaptive_sampling_renderer.html</anchorfile>
      <anchor>aec479774acd3405cc784d3f853cc8027</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ADome</name>
    <filename>classph_1_1_a_dome.html</filename>
    <base>ph::PhysicalActor</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>loadRadianceFunction</name>
      <anchorfile>classph_1_1_a_dome.html</anchorfile>
      <anchor>a0afa3c7c7072c429a7f73ffc59fa922b</anchor>
      <arglist>(const CookingContext &amp;ctx, DomeRadianceFunctionInfo *out_info) const =0</arglist>
    </member>
    <member kind="function">
      <type>PreCookReport</type>
      <name>preCook</name>
      <anchorfile>classph_1_1_a_dome.html</anchorfile>
      <anchor>a022ad847f1487f9b842035dbe6e7dc2e</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_dome.html</anchorfile>
      <anchor>a8c71e2f0c64c0ea216c510aab8d0351b</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override</arglist>
    </member>
    <member kind="function">
      <type>CookOrder</type>
      <name>getCookOrder</name>
      <anchorfile>classph_1_1_a_dome.html</anchorfile>
      <anchor>aa8ecbccf41fb296e37f041993833aaed</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_dome.html</anchorfile>
      <anchor>a843fc437974b4bf1ef1ff77d167e88b8</anchor>
      <arglist>(TSdlOwnerClass&lt; ADome &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AGeometricLight</name>
    <filename>classph_1_1_a_geometric_light.html</filename>
    <base>ph::ALight</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Geometry &gt;</type>
      <name>getGeometry</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>ac4b26b287a368441b17671768b343bcb</anchor>
      <arglist>(const CookingContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Emitter *</type>
      <name>buildEmitter</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a30a564686d5700c62cf129771c183620</anchor>
      <arglist>(const CookingContext &amp;ctx, TSpanView&lt; const Primitive * &gt; lightPrimitives) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Material &gt;</type>
      <name>getMaterial</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a0b3b033f3b9f76dc599e54e448105640</anchor>
      <arglist>(const CookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>PreCookReport</type>
      <name>preCook</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a9c89a16aaf6084b4981699e76990206b</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>ae3fc4bda1244498f7fbcca7498cb094b</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a88768136bd0f2195abe2eabecbd77705</anchor>
      <arglist>(TSdlOwnerClass&lt; AGeometricLight &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Geometry &gt;</type>
      <name>getSanifiedGeometry</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a886213a39e4eba1639c0b539a4427d0d</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;srcGeometry, const TransformInfo &amp;srcLocalToWorld, math::TDecomposedTransform&lt; real &gt; *out_remainingLocalToWorld=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual EmitterFeatureSet</type>
      <name>getEmitterFeatureSet</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>ab7b93aa1bfa2ec1f636cd8344c697fa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isDirectlyVisible</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a24a22f3c329ef2a8fee7cf72f886c61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useBsdfSample</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>aaf2d09afb7f0f910a64b3bea543b7e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useDirectSample</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>aa0d6ecf582463c635f1113223c1ee829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useEmissionSample</name>
      <anchorfile>classph_1_1_a_geometric_light.html</anchorfile>
      <anchor>a802db670401c6deeea2535c221663f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AIesAttenuatedLight</name>
    <filename>classph_1_1_a_ies_attenuated_light.html</filename>
    <base>ph::ALight</base>
    <member kind="function">
      <type>PreCookReport</type>
      <name>preCook</name>
      <anchorfile>classph_1_1_a_ies_attenuated_light.html</anchorfile>
      <anchor>aa920831a76389566563d5cb907e9c16b</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_ies_attenuated_light.html</anchorfile>
      <anchor>a654e67614d8e0bbdc451d195dcdcd51d</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classph_1_1_a_ies_attenuated_light.html</anchorfile>
      <anchor>a8e916f5c55b0c24c5a440b1c0328307c</anchor>
      <arglist>(const std::shared_ptr&lt; ALight &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIesFile</name>
      <anchorfile>classph_1_1_a_ies_attenuated_light.html</anchorfile>
      <anchor>a76f4404f224d2a748ba793a0a7cbfc7f</anchor>
      <arglist>(const Path &amp;iesFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_ies_attenuated_light.html</anchorfile>
      <anchor>a01d6ebabf426a79afe2360ddc4534f3b</anchor>
      <arglist>(TSdlOwnerClass&lt; AIesAttenuatedLight &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AImageDome</name>
    <filename>classph_1_1_a_image_dome.html</filename>
    <base>ph::ADome</base>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>loadRadianceFunction</name>
      <anchorfile>classph_1_1_a_image_dome.html</anchorfile>
      <anchor>af1a98206f8d832c04c0f6b982375cdaa</anchor>
      <arglist>(const CookingContext &amp;ctx, DomeRadianceFunctionInfo *out_info) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_image_dome.html</anchorfile>
      <anchor>a72c55ee81e1fe1418220f7ac8eaad96c</anchor>
      <arglist>(TSdlOwnerClass&lt; AImageDome &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ALight</name>
    <filename>classph_1_1_a_light.html</filename>
    <base>ph::PhysicalActor</base>
    <member kind="function" virtualness="pure">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_light.html</anchorfile>
      <anchor>a7c8423f21a45bc8d7bbb864ef65688cc</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_light.html</anchorfile>
      <anchor>a7c8884271b419e89f3c8301e41c16112</anchor>
      <arglist>(TSdlOwnerClass&lt; ALight &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AltPath</name>
    <filename>classph_1_1_alt_path.html</filename>
    <member kind="function">
      <type></type>
      <name>AltPath</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a32adee97c5ec3bcdc9af08f2d96e43d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AltPath</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a563b3c8696b6cb4c1af82bb0e6351dee</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRelative</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a2b5cc03f74cd7531c946257013c9e03a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAbsolute</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>ad383db9e01a4bb160e359aa2c3b55610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>add731df8006f1ae61c8758e3e7e7427c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toAbsoluteString</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>afa97761f3a3c7d5b903f118a66501ea9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AltPath</type>
      <name>append</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a1dc680b7cfb196b8ce0a305eae2fbe7a</anchor>
      <arglist>(const AltPath &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a9a170a7155bd5ee3c80d18e76dc7ff0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AltPath</type>
      <name>removeLeadingSeparator</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a63db5de0a1a88758e857d82f9325f0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AltPath</type>
      <name>removeTrailingSeparator</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a732ae5c501d0c423a2ef5e5ce817f1fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getExtension</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>ae928beac21f38fe55a068c2ca82c8ae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classph_1_1_alt_path.html</anchorfile>
      <anchor>a705e7fd64d874a4022b42b5c5e2b7da5</anchor>
      <arglist>(const AltPath &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AModel</name>
    <filename>classph_1_1_a_model.html</filename>
    <base>ph::PhysicalActor</base>
    <member kind="function">
      <type>PreCookReport</type>
      <name>preCook</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>a8900b4e8ce07cdf0eea1a8ab35e48617</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>a7861e329904f297b5650f675cddfdff7</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override</arglist>
    </member>
    <member kind="function">
      <type>const Geometry *</type>
      <name>getGeometry</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>a54ebe981e6704183a8aeb2c3140568de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getMaterial</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>ad97311092c0f50b53a3418734e186d3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometry</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>a94bc65537d35ebfc9a291e7c45d01289</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterial</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>a89c195e629d61ef8d6e5c2090020b001</anchor>
      <arglist>(const std::shared_ptr&lt; Material &gt; &amp;material)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionSource</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>acee82acb0fa671c37419f90398eeec59</anchor>
      <arglist>(const std::shared_ptr&lt; MotionSource &gt; &amp;motion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_model.html</anchorfile>
      <anchor>a234b2e41f438ccfb47a1c91b9736e8b1</anchor>
      <arglist>(TSdlOwnerClass&lt; AModel &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AModelLight</name>
    <filename>classph_1_1_a_model_light.html</filename>
    <base>ph::AGeometricLight</base>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>getGeometry</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a43916eb49fd43c3cea7e278a44ba1e74</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Material &gt;</type>
      <name>getMaterial</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a00fee849e5a263d022abede056761a1b</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>buildEmitter</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a4266eb0d0c345e4ccc97fb8d9283115a</anchor>
      <arglist>(const CookingContext &amp;ctx, TSpanView&lt; const Primitive * &gt; lightPrimitives) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometry</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a48605b9e088ab8a13eedfc47f2445d2f</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterial</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a90508c268fe9d64a2bdac8fb1ad54a4b</anchor>
      <arglist>(const std::shared_ptr&lt; Material &gt; &amp;material)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackFaceEmit</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a3d621fb4e6fff9aa4f23845dabe4d5f6</anchor>
      <arglist>(bool isBackFaceEmit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_model_light.html</anchorfile>
      <anchor>a5ad51c09c92961cec69ae9ee01fab8a9</anchor>
      <arglist>(TSdlOwnerClass&lt; AModelLight &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AnisoTrowbridgeReitz</name>
    <filename>classph_1_1_aniso_trowbridge_reitz.html</filename>
    <base>ph::TrowbridgeReitz</base>
    <member kind="function">
      <type></type>
      <name>AnisoTrowbridgeReitz</name>
      <anchorfile>classph_1_1_aniso_trowbridge_reitz.html</anchorfile>
      <anchor>a95f559e7a053e39e471a123d00e95320</anchor>
      <arglist>(real alphaU, real alphaV, EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_aniso_trowbridge_reitz.html</anchorfile>
      <anchor>a0c492973b6ca0a636b54803ed293a82e</anchor>
      <arglist>(const SurfaceHit &amp;X) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>lambda</name>
      <anchorfile>classph_1_1_aniso_trowbridge_reitz.html</anchorfile>
      <anchor>a1bd9a7b2e74199166d8f72f5b0981fbb</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;unitDir, const std::array&lt; real, 2 &gt; &amp;alphas) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>distribution</name>
      <anchorfile>classph_1_1_aniso_trowbridge_reitz.html</anchorfile>
      <anchor>a178a10df769c510ece60b4166b917164</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleH</name>
      <anchorfile>classph_1_1_aniso_trowbridge_reitz.html</anchorfile>
      <anchor>a2f032e0b0d12ae42f5a2d241110444fc</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::APhantomModel</name>
    <filename>classph_1_1_a_phantom_model.html</filename>
    <base>ph::AModel</base>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_phantom_model.html</anchorfile>
      <anchor>a9a2e1ce8883e76019c5415c80db01124</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override</arglist>
    </member>
    <member kind="function">
      <type>CookOrder</type>
      <name>getCookOrder</name>
      <anchorfile>classph_1_1_a_phantom_model.html</anchorfile>
      <anchor>a01d5783e9018f029c8c7919ab04fcf39</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ApiDatabase</name>
    <filename>classph_1_1_api_database.html</filename>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>addResource</name>
      <anchorfile>classph_1_1_api_database.html</anchorfile>
      <anchor>a941d5780c7c6adbf547439300f42b797</anchor>
      <arglist>(std::unique_ptr&lt; Resource &gt; resource)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Resource *</type>
      <name>getResource</name>
      <anchorfile>classph_1_1_api_database.html</anchorfile>
      <anchor>ad4075fa8a0d9d70262eadd691c0bb416</anchor>
      <arglist>(std::size_t id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>removeResource</name>
      <anchorfile>classph_1_1_api_database.html</anchorfile>
      <anchor>a327f05dd2ae54f45006ad595144fbca2</anchor>
      <arglist>(std::size_t id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::weak_ptr&lt; Resource &gt;</type>
      <name>useResource</name>
      <anchorfile>classph_1_1_api_database.html</anchorfile>
      <anchor>ad09cd2b241f971e9343b09c08e39e59b</anchor>
      <arglist>(std::size_t id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_api_database.html</anchorfile>
      <anchor>aa8c6a9153bda23022f5521f5dacd4700</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ApiHelper</name>
    <filename>classph_1_1_api_helper.html</filename>
    <member kind="function" static="yes">
      <type>static EAttribute</type>
      <name>toCppAttribute</name>
      <anchorfile>classph_1_1_api_helper.html</anchorfile>
      <anchor>ae38b11b6443da6103c8aef97f0e8abb6</anchor>
      <arglist>(PH_EATTRIBUTE attribute)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::APointLight</name>
    <filename>classph_1_1_a_point_light.html</filename>
    <base>ph::AAreaLight</base>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>getArea</name>
      <anchorfile>classph_1_1_a_point_light.html</anchorfile>
      <anchor>aec862346c1d9540938c6c574a7788023</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_point_light.html</anchorfile>
      <anchor>abbdb995333741737173bab0c68500206</anchor>
      <arglist>(TSdlOwnerClass&lt; APointLight &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EmitterFeatureSet</type>
      <name>getEmitterFeatureSet</name>
      <anchorfile>classph_1_1_a_point_light.html</anchorfile>
      <anchor>a8f0cc0579e55272b1cce822b0cc4aec5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::APreethamDome</name>
    <filename>classph_1_1_a_preetham_dome.html</filename>
    <base>ph::ADome</base>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>loadRadianceFunction</name>
      <anchorfile>classph_1_1_a_preetham_dome.html</anchorfile>
      <anchor>abc55f51ada00849ec18afea9649264e5</anchor>
      <arglist>(const CookingContext &amp;ctx, DomeRadianceFunctionInfo *out_info) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_preetham_dome.html</anchorfile>
      <anchor>a1749599ec7813940a5e68f13b0c32c6c</anchor>
      <arglist>(TSdlOwnerClass&lt; APreethamDome &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AreaSource</name>
    <filename>classph_1_1_area_source.html</filename>
    <base>ph::LightSource</base>
    <member kind="function">
      <type></type>
      <name>AreaSource</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>ad6992b833d83d29cf0e7f4e4523b9e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AreaSource</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>a71edb00c21ee4a6fb919fd53aad2f731</anchor>
      <arglist>(const math::Vector3R &amp;linearSrgbColor, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AreaSource</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>ae001019453994ac04f68791b616b7995</anchor>
      <arglist>(const math::Spectrum &amp;color, real numWatts)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Geometry &gt;</type>
      <name>genAreas</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>a1db7e78c962759694a3699f557d14c7a</anchor>
      <arglist>(CookingContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Emitter &gt;</type>
      <name>genEmitter</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>a55a4be964ad76225d6c1e2cabf72c39c</anchor>
      <arglist>(CookingContext &amp;ctx, EmitterBuildingMaterial &amp;&amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genGeometry</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>aec9e53ba021873d9bcaff84fc6ba75f1</anchor>
      <arglist>(CookingContext &amp;ctx) const final override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_area_source.html</anchorfile>
      <anchor>ae0e5baf627fa23fa25c802bbe75e3330</anchor>
      <arglist>(TSdlOwnerClass&lt; AreaSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ARectangleLight</name>
    <filename>classph_1_1_a_rectangle_light.html</filename>
    <base>ph::AAreaLight</base>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>getArea</name>
      <anchorfile>classph_1_1_a_rectangle_light.html</anchorfile>
      <anchor>a5312e2bd7f4640655600ddd0785e2b0d</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classph_1_1_a_rectangle_light.html</anchorfile>
      <anchor>a80fc9448a84329a47c4322bc116b86cc</anchor>
      <arglist>(real width, real height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_rectangle_light.html</anchorfile>
      <anchor>acc78d674d94212667fcb7469536125ba</anchor>
      <arglist>(TSdlOwnerClass&lt; ARectangleLight &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ASphereLight</name>
    <filename>classph_1_1_a_sphere_light.html</filename>
    <base>ph::AAreaLight</base>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>getArea</name>
      <anchorfile>classph_1_1_a_sphere_light.html</anchorfile>
      <anchor>ac6dc8a9623f3fd346514c5d0a757893a</anchor>
      <arglist>(const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classph_1_1_a_sphere_light.html</anchorfile>
      <anchor>adaae9a3c48e3ec629580cbf2a792fd4b</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_a_sphere_light.html</anchorfile>
      <anchor>a6a404dc4f4138905cc7a95b49cdc5214</anchor>
      <arglist>(TSdlOwnerClass&lt; ASphereLight &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ATransformedInstance</name>
    <filename>classph_1_1_a_transformed_instance.html</filename>
    <base>ph::PhysicalActor</base>
    <member kind="function">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_a_transformed_instance.html</anchorfile>
      <anchor>ad87a20615affa6ff629ff1f09b4a8532</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::IndexedVertexBuffer::AttributeDeclaration</name>
    <filename>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</filename>
    <member kind="function">
      <type></type>
      <name>AttributeDeclaration</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>a7e3b7338cbfc6e977025f0421b03150d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>aec4e96c90f95d503492b8c53c30299df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>strideOffset</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>a25fd4644797fb87739ec119c7e0ebf11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>strideSize</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>aa53437a8f51fdb4085c6f72d68f2479e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EVertexElement</type>
      <name>element</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>adb3a358e5064590a1aff909cdf03fec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>numElements</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>a4ebc8c4636cc6d307ced344d076e39e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>shouldNormalize</name>
      <anchorfile>structph_1_1_indexed_vertex_buffer_1_1_attribute_declaration.html</anchorfile>
      <anchor>a76af06610570708a15d000e622626b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AttributeRenderer</name>
    <filename>classph_1_1_attribute_renderer.html</filename>
    <base>ph::Renderer</base>
    <member kind="function">
      <type>void</type>
      <name>doUpdate</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>ab94b88af729ed97a8a54cccd676e8ead</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>a9863d1f1cc28f9e0d417764eef36619e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>a9143f6cbc3755dabfc41c273af8fa599</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>asyncPollUpdatedRegions</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>a893e165c9f1ca8a10a837d07f385d506</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>a67968dd6d905ff40a448dac536669b27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>ab543250948114c405ee0d6f9bfdae993</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>a6a4237972f8afdf33fdf7600c521742a</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_attribute_renderer.html</anchorfile>
      <anchor>ad723a2c0b5009cbd9d4b66738640b52a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::AttributeTags</name>
    <filename>classph_1_1_attribute_tags.html</filename>
    <member kind="function">
      <type></type>
      <name>AttributeTags</name>
      <anchorfile>classph_1_1_attribute_tags.html</anchorfile>
      <anchor>a25b482d974738a7642ec67cf7d00a056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tag</name>
      <anchorfile>classph_1_1_attribute_tags.html</anchorfile>
      <anchor>a1146f1edf8d5a7fcc884507dd6f2cba4</anchor>
      <arglist>(EAttribute target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tag</name>
      <anchorfile>classph_1_1_attribute_tags.html</anchorfile>
      <anchor>a7010dc309b2f7d1988aa8943f88c36dc</anchor>
      <arglist>(const AttributeTags &amp;targets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>untag</name>
      <anchorfile>classph_1_1_attribute_tags.html</anchorfile>
      <anchor>a4a341be557fe4da635d201676ed1e6e7</anchor>
      <arglist>(EAttribute target)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTagged</name>
      <anchorfile>classph_1_1_attribute_tags.html</anchorfile>
      <anchor>ab535ba8da854d82db3b2384eb5463e74</anchor>
      <arglist>(EAttribute target) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BfConstant</name>
    <filename>classph_1_1_bf_constant.html</filename>
    <base>ph::BlockFunction</base>
    <member kind="function">
      <type></type>
      <name>BfConstant</name>
      <anchorfile>classph_1_1_bf_constant.html</anchorfile>
      <anchor>a99f49b0495ff636af2f3ec9d223e41ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BfConstant</name>
      <anchorfile>classph_1_1_bf_constant.html</anchorfile>
      <anchor>ae9c290ac08749a0209ca602a7ba41ea9</anchor>
      <arglist>(const math::Spectrum &amp;coeff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BfConstant</name>
      <anchorfile>classph_1_1_bf_constant.html</anchorfile>
      <anchor>a19629278f62d9056a4b1e1c302f8dee0</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evalAbsorptionCoeff</name>
      <anchorfile>classph_1_1_bf_constant.html</anchorfile>
      <anchor>afff477e3ecc3fec82819b48739e3df02</anchor>
      <arglist>(const SurfaceHit &amp;, math::Spectrum *const out_coeff) const override</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>calcTransmittance</name>
      <anchorfile>classph_1_1_bf_constant.html</anchorfile>
      <anchor>acabd96fa327198264413ec0a3d5ce2a0</anchor>
      <arglist>(const real dist) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BinaryFileInputStream</name>
    <filename>classph_1_1_binary_file_input_stream.html</filename>
    <base>ph::StdInputStream</base>
    <member kind="function">
      <type></type>
      <name>BinaryFileInputStream</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>af3beccca7215c5d6ca87ea7961841cd3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryFileInputStream</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>af306e434430cc2df82014f7bb87fe7d5</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryFileInputStream</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>a9298993d022db4c327d17b07867154db</anchor>
      <arglist>(BinaryFileInputStream &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readData</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>ae869aa67c72a207d9a929b29b5c3c978</anchor>
      <arglist>(T *out_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readData</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>a1faed1ca2dd7da2a4aef2d3758f00dd5</anchor>
      <arglist>(TSpan&lt; T &gt; out_data)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>getFileSizeInBytes</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>a5dc66d541ca68b64e05fcb4d2b0aa3ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryFileInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_binary_file_input_stream.html</anchorfile>
      <anchor>aa024164922b553322e22e85a8161ead6</anchor>
      <arglist>(BinaryFileInputStream &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BinaryFileOutputStream</name>
    <filename>classph_1_1_binary_file_output_stream.html</filename>
    <base>ph::StdOutputStream</base>
    <member kind="function">
      <type></type>
      <name>BinaryFileOutputStream</name>
      <anchorfile>classph_1_1_binary_file_output_stream.html</anchorfile>
      <anchor>a294cfb834baf71472aec2a62c1b16689</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryFileOutputStream</name>
      <anchorfile>classph_1_1_binary_file_output_stream.html</anchorfile>
      <anchor>a17a0a67bb25f97d9dca2c91cedef7b3b</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryFileOutputStream</name>
      <anchorfile>classph_1_1_binary_file_output_stream.html</anchorfile>
      <anchor>ab998a400edab4e7cba62b124d1c0e941</anchor>
      <arglist>(BinaryFileOutputStream &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>classph_1_1_binary_file_output_stream.html</anchorfile>
      <anchor>ad3ac7d10100bfc121416e3c4c21fa825</anchor>
      <arglist>(const T *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>classph_1_1_binary_file_output_stream.html</anchorfile>
      <anchor>a5f53670956c1242a6377fa4c24507821</anchor>
      <arglist>(TSpanView&lt; T &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>BinaryFileOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_binary_file_output_stream.html</anchorfile>
      <anchor>ae7452f1cf6ea63ece30b5bd9781d4ce4</anchor>
      <arglist>(BinaryFileOutputStream &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BinaryFileReader</name>
    <filename>classph_1_1_binary_file_reader.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryFileReader</name>
      <anchorfile>classph_1_1_binary_file_reader.html</anchorfile>
      <anchor>a266276b4f49535d5a53598fdcda6690a</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryFileReader</name>
      <anchorfile>classph_1_1_binary_file_reader.html</anchorfile>
      <anchor>a0fb5e6e0cc69760cfe359438ef24b9cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classph_1_1_binary_file_reader.html</anchorfile>
      <anchor>ab165b7e84674637f593fcf5f01f2a56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classph_1_1_binary_file_reader.html</anchorfile>
      <anchor>ac2c2510b3d51347792d9d5b8d27b05ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classph_1_1_binary_file_reader.html</anchorfile>
      <anchor>a10fcd3750f04241925fcd45cfa8b364f</anchor>
      <arglist>(T *out_buffer, std::size_t numElements=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BinaryMixedImage</name>
    <filename>classph_1_1_binary_mixed_image.html</filename>
    <base>ph::Image</base>
    <member kind="function">
      <type></type>
      <name>BinaryMixedImage</name>
      <anchorfile>classph_1_1_binary_mixed_image.html</anchorfile>
      <anchor>a238effa4ca88ba6728552544cb8ae2bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_binary_mixed_image.html</anchorfile>
      <anchor>ad643231e51148b637e69b7ce145404bc</anchor>
      <arglist>(const CookingContext &amp;ctx) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_binary_mixed_image.html</anchorfile>
      <anchor>a278de858b407f14b6033393e382cdd3c</anchor>
      <arglist>(const CookingContext &amp;ctx) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageA</name>
      <anchorfile>classph_1_1_binary_mixed_image.html</anchorfile>
      <anchor>a40939f1ed25dadae0a8c632ef5ae7925</anchor>
      <arglist>(const std::weak_ptr&lt; Image &gt; &amp;imageA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageB</name>
      <anchorfile>classph_1_1_binary_mixed_image.html</anchorfile>
      <anchor>a13447988a87687331e44dc3acb9dfdbd</anchor>
      <arglist>(const std::weak_ptr&lt; Image &gt; &amp;imageB)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>checkoutImages</name>
      <anchorfile>classph_1_1_binary_mixed_image.html</anchorfile>
      <anchor>aa196a5f91894adaefdd975c6f90b8c3f</anchor>
      <arglist>() const -&gt; std::pair&lt; std::shared_ptr&lt; Image &gt;, std::shared_ptr&lt; Image &gt; &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BinaryMixedSurfaceMaterial</name>
    <filename>classph_1_1_binary_mixed_surface_material.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_binary_mixed_surface_material.html</anchorfile>
      <anchor>a747fb2b145d9efddf031bf4b39b7ff1d</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMode</name>
      <anchorfile>classph_1_1_binary_mixed_surface_material.html</anchorfile>
      <anchor>a4a9dac82573b1f50487270f82782c163</anchor>
      <arglist>(ESurfaceMaterialMixMode mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterials</name>
      <anchorfile>classph_1_1_binary_mixed_surface_material.html</anchorfile>
      <anchor>a3cd46d0856ad21cbaf27828cfe48201d</anchor>
      <arglist>(std::shared_ptr&lt; SurfaceMaterial &gt; material0, std::shared_ptr&lt; SurfaceMaterial &gt; material1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFactor</name>
      <anchorfile>classph_1_1_binary_mixed_surface_material.html</anchorfile>
      <anchor>ab3cbb172095d384b47d287a17288f49b</anchor>
      <arglist>(real factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFactor</name>
      <anchorfile>classph_1_1_binary_mixed_surface_material.html</anchorfile>
      <anchor>a3539477452c6b0cad8d495596b27fd64</anchor>
      <arglist>(std::shared_ptr&lt; Image &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_binary_mixed_surface_material.html</anchorfile>
      <anchor>ad1f7b1dbb5ec51e98120dd9f1bd5aead</anchor>
      <arglist>(TSdlOwnerClass&lt; BinaryMixedSurfaceMaterial &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BlackBodyRadiationImage</name>
    <filename>classph_1_1_black_body_radiation_image.html</filename>
    <base>ph::Image</base>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_black_body_radiation_image.html</anchorfile>
      <anchor>afc92e0d5357858e57583ba9ce1a73942</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_black_body_radiation_image.html</anchorfile>
      <anchor>a724c327117098880e9282aa2195bff30</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>getRadiation</name>
      <anchorfile>classph_1_1_black_body_radiation_image.html</anchorfile>
      <anchor>a0ea7ece887d6f91d97a79a85976c5843</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_black_body_radiation_image.html</anchorfile>
      <anchor>a1924e8776a40f8b6a75d5410f31f3d8d</anchor>
      <arglist>(TSdlOwnerClass&lt; BlackBodyRadiationImage &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BlockFunction</name>
    <filename>classph_1_1_block_function.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~BlockFunction</name>
      <anchorfile>classph_1_1_block_function.html</anchorfile>
      <anchor>aee5e1d7ccc68779b5e43eaa5ac9bcac2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evalAbsorptionCoeff</name>
      <anchorfile>classph_1_1_block_function.html</anchorfile>
      <anchor>ad43add149fb9ba2d89028e453af51e61</anchor>
      <arglist>(const SurfaceHit &amp;X, math::Spectrum *out_coeff) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BNEEPTEstimator</name>
    <filename>classph_1_1_b_n_e_e_p_t_estimator.html</filename>
    <base>ph::FullRayEnergyEstimator</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_b_n_e_e_p_t_estimator.html</anchorfile>
      <anchor>ad4320dc3946e3d83abfd52c8c8c03ccc</anchor>
      <arglist>(const Integrand &amp;integrand) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_b_n_e_e_p_t_estimator.html</anchorfile>
      <anchor>a70a8881c750d2160e25f5c244b6da3cc</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, EnergyEstimation &amp;out_estimation) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_b_n_e_e_p_t_estimator.html</anchorfile>
      <anchor>aca01f63ad105c42ae4f2b1a8dfc0564e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BruteForceIntersector</name>
    <filename>classph_1_1_brute_force_intersector.html</filename>
    <base>ph::Intersector</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_brute_force_intersector.html</anchorfile>
      <anchor>a447efc961191d1c8443712c602b3e610</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_brute_force_intersector.html</anchorfile>
      <anchor>a0a5228b902cb6e48f93de216c537b6ad</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_brute_force_intersector.html</anchorfile>
      <anchor>a70e1236cfa378300de910c8f0b499bed</anchor>
      <arglist>(const Ray &amp;ray) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_brute_force_intersector.html</anchorfile>
      <anchor>afc6117ec3a5e91d6be8d320f00840279</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfEvalInput</name>
    <filename>classph_1_1_bsdf_eval_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_eval_input.html</anchorfile>
      <anchor>a7658fd1af64fe58a5cc83b7c301f33bb</anchor>
      <arglist>(const BsdfSampleQuery &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_eval_input.html</anchorfile>
      <anchor>a24b41a7e80a8ec1a4c8d1dc4d81c4768</anchor>
      <arglist>(const BsdfSampleInput &amp;sampleInput, const BsdfSampleOutput &amp;sampleOutput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_eval_input.html</anchorfile>
      <anchor>ad9f2d5013582b5db4ec080f327c7c61e</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;L, const math::Vector3R &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceHit &amp;</type>
      <name>getX</name>
      <anchorfile>classph_1_1_bsdf_eval_input.html</anchorfile>
      <anchor>a8af2de9378c303b7ee55855e264db563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getL</name>
      <anchorfile>classph_1_1_bsdf_eval_input.html</anchorfile>
      <anchor>aca3c11ef4b486edabce9b06614da954c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getV</name>
      <anchorfile>classph_1_1_bsdf_eval_input.html</anchorfile>
      <anchor>ac4b7d7cadd383a09bed6eaf5dcd8057e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfEvalOutput</name>
    <filename>classph_1_1_bsdf_eval_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setBsdf</name>
      <anchorfile>classph_1_1_bsdf_eval_output.html</anchorfile>
      <anchor>ae74dc2a76e0d5e941538ad2415691a29</anchor>
      <arglist>(const math::Spectrum &amp;bsdf, bool inferMeasurability=true)</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getBsdf</name>
      <anchorfile>classph_1_1_bsdf_eval_output.html</anchorfile>
      <anchor>a9b5b19d12d0c58ff9bcec5a756dd31c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMeasurable</name>
      <anchorfile>classph_1_1_bsdf_eval_output.html</anchorfile>
      <anchor>ace890b849988082e9bd6bd88c6e3cebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurability</name>
      <anchorfile>classph_1_1_bsdf_eval_output.html</anchorfile>
      <anchor>a764f7a87edbce87df81f3b396c4461dc</anchor>
      <arglist>(bool measurability)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurability</name>
      <anchorfile>classph_1_1_bsdf_eval_output.html</anchorfile>
      <anchor>a39b4da97dd35457898a36f7916dac75f</anchor>
      <arglist>(const math::Spectrum &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_bsdf_eval_output.html</anchorfile>
      <anchor>aa5169f231dd0fcaa83895f986c6f77c4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfEvalQuery</name>
    <filename>classph_1_1_bsdf_eval_query.html</filename>
    <member kind="typedef">
      <type>BsdfEvalInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>addef4870e26135f4711576b81156ec97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BsdfEvalOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>af88036e5ddb114daa214ef6b5a8978ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfEvalQuery</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>a10ea2de1a3178164af1cc80c539b4c4e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfEvalQuery</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>ad3b1d0be98094fa1c5d155a74e91ac80</anchor>
      <arglist>(BsdfQueryContext context)</arglist>
    </member>
    <member kind="variable">
      <type>BsdfQueryContext</type>
      <name>context</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>adafcfa94acb2be574bf299689057d50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>a131b546e65d9b273d7c95acef12b6b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_bsdf_eval_query.html</anchorfile>
      <anchor>a8b919e7e55a87dee8c6a382e5f8817d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfHelper</name>
    <filename>classph_1_1_bsdf_helper.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>makeHalfVector</name>
      <anchorfile>classph_1_1_bsdf_helper.html</anchorfile>
      <anchor>a88a7d2c6b0b09895bf3c20baa46a7595</anchor>
      <arglist>(const math::Vector3R &amp;L, const math::Vector3R &amp;V, math::Vector3R *const out_H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>makeHalfVectorSameHemisphere</name>
      <anchorfile>classph_1_1_bsdf_helper.html</anchorfile>
      <anchor>a3553b14e999d8719a89f7e1689a6bcec</anchor>
      <arglist>(const math::Vector3R &amp;L, const math::Vector3R &amp;V, const math::Vector3R &amp;N, math::Vector3R *const out_H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfPdfInput</name>
    <filename>classph_1_1_bsdf_pdf_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>a55b3d92039330bd313d58945f05abc86</anchor>
      <arglist>(const BsdfEvalInput &amp;evalInput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>a80858157a1cf7685173cf6039b3cb54b</anchor>
      <arglist>(const BsdfSampleQuery &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>ab562d4a3436e280e1c280bf618532055</anchor>
      <arglist>(const BsdfSampleInput &amp;sampleInput, const BsdfSampleOutput &amp;sampleOutput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>a63eb9be05f49fe0c0200f5969fc7150b</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;L, const math::Vector3R &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceHit &amp;</type>
      <name>getX</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>a6841b514eb1d4468c3614811cab6c3ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getL</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>acae362def786247508639fdfb1b8ee7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getV</name>
      <anchorfile>classph_1_1_bsdf_pdf_input.html</anchorfile>
      <anchor>a604e7767c13ec37b1eba4e232603c3ac</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfPdfOutput</name>
    <filename>classph_1_1_bsdf_pdf_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setSampleDirPdf</name>
      <anchorfile>classph_1_1_bsdf_pdf_output.html</anchorfile>
      <anchor>a65be2da1a1107ed56cc8edef7bd9f9e0</anchor>
      <arglist>(const lta::PDF &amp;pdf)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getSampleDirPdfW</name>
      <anchorfile>classph_1_1_bsdf_pdf_output.html</anchorfile>
      <anchor>aabc2fcd76c880df7f82899a48a0c6623</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getSampleDirPdf</name>
      <anchorfile>classph_1_1_bsdf_pdf_output.html</anchorfile>
      <anchor>afd310403c16242357cffebf61537089d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_bsdf_pdf_output.html</anchorfile>
      <anchor>aace194eef7d2cb66a158cb6dcf993ef2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfPdfQuery</name>
    <filename>classph_1_1_bsdf_pdf_query.html</filename>
    <member kind="typedef">
      <type>BsdfPdfInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>a4e8ba1e9867d5243f1b7f4c2b61a7fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BsdfPdfOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>a5dfa934893d80782043162b15b8a416e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfPdfQuery</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>a386865d1b40d0147a8d339505774be40</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfPdfQuery</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>a0b28cb72591346c1442556c620bca3a4</anchor>
      <arglist>(BsdfQueryContext context)</arglist>
    </member>
    <member kind="variable">
      <type>BsdfQueryContext</type>
      <name>context</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>aed028a52e64fd9f5872b0659bda71a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>a774cb03ebfd0cbfc0b15bdee170f5172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_bsdf_pdf_query.html</anchorfile>
      <anchor>a748287405dc1f954105665d4fd107d11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfQueryContext</name>
    <filename>classph_1_1_bsdf_query_context.html</filename>
    <member kind="function">
      <type></type>
      <name>BsdfQueryContext</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>ae7a045bf248d98a6dabcc82b3cd75fa6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfQueryContext</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>a5c0fbd6d03ca23e88a3de25e656ded87</anchor>
      <arglist>(SurfaceElemental elemental)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfQueryContext</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>a9a46a95e235014e67fb50af71c49e15f</anchor>
      <arglist>(lta::ESidednessPolicy sidednessPolicy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfQueryContext</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>a3fb46c95af0dfd95625bab9b0d662007</anchor>
      <arglist>(SurfaceElemental elemental, lta::ETransport transport, lta::ESidednessPolicy sidednessPolicy=lta::ESidednessPolicy::Strict)</arglist>
    </member>
    <member kind="variable">
      <type>SurfaceElemental</type>
      <name>elemental</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>ae3d8f3e071271f7e169d5eb7f0000f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lta::ETransport</type>
      <name>transport</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>aac67199cc599bf4970cbb70100f945fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lta::SidednessAgreement</type>
      <name>sidedness</name>
      <anchorfile>classph_1_1_bsdf_query_context.html</anchorfile>
      <anchor>a196b7ca35f245baa24f992393707d0ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfSampleInput</name>
    <filename>classph_1_1_bsdf_sample_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_sample_input.html</anchorfile>
      <anchor>ac45066366eca9aa0f45e4fd92273608e</anchor>
      <arglist>(const BsdfEvalInput &amp;evalInput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_bsdf_sample_input.html</anchorfile>
      <anchor>a3e3b253d58d8c3bf44226f8699a400c1</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceHit &amp;</type>
      <name>getX</name>
      <anchorfile>classph_1_1_bsdf_sample_input.html</anchorfile>
      <anchor>a80e452c090e68a1448ebaf303140cf4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getV</name>
      <anchorfile>classph_1_1_bsdf_sample_input.html</anchorfile>
      <anchor>a999434683795edf114b2705e869aba64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfSampleOutput</name>
    <filename>classph_1_1_bsdf_sample_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setL</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a01f9a1a81a87562ee67ed8195389ba91</anchor>
      <arglist>(const math::Vector3R &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdfAppliedBsdfCos</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>ad39af4c2760babbf805b6556c4127df4</anchor>
      <arglist>(const math::Spectrum &amp;pdfAppliedBsdfCos, real cos, bool inferMeasurability=true)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getL</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a60ec597b8df470ac4c45a064fb1fd23c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getCos</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>aca3543074680a336fae8374e9ca7fb0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>getPdfAppliedBsdf</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>ad0aa6a2f679ab8af98e75690cf760d11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getPdfAppliedBsdfCos</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a9c16c0bf8d45ecda70092f985b5e25fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getRelativeIor</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a369b992957228850495c4ff1fd871a9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getRelativeIor2</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a2a9def6cfad0fb5fd993b6b0f00e396a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMeasurable</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>ab8a034ca50318eaf24b20ef8523a572e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurability</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a40fd24fddc782e7a6341979e3a4f6d23</anchor>
      <arglist>(bool measurability)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurability</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>aa3e8dcb5e830b1bebe483aaddfc65c80</anchor>
      <arglist>(const math::Spectrum &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeIor</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>a31e902ffab25dc433a9709a6a457de36</anchor>
      <arglist>(real relativeIor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_bsdf_sample_output.html</anchorfile>
      <anchor>ad99a29a0a9940a472ac63bd7d7260aa9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BsdfSampleQuery</name>
    <filename>classph_1_1_bsdf_sample_query.html</filename>
    <member kind="typedef">
      <type>BsdfSampleInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>a95e3f19c27f25c4b1ed7b7276f3741f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BsdfSampleOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>a32910c5039b51a336e07a4f8ee2ebe4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfSampleQuery</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>a3d81c1bbcd2fac224e5ff83640374c24</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsdfSampleQuery</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>a79e83563de7486ee375e42f47570f39f</anchor>
      <arglist>(BsdfQueryContext context)</arglist>
    </member>
    <member kind="variable">
      <type>BsdfQueryContext</type>
      <name>context</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>a1bfaa61482d5266d1e8fe1f0dfd3b372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>a15de1880de1bfef9ac195e1f7c072164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_bsdf_sample_query.html</anchorfile>
      <anchor>ae5f5dce90d4b33005528d3725d8f2ede</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::math::TIndexedPointKdtree::BuildCache</name>
    <filename>structph_1_1math_1_1_t_indexed_point_kdtree_1_1_build_cache.html</filename>
    <member kind="variable">
      <type>std::vector&lt; Index &gt;</type>
      <name>itemIndices</name>
      <anchorfile>structph_1_1math_1_1_t_indexed_point_kdtree_1_1_build_cache.html</anchorfile>
      <anchor>acbf9cce7daad29a2f010af575252fa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; math::Vector3R &gt;</type>
      <name>itemPoints</name>
      <anchorfile>structph_1_1math_1_1_t_indexed_point_kdtree_1_1_build_cache.html</anchorfile>
      <anchor>a315e13a3b1033e8c494831485b8568ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BvhBuilder</name>
    <filename>classph_1_1_bvh_builder.html</filename>
    <member kind="function">
      <type></type>
      <name>BvhBuilder</name>
      <anchorfile>classph_1_1_bvh_builder.html</anchorfile>
      <anchor>a7a0492f39333149d800c995e7a58031b</anchor>
      <arglist>(EBvhType type)</arglist>
    </member>
    <member kind="function">
      <type>const BvhInfoNode *</type>
      <name>buildInformativeBinaryBvh</name>
      <anchorfile>classph_1_1_bvh_builder.html</anchorfile>
      <anchor>aa70855d052fa1c47d03cff667187d2dc</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLinearDepthFirstBinaryBvh</name>
      <anchorfile>classph_1_1_bvh_builder.html</anchorfile>
      <anchor>ab3cc8dac9e80db066bb658637794261c</anchor>
      <arglist>(const BvhInfoNode *rootNode, std::vector&lt; BvhLinearNode &gt; *out_linearNodes, std::vector&lt; const Intersectable * &gt; *out_intersectables)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>calcTotalNodes</name>
      <anchorfile>classph_1_1_bvh_builder.html</anchorfile>
      <anchor>a0af1f5a2c0772af36a90b9883ad39288</anchor>
      <arglist>(const BvhInfoNode *rootNode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>calcTotalIntersectables</name>
      <anchorfile>classph_1_1_bvh_builder.html</anchorfile>
      <anchor>a1a4bc24535ba0a41d1350f466a0a92e1</anchor>
      <arglist>(const BvhInfoNode *rootNode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>calcMaxDepth</name>
      <anchorfile>classph_1_1_bvh_builder.html</anchorfile>
      <anchor>a8ee236a97816cd6944325af71085d2d4</anchor>
      <arglist>(const BvhInfoNode *rootNode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BvhInfoNode</name>
    <filename>classph_1_1_bvh_info_node.html</filename>
    <member kind="typedef">
      <type>math::AABB3D</type>
      <name>AABB3D</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>addbd9393990c50a57a2ea297838ba452</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BvhInfoNode</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>ab1854584de4831406983d73e72827106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBinaryLeaf</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>af7295bf03632240b2731dc9ff1535d55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBinaryInternal</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>a69081c3ec1398fff5b4aa06dd1999071</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BvhInfoNode</type>
      <name>makeBinaryInternal</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>af73d350ce4417fe2e0078495132a198a</anchor>
      <arglist>(const BvhInfoNode *child1, const BvhInfoNode *child2, int32 splitAxis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BvhInfoNode</type>
      <name>makeBinaryLeaf</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>a2d5bfa3405e13f708b5ceb979d5d5c41</anchor>
      <arglist>(const std::vector&lt; BvhIntersectableInfo &gt; &amp;leafIntersectables, const AABB3D &amp;leafAabb)</arglist>
    </member>
    <member kind="variable">
      <type>const BvhInfoNode *</type>
      <name>children</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>a973afb64e75422cf27dafef25952a364</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>AABB3D</type>
      <name>aabb</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>a55bcd945962acc731246117ce6eec56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>splitAxis</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>a7fef43b817c80358d867a4e90fee2a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BvhIntersectableInfo &gt;</type>
      <name>intersectables</name>
      <anchorfile>classph_1_1_bvh_info_node.html</anchorfile>
      <anchor>aa34d2e33168d381934c5333a382c8fd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BvhIntersectableInfo</name>
    <filename>classph_1_1_bvh_intersectable_info.html</filename>
    <member kind="function">
      <type></type>
      <name>BvhIntersectableInfo</name>
      <anchorfile>classph_1_1_bvh_intersectable_info.html</anchorfile>
      <anchor>ab76d8668957930beab8b205b10b0d242</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BvhIntersectableInfo</name>
      <anchorfile>classph_1_1_bvh_intersectable_info.html</anchorfile>
      <anchor>a7ba4876045b20e549b65840f5f82892d</anchor>
      <arglist>(const Intersectable *intersectable, std::size_t index)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classph_1_1_bvh_intersectable_info.html</anchorfile>
      <anchor>aa994b945ea01e70d197e8a204c7552d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::AABB3D</type>
      <name>aabb</name>
      <anchorfile>classph_1_1_bvh_intersectable_info.html</anchorfile>
      <anchor>a0545ca2193378809e3e365b37d0cf516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3R</type>
      <name>aabbCentroid</name>
      <anchorfile>classph_1_1_bvh_intersectable_info.html</anchorfile>
      <anchor>a2d13b8fcd42af1b6dd3813782ba7b59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Intersectable *</type>
      <name>intersectable</name>
      <anchorfile>classph_1_1_bvh_intersectable_info.html</anchorfile>
      <anchor>aa0d0993725c2a3f7dbfdf77627e8c1f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BvhLinearNode</name>
    <filename>classph_1_1_bvh_linear_node.html</filename>
    <member kind="function">
      <type></type>
      <name>BvhLinearNode</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>ae4688470f66be39a7b256cb0679da638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>aad41c5cf3874972dee231998c32865d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInternal</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>a6327f6f3749c8f8b00dc9d56ecdea111</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BvhLinearNode</type>
      <name>makeInternal</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>a8862bd4d2a7ea50d608a825074703a16</anchor>
      <arglist>(const math::AABB3D &amp;nodeAABB, std::size_t secondChildOffset, int32 splittedAxis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BvhLinearNode</type>
      <name>makeLeaf</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>af4f5740ae6955e12469dde4981852fc0</anchor>
      <arglist>(const math::AABB3D &amp;nodeAABB, std::size_t primitivesOffset, int32 numPrimitives)</arglist>
    </member>
    <member kind="variable">
      <type>math::AABB3D</type>
      <name>aabb</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>a61f851f1e92b70de6c736ecd52eced21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>secondChildOffset</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>af1c1ff0465c27e60bfa2c636bc1b2457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>primitivesOffset</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>a5a41b6bd3dedd4b9123b13be675b53e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>splittedAxis</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>addb54ab453eca67c97e74cb4f53d62e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>numPrimitives</name>
      <anchorfile>classph_1_1_bvh_linear_node.html</anchorfile>
      <anchor>a01efd7b0088da4be11de921b2ece5770</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BvhSahBucket</name>
    <filename>classph_1_1_bvh_sah_bucket.html</filename>
    <member kind="function">
      <type></type>
      <name>BvhSahBucket</name>
      <anchorfile>classph_1_1_bvh_sah_bucket.html</anchorfile>
      <anchor>a9920b4c644b39c0d7b8a226d1240dd47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_bvh_sah_bucket.html</anchorfile>
      <anchor>a299a02563359e20b4475f8a7fab2939f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>math::AABB3D</type>
      <name>aabb</name>
      <anchorfile>classph_1_1_bvh_sah_bucket.html</anchorfile>
      <anchor>a0d7163aaf8a74b2a89e0e87a3d59de03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numIntersectables</name>
      <anchorfile>classph_1_1_bvh_sah_bucket.html</anchorfile>
      <anchor>a42199a26da7cdd619426393c12ddaaa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BVPTDLEstimator</name>
    <filename>classph_1_1_b_v_p_t_d_l_estimator.html</filename>
    <base>ph::PartialRayEnergyEstimator</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_b_v_p_t_d_l_estimator.html</anchorfile>
      <anchor>a5b44ab07b56fe5dc5ef651327e473218</anchor>
      <arglist>(const Integrand &amp;integrand) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_b_v_p_t_d_l_estimator.html</anchorfile>
      <anchor>aa9c8469dcf1e9ef9465b83c718399b06</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, EnergyEstimation &amp;out_estimation) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_b_v_p_t_d_l_estimator.html</anchorfile>
      <anchor>a87552396934111435782b2891bfe535b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::BVPTEstimator</name>
    <filename>classph_1_1_b_v_p_t_estimator.html</filename>
    <base>ph::FullRayEnergyEstimator</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_b_v_p_t_estimator.html</anchorfile>
      <anchor>aeaf5ef99bec7d3ee67876f433e5595b2</anchor>
      <arglist>(const Integrand &amp;integrand) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_b_v_p_t_estimator.html</anchorfile>
      <anchor>a0a90dd4bbb142728439aeea5345d538d</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, EnergyEstimation &amp;out_estimation) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_b_v_p_t_estimator.html</anchorfile>
      <anchor>a57aa6f3ce77923efc6d9fd8d04d9088d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ByteBuffer</name>
    <filename>classph_1_1_byte_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ByteBuffer</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a653d90758c933f83e61e15c58ba2a8fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteBuffer</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a09620c91f8ccf2fbc09fdfe13d927c50</anchor>
      <arglist>(std::size_t numExpectedWrittenBytes)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a6621c2d5851b338623972fbc368c5208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a1a10fcef826f45c6c870a59d38491ef9</anchor>
      <arglist>(T *out_data, std::size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a5a6f3716fd7c2e6426dea56828d7e333</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>ad401656531bbf1daada22966a237fcd5</anchor>
      <arglist>(const T *data, std::size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewindRead</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>ab49240a0eda277b6d8857ba4412aac43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewindWrite</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a361f905ae1b19cf3364e4e84232f0dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>ab113aaa8c7c351df7572396f9a72455f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>adaf551b998466aed64c9d1889d1c0cea</anchor>
      <arglist>(std::byte filledByte)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a5dcf09ce2359aab3606c9ffef3fc1e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>ab84de094e1e0efbf95bd6029283e3183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadPosition</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a70390007ffe692eae332839068a0e395</anchor>
      <arglist>(std::size_t indexOfByte)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWritePosition</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>af3039feba0b72596835e372242f85ab6</anchor>
      <arglist>(std::size_t indexOfByte)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumBytes</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a7361e9325d17f33dc8981b09e1aff82b</anchor>
      <arglist>(std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getReadPosition</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a53fb75c579ab8292590f263fef8a660a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getWritePosition</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a81317bbaff04fb76a0138328e9530a6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBytes</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>ac1b43bb0beed307bc724f7725319a640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a594e094555473fdf61290d7795bb9891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoreToRead</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a5429a08c3fbde247e36386731d618911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; std::byte &gt;</type>
      <name>getBytes</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a3effd0311d70548649781c780df1704e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; std::byte &gt;</type>
      <name>getBytes</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a754ab95ac2feee30fd366b4350beee1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; std::byte &gt;</type>
      <name>getBytes</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a3effd0311d70548649781c780df1704e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; std::byte &gt;</type>
      <name>getBytes</name>
      <anchorfile>classph_1_1_byte_buffer.html</anchorfile>
      <anchor>a754ab95ac2feee30fd366b4350beee1b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ByteBufferInputStream</name>
    <filename>classph_1_1_byte_buffer_input_stream.html</filename>
    <base>ph::IInputStream</base>
    <member kind="function">
      <type></type>
      <name>ByteBufferInputStream</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a5fcaef8189f0150a872f5c0fe8f26826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteBufferInputStream</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a24d9335d36828468de94835af5dbfe9f</anchor>
      <arglist>(const std::byte *srcByteBuffer, std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteBufferInputStream</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>ae594edffbb347492c78ce1d4fbfad929</anchor>
      <arglist>(const char *srcCharBuffer, std::size_t numChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteBufferInputStream</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>accd969dbe5661f65a7bbe4c6a324d344</anchor>
      <arglist>(const unsigned char *srcUCharBuffer, std::size_t numUChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteBufferInputStream</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a3ff2c79ebda3e694a46493f170ed8be3</anchor>
      <arglist>(std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteBufferInputStream</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a81203ec4723689526ee4e6f76cf9b5f1</anchor>
      <arglist>(ByteBufferInputStream &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>aaa3b1c48b2ff207a2ddfd877c8373d7e</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readString</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a4492e8813fca4621a0652a081597ac34</anchor>
      <arglist>(std::string *out_string, char delimiter) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekGet</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a46844aec5022752b7fca2eee8374bb54</anchor>
      <arglist>(std::size_t pos) override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>tellGet</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a158c89d7e05dc9a328dbae3adfce794d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a1094704e4ca8947d08c828003122dfb4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>readSome</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>ad11b8290552e2c2da98fcb9e579ba3ad</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readData</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>afb75c64dd14f87612fbae375db94ce4f</anchor>
      <arglist>(T *out_data)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBufferBytes</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a605f9c257b4aa87ce2025b075853c66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canRead</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a7fc4b8d1b73079606968bf29a9078b6b</anchor>
      <arglist>(std::size_t numBytes) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canRead</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>afd6c22e7bd88058de6ca0b0f325acc18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteBufferInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a922af9c21d205acc26390431ec522847</anchor>
      <arglist>(ByteBufferInputStream &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>byteBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a09f33d06b0b1010ac0409efd6d613fe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>byteBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>ad025d9770455e449bee467e1f61abe22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>charBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a3a68e0f7bc352888ebe42c4ad0f96521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>charBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a945a57493f317b7818e4a3e29d439f76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>ucharBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>aac5f174ee25c50910c8b4c2267ed05d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>ucharBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a6750705bc3c393aef0a8ada6a68b740c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>byteBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a09f33d06b0b1010ac0409efd6d613fe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>byteBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>ad025d9770455e449bee467e1f61abe22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>charBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a3a68e0f7bc352888ebe42c4ad0f96521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>charBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a945a57493f317b7818e4a3e29d439f76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>ucharBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>aac5f174ee25c50910c8b4c2267ed05d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>ucharBuffer</name>
      <anchorfile>classph_1_1_byte_buffer_input_stream.html</anchorfile>
      <anchor>a6750705bc3c393aef0a8ada6a68b740c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CheckerboardImage</name>
    <filename>classph_1_1_checkerboard_image.html</filename>
    <base>ph::Image</base>
    <member kind="function">
      <type></type>
      <name>CheckerboardImage</name>
      <anchorfile>classph_1_1_checkerboard_image.html</anchorfile>
      <anchor>af7a59b5d8a91cff31961cbab43bd5c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_checkerboard_image.html</anchorfile>
      <anchor>a7efb97a6c460ee8c8bbbc8a1400ff2bd</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_checkerboard_image.html</anchorfile>
      <anchor>a9e0346528b35fec153343d56b51afeb7</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumTiles</name>
      <anchorfile>classph_1_1_checkerboard_image.html</anchorfile>
      <anchor>abc8d4dd6b6fe090272e3e885615b2afd</anchor>
      <arglist>(real numTilesX, real numTilesY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOddImage</name>
      <anchorfile>classph_1_1_checkerboard_image.html</anchorfile>
      <anchor>ab0dfeb5652b92680b39ca70c7ee88012</anchor>
      <arglist>(const std::weak_ptr&lt; Image &gt; &amp;oddImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvenImage</name>
      <anchorfile>classph_1_1_checkerboard_image.html</anchorfile>
      <anchor>afc77e2ad01e211aaba9fafd0e29eb190</anchor>
      <arglist>(const std::weak_ptr&lt; Image &gt; &amp;evenImage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ClassicBvhIntersector</name>
    <filename>classph_1_1_classic_bvh_intersector.html</filename>
    <base>ph::Intersector</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_classic_bvh_intersector.html</anchorfile>
      <anchor>a5adcc109090c150fd800350ec9b30a82</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_classic_bvh_intersector.html</anchorfile>
      <anchor>aa6c0622694be9e2d095ce55bd2900b38</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_classic_bvh_intersector.html</anchorfile>
      <anchor>a9a9bd6250eac152e59bbdbbef8d579f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildWithIntersectables</name>
      <anchorfile>classph_1_1_classic_bvh_intersector.html</anchorfile>
      <anchor>a9223711daceedb85aaa456f4660d73a0</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::ColorError</name>
    <filename>classph_1_1math_1_1_color_error.html</filename>
    <base>ph::math::MathException</base>
  </compound>
  <compound kind="class">
    <name>ph::ConductiveInterfaceInfo</name>
    <filename>classph_1_1_conductive_interface_info.html</filename>
    <member kind="function">
      <type></type>
      <name>ConductiveInterfaceInfo</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>ad3c45d87f9e4938bbdacd1b3e176ce8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConductiveInterfaceInfo</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a15b24e10a1ed44d405764bc60d023706</anchor>
      <arglist>(const math::Spectrum &amp;f0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConductiveInterfaceInfo</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a4eef239c1a01cc598461730ac70bb86a</anchor>
      <arglist>(real iorOuter, const math::Spectrum &amp;iorInnerN, const math::Spectrum &amp;iorInnerK)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ConductorFresnel &gt;</type>
      <name>genFresnelEffect</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a44ffe119dc65b728d33e89d66d32eca2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFresnel</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>ada5060e9b93fbee1b47595c9b48b7a78</anchor>
      <arglist>(EInterfaceFresnel fresnel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setF0</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a97b8f094688ac1cea26babba7ef20385</anchor>
      <arglist>(const math::Spectrum &amp;f0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIorOuter</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a67a0b8ac9ce0dd5cd98eb68636814990</anchor>
      <arglist>(real iorOuter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIorInnerN</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a7e75de7c92537a5f73aa1b8e2ad899cb</anchor>
      <arglist>(const math::Spectrum &amp;iorInnerN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIorInnerK</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a1fa697390017889942669a74b89f898e</anchor>
      <arglist>(const math::Spectrum &amp;iorInnerK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_STRUCT</name>
      <anchorfile>classph_1_1_conductive_interface_info.html</anchorfile>
      <anchor>a1f21a68531b918d6eaa84fad74639e03</anchor>
      <arglist>(TSdlOwnerStruct&lt; ConductiveInterfaceInfo &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ConductorFresnel</name>
    <filename>classph_1_1_conductor_fresnel.html</filename>
    <base>ph::FresnelEffect</base>
    <member kind="function">
      <type></type>
      <name>ConductorFresnel</name>
      <anchorfile>classph_1_1_conductor_fresnel.html</anchorfile>
      <anchor>a184948c3429b3f595afb0a7e84b16d9f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_conductor_fresnel.html</anchorfile>
      <anchor>a480338dc68356c887a5851f24a961f84</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const override=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ConstantImage</name>
    <filename>classph_1_1_constant_image.html</filename>
    <base>ph::Image</base>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a872b1b78f845b6da341423ff7307bfdc</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a2ef1a3f2c6211f6b441c6d77ff0c96a7</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRaw</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>aa56c24998b65745d999e7252c8509a07</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRaw</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a8f16dc7c346e0daa9ad03bcd13127704</anchor>
      <arglist>(const math::TVector3&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRaw</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a6563d7a9a1094579d6c9701e18758bd8</anchor>
      <arglist>(std::vector&lt; T &gt; values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>af4d39c9d44c9de30f3ba064e600982eb</anchor>
      <arglist>(T color, math::EColorSpace colorSpace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a504d682770d51074acad240369203762</anchor>
      <arglist>(const math::TVector3&lt; T &gt; &amp;color, math::EColorSpace colorSpace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a0a73336c4042c0b83bf463be313454c6</anchor>
      <arglist>(std::vector&lt; T &gt; values, math::EColorSpace colorSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_constant_image.html</anchorfile>
      <anchor>a59eaa486771236289c02131603124271</anchor>
      <arglist>(TSdlOwnerClass&lt; ConstantImage &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ConstantVelocityMotion</name>
    <filename>classph_1_1_constant_velocity_motion.html</filename>
    <base>ph::MotionSource</base>
    <member kind="function">
      <type></type>
      <name>ConstantVelocityMotion</name>
      <anchorfile>classph_1_1_constant_velocity_motion.html</anchorfile>
      <anchor>afce593c82e660c834328ade6c4bccb95</anchor>
      <arglist>(const math::Vector3R &amp;velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_constant_velocity_motion.html</anchorfile>
      <anchor>a45967594e8a3e84b91087da0d3f7680f</anchor>
      <arglist>(CookedMotion &amp;out_motion, const CookingContext &amp;ctx, const MotionCookConfig &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; math::Transform &gt;</type>
      <name>genLocalToWorld</name>
      <anchorfile>classph_1_1_constant_velocity_motion.html</anchorfile>
      <anchor>ae0ebbc24c945601abef709aeb079e7e9</anchor>
      <arglist>(const Time &amp;start, const Time &amp;end) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSPSCRingBuffer::ConsumerGuard</name>
    <filename>classph_1_1_t_s_p_s_c_ring_buffer_1_1_consumer_guard.html</filename>
    <base protection="private">ph::INoCopyAndMove</base>
    <member kind="function">
      <type></type>
      <name>ConsumerGuard</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer_1_1_consumer_guard.html</anchorfile>
      <anchor>a0e962608735f5f31088b56882a1969e8</anchor>
      <arglist>(TSPSCRingBuffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConsumerGuard</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer_1_1_consumer_guard.html</anchorfile>
      <anchor>ae7688f6fa118c9915559fafc6594e22e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookedDataStorage</name>
    <filename>classph_1_1_cooked_data_storage.html</filename>
    <member kind="function">
      <type></type>
      <name>CookedDataStorage</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a354b461a898e24b50df226fea140f88d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CookedDataStorage</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a43cdad10d5e11948933388f2f83f4a53</anchor>
      <arglist>(CookedDataStorage &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CookedDataStorage</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a7de7be0145e0eb524c6754fc7367e5b7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a90a3682bdfcdcc93924bf45c17b7abcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a452792c4742cdb78745e8a2974640eb3</anchor>
      <arglist>(std::unique_ptr&lt; Intersectable &gt; intersectable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a180c70ecdd464d07a1a90f83a1a3ad80</anchor>
      <arglist>(std::unique_ptr&lt; PrimitiveMetadata &gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>adab73f7cad43da0fffb3b1b86b72ca7b</anchor>
      <arglist>(std::unique_ptr&lt; Emitter &gt; emitter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a323925e1764616cfc1ccebbce9fc641c</anchor>
      <arglist>(std::unique_ptr&lt; math::Transform &gt; transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a73c53ce435eedeea8d46167e6ce63ba3</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; Intersectable &gt; &gt; &amp;&amp;intersectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>afd706764ab7fd6e417054f34ff526301</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; math::Transform &gt; &gt; &amp;&amp;transforms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>ae43667b4012c2b33911c95c3f6cec001</anchor>
      <arglist>(CookedDataStorage &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numIntersectables</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>ab6a6ea6f527a3dbca0a4deaf661d6180</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numEmitters</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a0c5e408d93bf76ac2960ee8779361e0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TIteratorProxy&lt; std::vector&lt; std::unique_ptr&lt; Intersectable &gt; &gt; &gt;</type>
      <name>intersectables</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>acc15b5d3a240848cf24c203670c32ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TConstIteratorProxy&lt; std::vector&lt; std::unique_ptr&lt; Intersectable &gt; &gt; &gt;</type>
      <name>intersectables</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>ab41997a01fb15bb1f9a1b5373d82caa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TIteratorProxy&lt; std::vector&lt; std::unique_ptr&lt; PrimitiveMetadata &gt; &gt; &gt;</type>
      <name>primitiveMetadatas</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>aecc4521110c0934eda1bdb36dc95e066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TConstIteratorProxy&lt; std::vector&lt; std::unique_ptr&lt; PrimitiveMetadata &gt; &gt; &gt;</type>
      <name>primitiveMetadatas</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a94b1093b6cca06c0fbae04ecab0c648b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TIteratorProxy&lt; std::vector&lt; std::unique_ptr&lt; Emitter &gt; &gt; &gt;</type>
      <name>emitters</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>ad7b78ab31f3f7b8f051c79bbf5ee214d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TConstIteratorProxy&lt; std::vector&lt; std::unique_ptr&lt; Emitter &gt; &gt; &gt;</type>
      <name>emitters</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a9c4b76a1ec1344a895ef14c4b99b1bca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CookedDataStorage</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>a1543e9d634af403f1ff3f927e1f90c9c</anchor>
      <arglist>(const CookedDataStorage &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>CookedDataStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_cooked_data_storage.html</anchorfile>
      <anchor>ab8378ba93abf7d5f7fa0f1783d1b5905</anchor>
      <arglist>(const CookedDataStorage &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookedGeometry</name>
    <filename>classph_1_1_cooked_geometry.html</filename>
    <member kind="variable">
      <type>std::vector&lt; const Primitive * &gt;</type>
      <name>primitives</name>
      <anchorfile>classph_1_1_cooked_geometry.html</anchorfile>
      <anchor>a16d263e377142d4dbc995eee30cd1fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IndexedTriangleBuffer *</type>
      <name>triangleView</name>
      <anchorfile>classph_1_1_cooked_geometry.html</anchorfile>
      <anchor>a3d7474baee2e40aa8b95fa2e9be4d737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookedMotion</name>
    <filename>classph_1_1_cooked_motion.html</filename>
    <member kind="variable">
      <type>const math::Transform *</type>
      <name>localToWorld</name>
      <anchorfile>classph_1_1_cooked_motion.html</anchorfile>
      <anchor>af8fd46c2c65b3972472c1a3e37b9c912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const math::Transform *</type>
      <name>worldToLocal</name>
      <anchorfile>classph_1_1_cooked_motion.html</anchorfile>
      <anchor>abc5b95af058eb5db819853bc204b7fff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookedNamedResource</name>
    <filename>classph_1_1_cooked_named_resource.html</filename>
    <member kind="function">
      <type></type>
      <name>CookedNamedResource</name>
      <anchorfile>classph_1_1_cooked_named_resource.html</anchorfile>
      <anchor>ae5b3939a81f9ab8a0a1ca0e15bd72e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Primitive *</type>
      <name>getBackgroundPrimitive</name>
      <anchorfile>classph_1_1_cooked_named_resource.html</anchorfile>
      <anchor>af5b947368bb23acfc23d3df73df6d4e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundPrimitive</name>
      <anchorfile>classph_1_1_cooked_named_resource.html</anchorfile>
      <anchor>aba8ffb32a3b874570ac6817c0f29a47e</anchor>
      <arglist>(const Primitive *primitive)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookedResourceCollection</name>
    <filename>classph_1_1_cooked_resource_collection.html</filename>
    <base>ph::CookedResourceCollectionBase</base>
    <member kind="function">
      <type>std::string</type>
      <name>getStats</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a72a5223c851fbe486acd69db39fdce39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>PrimitiveMetadata *</type>
      <name>makeMetadata</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a6d40af31823e4212866cbb927863f429</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>TransformType *</type>
      <name>makeTransform</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a58083f8919989df1c03f5a592d1debc7</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>IntersectableType *</type>
      <name>makeIntersectable</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>ae22557b412f95479b54653efec23ac6a</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>IntersectableType *</type>
      <name>copyIntersectable</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>afd52be7d5c047bfe81f916da65e965b4</anchor>
      <arglist>(IntersectableType intersectable)</arglist>
    </member>
    <member kind="function">
      <type>EmitterType *</type>
      <name>makeEmitter</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a5352f4851638dd78bab3ea7ff5f5a37e</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>IndexedTriangleBuffer *</type>
      <name>makeTriangleBuffer</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a9aedc8276df79c17f0f87b6a538040a4</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>CookedGeometry *</type>
      <name>makeGeometry</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a34910045ddd46483441e24af25f1fdac</anchor>
      <arglist>(const SdlResourceId id, DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>CookedMotion *</type>
      <name>makeMotion</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>ada30e2395cb65fa211bce6611f48c904</anchor>
      <arglist>(const SdlResourceId id, DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>TSynchronized&lt; CookedNamedResource &gt; &amp;</type>
      <name>getNamed</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>a05a0fbc7dbec8f80c4cd630da923bf6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CookedGeometry *</type>
      <name>getGeometry</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>ad49e528e9c595348713a66a814990e7d</anchor>
      <arglist>(const SdlResourceId id) const</arglist>
    </member>
    <member kind="function">
      <type>const CookedMotion *</type>
      <name>getMotion</name>
      <anchorfile>classph_1_1_cooked_resource_collection.html</anchorfile>
      <anchor>af85b5f6c9193f1f94d70f1e1cc76db03</anchor>
      <arglist>(const SdlResourceId id) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookedResourceCollectionBase</name>
    <filename>classph_1_1_cooked_resource_collection_base.html</filename>
    <base protection="private">ph::INoCopyAndMove</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CookedResourceCollectionBase</name>
      <anchorfile>classph_1_1_cooked_resource_collection_base.html</anchorfile>
      <anchor>a48311244c73a96172fa4c92db61937a9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getStats</name>
      <anchorfile>classph_1_1_cooked_resource_collection_base.html</anchorfile>
      <anchor>a75ba1959a19b365bc8204abc838f02c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; SdlResourceId, std::unique_ptr&lt; CookedType &gt; &gt;</type>
      <name>TSdlResourceIdMap</name>
      <anchorfile>classph_1_1_cooked_resource_collection_base.html</anchorfile>
      <anchor>af521e9fdd162e16273ff828751a02f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DerivedType *</type>
      <name>makeCookedResource</name>
      <anchorfile>classph_1_1_cooked_resource_collection_base.html</anchorfile>
      <anchor>ab96405ffd9ba54cd321a2b26af4d9ceb</anchor>
      <arglist>(TSynchronized&lt; TUniquePtrVector&lt; BaseType &gt; &gt; &amp;syncedResources, DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static CookedType *</type>
      <name>makeCookedResourceWithID</name>
      <anchorfile>classph_1_1_cooked_resource_collection_base.html</anchorfile>
      <anchor>ab5138b010bd0572e42eb52d895d30287</anchor>
      <arglist>(TSynchronized&lt; TSdlResourceIdMap&lt; CookedType &gt; &gt; &amp;syncedIdToResource, const SdlResourceId id, DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const CookedType *</type>
      <name>getCookedResourceByID</name>
      <anchorfile>classph_1_1_cooked_resource_collection_base.html</anchorfile>
      <anchor>aa47411042289b6411988d9ca6dcb0312</anchor>
      <arglist>(const TSynchronized&lt; TSdlResourceIdMap&lt; CookedType &gt; &gt; &amp;syncedIdToResource, const SdlResourceId id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookException</name>
    <filename>classph_1_1_cook_exception.html</filename>
  </compound>
  <compound kind="class">
    <name>ph::CookingConfig</name>
    <filename>classph_1_1_cooking_config.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>preferTriangulated</name>
      <anchorfile>classph_1_1_cooking_config.html</anchorfile>
      <anchor>ada67e6fe453a137bfc90c0a9baf9ca6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>preferIndexedVertices</name>
      <anchorfile>classph_1_1_cooking_config.html</anchorfile>
      <anchor>add60b321c575bfd844c81df5247264c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>forceTriangulated</name>
      <anchorfile>classph_1_1_cooking_config.html</anchorfile>
      <anchor>ade8d99647d3b1bfd7a7b0c2e5e80e4db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookingContext</name>
    <filename>classph_1_1_cooking_context.html</filename>
    <member kind="function">
      <type></type>
      <name>CookingContext</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a77262db8b7253ca877faf7d2aa1566e3</anchor>
      <arglist>(const VisualWorld *world)</arglist>
    </member>
    <member kind="function">
      <type>const CookingConfig &amp;</type>
      <name>getConfig</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a3f6a8c63a04f6735ff56bce1d18a0902</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConfig</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a7b0d82e60a2065e7b791e9b83b4f718c</anchor>
      <arglist>(CookingConfig config)</arglist>
    </member>
    <member kind="function">
      <type>CookedResourceCollection *</type>
      <name>getResources</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a648dd5caeea27df9f5759b7dd5361f12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransientResourceCache *</type>
      <name>getCache</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a33566d2f1bde0e10c741c15121b25f9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>getRootActorsBound</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>adb99d5b9c257ecbeb5d9bd9bdfcccc4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>getLeafActorsBound</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a04e6ead3586c92fbb0d2d168e10ac19a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CookedGeometry *</type>
      <name>getCooked</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a633964c7c2772e4bf640008fd22bd199</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;geometry) const</arglist>
    </member>
    <member kind="function">
      <type>const TransientVisualElement *</type>
      <name>getCached</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>a1f0612ef9e9eb5af694da63a1140a410</anchor>
      <arglist>(const std::shared_ptr&lt; Actor &gt; &amp;actor) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>VisualWorld</name>
      <anchorfile>classph_1_1_cooking_context.html</anchorfile>
      <anchor>ac3691800c8160458bdaa09da62f737d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CookOrder</name>
    <filename>classph_1_1_cook_order.html</filename>
    <member kind="function">
      <type></type>
      <name>CookOrder</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>a9fbd0551c073f36b1a4140e9b2464082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CookOrder</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>a53fd935548d59487df42fa215b0b202e</anchor>
      <arglist>(ECookPriority priority)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CookOrder</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>a4ea34c29293d83b2fe3db672047c053b</anchor>
      <arglist>(ECookPriority priority, ECookLevel level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CookOrder</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>a698cea192ddefc34e3788d05bf013e6f</anchor>
      <arglist>(CookPriority priority, CookLevel level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>a39790d8aa8375d0a8895a4aad1f8898e</anchor>
      <arglist>(const CookOrder &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>CookPriority</type>
      <name>priority</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>afaa65ccd49eab065c50ca2a4b1d3eb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CookLevel</type>
      <name>level</name>
      <anchorfile>classph_1_1_cook_order.html</anchorfile>
      <anchor>a4af880d08a055a33f352c91b1aefc431</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CoreCookedUnit</name>
    <filename>classph_1_1_core_cooked_unit.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>CoreCookedUnit</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a970adb4fd314fccec1a6c88c17ea03da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoreCookedUnit</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a93d228fe479c62263b6b4a92b25d1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRenderer</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>ad8ea7b42474b5f10c882fcb720d3e1db</anchor>
      <arglist>(std::unique_ptr&lt; Renderer &gt; renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReceiver</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a1a8912f67e60b835ef5d9c1d31758e8a</anchor>
      <arglist>(std::unique_ptr&lt; Receiver &gt; receiver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSampleGenerator</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a5f21c5969e1cca156b3e65be61f1aa3c</anchor>
      <arglist>(std::unique_ptr&lt; SampleGenerator &gt; sampleGenerator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransform</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a6b65a9eaf9531968c6813794d362b4a6</anchor>
      <arglist>(std::unique_ptr&lt; math::Transform &gt; transform)</arglist>
    </member>
    <member kind="function">
      <type>Renderer *</type>
      <name>getRenderer</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a8ead07d96ee153253f2de9c46d2c2ccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Receiver *</type>
      <name>getReceiver</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>a0c81d06f6aee09ecad36dfaf6b75106d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleGenerator *</type>
      <name>getSampleGenerator</name>
      <anchorfile>classph_1_1_core_cooked_unit.html</anchorfile>
      <anchor>aeeff20bb99ee0f9aa5cb46227cf0f13b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CoreCookingContext</name>
    <filename>classph_1_1_core_cooking_context.html</filename>
    <member kind="function">
      <type></type>
      <name>CoreCookingContext</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>a22e0e3330ef8e9fc8eebb3e72c6bc720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const math::TVector2&lt; uint32 &gt; &amp;</type>
      <name>getFrameSizePx</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>ad8e19da634ed1c7990c61f83d5f8a98e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getAspectRatio</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>afebf63c9e4ba6b4a55a42b4095b4dc61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>numWorkers</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>a50a1f087b17de8bf1411dcbd126f4e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EAccelerator</type>
      <name>getTopLevelAcceleratorType</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>a75a572981c1b0c59b39e1e3d089aaa79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameSizePx</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>a9d6ab3174d150b725946d2172638b41f</anchor>
      <arglist>(const math::TVector2&lt; uint32 &gt; &amp;frameSizePx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumWorkers</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>ababed662a201fdd306015baaafd9813d</anchor>
      <arglist>(uint32 numWorkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopLevelAcceleratorType</name>
      <anchorfile>classph_1_1_core_cooking_context.html</anchorfile>
      <anchor>a188b946fb06c9b86b05851781be60cbb</anchor>
      <arglist>(EAccelerator accelerator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CoreResource</name>
    <filename>classph_1_1_core_resource.html</filename>
    <member kind="function">
      <type></type>
      <name>CoreResource</name>
      <anchorfile>classph_1_1_core_resource.html</anchorfile>
      <anchor>a7a0f332066504eb974bb290e6d80317d</anchor>
      <arglist>(const std::string &amp;identifier)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>getPath</name>
      <anchorfile>classph_1_1_core_resource.html</anchorfile>
      <anchor>afaaaeafe26cb1854fff25546203dafc4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CoreSdlResource</name>
    <filename>classph_1_1_core_sdl_resource.html</filename>
    <base>ph::SdlResourceBase</base>
    <member kind="function" virtualness="pure">
      <type>ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_core_sdl_resource.html</anchorfile>
      <anchor>ae21d4e8f94d06ca8f9f74eedb03afbc8</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_core_sdl_resource.html</anchorfile>
      <anchor>a0f67725ebbdf415fcfa6504a4bc84bea</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CsvFile</name>
    <filename>classph_1_1_csv_file.html</filename>
    <member kind="function">
      <type></type>
      <name>CsvFile</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>aadf371bdc021b082788f0b7943e6bf75</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CsvFile</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>a22eaed5650082649f6f628525fbc87aa</anchor>
      <arglist>(const Path &amp;csvFile)</arglist>
    </member>
    <member kind="function">
      <type>CsvFile &amp;</type>
      <name>load</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>a8282523d5f13615e9f23eb3831f476e8</anchor>
      <arglist>(const Path &amp;csvFile)</arglist>
    </member>
    <member kind="function">
      <type>const CsvFile &amp;</type>
      <name>save</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>a2c7d7cb45936ec352d33da2ea7c71acb</anchor>
      <arglist>(const Path &amp;csvFile) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numRows</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>aafbbc6d99042816abcdaa2ddad5b4b21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CsvFileRow &amp;</type>
      <name>getRow</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>a197b8cebd8e38976e5abf002a5bf34ae</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>CsvFileRow &amp;</type>
      <name>getRow</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>a500424937cb59816960c22d479dc484b</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>CsvFile &amp;</type>
      <name>addRow</name>
      <anchorfile>classph_1_1_csv_file.html</anchorfile>
      <anchor>ac1bc8591865e781b027e4c107d6c2c61</anchor>
      <arglist>(CsvFileRow row)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::CsvFileRow</name>
    <filename>classph_1_1_csv_file_row.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>numValues</name>
      <anchorfile>classph_1_1_csv_file_row.html</anchorfile>
      <anchor>a6f3a502cf7a43c2b617c3ba9f595bee2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_csv_file_row.html</anchorfile>
      <anchor>afbf2b9538e1868ae5a1b13b6c2172357</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_csv_file_row.html</anchorfile>
      <anchor>ac42eb8070c2b4db15f9b1fb798df05b2</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>CsvFileRow &amp;</type>
      <name>addValue</name>
      <anchorfile>classph_1_1_csv_file_row.html</anchorfile>
      <anchor>aa23f02ab67fb0b01f510e017c087dd49</anchor>
      <arglist>(std::string value)</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_csv_file_row.html</anchorfile>
      <anchor>a61c2a44219822c85fb685f2268547008</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DammertzDispatcher</name>
    <filename>classph_1_1_dammertz_dispatcher.html</filename>
    <base>ph::IWorkDispatcher</base>
    <class kind="class">ph::DammertzDispatcher::TAnalyzer</class>
    <member kind="enumeration">
      <type></type>
      <name>ERefineMode</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>a62c5b9712479377907d9b49898c0435f</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_dammertz_dispatcher.html" anchor="a62c5b9712479377907d9b49898c0435faafa8fd4b90a3f8123b4bd30446518a7e">MIDPOINT</enumvalue>
      <enumvalue file="classph_1_1_dammertz_dispatcher.html" anchor="a62c5b9712479377907d9b49898c0435fa7724ff6817fae0e67784a0a949d1689a">MIN_ERROR_DIFFERENCE</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>DammertzDispatcher</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>adf70d45e588b81718756fbc1837d8087</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DammertzDispatcher</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>a3b1f3f9c766a0136b8948ced10961474</anchor>
      <arglist>(uint32 numWorkers, const Region &amp;fullRegion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DammertzDispatcher</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>a7ab83941a37a7f8cfe82bd1d02d830f0</anchor>
      <arglist>(uint32 numWorkers, const Region &amp;fullRegion, real precisionStandard, std::size_t initialDepthPerRegion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DammertzDispatcher</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>a5aaac0cb1f69d83757fb421ac62f4ca3</anchor>
      <arglist>(uint32 numWorkers, const Region &amp;fullRegion, real precisionStandard, std::size_t initialDepthPerRegion, std::size_t standardDepthPerRegion, std::size_t terminusDepthPerRegion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dispatch</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>a0ae150f900747b00f989872c96b9b1ac</anchor>
      <arglist>(WorkUnit *out_workUnit) override</arglist>
    </member>
    <member kind="function">
      <type>TAnalyzer&lt; MODE &gt;</type>
      <name>createAnalyzer</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>af7cab122854a5498c4c077c549a7c146</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAnalyzedData</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>ab5148bfb2a97b254900b3dcc31708567</anchor>
      <arglist>(const TAnalyzer&lt; MODE &gt; &amp;analyzer)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numPendingRegions</name>
      <anchorfile>classph_1_1_dammertz_dispatcher.html</anchorfile>
      <anchor>aa4dadc01a9ccf13ea8bf490816361d4a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::DefaultSpectralSampleProps</name>
    <filename>classph_1_1math_1_1_default_spectral_sample_props.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>NUM_SAMPLES</name>
      <anchorfile>classph_1_1math_1_1_default_spectral_sample_props.html</anchorfile>
      <anchor>ae1a078ce2cbda83aaecfcd22593ed4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>MIN_WAVELENGTH_NM</name>
      <anchorfile>classph_1_1math_1_1_default_spectral_sample_props.html</anchorfile>
      <anchor>a1007ecf3c8518009965f40623c8a2186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>MAX_WAVELENGTH_NM</name>
      <anchorfile>classph_1_1math_1_1_default_spectral_sample_props.html</anchorfile>
      <anchor>ae1d578d73a41cbcdb4e6216aadbc01af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::DeterministicSeeder</name>
    <filename>classph_1_1math_1_1_deterministic_seeder.html</filename>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>nextSeed</name>
      <anchorfile>classph_1_1math_1_1_deterministic_seeder.html</anchorfile>
      <anchor>a9b8131a9f0a49ebda98fcfd76d935c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classph_1_1math_1_1_deterministic_seeder.html</anchorfile>
      <anchor>a8791cc9ce69f6d137d1d9e02d37c3441</anchor>
      <arglist>(const EngineInitSettings &amp;settings)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DielectricFresnel</name>
    <filename>classph_1_1_dielectric_fresnel.html</filename>
    <base>ph::FresnelEffect</base>
    <member kind="function">
      <type></type>
      <name>DielectricFresnel</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>aec2a4679f261983dc673e0884f29379e</anchor>
      <arglist>(real iorOuter, real iorInner)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>a4908340e13e7aeac56c59000ba37fd56</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const override=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calcRefractDir</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>a53ca71e04eb5a14704a4f38f2106c6c1</anchor>
      <arglist>(const math::Vector3R &amp;I, const math::Vector3R &amp;N, math::Vector3R *out_refractDir) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getIorOuter</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>a2b74745aa96b224aff103c575b76470c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getIorInner</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>a91f3a927a703ca178accd1d196258a5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>m_iorOuter</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>a2365a5bf0f7d137c24b8aba2534ba67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>m_iorInner</name>
      <anchorfile>classph_1_1_dielectric_fresnel.html</anchorfile>
      <anchor>a4641bdef3aa4d89b3fa0de5f8f3f997b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DielectricInterfaceInfo</name>
    <filename>classph_1_1_dielectric_interface_info.html</filename>
    <member kind="function">
      <type></type>
      <name>DielectricInterfaceInfo</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>ab412149eed90d6de24063c6612a17fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DielectricInterfaceInfo</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>ab35833075c02ec15a532c16c5755319e</anchor>
      <arglist>(EInterfaceFresnel fresnel, real iorOuter, real iorInner)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DielectricFresnel &gt;</type>
      <name>genFresnelEffect</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>a24938d5c4009b173289ea3839d7f26c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFresnel</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>a7286cd2fddc84ed2a501438cd7335cd2</anchor>
      <arglist>(EInterfaceFresnel fresnel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIorOuter</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>ac3e28c4e1883cd79287e1d1e1e4b2365</anchor>
      <arglist>(real iorOuter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIorInner</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>a58d99a39543a512d9c4306e973e35795</anchor>
      <arglist>(real iorInner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_STRUCT</name>
      <anchorfile>classph_1_1_dielectric_interface_info.html</anchorfile>
      <anchor>af26fb642e2edb064b72c6a0e4c62cca8</anchor>
      <arglist>(TSdlOwnerStruct&lt; DielectricInterfaceInfo &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DiffuseSurfaceEmitter</name>
    <filename>classph_1_1_diffuse_surface_emitter.html</filename>
    <base>ph::DiffuseSurfaceEmitterBase</base>
    <member kind="function">
      <type></type>
      <name>DiffuseSurfaceEmitter</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>aea0ef92ee0aecbe37f6cdd2d048fe868</anchor>
      <arglist>(const Primitive *surface, const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;emittedEnergy, EmitterFeatureSet featureSet=defaultFeatureSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>a69918497a250e2e01a5c79b886e66ca1</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>aa94f95f526e3662c3abfd37440ebe36e</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>ae7552db8437361c4629e0fd282812688</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>ad66e89e91c11e9022f097e608bf1d3dc</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcRadiantFluxApprox</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>a5cf6a8606a7907eae3de595273fe7c4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Primitive &amp;</type>
      <name>getSurface</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>adad4d6a5f8a41611035f6195a56c6bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TTexture&lt; math::Spectrum &gt; &amp;</type>
      <name>getEmittedEnergy</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter.html</anchorfile>
      <anchor>aa80fcafd1a575ffbb268c39c7acd8507</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DiffuseSurfaceEmitterBase</name>
    <filename>classph_1_1_diffuse_surface_emitter_base.html</filename>
    <base>ph::SurfaceEmitter</base>
    <member kind="function">
      <type></type>
      <name>DiffuseSurfaceEmitterBase</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>a305c01b9a88c3b768da8460944c6a6c6</anchor>
      <arglist>(EmitterFeatureSet featureSet=defaultFeatureSet)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>a8271bc3401a849b32ee4c77e5da41519</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>a5f5349144a54248ae52d6fcee23c6087</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>aaeda771011a239e1933d89164044b988</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>a07f634404c1a513d8179ea571b5e0602</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalEnergyFromSurface</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>adfc0fb666e18f39d258820b9a4e3d445</anchor>
      <arglist>(const TTexture&lt; math::Spectrum &gt; &amp;energy, const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>genDirectSampleFromSurface</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>a8362949a52025000b7c9328049143318</anchor>
      <arglist>(const Primitive &amp;surface, const TTexture&lt; math::Spectrum &gt; &amp;energy, DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitRayFromSurface</name>
      <anchorfile>classph_1_1_diffuse_surface_emitter_base.html</anchorfile>
      <anchor>aba097be0ef787b503ce75eae7166c388</anchor>
      <arglist>(const Primitive &amp;surface, const TTexture&lt; math::Spectrum &gt; &amp;energy, EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DirectEnergyPdfInput</name>
    <filename>classph_1_1_direct_energy_pdf_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>a18e1f8e623f2d71788282860f8c64643</anchor>
      <arglist>(const SurfaceHit &amp;X, const SurfaceHit &amp;Xe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>ae7dea29aa3cfa580276e433d8c6395a9</anchor>
      <arglist>(const math::Vector3R &amp;targetPos, const SurfaceHit &amp;Xe)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getTargetPos</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>aa3981cdfcd836552915dec5269686768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceHit &amp;</type>
      <name>getXe</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>a359d88d678eef93c23e3357e47c7efcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getEmitPos</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>a2144b9fde70010b679ca08dea134ae99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getEmitPosNormal</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>ae1ae382a5c72a2dcffeec6a2646670d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Primitive &amp;</type>
      <name>getSrcPrimitive</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>a01590e32ceb2c69e6aea03d67f8e29e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getSrcFaceID</name>
      <anchorfile>classph_1_1_direct_energy_pdf_input.html</anchorfile>
      <anchor>a3bc3af12e9578a6c173f707a7b721b67</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DirectEnergyPdfOutput</name>
    <filename>classph_1_1_direct_energy_pdf_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setPdf</name>
      <anchorfile>classph_1_1_direct_energy_pdf_output.html</anchorfile>
      <anchor>a6d51d154583f1c91f88db59d3ca6ba86</anchor>
      <arglist>(const lta::PDF &amp;pdf)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfW</name>
      <anchorfile>classph_1_1_direct_energy_pdf_output.html</anchorfile>
      <anchor>acfd52691469e934912314e4232989f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdf</name>
      <anchorfile>classph_1_1_direct_energy_pdf_output.html</anchorfile>
      <anchor>af5c05da5bdd6f3d2be8929fd23998527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_direct_energy_pdf_output.html</anchorfile>
      <anchor>a2cd686e5527818412677d4d4a22c50ad</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DirectEnergyPdfQuery</name>
    <filename>classph_1_1_direct_energy_pdf_query.html</filename>
    <member kind="typedef">
      <type>DirectEnergyPdfInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_direct_energy_pdf_query.html</anchorfile>
      <anchor>a871f77f3c050ef1a93e23e735d9bf88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DirectEnergyPdfOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_direct_energy_pdf_query.html</anchorfile>
      <anchor>a9d2364c2ed740bdd36541123de10d369</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectEnergyPdfQuery</name>
      <anchorfile>classph_1_1_direct_energy_pdf_query.html</anchorfile>
      <anchor>a898b04123c7e31542c564acfe21c0d9c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_direct_energy_pdf_query.html</anchorfile>
      <anchor>a4daf0243fd001366cfc804200046a44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_direct_energy_pdf_query.html</anchorfile>
      <anchor>a0568d9ee0926fc79dd847995f093ed8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DirectEnergySampleInput</name>
    <filename>classph_1_1_direct_energy_sample_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_direct_energy_sample_input.html</anchorfile>
      <anchor>abaafdd7be43ef228a149b936f648780b</anchor>
      <arglist>(const SurfaceHit &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceHit &amp;</type>
      <name>getX</name>
      <anchorfile>classph_1_1_direct_energy_sample_input.html</anchorfile>
      <anchor>a440d8c752151cb80858dc237dc97018a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getTargetPos</name>
      <anchorfile>classph_1_1_direct_energy_sample_input.html</anchorfile>
      <anchor>ae05a96052f869c0bc3b235bc205437df</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DirectEnergySampleOutput</name>
    <filename>classph_1_1_direct_energy_sample_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setEmitPos</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>ac5d1ceb616b21ddcd95e917b96852ad6</anchor>
      <arglist>(const math::Vector3R &amp;emitPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmittedEnergy</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>a95533a830460d8be47a1495356d0b5db</anchor>
      <arglist>(const math::Spectrum &amp;emittedEnergy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdf</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>a6d38f01a088228113664830711767ebf</anchor>
      <arglist>(const lta::PDF &amp;pdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcPrimitive</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>a75dd2f9fe2085ac8b56b9914ad9a362d</anchor>
      <arglist>(const Primitive *srcPrimitive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservationRay</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>ab982376c5766c7bd037494d55895e413</anchor>
      <arglist>(const Ray &amp;observationRay)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getEmitPos</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>acb04d6dd09beea81fe91eb6364f9e46f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getEmittedEnergy</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>a85b326c37338f6f2ce7aba6845aba775</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfW</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>ae61929db70aebae0ad79b589830edbe7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdf</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>af4cf5ddcbb4f1a84c4b01ecb9f9a2187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Primitive &amp;</type>
      <name>getSrcPrimitive</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>acccbc7d51f5b709c50e30e2bf77378c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ray &amp;</type>
      <name>getObservationRay</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>a8681008d7a7193dfdfa2e3daeedda11b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_direct_energy_sample_output.html</anchorfile>
      <anchor>ae76596fbae4d7400e8c3344145027d26</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DirectEnergySampleQuery</name>
    <filename>classph_1_1_direct_energy_sample_query.html</filename>
    <member kind="typedef">
      <type>DirectEnergySampleInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>a9adb22e9134b1c3a5cd93e7b9bc7b23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DirectEnergySampleOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>a9608bd6916e1d0ef9c81872cfca5ba56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectEnergySampleQuery</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>ad9b1e6bf3f29b7f6e4d37776f7e016b4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getTargetToEmit</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>a13ce8d83f4c30a09ab976a364ae44b9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getEmitToTarget</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>a8ee082dfcdcb9cccecd59e4af977aa56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>ada947c45e95c3e9c8cdf3e3b0cd86604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_direct_energy_sample_query.html</anchorfile>
      <anchor>a7451f8803ed4441da19fce6be3eaa009</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::DomeRadianceFunctionInfo</name>
    <filename>structph_1_1_dome_radiance_function_info.html</filename>
    <member kind="variable">
      <type>math::Vector2S</type>
      <name>resolution</name>
      <anchorfile>structph_1_1_dome_radiance_function_info.html</anchorfile>
      <anchor>a76e1111f34d4159c7cd25df7dc2daf2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAnalytical</name>
      <anchorfile>structph_1_1_dome_radiance_function_info.html</anchorfile>
      <anchor>ad3607167b87c5b5098f913934fa0f817</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::DynamicLinearTranslation</name>
    <filename>classph_1_1math_1_1_dynamic_linear_translation.html</filename>
    <base>ph::math::RigidTransform</base>
    <member kind="function">
      <type></type>
      <name>DynamicLinearTranslation</name>
      <anchorfile>classph_1_1math_1_1_dynamic_linear_translation.html</anchorfile>
      <anchor>a8c14d6d0dababe55b5d3ff42ff50230b</anchor>
      <arglist>(const Vector3R &amp;translationT0, const Vector3R &amp;translationT1)</arglist>
    </member>
    <member kind="function">
      <type>DynamicLinearTranslation</type>
      <name>makeInversed</name>
      <anchorfile>classph_1_1math_1_1_dynamic_linear_translation.html</anchorfile>
      <anchor>a19ddf3d9eabb322aae12f4f5c508b816</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Transform &gt;</type>
      <name>genInversed</name>
      <anchorfile>classph_1_1math_1_1_dynamic_linear_translation.html</anchorfile>
      <anchor>a5ef0706180c93c96cf0484342a157825</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::EmbeddedPrimitiveMetaGetter</name>
    <filename>structph_1_1_embedded_primitive_meta_getter.html</filename>
    <member kind="function">
      <type></type>
      <name>EmbeddedPrimitiveMetaGetter</name>
      <anchorfile>structph_1_1_embedded_primitive_meta_getter.html</anchorfile>
      <anchor>a5c694f17424ba3f78c7d29c2cd07ecae</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveMetadata *</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_embedded_primitive_meta_getter.html</anchorfile>
      <anchor>a242df5dbbed6b26711d0d800ddce2008</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>PrimitiveMetadata</type>
      <name>metadata</name>
      <anchorfile>structph_1_1_embedded_primitive_meta_getter.html</anchorfile>
      <anchor>a1752230ab62de6aafa346f8ca7ed0a21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EmitFunction</name>
    <filename>classph_1_1_emit_function.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~EmitFunction</name>
      <anchorfile>classph_1_1_emit_function.html</anchorfile>
      <anchor>ac979fc6841e4e1c6c70dc5ccecdba40d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evalEmissionCoeff</name>
      <anchorfile>classph_1_1_emit_function.html</anchorfile>
      <anchor>a5110b97e8aaacac1313e567b0cd8cc81</anchor>
      <arglist>(const SurfaceHit &amp;X, real *out_coeff) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Emitter</name>
    <filename>classph_1_1_emitter.html</filename>
    <member kind="function">
      <type></type>
      <name>Emitter</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a4ba4df4fef7fa14fe4d4b541393b37e6</anchor>
      <arglist>(EmitterFeatureSet featureSet=defaultFeatureSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Emitter</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a15a4c781ce2854656281f87ca916e6c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a3227615e9fa0f370b6668302603a8ed0</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a60e69ba97f6c8bb9c2dbeffdacf81003</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a89da2023ddaf1d127acd897418f186c0</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a881607ad333e2d29e585055a73e8e244</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real</type>
      <name>calcRadiantFluxApprox</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a6ffe24481333559335e624a50bd04a0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EmitterFeatureSet</type>
      <name>getFeatureSet</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>a22739f580c4e70e93961d5eca8ddc80e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>defaultFeatureSet</name>
      <anchorfile>classph_1_1_emitter.html</anchorfile>
      <anchor>ae355733e5803507f222d2d57da95e1e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EmitterBuildingMaterial</name>
    <filename>classph_1_1_emitter_building_material.html</filename>
    <member kind="function">
      <type></type>
      <name>EmitterBuildingMaterial</name>
      <anchorfile>classph_1_1_emitter_building_material.html</anchorfile>
      <anchor>a15b585a3ddf5c346a90619bec614aee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const Primitive * &gt;</type>
      <name>primitives</name>
      <anchorfile>classph_1_1_emitter_building_material.html</anchorfile>
      <anchor>a443e95670d1c67091b38bceb5406fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrimitiveMetadata *</type>
      <name>metadata</name>
      <anchorfile>classph_1_1_emitter_building_material.html</anchorfile>
      <anchor>a661e571d3d367a86e17c8be4b5756607</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EmitterSampler</name>
    <filename>classph_1_1_emitter_sampler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmitterSampler</name>
      <anchorfile>classph_1_1_emitter_sampler.html</anchorfile>
      <anchor>ade28c0d7642025091e82d48fbe47cf35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classph_1_1_emitter_sampler.html</anchorfile>
      <anchor>acb7d855327e079567ac2b14b3d1260e2</anchor>
      <arglist>(TSpanView&lt; const Emitter * &gt; emitters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Emitter *</type>
      <name>pickEmitter</name>
      <anchorfile>classph_1_1_emitter_sampler.html</anchorfile>
      <anchor>a99096fcbc680e77f38784ffd22fdbd75</anchor>
      <arglist>(SampleFlow &amp;sampleFlow, real *out_PDF) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_emitter_sampler.html</anchorfile>
      <anchor>aa0f4fdb7d39958d2e8d1607c5d43a2ac</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_emitter_sampler.html</anchorfile>
      <anchor>a831b54b01327db1f8d500cf1e225c832</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EnergyEmissionSampleInput</name>
    <filename>classph_1_1_energy_emission_sample_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_energy_emission_sample_input.html</anchorfile>
      <anchor>a9da69ffda6da1c54e0dfe5320867943d</anchor>
      <arglist>(const Time &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getTime</name>
      <anchorfile>classph_1_1_energy_emission_sample_input.html</anchorfile>
      <anchor>a6546a71776b2fc9a38d707b12e3da4b2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EnergyEmissionSampleOutput</name>
    <filename>classph_1_1_energy_emission_sample_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setPdf</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>adbff405717200008c61ecb4d778aac75</anchor>
      <arglist>(const lta::PDF &amp;pdfPos, const lta::PDF &amp;pdfDir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmittedRay</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a9757f04267fecb64652c238b86bdc55a</anchor>
      <arglist>(const Ray &amp;emittedRay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmittedEnergy</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a7adeb55b71e3c981bcb012510fd63192</anchor>
      <arglist>(const math::Spectrum &amp;emittedEnergy)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfA</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a66e722df9dba3adaafb2fcaf50723997</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfW</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>ab04844b33696671c058cdb19ca0f30a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdfPos</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a3d456ca35092177ff6c9356726943135</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdfDir</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a3382a1017f78293a4a582a78831a73c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ray &amp;</type>
      <name>getEmittedRay</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>ad5244cbd58dfaf3217db78f8beaf9a3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getEmittedEnergy</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a016ba9642bd15cea35e7b0b391650894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_energy_emission_sample_output.html</anchorfile>
      <anchor>a67f3906a4ad9a79c4c2b07fbf2f1d840</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EnergyEmissionSampleQuery</name>
    <filename>classph_1_1_energy_emission_sample_query.html</filename>
    <member kind="typedef">
      <type>EnergyEmissionSampleInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_energy_emission_sample_query.html</anchorfile>
      <anchor>a41da47dc482db7cc763113c8db25be56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EnergyEmissionSampleOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_energy_emission_sample_query.html</anchorfile>
      <anchor>a4355069afceebb91b698472d62a10529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnergyEmissionSampleQuery</name>
      <anchorfile>classph_1_1_energy_emission_sample_query.html</anchorfile>
      <anchor>a2005119de6cc31d660f37c4e434fd659</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_energy_emission_sample_query.html</anchorfile>
      <anchor>a6e99295cce8bcb6123c819f02f7dbc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_energy_emission_sample_query.html</anchorfile>
      <anchor>a5b8d0c7d126c7b43fad430a57d4ff405</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Engine</name>
    <filename>classph_1_1_engine.html</filename>
    <member kind="function">
      <type></type>
      <name>Engine</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>ae3daf1d8c9f5644dee6f331ffac291c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterCommand</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>a1fd2b53c68da422af82b58b7cc3318f9</anchor>
      <arglist>(const std::string &amp;commandFragment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadCommands</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>a23e3484ab525757280bdc7700c64ef1c</anchor>
      <arglist>(const Path &amp;sceneFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>a1f59e0777fd178d78f242509eb097d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>ae19bcf0a3ee61df2759cdb316541e245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>af6607cd1315c8856c06ea91ded0892d6</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame, bool applyPostProcessing=true)</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; int64 &gt;</type>
      <name>getFilmDimensionPx</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>a2561118f36ba33d033e3ec000a2c844d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumThreads</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>a3ddec2544828390e5e508d91b6342cf7</anchor>
      <arglist>(uint32 numThreads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>aafae00c1ea9101a2e711f246222c3f78</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame, bool applyPostProcessing=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncQueryStatistics</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>adc0d81dd086a590deff8f01ee8015bca</anchor>
      <arglist>(float32 *out_percentageProgress, float32 *out_samplesPerSecond) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkingDirectory</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>ac2dc7471926087dca90802d65603fe21</anchor>
      <arglist>(const Path &amp;directory)</arglist>
    </member>
    <member kind="function">
      <type>Renderer *</type>
      <name>getRenderer</name>
      <anchorfile>classph_1_1_engine.html</anchorfile>
      <anchor>a8799baeef6d703f05117f5736410c2a7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EngineInitSettings</name>
    <filename>classph_1_1_engine_init_settings.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>tryLoad</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>a4fd3c37e0820469fc2d7674676834fa0</anchor>
      <arglist>(const std::string &amp;settingsFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>a8cca1309d6c14db4a30385b41129867f</anchor>
      <arglist>(const std::string &amp;settingsFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>a4cb66a95d48c3febd3d2873a2934e4a8</anchor>
      <arglist>(const std::string &amp;settingsFile) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EngineInitSettings</type>
      <name>loadStandardConfig</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>a343aa929d1ce7dcd4eab1b104d0bc810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; LogHandler &gt;</type>
      <name>additionalLogHandlers</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>aecb241ac785258164149a69c5d94223c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ESurfaceRefineMode</type>
      <name>surfaceRefineMode</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>aefb89ffa82c7c8ea40d494524f44469a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>selfIntersectDelta</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>aa07aeaa40446f7891e07eaa6f79594df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numIterativeSurfaceRefinements</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>abb5b1bf860fba944b863e15697cf57ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useRandomSeed</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>a296c390e72e502b3ccbb20a6d46311a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>fixedSeed</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>ad11570c61f00c9912bd46bebacf4f8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>fixedSeedStep</name>
      <anchorfile>classph_1_1_engine_init_settings.html</anchorfile>
      <anchor>ab7d2b58af7ddc9137804435498dca72b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::EqualSamplingRenderer</name>
    <filename>classph_1_1_equal_sampling_renderer.html</filename>
    <base>ph::SamplingRenderer</base>
    <member kind="function">
      <type></type>
      <name>EqualSamplingRenderer</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>af56c59506cb41a17a3d2230361908694</anchor>
      <arglist>(std::unique_ptr&lt; IRayEnergyEstimator &gt; estimator, Viewport viewport, SampleFilter filter, uint32 numWorkers, EScheduler scheduler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUpdate</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>a738178b093038c50c2b74d63157c58f7</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>aa1e2245a862500a82279bad33f342ee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>af7ae5be4dde75da946080901545e5817</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>asyncPollUpdatedRegions</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>a92d59f03788accffb0961202774660f2</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>acfeb65b6df6ac7aad134769868f71283</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>a80dbcc8bb25918c3fe97df1c3a9c0905</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>a5b56ae62a26a3d549a5c782b85c69ec1</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_equal_sampling_renderer.html</anchorfile>
      <anchor>a43b09b86f174a8c56a2dba82a048e155</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ESPowerFavoring</name>
    <filename>classph_1_1_e_s_power_favoring.html</filename>
    <base>ph::EmitterSampler</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_e_s_power_favoring.html</anchorfile>
      <anchor>ac027ecc40eed534a342648e24994e173</anchor>
      <arglist>(TSpanView&lt; const Emitter * &gt; emitters) override</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>pickEmitter</name>
      <anchorfile>classph_1_1_e_s_power_favoring.html</anchorfile>
      <anchor>a051e0d172776410e048d9e322ab642fd</anchor>
      <arglist>(SampleFlow &amp;sampleFlow, real *out_PDF) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_e_s_power_favoring.html</anchorfile>
      <anchor>af4faee8bc772130dda012291ad3712bb</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_e_s_power_favoring.html</anchorfile>
      <anchor>a524b327bcb1f6d0356004faed8ae0b63</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ESUniformRandom</name>
    <filename>classph_1_1_e_s_uniform_random.html</filename>
    <base>ph::EmitterSampler</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_e_s_uniform_random.html</anchorfile>
      <anchor>ad4fb75b3000cc5c4f2af5a6d4a593c67</anchor>
      <arglist>(TSpanView&lt; const Emitter * &gt; emitters) override</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>pickEmitter</name>
      <anchorfile>classph_1_1_e_s_uniform_random.html</anchorfile>
      <anchor>a2c349ec64a3a3ab6b9439c762ec779c5</anchor>
      <arglist>(SampleFlow &amp;sampleFlow, real *out_PDF) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_e_s_uniform_random.html</anchorfile>
      <anchor>a5d051c071ddcdfd0479300be0404cb26</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_e_s_uniform_random.html</anchorfile>
      <anchor>a61d342f74953327e81cff3ca5885ca62</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ExactConductorFresnel</name>
    <filename>classph_1_1_exact_conductor_fresnel.html</filename>
    <base>ph::ConductorFresnel</base>
    <member kind="function">
      <type></type>
      <name>ExactConductorFresnel</name>
      <anchorfile>classph_1_1_exact_conductor_fresnel.html</anchorfile>
      <anchor>a0165b106593d6612583689d0520fdd02</anchor>
      <arglist>(real iorOuter, const math::Spectrum &amp;iorInnerN, const math::Spectrum &amp;iorInnerK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExactConductorFresnel</name>
      <anchorfile>classph_1_1_exact_conductor_fresnel.html</anchorfile>
      <anchor>a4707b59bb8b1f0305b13a59aeb71c33a</anchor>
      <arglist>(real iorOuter, const std::vector&lt; real &gt; &amp;iorWavelengthsNm, const std::vector&lt; real &gt; &amp;iorInnerNs, const std::vector&lt; real &gt; &amp;iorInnerKs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_exact_conductor_fresnel.html</anchorfile>
      <anchor>a9c8be3e7f66a34803f762fd9b058fe9c</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ExactDielectricFresnel</name>
    <filename>classph_1_1_exact_dielectric_fresnel.html</filename>
    <base>ph::DielectricFresnel</base>
    <member kind="function">
      <type></type>
      <name>ExactDielectricFresnel</name>
      <anchorfile>classph_1_1_exact_dielectric_fresnel.html</anchorfile>
      <anchor>a6c46fc069f74552b72e8ed01746fae3d</anchor>
      <arglist>(real iorOuter, real iorInner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_exact_dielectric_fresnel.html</anchorfile>
      <anchor>a238710748c5f4fcf357b34ce60452b0b</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ExrFileReader</name>
    <filename>classph_1_1_exr_file_reader.html</filename>
    <member kind="function">
      <type></type>
      <name>ExrFileReader</name>
      <anchorfile>classph_1_1_exr_file_reader.html</anchorfile>
      <anchor>a173502f6359442104a26a7fe86507279</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classph_1_1_exr_file_reader.html</anchorfile>
      <anchor>aa292365149a80b6106b7c960962c4114</anchor>
      <arglist>(HdrRgbFrame *out_frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromFilesystem</name>
      <anchorfile>classph_1_1_exr_file_reader.html</anchorfile>
      <anchor>a3743f5a1456063a48b605d23a69f8c86</anchor>
      <arglist>(HdrRgbFrame *out_frame, std::string_view redChannelName=&quot;R&quot;, std::string_view greenChannelName=&quot;G&quot;, std::string_view blueChannelName=&quot;B&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ExrFileWriter</name>
    <filename>classph_1_1_exr_file_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>ExrFileWriter</name>
      <anchorfile>classph_1_1_exr_file_writer.html</anchorfile>
      <anchor>a099dbfd60cd1c59911992c831b13cf1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExrFileWriter</name>
      <anchorfile>classph_1_1_exr_file_writer.html</anchorfile>
      <anchor>aecb4f2b5354423410de4da962ed38231</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classph_1_1_exr_file_writer.html</anchorfile>
      <anchor>a6045b6ebf8bc97d5aeb46d0af23478ab</anchor>
      <arglist>(const HdrRgbFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveHighPrecision</name>
      <anchorfile>classph_1_1_exr_file_writer.html</anchorfile>
      <anchor>ad786ab9804c437feb6ee1ba94f937c64</anchor>
      <arglist>(const HdrRgbFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveToFilesystem</name>
      <anchorfile>classph_1_1_exr_file_writer.html</anchorfile>
      <anchor>a5951185f6d37aee45680b9b0cc219fbc</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, bool saveInHighPrecision=false, std::string_view redChannelName=&quot;R&quot;, std::string_view greenChannelName=&quot;G&quot;, std::string_view blueChannelName=&quot;B&quot;, std::string_view alphaChannelName=&quot;&quot;, HdrComponent alphaValue=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveToMemory</name>
      <anchorfile>classph_1_1_exr_file_writer.html</anchorfile>
      <anchor>ae95d45eb27b513290d8098f68d6def1a</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, ByteBuffer &amp;buffer, std::string_view redChannelName=&quot;R&quot;, std::string_view greenChannelName=&quot;G&quot;, std::string_view blueChannelName=&quot;B&quot;, std::string_view alphaChannelName=&quot;&quot;, HdrComponent alphaValue=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Filesystem</name>
    <filename>classph_1_1_filesystem.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasDirectory</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>a81d322e470e5c23200a53662369c648a</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasFile</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>af35e6ccf9d693e6ea33e4ee9b7d60889</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createDirectory</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>a95cfd7f9df24a939ae287be87bd7f98a</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createDirectories</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>a83338e10fadbde94c26dd3e0c400f8ca</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyFile</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>a34b2918123bbb51bcecbcb2a7f0ecd72</anchor>
      <arglist>(const Path &amp;srcFile, const Path &amp;dstFile, bool overwriteExisting=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyFileToDirectory</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>a7706d23337ce237aa75cf1140e52084d</anchor>
      <arglist>(const Path &amp;srcFile, const Path &amp;dstDir, bool overwriteExisting=false, bool createMissingDirectories=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>af471b2e77cce02dd5c3e8479533a08f3</anchor>
      <arglist>(const Path &amp;srcPath, const Path &amp;dstPath, bool overwriteExisting=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Path</type>
      <name>makeRelative</name>
      <anchorfile>classph_1_1_filesystem.html</anchorfile>
      <anchor>a55247b6427f0a3fe99fa2c19654aa941</anchor>
      <arglist>(const Path &amp;src, const Path &amp;base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Film</name>
    <filename>classph_1_1_film.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>Film</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a89bbffe1bd6ac0df487ddef591d3a274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Film</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>ae53f776e26480496a306c03064f6c4d7</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Film</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a60c30818a10cfe54f1c150f5df0fde85</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindowPx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Film</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>acd1e4846e9d0bea0b3edf5f96c008b9a</anchor>
      <arglist>(Film &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Film &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>ab8cc1a256d94c8c4a664f6ac901f5d5c</anchor>
      <arglist>(Film &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Film</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>accb42952775b9006e2e8444d85e8bee2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a62d0fee655ee76b62de7df6b91732d3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setActualResPx</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>ae4521107c2030b714cd233586f8eb0f4</anchor>
      <arglist>(const math::TVector2&lt; int64 &gt; &amp;actualResPx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEffectiveWindowPx</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a1f5eafe4931d941bab0a16a153846fa0</anchor>
      <arglist>(const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>develop</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>ad4a28e11c606acd07ac6419016e464a0</anchor>
      <arglist>(HdrRgbFrame &amp;out_frame) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>develop</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a05c8eaed41686a6bc5c8a46edcc28673</anchor>
      <arglist>(HdrRgbFrame &amp;out_frame, const math::TAABB2D&lt; int64 &gt; &amp;regionPx) const</arglist>
    </member>
    <member kind="function">
      <type>const math::TVector2&lt; int64 &gt; &amp;</type>
      <name>getActualResPx</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a2ed88265ddc185baea6449584a8b9050</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; int64 &gt;</type>
      <name>getEffectiveResPx</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>a56255418a8530fc40c74a8bc8c8a4fe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::TAABB2D&lt; int64 &gt; &amp;</type>
      <name>getEffectiveWindowPx</name>
      <anchorfile>classph_1_1_film.html</anchorfile>
      <anchor>af4297a260e3571ba4c1f426f28dd042e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FilteredInputStream</name>
    <filename>classph_1_1_filtered_input_stream.html</filename>
    <base>ph::IInputStream</base>
    <member kind="function">
      <type></type>
      <name>FilteredInputStream</name>
      <anchorfile>classph_1_1_filtered_input_stream.html</anchorfile>
      <anchor>acb6f389a899aec019a05aa8025c25cf6</anchor>
      <arglist>(std::unique_ptr&lt; IInputStream &gt; srcStream)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classph_1_1_filtered_input_stream.html</anchorfile>
      <anchor>a7d956dbf9cd9b8630dd321111b62c3f1</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>seekGet</name>
      <anchorfile>classph_1_1_filtered_input_stream.html</anchorfile>
      <anchor>ac38c08c3f779847668ed3f3fc6a6d64a</anchor>
      <arglist>(std::size_t pos) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::size_t</type>
      <name>tellGet</name>
      <anchorfile>classph_1_1_filtered_input_stream.html</anchorfile>
      <anchor>a337eee4a69b931139f25cd285d8fe29b</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IInputStream *</type>
      <name>getSrcStream</name>
      <anchorfile>classph_1_1_filtered_input_stream.html</anchorfile>
      <anchor>a97e09545f8391cd070ee10efde9d7afc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::halton_detail::FixedPermuter</name>
    <filename>classph_1_1halton__detail_1_1_fixed_permuter.html</filename>
    <member kind="function">
      <type></type>
      <name>FixedPermuter</name>
      <anchorfile>classph_1_1halton__detail_1_1_fixed_permuter.html</anchorfile>
      <anchor>aa83392f6cc4486ed2fa32049534ae15c</anchor>
      <arglist>(const PermutationTable &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>operator()</name>
      <anchorfile>classph_1_1halton__detail_1_1_fixed_permuter.html</anchorfile>
      <anchor>ac6009be94ee82da2eebbe780edd34b55</anchor>
      <arglist>(const uint64, const uint64 digit) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PermutationTable</type>
      <name>makeTable</name>
      <anchorfile>classph_1_1halton__detail_1_1_fixed_permuter.html</anchorfile>
      <anchor>a8b3dd67be16b4ea55465c8c84729cfca</anchor>
      <arglist>(const std::size_t dimIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FixedSizeThreadPool</name>
    <filename>classph_1_1_fixed_size_thread_pool.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>Work</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>ad8ae064343bb81cc83a5dfdefca6a203</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedSizeThreadPool</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>aeb2450fdbb681a75d5e15dcc74a9a17a</anchor>
      <arglist>(std::size_t numWorkers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FixedSizeThreadPool</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>a601c9b6e27cad4048fbc5a1eb684d963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitAllWorks</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>aff3870f1e476b5a0e846d025bff18a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTermination</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>a5e83efc9143bd0331d5d8e6fabf1bb04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numWorkers</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>a16762ab882dc4f7d03ff8be909db04a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queueWork</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>a63f966889b6ebb82c72b20a15e230b11</anchor>
      <arglist>(const Work &amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queueWork</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>adb69c7f506ac91de3e21f44e44091f0b</anchor>
      <arglist>(Work &amp;&amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queueWork</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>a63f966889b6ebb82c72b20a15e230b11</anchor>
      <arglist>(const Work &amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queueWork</name>
      <anchorfile>classph_1_1_fixed_size_thread_pool.html</anchorfile>
      <anchor>adb69c7f506ac91de3e21f44e44091f0b</anchor>
      <arglist>(Work &amp;&amp;work)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FormattedTextInputStream</name>
    <filename>classph_1_1_formatted_text_input_stream.html</filename>
    <base>ph::StdInputStream</base>
    <member kind="function">
      <type></type>
      <name>FormattedTextInputStream</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>ade583d5fa79d16264bd5b11b61e98b47</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormattedTextInputStream</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>ae1b0e98106cc892949b0c93d27484acb</anchor>
      <arglist>(const Path &amp;textFilePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormattedTextInputStream</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>a4bd7ae7623da16c1926cfe640c87ea4b</anchor>
      <arglist>(std::string textString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormattedTextInputStream</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>a533cb592ac7b6d0d11d1f04f263e29e8</anchor>
      <arglist>(FormattedTextInputStream &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>acquireName</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>aff799be15b62e6f8cb27937c29877298</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAll</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>a657a8a95a3598f353a82e333bd7bfb51</anchor>
      <arglist>(std::string *out_allText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAllTightly</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>a7485cee0d5c486bac7252a055fcc2b5c</anchor>
      <arglist>(std::string *out_allText)</arglist>
    </member>
    <member kind="function">
      <type>FormattedTextInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>acd25568fb988e7e71a38808f73ca19e0</anchor>
      <arglist>(FormattedTextInputStream &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormattedTextInputStream</name>
      <anchorfile>classph_1_1_formatted_text_input_stream.html</anchorfile>
      <anchor>a6a24746ae5130326c4c3a98bff2e7c06</anchor>
      <arglist>(std::unique_ptr&lt; std::istream &gt; stream, std::string streamName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FormattedTextOutputStream</name>
    <filename>classph_1_1_formatted_text_output_stream.html</filename>
    <base>ph::StdOutputStream</base>
    <member kind="function">
      <type></type>
      <name>FormattedTextOutputStream</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a6ad0f3f0353aa1acffba0c45acd71c3b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormattedTextOutputStream</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a2c746c5120b8f728fd49f19fb41b2d75</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormattedTextOutputStream</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>acddab4ed292e25d44de0743c81f597fa</anchor>
      <arglist>(std::string initialStrContent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormattedTextOutputStream</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a4ea8dfc9f25127dce2762f995e995e9a</anchor>
      <arglist>(FormattedTextOutputStream &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>acquireName</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>aaa4bb5c195f7a9761cf601e29dbf3fac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeChar</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>aef80cda8436593e710937c176fa2d035</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNewLine</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a16896c5cf486f759c3d96f84c0b2bb52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeString</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a9021f8859fbbadaceece231eae8d3f9c</anchor>
      <arglist>(std::format_string&lt; Args... &gt; strFormat, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getString</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a849c7676c54b3f731aa28dbeeb6f01bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FormattedTextOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a788b32d156ce7695980ebd582f12873e</anchor>
      <arglist>(FormattedTextOutputStream &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeString</name>
      <anchorfile>classph_1_1_formatted_text_output_stream.html</anchorfile>
      <anchor>a9c1709a7e774cbd23f19af85462502f8</anchor>
      <arglist>(std::string_view str) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FrameOperator</name>
    <filename>classph_1_1_frame_operator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FrameOperator</name>
      <anchorfile>classph_1_1_frame_operator.html</anchorfile>
      <anchor>a917613b4fed04af8b101aed69879b83d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operate</name>
      <anchorfile>classph_1_1_frame_operator.html</anchorfile>
      <anchor>a78a31908408b4315a77fce5fff21b86b</anchor>
      <arglist>(const HdrRgbFrame &amp;srcFrame, HdrRgbFrame *out_dstFrame)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FrameProcessingPipeline</name>
    <filename>classph_1_1_frame_processing_pipeline.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>FrameProcessingPipeline</name>
      <anchorfile>classph_1_1_frame_processing_pipeline.html</anchorfile>
      <anchor>afb81b12e74721d52650d5558a50b4dc0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrameProcessingPipeline</name>
      <anchorfile>classph_1_1_frame_processing_pipeline.html</anchorfile>
      <anchor>a9dbf52d625e3664227912d81505f8968</anchor>
      <arglist>(FrameProcessingPipeline &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classph_1_1_frame_processing_pipeline.html</anchorfile>
      <anchor>ab948df152035efded3687b3e7e4c53a7</anchor>
      <arglist>(const HdrRgbFrame &amp;srcFrame, HdrRgbFrame *out_dstFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendOperator</name>
      <anchorfile>classph_1_1_frame_processing_pipeline.html</anchorfile>
      <anchor>a648d0496619a530cd151674bf640d2e2</anchor>
      <arglist>(std::unique_ptr&lt; FrameOperator &gt; op)</arglist>
    </member>
    <member kind="function">
      <type>FrameProcessingPipeline &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_frame_processing_pipeline.html</anchorfile>
      <anchor>a1fe0baca2e673c3fe1b96b03078d30ef</anchor>
      <arglist>(FrameProcessingPipeline &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FrameProcessor</name>
    <filename>classph_1_1_frame_processor.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>PipelineId</name>
      <anchorfile>classph_1_1_frame_processor.html</anchorfile>
      <anchor>a475478ed3026d4ee71f401ba7e55688d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classph_1_1_frame_processor.html</anchorfile>
      <anchor>af959f5183bf3f9530b54211aacd8a38b</anchor>
      <arglist>(PipelineId pipeline, const HdrRgbFrame &amp;srcFrame, HdrRgbFrame *out_dstFrame)</arglist>
    </member>
    <member kind="function">
      <type>PipelineId</type>
      <name>addPipeline</name>
      <anchorfile>classph_1_1_frame_processor.html</anchorfile>
      <anchor>acc60840b800b8c6e78ead2aa5108df60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FrameProcessingPipeline *</type>
      <name>getPipeline</name>
      <anchorfile>classph_1_1_frame_processor.html</anchorfile>
      <anchor>a22c4c431474b39046eea337ca5a2b6c8</anchor>
      <arglist>(PipelineId pipeline)</arglist>
    </member>
    <member kind="function">
      <type>const FrameProcessingPipeline *</type>
      <name>getPipeline</name>
      <anchorfile>classph_1_1_frame_processor.html</anchorfile>
      <anchor>a8daec261c9e1e90dc94eb10ea4319fe9</anchor>
      <arglist>(PipelineId pipeline) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FrameVisualizer</name>
    <filename>classph_1_1_frame_visualizer.html</filename>
    <base>ph::Visualizer</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_frame_visualizer.html</anchorfile>
      <anchor>a0bd6f24b0664be25865019a39a0770f2</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override=0</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; math::TAABB2D&lt; int64 &gt; &gt;</type>
      <name>getCropWindowPx</name>
      <anchorfile>classph_1_1_frame_visualizer.html</anchorfile>
      <anchor>ad38b36159f8c4e266cfd9ffbf2ed8ad8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_frame_visualizer.html</anchorfile>
      <anchor>afe332b95aeb69e165914e3cc13e2e549</anchor>
      <arglist>(TSdlOwnerClass&lt; FrameVisualizer &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FresnelEffect</name>
    <filename>classph_1_1_fresnel_effect.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FresnelEffect</name>
      <anchorfile>classph_1_1_fresnel_effect.html</anchorfile>
      <anchor>ab4cf7c98d650006bd89d9e4cb89abcc2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_fresnel_effect.html</anchorfile>
      <anchor>ad49f2ddcfc3ab2b0602eb5e7da979fe3</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTransmittance</name>
      <anchorfile>classph_1_1_fresnel_effect.html</anchorfile>
      <anchor>a216640225e4629805d3d6a02a7616190</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_transmittance) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FullMaterial</name>
    <filename>classph_1_1_full_material.html</filename>
    <base>ph::Material</base>
    <member kind="function">
      <type></type>
      <name>FullMaterial</name>
      <anchorfile>classph_1_1_full_material.html</anchorfile>
      <anchor>a3b05dadef7340ebc83ae136383a368e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullMaterial</name>
      <anchorfile>classph_1_1_full_material.html</anchorfile>
      <anchor>a9cdd32ec3fa6d953c88d64234b61b09b</anchor>
      <arglist>(const std::shared_ptr&lt; SurfaceMaterial &gt; &amp;surfaceMaterial)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genBehaviors</name>
      <anchorfile>classph_1_1_full_material.html</anchorfile>
      <anchor>a933490aec293135e8afdee47dbeb08ee</anchor>
      <arglist>(const CookingContext &amp;ctx, PrimitiveMetadata &amp;metadata) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_full_material.html</anchorfile>
      <anchor>ad2196ffdb85a10fe2014acc1c708935d</anchor>
      <arglist>(TSdlOwnerClass&lt; FullMaterial &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FullPhoton</name>
    <filename>classph_1_1_full_photon.html</filename>
    <base>ph::TPhoton&lt; FullPhoton &gt;</base>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>impl_get</name>
      <anchorfile>classph_1_1_full_photon.html</anchorfile>
      <anchor>a42465b0aefe191c7605fbbd0631a86e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_set</name>
      <anchorfile>classph_1_1_full_photon.html</anchorfile>
      <anchor>a5c163ba6eff8577904b1aa453fb2f8f7</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>impl_has</name>
      <anchorfile>classph_1_1_full_photon.html</anchorfile>
      <anchor>a204429c1878173ff3d4ed4a6aa9a28e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FullRay</name>
    <filename>classph_1_1_full_ray.html</filename>
    <member kind="function">
      <type></type>
      <name>FullRay</name>
      <anchorfile>classph_1_1_full_ray.html</anchorfile>
      <anchor>a9e221e6f072312ed8340d533d2a701fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullRay</name>
      <anchorfile>classph_1_1_full_ray.html</anchorfile>
      <anchor>a8d25486478ec730d5e4ac3bd376f5d88</anchor>
      <arglist>(const Ray &amp;headRay)</arglist>
    </member>
    <member kind="function">
      <type>const Ray &amp;</type>
      <name>getHeadRay</name>
      <anchorfile>classph_1_1_full_ray.html</anchorfile>
      <anchor>ae7ff377f8d11cafa4c5f98c55ef034a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeadRay</name>
      <anchorfile>classph_1_1_full_ray.html</anchorfile>
      <anchor>a99f2e82006e879f161e6075e8086ae86</anchor>
      <arglist>(const Ray &amp;headRay)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FullRayEnergyEstimator</name>
    <filename>classph_1_1_full_ray_energy_estimator.html</filename>
    <base>ph::IRayEnergyEstimator</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_full_ray_energy_estimator.html</anchorfile>
      <anchor>a534b2b2e2c077a1205913b77cd7d725b</anchor>
      <arglist>(const Integrand &amp;integrand) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_full_ray_energy_estimator.html</anchorfile>
      <anchor>aea7db86f1831dfb19455140878920916</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, EnergyEstimation &amp;out_estimation) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapAttributeToEstimation</name>
      <anchorfile>classph_1_1_full_ray_energy_estimator.html</anchorfile>
      <anchor>a73c22853577e60aa69498c968f93f426</anchor>
      <arglist>(std::size_t attributeId, std::size_t estimationIndex) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEstimationIndex</name>
      <anchorfile>classph_1_1_full_ray_energy_estimator.html</anchorfile>
      <anchor>a54590e6dda7edd84bc0dd5da823dff08</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_full_ray_energy_estimator.html</anchorfile>
      <anchor>aa36e5822c6186531cd7a49e5e883d208</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_estimationIndex</name>
      <anchorfile>classph_1_1_full_ray_energy_estimator.html</anchorfile>
      <anchor>af2c3a40ccaeb9073a4b75c8f6cac66ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::FullViewpoint</name>
    <filename>classph_1_1_full_viewpoint.html</filename>
    <base>ph::TViewpoint&lt; FullViewpoint &gt;</base>
    <member kind="function">
      <type></type>
      <name>FullViewpoint</name>
      <anchorfile>classph_1_1_full_viewpoint.html</anchorfile>
      <anchor>ad6d3123dcb2e1b121b8ae14d22ad6a07</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>impl_get</name>
      <anchorfile>classph_1_1_full_viewpoint.html</anchorfile>
      <anchor>ae811774f42fc0f12e06e1d8bb3c30bc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_set</name>
      <anchorfile>classph_1_1_full_viewpoint.html</anchorfile>
      <anchor>a1f59e29bdd0b1fefe8a82ab711927bef</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>impl_has</name>
      <anchorfile>classph_1_1_full_viewpoint.html</anchorfile>
      <anchor>a5fe2cca932e48236c3b24829520071e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GammaCorrection</name>
    <filename>classph_1_1_gamma_correction.html</filename>
    <base>ph::FrameOperator</base>
    <member kind="function">
      <type></type>
      <name>GammaCorrection</name>
      <anchorfile>classph_1_1_gamma_correction.html</anchorfile>
      <anchor>a3f42905edf75d8f096ef68fbc58e1a8b</anchor>
      <arglist>(real gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operate</name>
      <anchorfile>classph_1_1_gamma_correction.html</anchorfile>
      <anchor>a85d8386178dd138af37316f96213b600</anchor>
      <arglist>(const HdrRgbFrame &amp;srcFrame, HdrRgbFrame *out_dstFrame) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSrgbStandard</name>
      <anchorfile>classph_1_1_gamma_correction.html</anchorfile>
      <anchor>ae87dc7e301c1071de9f0dfc907a14e89</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GCuboid</name>
    <filename>classph_1_1_g_cuboid.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>a9256a375793c3ca1343918e1d2c752d8</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>a25c0b985aacaf5791afbe4235001d027</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTriangulated</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>ab9cec319937e4a6e0cd50cbea91a2f43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>GCuboid &amp;</type>
      <name>setSize</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>ae5207855ddaa4a1a05b76759eec3b27a</anchor>
      <arglist>(real sideLength)</arglist>
    </member>
    <member kind="function">
      <type>GCuboid &amp;</type>
      <name>setSize</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>a0fea6cf993a7eadad2a6810d4d28d5e8</anchor>
      <arglist>(real xLen, real yLen, real zLen)</arglist>
    </member>
    <member kind="function">
      <type>GCuboid &amp;</type>
      <name>setSize</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>a14a01beb91fe34332f84c7abb1a62c73</anchor>
      <arglist>(const math::Vector3R &amp;minVertex, const math::Vector3R &amp;maxVertex)</arglist>
    </member>
    <member kind="function">
      <type>GCuboid &amp;</type>
      <name>setSize</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>aa2caba96499d0651c325d3c7645ca90a</anchor>
      <arglist>(real xLen, real yLen, real zLen, const math::Vector3R &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_cuboid.html</anchorfile>
      <anchor>a31204a0b7e71bd1b9034f33d98c98ebc</anchor>
      <arglist>(TSdlOwnerClass&lt; GCuboid &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GEmpty</name>
    <filename>classph_1_1_g_empty.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type></type>
      <name>GEmpty</name>
      <anchorfile>classph_1_1_g_empty.html</anchorfile>
      <anchor>a091701903efc3ff62cd450bca83b5762</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_empty.html</anchorfile>
      <anchor>a52f9615e6fb58ad3d7b62570baaa399f</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_empty.html</anchorfile>
      <anchor>a75a4feee24bce67f423695c714078aab</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Geometry</name>
    <filename>classph_1_1_geometry.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Geometry &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_geometry.html</anchorfile>
      <anchor>a5848e192a50449d5dac6507a336ea1c5</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_geometry.html</anchorfile>
      <anchor>a0302e8f56818d8562d125170f2b20230</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_geometry.html</anchorfile>
      <anchor>a9ffddd3f23c67a1afc05f65b49766cd3</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTriangulated</name>
      <anchorfile>classph_1_1_geometry.html</anchorfile>
      <anchor>a3ad713e8d8c0d5422f53cb21026c6e9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CookedGeometry *</type>
      <name>createCooked</name>
      <anchorfile>classph_1_1_geometry.html</anchorfile>
      <anchor>a6427f2a39af321e4e16ec17e4fe68d18</anchor>
      <arglist>(const CookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_geometry.html</anchorfile>
      <anchor>affdad74e21b18392d4088f8c5db85c39</anchor>
      <arglist>(TSdlOwnerClass&lt; Geometry &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GeometrySoup</name>
    <filename>classph_1_1_geometry_soup.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type></type>
      <name>GeometrySoup</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>aca9842ede868aeb972301ffe6b2f44e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>a7cd79e8b481b4a4419cf6f89b1fd86f7</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>a1ab78a85a9d72839cf40e237aba9741c</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>a6322ac124b81e3f55c469bd298c43870</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>a917ff986d2213c97cf9ead7668c3ac6e</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTransformed</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>a117048ac4ab451d54855190824b0a465</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;geometry, const math::StaticAffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_geometry_soup.html</anchorfile>
      <anchor>a60b232fe307093d70e978ad11b3d3d45</anchor>
      <arglist>(TSdlOwnerClass&lt; GeometrySoup &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GIndexedTriangleMesh</name>
    <filename>classph_1_1_g_indexed_triangle_mesh.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_indexed_triangle_mesh.html</anchorfile>
      <anchor>a19413c88f7ed7420f3fec5756ec96802</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_indexed_triangle_mesh.html</anchorfile>
      <anchor>afd5cd5f22cbfe9f425853ac08ea5acd4</anchor>
      <arglist>(TSdlOwnerClass&lt; GIndexedTriangleMesh &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GMengerSponge</name>
    <filename>classph_1_1_g_menger_sponge.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type></type>
      <name>GMengerSponge</name>
      <anchorfile>classph_1_1_g_menger_sponge.html</anchorfile>
      <anchor>a8bc9fa8e9afab32cc24378d188111d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GMengerSponge</name>
      <anchorfile>classph_1_1_g_menger_sponge.html</anchorfile>
      <anchor>acbb4b29bb3dc41eea34cb20c27c86cd2</anchor>
      <arglist>(uint32 numIteration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_menger_sponge.html</anchorfile>
      <anchor>a4154bd391d9c09dcacb3edfbbf819617</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_menger_sponge.html</anchorfile>
      <anchor>aa3d95a0531ab73569113a308ee135263</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_menger_sponge.html</anchorfile>
      <anchor>aba9b49562b8ee3bf100bf2103b55a17e</anchor>
      <arglist>(TSdlOwnerClass&lt; GMengerSponge &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GPlyPolygonMesh</name>
    <filename>classph_1_1_g_ply_polygon_mesh.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_ply_polygon_mesh.html</anchorfile>
      <anchor>acfd8b74a5854ed62efd95f67494338a8</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_ply_polygon_mesh.html</anchorfile>
      <anchor>ad4423160f0ddb3d544f6d0fac84b4431</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_g_ply_polygon_mesh.html</anchorfile>
      <anchor>a2914669f5e7bd616f5300610c69b9eb7</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_ply_polygon_mesh.html</anchorfile>
      <anchor>a79d02d6fcd127a4412619b54b53bfb64</anchor>
      <arglist>(TSdlOwnerClass&lt; GPlyPolygonMesh &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GradientImage</name>
    <filename>classph_1_1_gradient_image.html</filename>
    <base>ph::BinaryMixedImage</base>
    <member kind="function">
      <type></type>
      <name>GradientImage</name>
      <anchorfile>classph_1_1_gradient_image.html</anchorfile>
      <anchor>a2d970752920142fd278a8440de4257d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_gradient_image.html</anchorfile>
      <anchor>a342ff91ffe91dac3875703973cd42bd1</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_gradient_image.html</anchorfile>
      <anchor>a25af518e61e450cae151a5ac8901635f</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUvwEndpoints</name>
      <anchorfile>classph_1_1_gradient_image.html</anchorfile>
      <anchor>a78eea45173af552ca80a229549717f36</anchor>
      <arglist>(const math::Vector3R &amp;beginUvw, const math::Vector3R &amp;endUvw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GRectangle</name>
    <filename>classph_1_1_g_rectangle.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>abd4998d53232a42ccc9143e2a4773971</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>add64ba0f5814a4a6ca46b6bb3da03db7</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>a602c555560ff119ff621531a849c7ef7</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const override</arglist>
    </member>
    <member kind="function">
      <type>GRectangle &amp;</type>
      <name>setWidth</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>a53f4e0a89e9f0c7b31348df97cdd60d5</anchor>
      <arglist>(real width)</arglist>
    </member>
    <member kind="function">
      <type>GRectangle &amp;</type>
      <name>setHeight</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>acf05699e041dd42f613a607f3ffbfd28</anchor>
      <arglist>(real height)</arglist>
    </member>
    <member kind="function">
      <type>GRectangle &amp;</type>
      <name>setTexCoordScale</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>a07613bddd1335bf2a3b1077671af2766</anchor>
      <arglist>(const real scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_rectangle.html</anchorfile>
      <anchor>a6582000ac84f38cf95b47ce4c02907ce</anchor>
      <arglist>(TSdlOwnerClass&lt; GRectangle &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GridScheduler</name>
    <filename>classph_1_1_grid_scheduler.html</filename>
    <base>ph::WorkScheduler</base>
    <member kind="enumeration">
      <type></type>
      <name>EOrigin</name>
      <anchorfile>classph_1_1_grid_scheduler.html</anchorfile>
      <anchor>a62143d34f0260721a1d597abb9afd04e</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_grid_scheduler.html" anchor="a62143d34f0260721a1d597abb9afd04ea56052100a4c3a420907d2fc77f1227a8">LOWER_LEFT</enumvalue>
      <enumvalue file="classph_1_1_grid_scheduler.html" anchor="a62143d34f0260721a1d597abb9afd04ea9434fe4878cd007b366fa72d3694f1b4">LOWER_RIGHT</enumvalue>
      <enumvalue file="classph_1_1_grid_scheduler.html" anchor="a62143d34f0260721a1d597abb9afd04eac122adb2ef4ea606a12c5af1b8ca5319">UPPER_LEFT</enumvalue>
      <enumvalue file="classph_1_1_grid_scheduler.html" anchor="a62143d34f0260721a1d597abb9afd04ea24cd25dbc37d130d0a94554e560ead06">UPPER_RIGHT</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>GridScheduler</name>
      <anchorfile>classph_1_1_grid_scheduler.html</anchorfile>
      <anchor>ab63e5b1365dffb17ef50eace2d60d161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridScheduler</name>
      <anchorfile>classph_1_1_grid_scheduler.html</anchorfile>
      <anchor>ad37d7adb06fd064e2c99f491ea3db045</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridScheduler</name>
      <anchorfile>classph_1_1_grid_scheduler.html</anchorfile>
      <anchor>a07f79645645e2160d6133713012fb62f</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;numCells)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridScheduler</name>
      <anchorfile>classph_1_1_grid_scheduler.html</anchorfile>
      <anchor>af597a74a59daa77acfe4617df9c0ae2f</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;numCells, EOrigin origin, math::constant::AxisIndexType prioriAxis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GroupedDiffuseSurfaceEmitter</name>
    <filename>classph_1_1_grouped_diffuse_surface_emitter.html</filename>
    <base>ph::DiffuseSurfaceEmitterBase</base>
    <member kind="function">
      <type></type>
      <name>GroupedDiffuseSurfaceEmitter</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>a9fc3cea5a3d807392c4253a539b902d7</anchor>
      <arglist>(TSpanView&lt; const Primitive * &gt; surfaces, const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;emittedEnergy, EmitterFeatureSet featureSet=defaultFeatureSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>a8972457b747208e7098d2b558a671d8e</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>a1692a189df97ee1f7cf22b101d74da3f</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>ad73235b1e32ddd6b8489a8b2b4d60fcb</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>adf7efb9413b61fbf01f0d887f05f069a</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcRadiantFluxApprox</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>a61b0b4c20fb042f0724f0c33751184a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numSurfaces</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>add287179a8c4db61588385843c1e2ecc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Primitive &amp;</type>
      <name>getSurface</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>a12bc407da84de0f5afd77de443c75fec</anchor>
      <arglist>(std::size_t surfaceIdx) const</arglist>
    </member>
    <member kind="function">
      <type>const TTexture&lt; math::Spectrum &gt; &amp;</type>
      <name>getEmittedEnergy</name>
      <anchorfile>classph_1_1_grouped_diffuse_surface_emitter.html</anchorfile>
      <anchor>a293d4ccf32baccf10ebdf2af51e98343</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GSphere</name>
    <filename>classph_1_1_g_sphere.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_sphere.html</anchorfile>
      <anchor>a248dc5ae15236273aac1c2604c7698b8</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_sphere.html</anchorfile>
      <anchor>adcbfaa09853618e68eab3c672a3bcde4</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_g_sphere.html</anchorfile>
      <anchor>ad84b29cb9969fd1f1ef5d345575d3114</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const override</arglist>
    </member>
    <member kind="function">
      <type>GSphere &amp;</type>
      <name>setRadius</name>
      <anchorfile>classph_1_1_g_sphere.html</anchorfile>
      <anchor>a7606f1163f2bda928504ed065ef8ae69</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_sphere.html</anchorfile>
      <anchor>a96dabff8a0486de2294c11946da56f89</anchor>
      <arglist>(TSdlOwnerClass&lt; GSphere &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GTriangle</name>
    <filename>classph_1_1_g_triangle.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a1ddbba062073afe14d924bddb32a3ac6</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>ad6c04a4f2fd5cc5873431e51de781e69</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a4c542da39357856514a0c063068e9b14</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>ab7e48ac822d772ca06ed462984fb1d0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getVa</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a301ca72649d26aff69f705e6ba55009d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getVb</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>ac7665d28b9fac3694bae50eac9ae2c12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getVc</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>aa4bff0d24748e96f55c1e713728710e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getNa</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>aa35876c32180428099c09c6dc448243a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getNb</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a2f40f209e51db3c9f7a5f82ca3597593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getNc</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>ab3ec763c30241d614a86d232c5da0a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUVWa</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>afd1fc712e1110b20fbb5c97bb060adb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUVWb</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a26b4c39dd3ecd58c33aaf986294f5764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUVWc</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>ab3d154690c54a113285145ed1789f1ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setNa</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>ae55a58cd5438b6629002234c3b84cfd4</anchor>
      <arglist>(const math::Vector3R &amp;nA)</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setNb</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>aebb89a18b67ac564df4943a2c43d8dba</anchor>
      <arglist>(const math::Vector3R &amp;nB)</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setNc</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>aebbf4cbeb412c5235d88eaf39f56e55f</anchor>
      <arglist>(const math::Vector3R &amp;nC)</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setUVWa</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>abe47b5cffdfeaf8e9d31b16f41288fbf</anchor>
      <arglist>(const math::Vector3R &amp;uvwA)</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setUVWb</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a5dd6cf27ba664df08e5dc2e0590dae6f</anchor>
      <arglist>(const math::Vector3R &amp;uvwB)</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setUVWc</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a3c36270190ca3ae298466cca20ddb368</anchor>
      <arglist>(const math::Vector3R &amp;uvwC)</arglist>
    </member>
    <member kind="function">
      <type>GTriangle &amp;</type>
      <name>setVertices</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>a86966d066c00eb1cb329f75d5aa4c2b1</anchor>
      <arglist>(const math::Vector3R &amp;vA, const math::Vector3R &amp;vB, const math::Vector3R &amp;vC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_triangle.html</anchorfile>
      <anchor>adcda7fa5c0b3d8c604dbc8c1ab65a7de</anchor>
      <arglist>(TSdlOwnerClass&lt; GTriangle &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GTriangleMesh</name>
    <filename>classph_1_1_g_triangle_mesh.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type></type>
      <name>GTriangleMesh</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a5939543ca250c2bc755de21b527db16a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTriangleMesh</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a28bfb4ae97d32b7c4de509720e69a176</anchor>
      <arglist>(std::vector&lt; math::Vector3R &gt; positions, std::vector&lt; math::Vector3R &gt; texCoords, std::vector&lt; math::Vector3R &gt; normals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a3abf0036f812febb7a10c9a859d9b845</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a24ff509ccb9697bb66636ec05b6a156a</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genTransformed</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a9ffab49d3a894508d6d1e7681eda8cd2</anchor>
      <arglist>(const math::StaticAffineTransform &amp;transform) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; GTriangle &gt;</type>
      <name>genTriangles</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a46726e544fd7bb171bc0aaf85e5a812a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a54dc6ae49435bf15993c27752524f0eb</anchor>
      <arglist>(const GTriangle &amp;gTriangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_g_triangle_mesh.html</anchorfile>
      <anchor>a896fd7ae590a01cfc1987be7e5bd3da1</anchor>
      <arglist>(TSdlOwnerClass&lt; GTriangleMesh &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::GWave</name>
    <filename>classph_1_1_g_wave.html</filename>
    <base>ph::Geometry</base>
    <member kind="function">
      <type></type>
      <name>GWave</name>
      <anchorfile>classph_1_1_g_wave.html</anchorfile>
      <anchor>aa7f1b9566b33dd8c150d2e3de22877ba</anchor>
      <arglist>(real xLen, real yLen, real zLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_g_wave.html</anchorfile>
      <anchor>aad56ef4a9eab147a9b39b6c7b3765850</anchor>
      <arglist>(CookedGeometry &amp;out_geometry, const CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPrimitive</name>
      <anchorfile>classph_1_1_g_wave.html</anchorfile>
      <anchor>aa337e93dd2efacff48105e5e4129c51a</anchor>
      <arglist>(const PrimitiveBuildingMaterial &amp;data, std::vector&lt; std::unique_ptr&lt; Primitive &gt; &gt; &amp;out_primitives) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HaltonSampleSource</name>
    <filename>classph_1_1_halton_sample_source.html</filename>
    <base>ph::RuntimeSampleSource</base>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_halton_sample_source.html</anchorfile>
      <anchor>a8a346a0828519d2b34a7f42744c69f31</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_halton_sample_source.html</anchorfile>
      <anchor>acfba341912c5410a7fcce98987528028</anchor>
      <arglist>(TSdlOwnerClass&lt; HaltonSampleSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; ph::math::TAABB2D&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01ph_1_1math_1_1_t_a_a_b_b2_d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01ph_1_1math_1_1_t_a_a_b_b2_d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>abf0e6b94e3466d325bd59467533e740c</anchor>
      <arglist>(const ph::math::TAABB2D&lt; T &gt; &amp;aabb) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; ph::math::TVector2&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01ph_1_1math_1_1_t_vector2_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01ph_1_1math_1_1_t_vector2_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a80d5a0a02a5bc48c55c579d959457cf2</anchor>
      <arglist>(const ph::math::TVector2&lt; T &gt; &amp;vec2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HdrOperator</name>
    <filename>classph_1_1_hdr_operator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~HdrOperator</name>
      <anchorfile>classph_1_1_hdr_operator.html</anchorfile>
      <anchor>a44ed46d82b06de1c9d47ab0b084a17e5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HdrRgbFilm</name>
    <filename>classph_1_1_hdr_rgb_film.html</filename>
    <base>ph::TSamplingFilm&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>HdrRgbFilm</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a5ef26a7b48198ed6b6c4b39d6005bfa7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HdrRgbFilm</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a48bd648e20c80f61ab719a8341dc88d2</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const SampleFilter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HdrRgbFilm</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>ac0fe4e014ecaac2c9e8a0d225689792e</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindowPx, const SampleFilter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSample</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a6e689fab1b196d5f1b7b8419893db3c8</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Spectrum &amp;sample) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a6bca3156ec8fd7e22b4a585c742f99d0</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Spectrum &amp;sample) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a8506b4f8262b426c5390cac4c5fa64ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEffectiveWindowPx</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a008cc8ea9e2f38e3a2be337269e96f55</anchor>
      <arglist>(const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeWith</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>af463bb4b3b38cbecf3ad7180b6491024</anchor>
      <arglist>(const HdrRgbFilm &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRgbSample</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>ad62a5ac22b9835c623adfde9808108f5</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3R &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRgbSample</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a9e5299edcaf599dc8c2830e84d2ac9a5</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3D &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRgbPixel</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a1b9cbe363574fb0c554e28d8fcb0c70f</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3R &amp;rgb, float64 weight=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRgbPixel</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a69b1ca3a33bad823dcb590201b56b8d4</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3D &amp;rgb, float64 weight=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRgbSample</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>ad62a5ac22b9835c623adfde9808108f5</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3R &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRgbSample</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a9e5299edcaf599dc8c2830e84d2ac9a5</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3D &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRgbPixel</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a1b9cbe363574fb0c554e28d8fcb0c70f</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3R &amp;rgb, float64 weight=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRgbPixel</name>
      <anchorfile>classph_1_1_hdr_rgb_film.html</anchorfile>
      <anchor>a69b1ca3a33bad823dcb590201b56b8d4</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3D &amp;rgb, float64 weight=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HdrRgbTexture2D</name>
    <filename>classph_1_1_hdr_rgb_texture2_d.html</filename>
    <base>ph::TTexture&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>HdrRgbTexture2D</name>
      <anchorfile>classph_1_1_hdr_rgb_texture2_d.html</anchorfile>
      <anchor>afd6086d076f6f91cbb35ed743689914f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HdrRgbTexture2D</name>
      <anchorfile>classph_1_1_hdr_rgb_texture2_d.html</anchorfile>
      <anchor>aaed7108596b1cfa199d95548f7102e66</anchor>
      <arglist>(std::unique_ptr&lt; TAbstractPixelTex2D&lt; HdrComponent, 3 &gt; &gt; texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_hdr_rgb_texture2_d.html</anchorfile>
      <anchor>aa115a95c6f5b93f4c31e840d6b4a193e</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::Spectrum *out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HenyeyGreenstein</name>
    <filename>classph_1_1_henyey_greenstein.html</filename>
    <base>ph::ScatterFunction</base>
    <member kind="function">
      <type></type>
      <name>HenyeyGreenstein</name>
      <anchorfile>classph_1_1_henyey_greenstein.html</anchorfile>
      <anchor>aa49611b3c11a7a0ca653ae47f7dd3bfb</anchor>
      <arglist>(real g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HenyeyGreenstein</name>
      <anchorfile>classph_1_1_henyey_greenstein.html</anchorfile>
      <anchor>ac9d507b12161653b1242c615d638c5b0</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; real &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HenyeyGreenstein</name>
      <anchorfile>classph_1_1_henyey_greenstein.html</anchorfile>
      <anchor>a7105048b6cdd563d1ac7d69bea29966a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalPhaseFunc</name>
      <anchorfile>classph_1_1_henyey_greenstein.html</anchorfile>
      <anchor>aadf9970540abe91664c72a048b2c4a85</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;I, const math::Vector3R &amp;O, real *out_pf) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HitDetail</name>
    <filename>classph_1_1_hit_detail.html</filename>
    <member kind="function">
      <type></type>
      <name>HitDetail</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a644f23b11276b386d5217dc3412fdef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HitDetail &amp;</type>
      <name>setHitIntrinsics</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>ac65eefb38c426f807896dec82f2fb39c</anchor>
      <arglist>(const Primitive *primitive, const math::Vector3R &amp;uvw, real rayT, uint64 faceID=NO_FACE_ID, FaceTopology faceTopology=FaceTopology(EFaceTopology::General))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBases</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a7d6b13b545866a192fcece1d2df022b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getPos</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>ac769f6237ee49f3bfbfd7c038d546053</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getShadingNormal</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a360bcdc67456930b7bcb54a919121bed</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getGeometryNormal</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>aeb2c56bef7db1ef1d68557405fbd814d</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdPdU</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a2e84eaebe7bcaff3cf698080030c46ae</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdPdV</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a1bd22707e56f6e21dd0c59215a6d5c1c</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdNdU</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a3d054b94d0226ff9900caca526503006</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdNdV</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>acf23e61ff4a927e6f4fd43de85995bb4</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getUVW</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a5569879039b4054b5a7e5e608b8e9107</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Basis3R &amp;</type>
      <name>getGeometryBasis</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>af111fd4020fd2627179c07fcd1fdff4b</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>const math::Basis3R &amp;</type>
      <name>getShadingBasis</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a602780b72af64cb2cec5fd045523d354</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getRayT</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>aa3dede6dce1e8dbff595646e5c89101a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getFaceID</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a3e60d6832e9a92c41e7c9114791ad039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FaceTopology</type>
      <name>getFaceTopology</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>ab7fbef97f2b6f08e09e71d73a96966f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Primitive *</type>
      <name>getPrimitive</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a4227114111e5325f96dfdc83e8a98da3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HitInfo &amp;</type>
      <name>getHitInfo</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>aeb5a6edc287e88399235abb9456f9759</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World) const</arglist>
    </member>
    <member kind="function">
      <type>HitInfo &amp;</type>
      <name>getHitInfo</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>af6e4d677ab0d5d3846484c60d8b252ea</anchor>
      <arglist>(ECoordSys coordSys=ECoordSys::World)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; real, real &gt;</type>
      <name>getDistanceErrorFactors</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a6f96409aecd12f20748727d0860d66c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceErrorFactors</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a61a79e52716bc841b425fc96902b41c0</anchor>
      <arglist>(real meanFactor, real maxFactor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>NO_FACE_ID</name>
      <anchorfile>classph_1_1_hit_detail.html</anchorfile>
      <anchor>a9ac4ac796e8b5fcbe89fa6fee6adb7ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HitInfo</name>
    <filename>classph_1_1_hit_info.html</filename>
    <member kind="function">
      <type></type>
      <name>HitInfo</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a8b74c79d0c2b6f9c22c9f8e2a8d93f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributes</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>afc21b88e4ee25dcae879d22505ee7e20</anchor>
      <arglist>(const math::Vector3R &amp;pos, const math::Vector3R &amp;geometryNormal, const math::Vector3R &amp;shadingNormal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDerivatives</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>aa85b1ef50e4c631b3145ea69f9180f22</anchor>
      <arglist>(const math::Vector3R &amp;dPdU, const math::Vector3R &amp;dPdV, const math::Vector3R &amp;dNdU, const math::Vector3R &amp;dNdV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBases</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a839c58a247e34151b338f602303e16a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getPos</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a6bdf82b65e4addeb01174e744101796d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getShadingNormal</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a1cafa8e78e5cc942884ffc86b3a9215d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getGeometryNormal</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a97454157f2aaa8808af888f182abe8c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdPdU</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>aae6d128062d34dad3b7619b0bb559cd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdPdV</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>ad32ca232270cda9764968657e0f6a662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdNdU</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a403eaf26aba3cf602604b47dbc575a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getdNdV</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>abdd73126028b93290ed7787d8bab6fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Basis3R &amp;</type>
      <name>getGeometryBasis</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a8e58f3592c4e720cd9b3fe7fbbb52ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Basis3R &amp;</type>
      <name>getShadingBasis</name>
      <anchorfile>classph_1_1_hit_info.html</anchorfile>
      <anchor>a61e7127f25576c7b098e8bcbc26ffd91</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::HitProbe</name>
    <filename>classph_1_1_hit_probe.html</filename>
    <member kind="function">
      <type></type>
      <name>HitProbe</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a58196325999d269bcb5eff82cd9b1feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>ad9fced029478af18b44b5fa91c6cd3d4</anchor>
      <arglist>(const Ray &amp;ray, HitDetail *out_detail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcFullHitDetail</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a6f0d930a1230e62b71c8de1989eda579</anchor>
      <arglist>(const Ray &amp;ray, HitDetail *out_detail)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a742e35ef23dc97258d91643f934bcda1</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnDefaultChannel</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>af85a756424121b306209e6607d3c89c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushIntermediateHit</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a7df5934cb78fc0772ec90c55f8cc9696</anchor>
      <arglist>(const Intersectable *hitTarget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBaseHit</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a9465a13a3f4dc40bb55e45c8ffa4cbf6</anchor>
      <arglist>(const Intersectable *hitTarget, real hitRayT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popHit</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a4c7120e462a6cc8e500bc8b2302c2989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceCurrentHitWith</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a8eb31aad8dd058a777c32affe176d03f</anchor>
      <arglist>(const Intersectable *newCurrentHit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceBaseHitRayTWith</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>ad3158adf7c7d16eae01d8e94e3f49864</anchor>
      <arglist>(real hitRayT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannel</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a7b03e889e00edbdcaa81b42097ef6261</anchor>
      <arglist>(uint8 channel)</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getChannel</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a32daa2188765ffbaf5d44e81caf8d592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Intersectable *</type>
      <name>getCurrentHit</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a1f9f623452257ca1b4bb5e64f8b1d1b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getHitRayT</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>af9c96bd20f167c30fe8802524c563a21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushCache</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a4ba00967fa180c7ec1890825a4675b17</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>popCache</name>
      <anchorfile>classph_1_1_hit_probe.html</anchorfile>
      <anchor>a68d5626b6856c97c8c30bea7e9f80b33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IDataStream</name>
    <filename>classph_1_1_i_data_stream.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IDataStream</name>
      <anchorfile>classph_1_1_i_data_stream.html</anchorfile>
      <anchor>aaae26b4cc468668cd571d8e2d8bd16ae</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>acquireName</name>
      <anchorfile>classph_1_1_i_data_stream.html</anchorfile>
      <anchor>a22c33c2e5d790bce6bf3453bf0240218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_i_data_stream.html</anchorfile>
      <anchor>a3e8a66aab3f2514406a3d10bcca81274</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IdealAbsorber</name>
    <filename>classph_1_1_ideal_absorber.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>IdealAbsorber</name>
      <anchorfile>classph_1_1_ideal_absorber.html</anchorfile>
      <anchor>a75576787995d85de3cb8f69a62c8e439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_ideal_absorber.html</anchorfile>
      <anchor>ad217f4b32d32a08ed3c035ccf15bebd5</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IdealDielectric</name>
    <filename>classph_1_1_ideal_dielectric.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>IdealDielectric</name>
      <anchorfile>classph_1_1_ideal_dielectric.html</anchorfile>
      <anchor>a75ef5d49b51c52826a1ac73c90d19636</anchor>
      <arglist>(std::shared_ptr&lt; DielectricFresnel &gt; fresnel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdealDielectric</name>
      <anchorfile>classph_1_1_ideal_dielectric.html</anchorfile>
      <anchor>a93881f0795061698fb4d63927cf6936c</anchor>
      <arglist>(std::shared_ptr&lt; DielectricFresnel &gt; fresnel, std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; reflectionScale, std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; transmissionScale)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_ideal_dielectric.html</anchorfile>
      <anchor>a7cbbc151ed6f15edbe3f866a61dbb1a0</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IdealReflector</name>
    <filename>classph_1_1_ideal_reflector.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>IdealReflector</name>
      <anchorfile>classph_1_1_ideal_reflector.html</anchorfile>
      <anchor>ab402c4f56331e026f6845bca6c1947ce</anchor>
      <arglist>(std::shared_ptr&lt; FresnelEffect &gt; fresnel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdealReflector</name>
      <anchorfile>classph_1_1_ideal_reflector.html</anchorfile>
      <anchor>a57bc13b102fd1ef4abce4d9c14ecdae7</anchor>
      <arglist>(std::shared_ptr&lt; FresnelEffect &gt; fresnel, std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; reflectionScale)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_ideal_reflector.html</anchorfile>
      <anchor>adfffcda2a1ecb8340bcf9784bc380294</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IdealSubstance</name>
    <filename>classph_1_1_ideal_substance.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type></type>
      <name>IdealSubstance</name>
      <anchorfile>classph_1_1_ideal_substance.html</anchorfile>
      <anchor>a0f5e52af3388b92bbfb7b7f547e4b2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_ideal_substance.html</anchorfile>
      <anchor>aacfb48afac3b9e886203455be355e177</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubstance</name>
      <anchorfile>classph_1_1_ideal_substance.html</anchorfile>
      <anchor>aadd6c8eece8c712bb51266c1821a49bb</anchor>
      <arglist>(EIdealSubstance substance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_ideal_substance.html</anchorfile>
      <anchor>a0bb0476e26a2002defbce6f0acfcb92d</anchor>
      <arglist>(TSdlOwnerClass&lt; IdealSubstance &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IdealTransmitter</name>
    <filename>classph_1_1_ideal_transmitter.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>IdealTransmitter</name>
      <anchorfile>classph_1_1_ideal_transmitter.html</anchorfile>
      <anchor>a9e5a926a9457306a8258cb25b87c5cab</anchor>
      <arglist>(std::shared_ptr&lt; DielectricFresnel &gt; fresnel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdealTransmitter</name>
      <anchorfile>classph_1_1_ideal_transmitter.html</anchorfile>
      <anchor>a133c98da1db95dcb8b8ec14c5d360d3b</anchor>
      <arglist>(std::shared_ptr&lt; DielectricFresnel &gt; fresnel, std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; transmissionScale)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_ideal_transmitter.html</anchorfile>
      <anchor>a92963aec99033cbdf4ffbc9bf1196ada</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IesAttenuatedSource</name>
    <filename>classph_1_1_ies_attenuated_source.html</filename>
    <base>ph::LightSource</base>
    <member kind="function">
      <type></type>
      <name>IesAttenuatedSource</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>a92eb9a27c0a7404b83d8047deef76c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IesAttenuatedSource</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>ad0f9fe8b108ce521d3738ffc293242cd</anchor>
      <arglist>(const std::shared_ptr&lt; LightSource &gt; &amp;source, const Path &amp;iesFile)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Emitter &gt;</type>
      <name>genEmitter</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>afb99378d4fee7bfd93cfafad0831913e</anchor>
      <arglist>(CookingContext &amp;ctx, EmitterBuildingMaterial &amp;&amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genGeometry</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>ae7cf837d3b6d4101395d165f22c083c1</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Material &gt;</type>
      <name>genMaterial</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>a6ff4f53361959c3a7c800c070e9a4605</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>a177c4afef25a8aed15934def7e2a31e5</anchor>
      <arglist>(const std::shared_ptr&lt; LightSource &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIesFile</name>
      <anchorfile>classph_1_1_ies_attenuated_source.html</anchorfile>
      <anchor>a349e78a3bf9fe1a6e4a2b5d0aa98df59</anchor>
      <arglist>(const Path &amp;iesFile)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IesData</name>
    <filename>classph_1_1_ies_data.html</filename>
    <member kind="function">
      <type></type>
      <name>IesData</name>
      <anchorfile>classph_1_1_ies_data.html</anchorfile>
      <anchor>a36f18a61c108cc4f3da2f936c03bfeee</anchor>
      <arglist>(const Path &amp;iesFilePath)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>sampleAttenuationFactor</name>
      <anchorfile>classph_1_1_ies_data.html</anchorfile>
      <anchor>a8b65a3d3b1109a44bacd1abd5a22d44f</anchor>
      <arglist>(real theta, real phi) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numAttenuationFactorThetaSamples</name>
      <anchorfile>classph_1_1_ies_data.html</anchorfile>
      <anchor>a812ea7f266a68424401db9cc873b9201</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numAttenuationFactorPhiSamples</name>
      <anchorfile>classph_1_1_ies_data.html</anchorfile>
      <anchor>a8e476efa1613cf4bad31ee0359d4f466</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IesFile</name>
    <filename>classph_1_1_ies_file.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EIesFileType</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a90f6227147b3673129122672f0d586b5</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_ies_file.html" anchor="a90f6227147b3673129122672f0d586b5a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="classph_1_1_ies_file.html" anchor="a90f6227147b3673129122672f0d586b5af29bf828c44fdb68f115739c25acc383">LM_63_1986</enumvalue>
      <enumvalue file="classph_1_1_ies_file.html" anchor="a90f6227147b3673129122672f0d586b5a7d0a68ead8c17ccbf0e9513488ec2819">LM_63_1991</enumvalue>
      <enumvalue file="classph_1_1_ies_file.html" anchor="a90f6227147b3673129122672f0d586b5ae4ea047d1131fd1471abe632dab881a9">LM_63_1995</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPhotometricWebType</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>aad491b64ff23f630764f05db028a2f67</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_ies_file.html" anchor="aad491b64ff23f630764f05db028a2f67a7fc56270e7a70fa81a5935b72eacbe29">A</enumvalue>
      <enumvalue file="classph_1_1_ies_file.html" anchor="aad491b64ff23f630764f05db028a2f67a9d5ed678fe57bcca610140957afab571">B</enumvalue>
      <enumvalue file="classph_1_1_ies_file.html" anchor="aad491b64ff23f630764f05db028a2f67a0d61f8370cad1d412f80b84d143e1257">C</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>IesFile</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a2be5b96ba70fc9eaad09b349ecfc816b</anchor>
      <arglist>(const Path &amp;iesFilePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>ae09e4bad3f50fae0dbff6d224081ef50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFilename</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a5099f088902831ab421c2b2106b3d9cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIesFileType</type>
      <name>getIesFileType</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a52972de3dc8d684073a885b3ef08987b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTestInfo</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a537cea65da9d73a78bdb736d1f301232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLuminaireManufacturer</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a9ff00b999a4f5fc5637f28a664ed2e12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLuminaireCatalogNumber</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a7cc3dc4df28a9a89d47adca05bcce553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLuminaireDescription</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a00abc4f7d214b4959727a53387c3927e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLampCatalogNumber</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a47e6084ee149abda564f2044a3ddecaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLampDescription</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a6ac9b5fc2d5aa7ca063ad73f2fc8f7ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUncategorizedInfo</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>ad6482ac5d252f78f41316253ff93a019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumLamps</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>aec2aa7c26b8a0223705ef6163543e44e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getLumensPerLamp</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>ad62db14a2ee068b59cb3cca11e2d6666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getCandelaMultiplier</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>ab5c1bc5dc91d58f545b5df7b2ff5029e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumVerticalAngles</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a0e205351104a1de2ebb72d68e92ee60c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumHorizontalAngles</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>af91d31e620384cb97505a929f28683fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EPhotometricWebType</type>
      <name>getPhotometricWebType</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a0f02ab6bf9f1297d2297949f8116b63f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; real &gt;</type>
      <name>getVerticalAngles</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>a56be3ea3acaa5e84883b683f8188b309</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; real &gt;</type>
      <name>getHorizontalAngles</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>ac88a76a1b077ce726999a3e9f61161e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; real &gt; &gt;</type>
      <name>getCandelaValues</name>
      <anchorfile>classph_1_1_ies_file.html</anchorfile>
      <anchor>aa3073fbdaca8d3aeaee3b76831531bcf</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IInputStream</name>
    <filename>classph_1_1_i_input_stream.html</filename>
    <base>ph::IDataStream</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>a52d50a00cce8bf8db08b0609e6218382</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readString</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>ad8a53daafc7dcabdc7da7989f1fc429d</anchor>
      <arglist>(std::string *out_string, char delimiter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seekGet</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>a4bc65760be9331abdbbd97a8e3539491</anchor>
      <arglist>(std::size_t pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::optional&lt; std::size_t &gt;</type>
      <name>tellGet</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>a05a872bb07dbe846a0c680e99fd3793d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>ac3c06f5cef30fa9bc93601420076db10</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>readSome</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>ae2443ee3348bfd6dc361e1eeed893a32</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLine</name>
      <anchorfile>classph_1_1_i_input_stream.html</anchorfile>
      <anchor>a4273ab96ff0f4cbcd0f9863c1fee5a11</anchor>
      <arglist>(std::string *out_string)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Image</name>
    <filename>classph_1_1_image.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Image &gt;</base>
    <member kind="typedef">
      <type>math::TArithmeticArray&lt; float64, PH_NUMERIC_IMAGE_MAX_ELEMENTS &gt;</type>
      <name>ArrayType</name>
      <anchorfile>classph_1_1_image.html</anchorfile>
      <anchor>a6301d13e2b4686a89e2dc9d0738f961d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_image.html</anchorfile>
      <anchor>a3ce08c197d92191e005a56a594599cb9</anchor>
      <arglist>(const CookingContext &amp;ctx)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_image.html</anchorfile>
      <anchor>a6ab9af18ac1298c944f93eb1f80a44d9</anchor>
      <arglist>(const CookingContext &amp;ctx)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_image.html</anchorfile>
      <anchor>aa781cf2ad906562a0492b8fc30f7701b</anchor>
      <arglist>(TSdlOwnerClass&lt; Image &gt;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>ARRAY_SIZE</name>
      <anchorfile>classph_1_1_image.html</anchorfile>
      <anchor>a6b7f6be7f4c886898a27a269c1acb464</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IMoveOnly</name>
    <filename>classph_1_1_i_move_only.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>IMoveOnly</name>
      <anchorfile>classph_1_1_i_move_only.html</anchorfile>
      <anchor>a8e8ec3d85ac4169a46fcaf87e88aa03e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~IMoveOnly</name>
      <anchorfile>classph_1_1_i_move_only.html</anchorfile>
      <anchor>a814945353386bf537afaf140fe077109</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IMoveOnly</name>
      <anchorfile>classph_1_1_i_move_only.html</anchorfile>
      <anchor>a8f499184824ad06f247a5dcfd7b318aa</anchor>
      <arglist>(IMoveOnly &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMoveOnly &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_move_only.html</anchorfile>
      <anchor>af0e4416e183fb57b09eb54b2f4ef33d7</anchor>
      <arglist>(IMoveOnly &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IMoveOnly</name>
      <anchorfile>classph_1_1_i_move_only.html</anchorfile>
      <anchor>a03205c8ba4d66ccb7cd0887c4090fceb</anchor>
      <arglist>(const IMoveOnly &amp;other)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMoveOnly &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_move_only.html</anchorfile>
      <anchor>a65a1916fc61814db51a09ad128b8c8cc</anchor>
      <arglist>(const IMoveOnly &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::IndexedKdtreeParams</name>
    <filename>classph_1_1math_1_1_indexed_kdtree_params.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexedKdtreeParams</name>
      <anchorfile>classph_1_1math_1_1_indexed_kdtree_params.html</anchorfile>
      <anchor>adb45f880105b5910ad859d056dbb353d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxNodeItems</name>
      <anchorfile>classph_1_1math_1_1_indexed_kdtree_params.html</anchorfile>
      <anchor>aea54f340ed3af9fd5259ddd51b3b4bcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTraversalCost</name>
      <anchorfile>classph_1_1math_1_1_indexed_kdtree_params.html</anchorfile>
      <anchor>a8a1344aab05df25505d32a9cbc0cd0c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInteractCost</name>
      <anchorfile>classph_1_1math_1_1_indexed_kdtree_params.html</anchorfile>
      <anchor>ab7cb35062fa9781a88b59ead1eb8f7f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getEmptyBonus</name>
      <anchorfile>classph_1_1math_1_1_indexed_kdtree_params.html</anchorfile>
      <anchor>a7a6816bcf0501a746c668d84fad7fdd3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IndexedTriangle</name>
    <filename>classph_1_1_indexed_triangle.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexedTriangle</name>
      <anchorfile>classph_1_1_indexed_triangle.html</anchorfile>
      <anchor>adea56706583abde62643951807b1c050</anchor>
      <arglist>(const std::size_t iA, const std::size_t iB, const std::size_t iC)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>iA</name>
      <anchorfile>classph_1_1_indexed_triangle.html</anchorfile>
      <anchor>a32ba56c3ac43d3b480ed40d9490668df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>iB</name>
      <anchorfile>classph_1_1_indexed_triangle.html</anchorfile>
      <anchor>aa065e4eac2ec67376806705b4c059e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>iC</name>
      <anchorfile>classph_1_1_indexed_triangle.html</anchorfile>
      <anchor>a9637621a46a9805d61ae7780cd3aed94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IndexedTriMesh</name>
    <filename>classph_1_1_indexed_tri_mesh.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexedTriMesh</name>
      <anchorfile>classph_1_1_indexed_tri_mesh.html</anchorfile>
      <anchor>a9527be0b0e3d7214327c2ce1ba079d3f</anchor>
      <arglist>(std::size_t numFaces)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexedTriMesh</name>
      <anchorfile>classph_1_1_indexed_tri_mesh.html</anchorfile>
      <anchor>a23375d7e98473da01b215f6d6f7a412d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TriFace</type>
      <name>getFace</name>
      <anchorfile>classph_1_1_indexed_tri_mesh.html</anchorfile>
      <anchor>a9c6b524e574f078d06a61be2fea18504</anchor>
      <arglist>(std::size_t index) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::array&lt; math::Vector3R, 3 &gt;</type>
      <name>getVertices</name>
      <anchorfile>classph_1_1_indexed_tri_mesh.html</anchorfile>
      <anchor>a9114f8422e43cb0a57dcdd094c5c33fa</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFaces</name>
      <anchorfile>classph_1_1_indexed_tri_mesh.html</anchorfile>
      <anchor>a2240adeb91a06118b9db8da7419f5cbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numFaces</name>
      <anchorfile>classph_1_1_indexed_tri_mesh.html</anchorfile>
      <anchor>a37c21fe89d98d6f0f0e8a1f66049c6e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IndexedUIntBuffer</name>
    <filename>classph_1_1_indexed_u_int_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexedUIntBuffer</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a43ac68a640b6331b2fc1dab110936514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareUIntFormat</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a04f91c4016fe4c6c0829d8f7de5a1f81</anchor>
      <arglist>(std::size_t numBitsPerUInt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareUIntFormatByMaxValue</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a98a869b41ecc4bbd48559af331ec588a</anchor>
      <arglist>(uint64 maxValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareUIntFormat</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a1395241b853fa709ec4e0a9b080a9f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a75bbe7677800f1dde49c00f43701455a</anchor>
      <arglist>(std::size_t numUInts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUInt</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>af3a5a8a0d5b72d4aa85cf04814acf32f</anchor>
      <arglist>(std::size_t index, IntegerType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUInts</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>ac42c57a15bb2f281f1a9886b29416899</anchor>
      <arglist>(const ValueType *values, std::size_t numValues, std::size_t dstBeginValueIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUInts</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a615f1f3ab5403bd733fa45a3ae809aa3</anchor>
      <arglist>(const std::byte *srcBytes, std::size_t numBytes, std::size_t dstOffset=0)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getUInt</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a0b70f6fcbeaddfdb5cff6befe7733a9c</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numUInts</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a12f2f72009140fa7ceac4e76d0f94571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>memoryUsage</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a94ef8b8f4fc398ad2e68495891ed77c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllocated</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>acd3f265f6453814a58087d12a37f22df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getMaxAllowedValue</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>ad9911b2c5e8022c1207cd7d52f3f79d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>af1a4c220a550c453a6ad70f0301dc073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a6504a71c9f48dcb001fa465cbdc86906</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>af1a4c220a550c453a6ad70f0301dc073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_u_int_buffer.html</anchorfile>
      <anchor>a6504a71c9f48dcb001fa465cbdc86906</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IndexedVertexBuffer</name>
    <filename>classph_1_1_indexed_vertex_buffer.html</filename>
    <class kind="struct">ph::IndexedVertexBuffer::AttributeDeclaration</class>
    <member kind="function">
      <type></type>
      <name>IndexedVertexBuffer</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a580d170cee39e8d8abf640edea7e24ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a3465071a250b5275b65271411d217ec8</anchor>
      <arglist>(EVertexAttribute attribute, EVertexElement element, std::size_t numElements, bool shouldNormalize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a4d264a80e46788969dd9d0481611f766</anchor>
      <arglist>(EVertexAttribute attribute, EVertexElement element, std::size_t numElements, std::size_t strideOffset, std::size_t strideSize, bool shouldNormalize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a7862426dc57ecbd0e5e7361288b05560</anchor>
      <arglist>(std::size_t numVertices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a9115b83afdd1a66e29c11a326bd3f371</anchor>
      <arglist>(EVertexAttribute attribute, std::size_t index, const math::Vector3R &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a69ba1315321ae61e7dda1879ae03afc2</anchor>
      <arglist>(EVertexAttribute attribute, std::size_t index, const math::Vector2R &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a9d5fd4bfc26376b6ccf72b8bb1f2131d</anchor>
      <arglist>(EVertexAttribute attribute, std::size_t index, real value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertices</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>ab3c5d91ab10df121f391e4180241d49d</anchor>
      <arglist>(const std::byte *srcBytes, std::size_t numBytes, std::size_t dstOffset=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a920b5060f2848bac813b7507b76f1752</anchor>
      <arglist>(EVertexAttribute attribute) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getAttribute</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a90c13951798fa86bee20f6dd1561e98c</anchor>
      <arglist>(EVertexAttribute attribute, std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>memoryUsage</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a2da1f9735d039056319ee1a2e3377c9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllocated</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>ae7048495df7dae67822f125284cc1e7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numVertices</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>ab96df4faf6ef7e04b8bc0f1d582e6ff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AttributeDeclaration</type>
      <name>getAttributeDeclaration</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a5287fc69a8d9cffc93b65df14424915c</anchor>
      <arglist>(EVertexAttribute attribute) const</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a382abb1c5574c5f7441b8a3a31351c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a535d06ad6be499c321be840b6f9ada60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a382abb1c5574c5f7441b8a3a31351c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>getData</name>
      <anchorfile>classph_1_1_indexed_vertex_buffer.html</anchorfile>
      <anchor>a535d06ad6be499c321be840b6f9ada60</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::InitiallyPausedThread</name>
    <filename>classph_1_1_initially_paused_thread.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>InitiallyPausedThread</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>ab3bfd8676ead9b59a5ae0fec6ec1a7c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InitiallyPausedThread</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>ace84c5185e9b331f6af443749b032480</anchor>
      <arglist>(InitiallyPausedThread &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InitiallyPausedThread</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>a77d8f5f18a06fe43174f03f34cd46a31</anchor>
      <arglist>(Func &amp;&amp;func, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InitiallyPausedThread</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>a8efeae7b622bc07689341107d4528550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>aacc8da38d38fa892417ae50197b0995e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>aa5ad510aeaca8abbf7107a28a4fdf1b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStarted</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>a535e0583a5551e1af84c06c29f696eb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJoined</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>a5db222ca2cf1736517c5475b63ded8ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::thread::id</type>
      <name>getId</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>a0f0e0c4357e3d655ca7a8df16a380d9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InitiallyPausedThread &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_initially_paused_thread.html</anchorfile>
      <anchor>a9239a4c2236b290891ca00d7566635bd</anchor>
      <arglist>(InitiallyPausedThread &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::INoCopyAndMove</name>
    <filename>classph_1_1_i_no_copy_and_move.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>INoCopyAndMove</name>
      <anchorfile>classph_1_1_i_no_copy_and_move.html</anchorfile>
      <anchor>ade8fc3036b4b3031c3e7134c72995d6d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~INoCopyAndMove</name>
      <anchorfile>classph_1_1_i_no_copy_and_move.html</anchorfile>
      <anchor>aa1b08146e0df3b7ba8120f560d974ebe</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>INoCopyAndMove</name>
      <anchorfile>classph_1_1_i_no_copy_and_move.html</anchorfile>
      <anchor>a906dc093c1371119d6cd5ef12359bdd4</anchor>
      <arglist>(INoCopyAndMove &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INoCopyAndMove &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_no_copy_and_move.html</anchorfile>
      <anchor>a47ee8fa311f6901ba7ef8c8fe744e392</anchor>
      <arglist>(INoCopyAndMove &amp;&amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>INoCopyAndMove</name>
      <anchorfile>classph_1_1_i_no_copy_and_move.html</anchorfile>
      <anchor>a3a976cbc6c9ab56eeefcbc099e208c91</anchor>
      <arglist>(const INoCopyAndMove &amp;other)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INoCopyAndMove &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_no_copy_and_move.html</anchorfile>
      <anchor>a7a55def3edbbfa7602e33c10561a6bca</anchor>
      <arglist>(const INoCopyAndMove &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VolumeDistanceSample::Input</name>
    <filename>classph_1_1_volume_distance_sample_1_1_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_volume_distance_sample_1_1_input.html</anchorfile>
      <anchor>af4ec8837ec1fc4efd6cd2381aedf7df4</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;L, const real maxDist)</arglist>
    </member>
    <member kind="variable">
      <type>SurfaceHit</type>
      <name>X</name>
      <anchorfile>classph_1_1_volume_distance_sample_1_1_input.html</anchorfile>
      <anchor>a6b6ef759157d9aa529beef4781c0def1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3R</type>
      <name>L</name>
      <anchorfile>classph_1_1_volume_distance_sample_1_1_input.html</anchorfile>
      <anchor>aefa8c376145efd7bebf20a3eca421d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>maxDist</name>
      <anchorfile>classph_1_1_volume_distance_sample_1_1_input.html</anchorfile>
      <anchor>a34ab4f4d0b9183ef3b78803dc4c0e78a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Integrand</name>
    <filename>classph_1_1_integrand.html</filename>
    <member kind="function">
      <type></type>
      <name>Integrand</name>
      <anchorfile>classph_1_1_integrand.html</anchorfile>
      <anchor>ae4b2834219d058a5ba1054cc8a977a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integrand</name>
      <anchorfile>classph_1_1_integrand.html</anchorfile>
      <anchor>a295457cc3ca20babea43155793284cea</anchor>
      <arglist>(const Scene *scene, const Receiver *receiver)</arglist>
    </member>
    <member kind="function">
      <type>const Scene &amp;</type>
      <name>getScene</name>
      <anchorfile>classph_1_1_integrand.html</anchorfile>
      <anchor>ac29d125262fc676382c58f4ee490cbb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Receiver &amp;</type>
      <name>getReceiver</name>
      <anchorfile>classph_1_1_integrand.html</anchorfile>
      <anchor>acdabfd40eb3e875346b948ecfeaacdc6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::InterfaceStatistics</name>
    <filename>classph_1_1_interface_statistics.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceStatistics</name>
      <anchorfile>classph_1_1_interface_statistics.html</anchorfile>
      <anchor>a4d469c2d7232f8d53fd0631055f1a96c</anchor>
      <arglist>(real cosWi, const LbLayer &amp;layer1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLayer</name>
      <anchorfile>classph_1_1_interface_statistics.html</anchorfile>
      <anchor>af155ed8e23af2361dc9e3fd57dcd1f24</anchor>
      <arglist>(const LbLayer &amp;layer2)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getEquivalentAlpha</name>
      <anchorfile>classph_1_1_interface_statistics.html</anchorfile>
      <anchor>a7bbae110c30e069e3334c41770b28beb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getEnergyScale</name>
      <anchorfile>classph_1_1_interface_statistics.html</anchorfile>
      <anchor>a32c1be9bb7635185f70790cbf6fd07d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LbLayer</type>
      <name>getLastLayer</name>
      <anchorfile>classph_1_1_interface_statistics.html</anchorfile>
      <anchor>a9db28741c759f30ad6890ed4ff0a45ce</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Intersectable</name>
    <filename>classph_1_1_intersectable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Intersectable</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>a92ed92752294dbb4940ab3262fe971c7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>ae445743ad48751b06f89a08cd8910b3e</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>a4d9858adbc05eabea428bca36a11cfad</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>ad1df6e972a7cb71e2c0a99f28a80c810</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>a704f250ee94d802e853748d97dd6722f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>ab2704ced51a4d65af7030b1a45a4fdda</anchor>
      <arglist>(const Ray &amp;ray) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_intersectable.html</anchorfile>
      <anchor>a86fce4c0b0c1f99a50380ce41ad2875a</anchor>
      <arglist>(const math::AABB3D &amp;volume) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Intersector</name>
    <filename>classph_1_1_intersector.html</filename>
    <base>ph::Intersectable</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classph_1_1_intersector.html</anchorfile>
      <anchor>a0eb7e326596f3a43f66c35e8c44a946a</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_intersector.html</anchorfile>
      <anchor>a78facadac843c2df2891c7ac159abc50</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_intersector.html</anchorfile>
      <anchor>a8760833075046d96a131f32ed9d586c7</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_intersector.html</anchorfile>
      <anchor>ae32d1fce4edbce37b1cf8cbab60a81e9</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_intersector.html</anchorfile>
      <anchor>a2491abaf0c5c0766137e460098804f20</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IOutputStream</name>
    <filename>classph_1_1_i_output_stream.html</filename>
    <base>ph::IDataStream</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>a5412b00baebfe071098e6b905f784cf0</anchor>
      <arglist>(std::size_t numBytes, const std::byte *bytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>affe8f7b28743d855cf9e6f9dc9afcd08</anchor>
      <arglist>(std::string_view str)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seekPut</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>ac36e0474b80ee2b058e1f09abf2982f4</anchor>
      <arglist>(std::size_t pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::optional&lt; std::size_t &gt;</type>
      <name>tellPut</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>ab7c34c7b94afa571a57cd3d46086f737</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>a1312775d157ff9532f7440330981566a</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>writeSome</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>a010d4beee4581b0f46f62a92d2d569a8</anchor>
      <arglist>(std::size_t numBytes, const std::byte *bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLine</name>
      <anchorfile>classph_1_1_i_output_stream.html</anchorfile>
      <anchor>a6a9ac9fa939ae68a87428058285f81bf</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IRayEnergyEstimator</name>
    <filename>classph_1_1_i_ray_energy_estimator.html</filename>
    <base>ph::TIRayEstimator&lt; math::Spectrum &gt;</base>
    <member kind="typedef">
      <type>TEstimationArray&lt; math::Spectrum &gt;</type>
      <name>EnergyEstimation</name>
      <anchorfile>classph_1_1_i_ray_energy_estimator.html</anchorfile>
      <anchor>afdc05f8c2b218a61e11a373f367555c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_i_ray_energy_estimator.html</anchorfile>
      <anchor>a67068e724fc9eecd03a30ad51fd6faec</anchor>
      <arglist>(const Integrand &amp;integrand) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_i_ray_energy_estimator.html</anchorfile>
      <anchor>aaa032624f5af47237a9e82cb6b070298</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, EnergyEstimation &amp;out_estimation) const override=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_i_ray_energy_estimator.html</anchorfile>
      <anchor>ae3d21ed22dda523ecf70fe3542a5fdf1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IReceivedRayProcessor</name>
    <filename>classph_1_1_i_received_ray_processor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IReceivedRayProcessor</name>
      <anchorfile>classph_1_1_i_received_ray_processor.html</anchorfile>
      <anchor>ad2fe6ff26ce10d58b43fcf4c1aacb68e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classph_1_1_i_received_ray_processor.html</anchorfile>
      <anchor>a4f7e3bf4356fcf2f041e27070fde78dd</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const Ray &amp;sensedRay, const math::Spectrum &amp;quantityWeight, SampleFlow &amp;sampleFlow)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onBatchStart</name>
      <anchorfile>classph_1_1_i_received_ray_processor.html</anchorfile>
      <anchor>a4fbb9aaba83d6caf19218baf5268d0cc</anchor>
      <arglist>(uint64 batchNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onBatchFinish</name>
      <anchorfile>classph_1_1_i_received_ray_processor.html</anchorfile>
      <anchor>ac2bf574256e074688d0963511dfcaf13</anchor>
      <arglist>(uint64 batchNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IResourceIdentifierResolver</name>
    <filename>classph_1_1_i_resource_identifier_resolver.html</filename>
    <member kind="function">
      <type></type>
      <name>IResourceIdentifierResolver</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>aa423962c74d7fdb799b7eb893a9b2aff</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IResourceIdentifierResolver</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>a1a5c4405a5950141f61283ed3f4ef58a</anchor>
      <arglist>(const IResourceIdentifierResolver &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IResourceIdentifierResolver</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>a305adac4f415b4b68a88eb3df5fa87a1</anchor>
      <arglist>(IResourceIdentifierResolver &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IResourceIdentifierResolver</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>ac077effcc321bb1fc72b713887042af3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>acb33a1c7f0debc5bab0003c54cd1dfa8</anchor>
      <arglist>(ResourceIdentifier &amp;identifier)=0</arglist>
    </member>
    <member kind="function">
      <type>IResourceIdentifierResolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>ac81bd64baf06da1df43cde9b5c0a8b71</anchor>
      <arglist>(const IResourceIdentifierResolver &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>IResourceIdentifierResolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>a07f06f4f2fa0ea0d61dbc7e80c6e6be1</anchor>
      <arglist>(IResourceIdentifierResolver &amp;&amp;rhs) noexcept=default</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setResolved</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>af2d311414c3b3e83d5e8f6a745dd6e57</anchor>
      <arglist>(ResourceIdentifier &amp;identifier, Path resolved)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setResolved</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>a60449a3630647f6fb23b5f407c412493</anchor>
      <arglist>(ResourceIdentifier &amp;identifier, std::string resolved)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>clearResolved</name>
      <anchorfile>classph_1_1_i_resource_identifier_resolver.html</anchorfile>
      <anchor>a8513550bb84340929da408c1c31ee6e3</anchor>
      <arglist>(ResourceIdentifier &amp;identifier)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::IsBuildable</name>
    <filename>structph_1_1_is_buildable.html</filename>
    <templarg>typename Built</templarg>
    <templarg>typename From</templarg>
    <templarg>typename</templarg>
  </compound>
  <compound kind="struct">
    <name>ph::IsBuildable&lt; Built, From, std::enable_if_t&lt; std::is_convertible_v&lt; From, Built &gt;||std::is_constructible_v&lt; Built, From &gt; &gt; &gt;</name>
    <filename>structph_1_1_is_buildable_3_01_built_00_01_from_00_01std_1_1enable__if__t_3_01std_1_1is__convertda9fd9890447f483d9e1632d4e0943fa.html</filename>
    <templarg>typename Built</templarg>
    <templarg>typename From</templarg>
  </compound>
  <compound kind="class">
    <name>ph::ISdlDataPacketGroup</name>
    <filename>classph_1_1_i_sdl_data_packet_group.html</filename>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS_NO_DTOR</name>
      <anchorfile>classph_1_1_i_sdl_data_packet_group.html</anchorfile>
      <anchor>a01677f0d52d191e080e62544d88d332e</anchor>
      <arglist>(ISdlDataPacketGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISdlDataPacketGroup</name>
      <anchorfile>classph_1_1_i_sdl_data_packet_group.html</anchorfile>
      <anchor>acedd0f73c299d7cc0de71f7585ed5a43</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SdlInputClauses *</type>
      <name>get</name>
      <anchorfile>classph_1_1_i_sdl_data_packet_group.html</anchorfile>
      <anchor>a97504ec538a858d3489e1b95da5a80bf</anchor>
      <arglist>(std::string_view packetName) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ISdlInstantiable</name>
    <filename>classph_1_1_i_sdl_instantiable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISdlInstantiable</name>
      <anchorfile>classph_1_1_i_sdl_instantiable.html</anchorfile>
      <anchor>ae10ba57c021c606c7214e9fc33dbdbf1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_i_sdl_instantiable.html</anchorfile>
      <anchor>ae06ec66fa139b6d91c9f9617aa0e95f6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SdlField *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_i_sdl_instantiable.html</anchorfile>
      <anchor>a8e805a8ad99f2889d69737a9bb6da3d3</anchor>
      <arglist>(std::size_t index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string_view</type>
      <name>getTypeName</name>
      <anchorfile>classph_1_1_i_sdl_instantiable.html</anchorfile>
      <anchor>a50a09907b32b7b696446360662a6926d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string_view</type>
      <name>getDescription</name>
      <anchorfile>classph_1_1_i_sdl_instantiable.html</anchorfile>
      <anchor>a63398e3243a7b180b77e5e1f9de1366d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ISdlReferenceGroup</name>
    <filename>classph_1_1_i_sdl_reference_group.html</filename>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS_NO_DTOR</name>
      <anchorfile>classph_1_1_i_sdl_reference_group.html</anchorfile>
      <anchor>a5e82161b2a510601aa605b91f9c4c6ef</anchor>
      <arglist>(ISdlReferenceGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISdlReferenceGroup</name>
      <anchorfile>classph_1_1_i_sdl_reference_group.html</anchorfile>
      <anchor>a2768a45a4f07392e2bb6431e77d21ca4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>get</name>
      <anchorfile>classph_1_1_i_sdl_reference_group.html</anchorfile>
      <anchor>a2f7207bc58f696549d5ca59ebda52232</anchor>
      <arglist>(std::string_view resourceName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_i_sdl_reference_group.html</anchorfile>
      <anchor>a8c334893f881c1754201cf90290e0099</anchor>
      <arglist>(std::string_view resourceName) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>getTyped</name>
      <anchorfile>classph_1_1_i_sdl_reference_group.html</anchorfile>
      <anchor>a18b922e4a8526b7c5f72701196a2c0be</anchor>
      <arglist>(std::string_view resourceName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTyped</name>
      <anchorfile>classph_1_1_i_sdl_reference_group.html</anchorfile>
      <anchor>a001529f107c211ab73a13f71fa330887</anchor>
      <arglist>(std::string_view resourceName) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ISdlResource</name>
    <filename>classph_1_1_i_sdl_resource.html</filename>
    <member kind="function">
      <type></type>
      <name>ISdlResource</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a29e3b93259a44af51f08a8eabf159baa</anchor>
      <arglist>(const ISdlResource &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISdlResource</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a203f8cc8160da865444f2f9ea78e6bce</anchor>
      <arglist>(ISdlResource &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISdlResource</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a8261c1e364bc166268569790099f5e4c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ISdlResource &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a48183467af4badb8eb3657fbbba10679</anchor>
      <arglist>(const ISdlResource &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>ISdlResource &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a909489b5b29e3b0715ac9c21ad1b6f8c</anchor>
      <arglist>(ISdlResource &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>ab42fd83de18e2d689b22dc5e81e56be8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SdlResourceId</type>
      <name>getId</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>acaee1691ffbe082eafb0cb10d5afc3bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SdlClass *</type>
      <name>getDynamicSdlClass</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a9981132918c0026e14606ac61a4e528e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInlinable</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a60d9705998a88f05ce84b74b6e4c4283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ISdlResource</name>
      <anchorfile>classph_1_1_i_sdl_resource.html</anchorfile>
      <anchor>a1f156e9a99c78756218b3e66dfaf1d1c</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IsoBeckmann</name>
    <filename>classph_1_1_iso_beckmann.html</filename>
    <base>ph::ShapeInvariantMicrofacet</base>
    <member kind="function">
      <type></type>
      <name>IsoBeckmann</name>
      <anchorfile>classph_1_1_iso_beckmann.html</anchorfile>
      <anchor>a31d39c99b8ae4c0c56505e3f3e08c7d5</anchor>
      <arglist>(real alpha, EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_iso_beckmann.html</anchorfile>
      <anchor>a1a20a44b08773c91312c286756624dde</anchor>
      <arglist>(const SurfaceHit &amp;X) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>lambda</name>
      <anchorfile>classph_1_1_iso_beckmann.html</anchorfile>
      <anchor>a9fb87924bfd02ef461078548ab886476</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;unitDir, const std::array&lt; real, 2 &gt; &amp;alphas) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>distribution</name>
      <anchorfile>classph_1_1_iso_beckmann.html</anchorfile>
      <anchor>a0d9481a5e597ff51fac20ae24fcd5e1b</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleH</name>
      <anchorfile>classph_1_1_iso_beckmann.html</anchorfile>
      <anchor>ab5d59e9f3e51787ab8868e7a40d265ba</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IsoTrowbridgeReitz</name>
    <filename>classph_1_1_iso_trowbridge_reitz.html</filename>
    <base>ph::TrowbridgeReitz</base>
    <member kind="function">
      <type></type>
      <name>IsoTrowbridgeReitz</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz.html</anchorfile>
      <anchor>a14c5611b7a5f521af12af2c4b5e2768c</anchor>
      <arglist>(EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz.html</anchorfile>
      <anchor>a39a86af27995e0bca098048297468b7a</anchor>
      <arglist>(const SurfaceHit &amp;X) const override=0</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>lambda</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz.html</anchorfile>
      <anchor>a1a8d609d638babfcd61a43da1be1e0aa</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;unitDir, const std::array&lt; real, 2 &gt; &amp;alphas) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>distribution</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz.html</anchorfile>
      <anchor>a66e9bc138e61238cb5a0339a29851ae6</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleH</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz.html</anchorfile>
      <anchor>ad8a59ac599a2a9863518f36da7e95410</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IsoTrowbridgeReitzConstant</name>
    <filename>classph_1_1_iso_trowbridge_reitz_constant.html</filename>
    <base>ph::IsoTrowbridgeReitz</base>
    <member kind="function">
      <type></type>
      <name>IsoTrowbridgeReitzConstant</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz_constant.html</anchorfile>
      <anchor>aa9084d4799b836b7df54081d09fc15fc</anchor>
      <arglist>(real alpha, EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz_constant.html</anchorfile>
      <anchor>a6c54862e9e670832ab4aab7b79f1aef7</anchor>
      <arglist>(const SurfaceHit &amp;X) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IsoTrowbridgeReitzTextured</name>
    <filename>classph_1_1_iso_trowbridge_reitz_textured.html</filename>
    <base>ph::IsoTrowbridgeReitz</base>
    <member kind="function">
      <type></type>
      <name>IsoTrowbridgeReitzTextured</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz_textured.html</anchorfile>
      <anchor>a102f3498f78b185f390390f078291330</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; real &gt; &gt; &amp;alpha, EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_iso_trowbridge_reitz_textured.html</anchorfile>
      <anchor>a58914f20a8a428036f7c32d9058f8685</anchor>
      <arglist>(const SurfaceHit &amp;X) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IUninstantiable</name>
    <filename>classph_1_1_i_uninstantiable.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>IUninstantiable</name>
      <anchorfile>classph_1_1_i_uninstantiable.html</anchorfile>
      <anchor>a4effb229f63a481e5c32719f153b060a</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IUninstantiable</name>
      <anchorfile>classph_1_1_i_uninstantiable.html</anchorfile>
      <anchor>ad2a492f233c51dc01075dd474192579b</anchor>
      <arglist>(const IUninstantiable &amp;other)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IUninstantiable &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_uninstantiable.html</anchorfile>
      <anchor>a216ee5f7f9dd476c1889c67969a859ce</anchor>
      <arglist>(const IUninstantiable &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IUninstantiable</name>
      <anchorfile>classph_1_1_i_uninstantiable.html</anchorfile>
      <anchor>af1037de34776cd520144759d0068b61d</anchor>
      <arglist>(IUninstantiable &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IUninstantiable &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_i_uninstantiable.html</anchorfile>
      <anchor>ac9fa5d90da69f0ce5856af2ca8f34eb6</anchor>
      <arglist>(IUninstantiable &amp;&amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~IUninstantiable</name>
      <anchorfile>classph_1_1_i_uninstantiable.html</anchorfile>
      <anchor>aca92991d050cfa335489a235e39f3fd2</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::IWorkDispatcher</name>
    <filename>classph_1_1_i_work_dispatcher.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IWorkDispatcher</name>
      <anchorfile>classph_1_1_i_work_dispatcher.html</anchorfile>
      <anchor>a886aaecb99846257b9e4359109d3c95a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classph_1_1_i_work_dispatcher.html</anchorfile>
      <anchor>ad935a7c1108afeab33bf2d59b9dd3fee</anchor>
      <arglist>(WorkUnit *out_workUnit)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::JRToneMapping</name>
    <filename>classph_1_1_j_r_tone_mapping.html</filename>
    <base>ph::FrameOperator</base>
    <member kind="typedef">
      <type>math::TAABB2D&lt; T &gt;</type>
      <name>TAABB2D</name>
      <anchorfile>classph_1_1_j_r_tone_mapping.html</anchorfile>
      <anchor>aff590fbc21ab22f679089494354d58ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JRToneMapping</name>
      <anchorfile>classph_1_1_j_r_tone_mapping.html</anchorfile>
      <anchor>a6d4ae424cf2464d9c9465ac11fe2000e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operate</name>
      <anchorfile>classph_1_1_j_r_tone_mapping.html</anchorfile>
      <anchor>accc730aa3f3b667f24a68b8ca70c1732</anchor>
      <arglist>(const HdrRgbFrame &amp;srcFrame, HdrRgbFrame *out_dstFrame) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operateLocal</name>
      <anchorfile>classph_1_1_j_r_tone_mapping.html</anchorfile>
      <anchor>ad13cfdcf9308fef5db2e10768f65ff15</anchor>
      <arglist>(HdrRgbFrame &amp;frame, const TAABB2D&lt; uint32 &gt; &amp;region) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExposure</name>
      <anchorfile>classph_1_1_j_r_tone_mapping.html</anchorfile>
      <anchor>a47d41f381bf4b4e591682572e28d2792</anchor>
      <arglist>(real exposure)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::KdtreeAABB</name>
    <filename>classph_1_1_kdtree_a_a_b_b.html</filename>
    <member kind="function">
      <type></type>
      <name>KdtreeAABB</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a12474a909355604c803d71b7fd501ce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KdtreeAABB</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>ab8251c1ffee5f4bd0cd5112b11b70774</anchor>
      <arglist>(const math::AABB3D &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KdtreeAABB</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a980b1fa95a36ef5acffe8cbe777a509b</anchor>
      <arglist>(const math::Vector3R &amp;minVertex, const math::Vector3R &amp;maxVertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingVolume</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>af441d11f0ead3358bb5292c149b001df</anchor>
      <arglist>(const Ray &amp;ray, real *const out_rayNearHitDist, real *const out_rayFarHitDist) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingVolume</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a53e97a0f5ccbbe7887c5749c604e672a</anchor>
      <arglist>(const math::AABB3D &amp;aabb) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trySplitAt</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a52c0c3cb462b7ce9ecd8788395b1884c</anchor>
      <arglist>(const int32 axis, const real splitPos, KdtreeAABB *const out_negativeAABB, KdtreeAABB *const out_positiveAABB) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMinVertex</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>aea12f2e6122a6b700ac558cb5aec3ce8</anchor>
      <arglist>(real *const out_vector3f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMaxVertex</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>af70faa70afe8f4e8f5bd81623075e4e2</anchor>
      <arglist>(real *const out_vector3f) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getMinVertex</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a944dd4f7e4dcc76bb5557f7791c3bdcc</anchor>
      <arglist>(const int32 axis) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getMaxVertex</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a6a8df7953b55ea81fb9d0a914732a39a</anchor>
      <arglist>(const int32 axis) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAABB</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a68bf80f33b5530c6feee51eea2fcd5fd</anchor>
      <arglist>(math::AABB3D *const out_aabb) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getExtent</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>a27c1b0bb891c149faf03cb6902d7114d</anchor>
      <arglist>(const int32 axis) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getSurfaceArea</name>
      <anchorfile>classph_1_1_kdtree_a_a_b_b.html</anchorfile>
      <anchor>adf7b4a55b6e9a17ed3c20cbd1dea0e1e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::KdtreeIntersector</name>
    <filename>classph_1_1_kdtree_intersector.html</filename>
    <base>ph::Intersector</base>
    <member kind="function">
      <type></type>
      <name>KdtreeIntersector</name>
      <anchorfile>classph_1_1_kdtree_intersector.html</anchorfile>
      <anchor>a8c5b1fc4242320fb2f4162f03acc13c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_kdtree_intersector.html</anchorfile>
      <anchor>a4c1034a830c828e2e025b8cf4ce9db5b</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_kdtree_intersector.html</anchorfile>
      <anchor>aa64636c9b4f47bc6c281e2b8fa85fec3</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_kdtree_intersector.html</anchorfile>
      <anchor>a59290291df519f7cfd0b44787731f32c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::KdtreeNode</name>
    <filename>classph_1_1_kdtree_node.html</filename>
    <member kind="function">
      <type></type>
      <name>KdtreeNode</name>
      <anchorfile>classph_1_1_kdtree_node.html</anchorfile>
      <anchor>ac0d42b0a4d8cb4f3c93ca782b4f32142</anchor>
      <arglist>(std::vector&lt; const Intersectable * &gt; *intersectableBuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildTree</name>
      <anchorfile>classph_1_1_kdtree_node.html</anchorfile>
      <anchor>a96e37cdc90b49226ce02c116d272f3c0</anchor>
      <arglist>(const std::vector&lt; const Intersectable * &gt; &amp;intersectables)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findClosestIntersection</name>
      <anchorfile>classph_1_1_kdtree_node.html</anchorfile>
      <anchor>ada639cdcbbf2edb3cc4f456cc3ede524</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const</arglist>
    </member>
    <member kind="function">
      <type>KdtreeAABB</type>
      <name>getAABB</name>
      <anchorfile>classph_1_1_kdtree_node.html</anchorfile>
      <anchor>a7be045ddf6ea2573fbc48e68fc0f9a12</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LambertianDiffuse</name>
    <filename>classph_1_1_lambertian_diffuse.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>LambertianDiffuse</name>
      <anchorfile>classph_1_1_lambertian_diffuse.html</anchorfile>
      <anchor>ae7d4d3135dfa58f5f542b57a635f1785</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;albedo)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_lambertian_diffuse.html</anchorfile>
      <anchor>a76ae8546ba50c6bf92f49d0d4aba33fe</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_lambertian_diffuse.html</anchorfile>
      <anchor>a9de9338419179c54ba9fca8be37abba2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LatLongEnvEmitter</name>
    <filename>classph_1_1_lat_long_env_emitter.html</filename>
    <base>ph::SurfaceEmitter</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>RadianceTexture</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a88994e1880db08c1d3331949313acddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LatLongEnvEmitter</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a9e59b59beacc74a10919eda41df489f6</anchor>
      <arglist>(const Primitive *envSurface, const RadianceTexture &amp;radiance, const math::Vector2S &amp;resolution, EmitterFeatureSet featureSet=defaultFeatureSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>adf767f73f56a372602b353c01506804b</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a49815b90de753fd73ccee2a536b0a105</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>ac36b614f0b762cc4933b1a7ccd241cce</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a63e8129086b791f0ccc44d0bc4a854d4</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcRadiantFluxApprox</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a0dc5c7ac70f3930ee1dfac889b167bc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontFaceEmit</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a652354f7c34c4ffce79ced9a5c034780</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackFaceEmit</name>
      <anchorfile>classph_1_1_lat_long_env_emitter.html</anchorfile>
      <anchor>a81e07b74806d9c2af03dc48adaccee97</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LayeredSurface</name>
    <filename>classph_1_1_layered_surface.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type></type>
      <name>LayeredSurface</name>
      <anchorfile>classph_1_1_layered_surface.html</anchorfile>
      <anchor>acbc4f3a396ef873e542f6cf16ab1aa69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_layered_surface.html</anchorfile>
      <anchor>aa6b06490506d5156f845efd9990cb817</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLayer</name>
      <anchorfile>classph_1_1_layered_surface.html</anchorfile>
      <anchor>a6885cdbd1313106b83e121d582b3f5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayer</name>
      <anchorfile>classph_1_1_layered_surface.html</anchorfile>
      <anchor>a05a386e24d9151481077706a60f0a5a6</anchor>
      <arglist>(std::size_t layerIndex, const SurfaceLayerInfo &amp;layer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_layered_surface.html</anchorfile>
      <anchor>ababfe256adfdc02cdc840c65091d8ebe</anchor>
      <arglist>(TSdlOwnerClass&lt; LayeredSurface &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LbLayer</name>
    <filename>classph_1_1_lb_layer.html</filename>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>aa0e5f584ca54facce84ea9daa70eba8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a1b6b34c45246d82dbd582641c9bbf5af</anchor>
      <arglist>(const math::Spectrum &amp;iorN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>af2854d6b6e708c5df053740ffb28147d</anchor>
      <arglist>(real alpha, const math::Spectrum &amp;iorN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>acb4f075bf0990f6d7286800ac472c969</anchor>
      <arglist>(real alpha, const math::Spectrum &amp;iorN, const math::Spectrum &amp;iorK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a432f73c3b7702318b83f569818d06855</anchor>
      <arglist>(real g, real depth, const LbLayer &amp;previousLayer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>ae01aca26c269e05e5edac8db059d60ca</anchor>
      <arglist>(real g, real depth, const math::Spectrum &amp;sigmaA, const LbLayer &amp;previousLayer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LbLayer</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a044fbe319acfaeca5f9910017e895353</anchor>
      <arglist>(real g, real depth, const math::Spectrum &amp;sigmaA, const math::Spectrum &amp;sigmaS, const LbLayer &amp;previousLayer)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getAlpha</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>ab1531c04754e1f2fb9c35d8845ed896d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getIorN</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>aa0e7d992ce452c4cb46b2e983a6d18eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getIorK</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>ad4ef548e97e4a468202f5205a5a9e41f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getDepth</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>ad25d87691466c37b7fb6aafa59fb8b2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getG</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a41c1034bc41c92d15f9e4ac1b9c7930f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getSigmaA</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>ab3fd722e5d53c42c1f42c4634b87978a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Spectrum &amp;</type>
      <name>getSigmaS</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a3c9700aaae53df94f2bc1c5e8d7e0627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConductor</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a4e73c818db1b662625351476fd49f0c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurface</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a0a72c0d527b16a248a18c35a6d33787c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVolume</name>
      <anchorfile>classph_1_1_lb_layer.html</anchorfile>
      <anchor>a1acf14315827e0a8753ab3926325d3ae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LbLayeredSurface</name>
    <filename>classph_1_1_lb_layered_surface.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>LbLayeredSurface</name>
      <anchorfile>classph_1_1_lb_layered_surface.html</anchorfile>
      <anchor>ad2c9a5bcbba97f5a810e0c3692b7f19d</anchor>
      <arglist>(const std::vector&lt; math::Spectrum &gt; &amp;iorNs, const std::vector&lt; math::Spectrum &gt; &amp;iorKs, const std::vector&lt; real &gt; &amp;alphas, const std::vector&lt; real &gt; &amp;depths, const std::vector&lt; real &gt; &amp;gs, const std::vector&lt; math::Spectrum &gt; &amp;sigmaAs, const std::vector&lt; math::Spectrum &gt; &amp;sigmaSs)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_lb_layered_surface.html</anchorfile>
      <anchor>ae75e1dc0ce608edf9227d8e645051714</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_lb_layered_surface.html</anchorfile>
      <anchor>a215512935989bb2c5ba6621a092e9c3f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LdrRgbTexture2D</name>
    <filename>classph_1_1_ldr_rgb_texture2_d.html</filename>
    <base>ph::TTexture&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>LdrRgbTexture2D</name>
      <anchorfile>classph_1_1_ldr_rgb_texture2_d.html</anchorfile>
      <anchor>a1e926a029775e82ec3c02420300e2bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LdrRgbTexture2D</name>
      <anchorfile>classph_1_1_ldr_rgb_texture2_d.html</anchorfile>
      <anchor>a7bb9d904d3b91a54eae9fe623761b336</anchor>
      <arglist>(std::unique_ptr&lt; TAbstractPixelTex2D&lt; LdrComponent, 3 &gt; &gt; texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_ldr_rgb_texture2_d.html</anchorfile>
      <anchor>a426f41ef1db575d951aeefbdab03fb80</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::Spectrum *out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LerpedSurfaceOptics</name>
    <filename>classph_1_1_lerped_surface_optics.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>LerpedSurfaceOptics</name>
      <anchorfile>classph_1_1_lerped_surface_optics.html</anchorfile>
      <anchor>add84d3b68f6d632b32d86bacdffdcec5</anchor>
      <arglist>(const std::shared_ptr&lt; SurfaceOptics &gt; &amp;optics0, const std::shared_ptr&lt; SurfaceOptics &gt; &amp;optics1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LerpedSurfaceOptics</name>
      <anchorfile>classph_1_1_lerped_surface_optics.html</anchorfile>
      <anchor>a5018e6cc63a0ce1fc88646c2f43594f5</anchor>
      <arglist>(const std::shared_ptr&lt; SurfaceOptics &gt; &amp;optics0, const std::shared_ptr&lt; SurfaceOptics &gt; &amp;optics1, real ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LerpedSurfaceOptics</name>
      <anchorfile>classph_1_1_lerped_surface_optics.html</anchorfile>
      <anchor>a0938823c91b62242d03b7b24947271b1</anchor>
      <arglist>(const std::shared_ptr&lt; SurfaceOptics &gt; &amp;optics0, const std::shared_ptr&lt; SurfaceOptics &gt; &amp;optics1, const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_lerped_surface_optics.html</anchorfile>
      <anchor>ae1f675ab3fbe8cf4045bdd91c22580ad</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_lerped_surface_optics.html</anchorfile>
      <anchor>a1df9befcf92155a6091bb0874aff1578</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::LightSource</name>
    <filename>classph_1_1_light_source.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_LightSource &gt;</base>
    <member kind="function">
      <type></type>
      <name>LightSource</name>
      <anchorfile>classph_1_1_light_source.html</anchorfile>
      <anchor>a5d97e40ce1992473904121a84bc9f297</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; Emitter &gt;</type>
      <name>genEmitter</name>
      <anchorfile>classph_1_1_light_source.html</anchorfile>
      <anchor>a4dd9ac9e523717ac161ea27219dd4946</anchor>
      <arglist>(CookingContext &amp;ctx, EmitterBuildingMaterial &amp;&amp;data) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Geometry &gt;</type>
      <name>genGeometry</name>
      <anchorfile>classph_1_1_light_source.html</anchorfile>
      <anchor>a61e05c0577ae37a4fd554e4a04cb8840</anchor>
      <arglist>(CookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Material &gt;</type>
      <name>genMaterial</name>
      <anchorfile>classph_1_1_light_source.html</anchorfile>
      <anchor>af6c8576264bfc90ea088df7325db72af</anchor>
      <arglist>(CookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_light_source.html</anchorfile>
      <anchor>a899aa99cf0ed0aa60f1c9086c09591b1</anchor>
      <arglist>(TSdlOwnerClass&lt; LightSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Material</name>
    <filename>classph_1_1_material.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Material &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>genBehaviors</name>
      <anchorfile>classph_1_1_material.html</anchorfile>
      <anchor>a95be98531633234b9c0b4f8072a859c6</anchor>
      <arglist>(const CookingContext &amp;ctx, PrimitiveMetadata &amp;metadata) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_material.html</anchorfile>
      <anchor>ae575fa9548134fcd81bffeba82e4df9f</anchor>
      <arglist>(TSdlOwnerClass&lt; Material &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::MathException</name>
    <filename>classph_1_1math_1_1_math_exception.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>whatStr</name>
      <anchorfile>classph_1_1math_1_1_math_exception.html</anchorfile>
      <anchor>a5c4395e099e819d687e2a38281911fe0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MathImage</name>
    <filename>classph_1_1_math_image.html</filename>
    <base>ph::Image</base>
    <member kind="function">
      <type></type>
      <name>MathImage</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a729a3a59a6c99b92de3244867d736d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>aa8d86fe026315696b572c9d28820a782</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a8a9fae0c1007f69d042dfe2208a73db7</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>MathImage &amp;</type>
      <name>setOperation</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a2c2f401f6acec6fd3aff53093643ccfa</anchor>
      <arglist>(EMathImageOp op)</arglist>
    </member>
    <member kind="function">
      <type>MathImage &amp;</type>
      <name>setOperandImage</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a7ef56fe3cc6dd14652574caf7112515d</anchor>
      <arglist>(std::shared_ptr&lt; Image &gt; operand)</arglist>
    </member>
    <member kind="function">
      <type>MathImage &amp;</type>
      <name>setScalarInput0</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a217393725bfee7a9015333b1800705da</anchor>
      <arglist>(float64 value)</arglist>
    </member>
    <member kind="function">
      <type>MathImage &amp;</type>
      <name>setScalarInput1</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a1f551c0d6d271408ba17a62eeb059351</anchor>
      <arglist>(float64 value)</arglist>
    </member>
    <member kind="function">
      <type>MathImage &amp;</type>
      <name>setInputImage0</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>afff35bf21728b4c849bbf055f7ea9ec3</anchor>
      <arglist>(std::shared_ptr&lt; Image &gt; input)</arglist>
    </member>
    <member kind="function">
      <type>MathImage &amp;</type>
      <name>setInputImage1</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a19fd5f9adafbe6a97f83608b57217a87</anchor>
      <arglist>(std::shared_ptr&lt; Image &gt; input)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_math_image.html</anchorfile>
      <anchor>a571dfee89880df66293aa07123d89ac5</anchor>
      <arglist>(TSdlOwnerClass&lt; MathImage &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MatteOpaque</name>
    <filename>classph_1_1_matte_opaque.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_matte_opaque.html</anchorfile>
      <anchor>abd184fc6f6546adda81e92e54649c9a4</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlbedo</name>
      <anchorfile>classph_1_1_matte_opaque.html</anchorfile>
      <anchor>af9eb1b1a26fbce285986268832d5968a</anchor>
      <arglist>(const math::Vector3R &amp;albedo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlbedo</name>
      <anchorfile>classph_1_1_matte_opaque.html</anchorfile>
      <anchor>a59ddf333bd56fc2db5ebce9119935d36</anchor>
      <arglist>(const real r, const real g, const real b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlbedo</name>
      <anchorfile>classph_1_1_matte_opaque.html</anchorfile>
      <anchor>a3e716d6129db7c87c19caea4be23ac80</anchor>
      <arglist>(std::shared_ptr&lt; Image &gt; albedo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_matte_opaque.html</anchorfile>
      <anchor>a31de84c405c23da5c63c34f82aa2aaff</anchor>
      <arglist>(TSdlOwnerClass&lt; MatteOpaque &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MemoryArena</name>
    <filename>classph_1_1_memory_arena.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>MemoryArena</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>ae32d29cebf84d32ec9350c40b9e73f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryArena</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a67abd2c6db2d50c7a1744d5da48e140a</anchor>
      <arglist>(std::size_t blockSizeHintInBytes, std::size_t numDefaultBlocks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryArena</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a1f3aede513175179ee083d6727490eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>allocRaw</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>ac2bac8418034d3ef61afe18ac0dadb56</anchor>
      <arglist>(std::size_t numBytes, std::size_t alignmentInBytes=alignof(std::max_align_t))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>af6abecb6a8f2eefcad52b5ae94bf9d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numUsedBytes</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a858ab23f78ca1408925399d762c1a099</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numAllocatedBytes</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a5685321bae69b1f76c79a6791ed728ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBlockSizeInBytes</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a94ae20251ad363553c40e748d612f37d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numAllocatedBlocks</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>ac2724c03ce5ddaf13ff28c459792bf39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>alloc</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a66d50a2e115ca5baec8fd231f734971a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; T &gt;</type>
      <name>allocArray</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a5b0c2b5fd02dd563ad70bf9c034457f1</anchor>
      <arglist>(const std::size_t arraySize)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>make</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>ad7ca52ec8bce133b7d04b18452551ef2</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryArena</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a99012d98c5cade451f9fe29f3cd923d2</anchor>
      <arglist>(MemoryArena &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>MemoryArena &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>ad765fa0458b4904f984f271bc39e6006</anchor>
      <arglist>(MemoryArena &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryArena</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>a99012d98c5cade451f9fe29f3cd923d2</anchor>
      <arglist>(MemoryArena &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>MemoryArena &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_memory_arena.html</anchorfile>
      <anchor>ad765fa0458b4904f984f271bc39e6006</anchor>
      <arglist>(MemoryArena &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MetaRecordingProcessor</name>
    <filename>classph_1_1_meta_recording_processor.html</filename>
    <base>ph::IReceivedRayProcessor</base>
    <member kind="function">
      <type></type>
      <name>MetaRecordingProcessor</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>a9e450e1a43e054e108446e096f3f8b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaRecordingProcessor</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>ab4b719367c7b8490b96c9e541410ccb3</anchor>
      <arglist>(IReceivedRayProcessor *processor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>a697ecb2ca07280b884ce8ca49714af52</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const Ray &amp;ray, const math::Spectrum &amp;quantityWeight, SampleFlow &amp;sampleFlow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBatchStart</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>a0027c15c4b7b93522d148a65074db53c</anchor>
      <arglist>(uint64 batchNumber) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBatchFinish</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>af5199a3f1c5aa08fc15239e30d1d9e14</anchor>
      <arglist>(uint64 batchNumber) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRecords</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>ab7b4b217bd301e0c5f38784d77b4eb94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>a2b583ea1a996bb22c165c91d9dae347c</anchor>
      <arglist>(const math::TVector2&lt; int64 &gt; &amp;filmResPx, const math::TAABB2D&lt; int64 &gt; &amp;recordWindowPx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRecord</name>
      <anchorfile>classph_1_1_meta_recording_processor.html</anchorfile>
      <anchor>a2b3e7b1fac64079d66575a52391e4e59</anchor>
      <arglist>(HdrRgbFrame *out_storage, const math::TVector2&lt; int64 &gt; &amp;storageOrigin) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Microfacet</name>
    <filename>classph_1_1_microfacet.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Microfacet</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>add0f4ae0b4ee374763dfb6de9e9c5ef5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real</type>
      <name>distribution</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>aea270602fed6f45a36991b7134a58aba</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real</type>
      <name>geometry</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>a4fa386b9ae127ec77b447aaa2f298f12</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;L, const math::Vector3R &amp;V) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleH</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>ac3ae68c29eb05aeb85b1a68fc4600239</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual lta::PDF</type>
      <name>pdfSampleH</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>a9186f999c6cc737ff2f2918db79722ac</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleVisibleH</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>af5635973ab63178ac2e33a9d587e9c63</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;V, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual lta::PDF</type>
      <name>pdfSampleVisibleH</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>ae1daa8f290d4a5cb785fdd38ed465907</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;V) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>isSidednessAgreed</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>aa9df79e36568c25023b8c1268b4a4995</anchor>
      <arglist>(real NoD, real HoD)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>isSidednessAgreed</name>
      <anchorfile>classph_1_1_microfacet.html</anchorfile>
      <anchor>a1316faadbc9d0e83a542612d925dff61</anchor>
      <arglist>(real NoL, real NoV, real HoL, real HoV)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MicrosurfaceInfo</name>
    <filename>classph_1_1_microsurface_info.html</filename>
    <member kind="function">
      <type>std::unique_ptr&lt; Microfacet &gt;</type>
      <name>genMicrofacet</name>
      <anchorfile>classph_1_1_microsurface_info.html</anchorfile>
      <anchor>aeb771e3aa8ffe946b0faf8f373a726c6</anchor>
      <arglist>(EInterfaceMicrosurface defaultType=EInterfaceMicrosurface::TrowbridgeReitz) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsotropic</name>
      <anchorfile>classph_1_1_microsurface_info.html</anchorfile>
      <anchor>a5f273068ae1bbc06d18cd1de38ae34a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getIsotropicRoughness</name>
      <anchorfile>classph_1_1_microsurface_info.html</anchorfile>
      <anchor>a7c7a62ddc90eed36b0adc9a14c901727</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; real, real &gt;</type>
      <name>getAnisotropicUVRoughnesses</name>
      <anchorfile>classph_1_1_microsurface_info.html</anchorfile>
      <anchor>aa9876de6246d105b472370c20875a977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_STRUCT</name>
      <anchorfile>classph_1_1_microsurface_info.html</anchorfile>
      <anchor>ac7d549439f0411843a50bf926685dd24</anchor>
      <arglist>(TSdlOwnerStruct&lt; MicrosurfaceInfo &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::mipmapgen</name>
    <filename>classph_1_1mipmapgen.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="typedef">
      <type>std::vector&lt; TFrame&lt; T, N &gt; &gt;</type>
      <name>Mipmaps</name>
      <anchorfile>classph_1_1mipmapgen.html</anchorfile>
      <anchor>a9728a534f4a92a6f35b95760cfb554fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mipmapgen</name>
      <anchorfile>classph_1_1mipmapgen.html</anchorfile>
      <anchor>a88ca855751b05ac4c33e6b9ddc139501</anchor>
      <arglist>(const std::size_t numThreads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mipmapgen</name>
      <anchorfile>classph_1_1mipmapgen.html</anchorfile>
      <anchor>a0b3ebe3803a1fbbfc04f6020bd1dafe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>genMipmaps</name>
      <anchorfile>classph_1_1mipmapgen.html</anchorfile>
      <anchor>ac642c2da55eafa8c9ff97d30cccd7348</anchor>
      <arglist>(const TFrame&lt; T, N &gt; &amp;source) -&gt; std::future&lt; Mipmaps&lt; T, N &gt; &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ModelParser</name>
    <filename>classph_1_1_model_parser.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ModelParser</name>
      <anchorfile>classph_1_1_model_parser.html</anchorfile>
      <anchor>a7f50434e2b9b92562e31610a9a1d5d56</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>parse</name>
      <anchorfile>classph_1_1_model_parser.html</anchorfile>
      <anchor>a42aeda5b8fe0f6c5d5fc7bfb778ee1f7</anchor>
      <arglist>(const std::string &amp;fullFilename, std::vector&lt; AModel &gt; *const out_models)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ModelSource</name>
    <filename>classph_1_1_model_source.html</filename>
    <base>ph::LightSource</base>
    <member kind="function">
      <type></type>
      <name>ModelSource</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a88444d9d4b7cf71f0ef429949f98b04b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelSource</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a16eaaeb0976059b54f44b5c1571989c6</anchor>
      <arglist>(const math::Vector3R &amp;emittedRgbRadiance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelSource</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a7eed4da57e6880a1501584c54a73b4cf</anchor>
      <arglist>(const Path &amp;imagePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelSource</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>ad2b6c16310b25e05f4e9019dc498ce37</anchor>
      <arglist>(const std::shared_ptr&lt; Image &gt; &amp;emittedRadiance)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Emitter &gt;</type>
      <name>genEmitter</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a223ff15bfe3cd0542aa2007068f65084</anchor>
      <arglist>(CookingContext &amp;ctx, EmitterBuildingMaterial &amp;&amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genGeometry</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a65178d0d1c032ce120cd64554044a4b8</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Material &gt;</type>
      <name>genMaterial</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a63282b08c3d2e96cf74c16d21b27df3c</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometry</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>aef3eb4a92d33f78d2829725d53b6be20</anchor>
      <arglist>(const std::shared_ptr&lt; Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterial</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a1a2d8f1a7de3359bdb1fc493709ab50c</anchor>
      <arglist>(const std::shared_ptr&lt; Material &gt; &amp;material)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackFaceEmit</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a945394f0720cd330088004be092eb2f1</anchor>
      <arglist>(bool isBackFaceEmit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_model_source.html</anchorfile>
      <anchor>a82eeca379c2e1570ccf78da540cdb06b</anchor>
      <arglist>(TSdlOwnerClass&lt; ModelSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MotionCookConfig</name>
    <filename>classph_1_1_motion_cook_config.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionCookConfig</name>
      <anchorfile>classph_1_1_motion_cook_config.html</anchorfile>
      <anchor>aae0ab96e91c07b1169c7ce9e8f7a099f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>start</name>
      <anchorfile>classph_1_1_motion_cook_config.html</anchorfile>
      <anchor>a676dbf42279f705980ff222a69bb4f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>end</name>
      <anchorfile>classph_1_1_motion_cook_config.html</anchorfile>
      <anchor>a9c3d870138b040a0ba21fa196d46322f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::MotionSource</name>
    <filename>classph_1_1_motion_source.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Motion &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>storeCooked</name>
      <anchorfile>classph_1_1_motion_source.html</anchorfile>
      <anchor>a3f12db05b38cc6bd7a0517d44a4c13ca</anchor>
      <arglist>(CookedMotion &amp;out_motion, const CookingContext &amp;ctx, const MotionCookConfig &amp;config) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; math::Transform &gt;</type>
      <name>genLocalToWorld</name>
      <anchorfile>classph_1_1_motion_source.html</anchorfile>
      <anchor>a64d86f2fd7d8d798c751c52d7cbf7dbf</anchor>
      <arglist>(const Time &amp;start, const Time &amp;end) const =0</arglist>
    </member>
    <member kind="function">
      <type>CookedMotion *</type>
      <name>createCooked</name>
      <anchorfile>classph_1_1_motion_source.html</anchorfile>
      <anchor>af8c74ac22fbc6764e7f6f21c02da7917</anchor>
      <arglist>(const CookingContext &amp;ctx, const MotionCookConfig &amp;config) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::NaiveReinhardToneMapping</name>
    <filename>classph_1_1_naive_reinhard_tone_mapping.html</filename>
    <base>ph::FrameOperator</base>
    <member kind="function">
      <type></type>
      <name>NaiveReinhardToneMapping</name>
      <anchorfile>classph_1_1_naive_reinhard_tone_mapping.html</anchorfile>
      <anchor>a592ed645c67a26b2bf7afdc12014f0b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operate</name>
      <anchorfile>classph_1_1_naive_reinhard_tone_mapping.html</anchorfile>
      <anchor>a1bf98c6c6fe2eb2f5ca2a4acf99d9c95</anchor>
      <arglist>(const HdrRgbFrame &amp;srcFrame, HdrRgbFrame *out_dstFrame) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::field_set_op::NoOpNoticeReceiver</name>
    <filename>structph_1_1field__set__op_1_1_no_op_notice_receiver.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structph_1_1field__set__op_1_1_no_op_notice_receiver.html</anchorfile>
      <anchor>a63a5ab58c793b43cdad4bcce6155ced1</anchor>
      <arglist>(std::string noticeMsg, EFieldImportance importance) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Object</name>
    <filename>classph_1_1_object.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Object &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>a150cf25dfd7a9072c70295e76c8d23fe</anchor>
      <arglist>(TSdlOwnerClass&lt; Object &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>afe51369f96027653e4f8e9ebdca7e895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>a8fb8051270a7023a4126cdeb0d7584b7</anchor>
      <arglist>(const Object &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>a236942e1df16d00c2d11f21f97319153</anchor>
      <arglist>(Object &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type></type>
      <name>~Object</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>abec87da78642d9cb8bd936cbc90fe633</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>a4c7618218005334ed2fa5b38d8af27fb</anchor>
      <arglist>(const Object &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_object.html</anchorfile>
      <anchor>a4679bff0ec938de98c90b5cfaf4e23f6</anchor>
      <arglist>(Object &amp;&amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Observer</name>
    <filename>classph_1_1_observer.html</filename>
    <base>ph::CoreSdlResource</base>
    <member kind="function">
      <type></type>
      <name>Observer</name>
      <anchorfile>classph_1_1_observer.html</anchorfile>
      <anchor>aad607d9c2737be453bc3ee0a48ad713e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_observer.html</anchorfile>
      <anchor>a47aeee56af5bd316061ef9c4fec6715f</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override=0</arglist>
    </member>
    <member kind="function">
      <type>ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_observer.html</anchorfile>
      <anchor>a3dae5189f2184ccb7c755bd29d0cdf88</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_observer.html</anchorfile>
      <anchor>a6ea8d79e0fcba78eda06b250c3418c7f</anchor>
      <arglist>(TSdlOwnerClass&lt; Observer &gt;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr ESdlTypeCategory</type>
      <name>CATEGORY</name>
      <anchorfile>classph_1_1_observer.html</anchorfile>
      <anchor>a7c11796135f213e94d79cc64f9192403</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::OmniModulatedEmitter</name>
    <filename>classph_1_1_omni_modulated_emitter.html</filename>
    <base>ph::Emitter</base>
    <member kind="function">
      <type></type>
      <name>OmniModulatedEmitter</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>af0691815740f940613d24e79b65eb4ae</anchor>
      <arglist>(const Emitter *source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OmniModulatedEmitter</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>a597d4d6076c7e73cff13fbbee090b18a</anchor>
      <arglist>(const Emitter *source, EmitterFeatureSet featureSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>aa7551d107b45ebf97b50f51e65872097</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>a96a5ee2101a12f84868fc174df7e8bc7</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>a10c876e8ee3a92277c6731477bdb5952</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>a4db23e8afa8927255bbd7d080c13a6d4</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcRadiantFluxApprox</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>a3df0622ee00791708d6bdb7d953a7a64</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilter</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>a9c9a45d145589fa4e7f3be7a5d83e8e4</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>const Emitter &amp;</type>
      <name>getSource</name>
      <anchorfile>classph_1_1_omni_modulated_emitter.html</anchorfile>
      <anchor>af2d7de511cffe1518b33f99496b6b48d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::OpaqueMicrofacet</name>
    <filename>classph_1_1_opaque_microfacet.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>OpaqueMicrofacet</name>
      <anchorfile>classph_1_1_opaque_microfacet.html</anchorfile>
      <anchor>a618eef048be46a7d5be17da28c35760c</anchor>
      <arglist>(const std::shared_ptr&lt; ConductorFresnel &gt; &amp;fresnel, const std::shared_ptr&lt; Microfacet &gt; &amp;microfacet)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_opaque_microfacet.html</anchorfile>
      <anchor>a79923fc581ad00ff09fb766313310b5f</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_opaque_microfacet.html</anchorfile>
      <anchor>ac9bbe01598ed9aec24f932478a5ec8a0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Option</name>
    <filename>classph_1_1_option.html</filename>
    <base>ph::TSdlResourceBase&lt; ESdlTypeCategory::Ref_Option &gt;</base>
    <member kind="function">
      <type></type>
      <name>Option</name>
      <anchorfile>classph_1_1_option.html</anchorfile>
      <anchor>a73c687f88b12b0d7ab9d2bdcd35192b3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_option.html</anchorfile>
      <anchor>a0428c5dd2280f76a541c826a66d465d0</anchor>
      <arglist>(TSdlOwnerClass&lt; Option &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::OrenNayar</name>
    <filename>classph_1_1_oren_nayar.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>OrenNayar</name>
      <anchorfile>classph_1_1_oren_nayar.html</anchorfile>
      <anchor>af7be9eb5b18a13d065b26e793b8dd19f</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;albedo, real sigmaDegrees)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrenNayar</name>
      <anchorfile>classph_1_1_oren_nayar.html</anchorfile>
      <anchor>a0b88d267cfd573ea130b4afba7f8e7e7</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt; &amp;albedo, const std::shared_ptr&lt; TTexture&lt; real &gt; &gt; &amp;sigmaDegrees)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_oren_nayar.html</anchorfile>
      <anchor>a8da42d484660fda4db5740232a0c8345</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_oren_nayar.html</anchorfile>
      <anchor>add05b42d726fff87497511aa212fa064</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::OrientedRasterObserver</name>
    <filename>classph_1_1_oriented_raster_observer.html</filename>
    <base>ph::Observer</base>
    <member kind="function">
      <type></type>
      <name>OrientedRasterObserver</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>aa0f5c1151e72c6f65dcb2920be625de2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>a47e59ad3b3809f06c596691bb72d0565</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>a53f9565a31badb4c87bdc102899f8f87</anchor>
      <arglist>(TSdlOwnerClass&lt; OrientedRasterObserver &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>math::TDecomposedTransform&lt; float64 &gt;</type>
      <name>makeObserverPose</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>a1844f1ddd414ebf2117478ffa72c0bf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>math::Vector3D</type>
      <name>makePos</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>a9b3e920b1eef505915ef71f1a6cc712b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>math::QuaternionD</type>
      <name>makeRot</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>a2d675951aa39b948091024c44e8970c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>math::Vector3D</type>
      <name>makeDir</name>
      <anchorfile>classph_1_1_oriented_raster_observer.html</anchorfile>
      <anchor>a6271cc1054c067505a8a606df398af4d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VolumeDistanceSample::Output</name>
    <filename>classph_1_1_volume_distance_sample_1_1_output.html</filename>
    <member kind="variable">
      <type>real</type>
      <name>dist</name>
      <anchorfile>classph_1_1_volume_distance_sample_1_1_output.html</anchorfile>
      <anchor>a90f73e7a13e1b13e392fb11e8e7dd8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Spectrum</type>
      <name>pdfAppliedWeight</name>
      <anchorfile>classph_1_1_volume_distance_sample_1_1_output.html</anchorfile>
      <anchor>acfabd4629d749ab2d6bc1230ed75375c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::halton_detail::OwenScrambledPermuter</name>
    <filename>classph_1_1halton__detail_1_1_owen_scrambled_permuter.html</filename>
    <member kind="function">
      <type></type>
      <name>OwenScrambledPermuter</name>
      <anchorfile>classph_1_1halton__detail_1_1_owen_scrambled_permuter.html</anchorfile>
      <anchor>a16a26d3ef4a1008d63c5beb5565ec0c3</anchor>
      <arglist>(const uint64 dimIndex)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>operator()</name>
      <anchorfile>classph_1_1halton__detail_1_1_owen_scrambled_permuter.html</anchorfile>
      <anchor>a4f3bf01762ec1d819a1bf450e1cadec8</anchor>
      <arglist>(const uint64, const uint64 digit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PartialRayEnergyEstimator</name>
    <filename>classph_1_1_partial_ray_energy_estimator.html</filename>
    <base>ph::IRayEnergyEstimator</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_partial_ray_energy_estimator.html</anchorfile>
      <anchor>aad13e969dfb68e6238f65d238272b2b2</anchor>
      <arglist>(const Integrand &amp;integrand) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_partial_ray_energy_estimator.html</anchorfile>
      <anchor>a98782d3d350bc20debb4ab5b83b81bd5</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, EnergyEstimation &amp;out_estimation) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapAttributeToEstimation</name>
      <anchorfile>classph_1_1_partial_ray_energy_estimator.html</anchorfile>
      <anchor>acc39d363c3f6354e0cfff343482058ca</anchor>
      <arglist>(std::size_t attributeId, std::size_t estimationIndex) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEstimationIndex</name>
      <anchorfile>classph_1_1_partial_ray_energy_estimator.html</anchorfile>
      <anchor>a75ce2e7b9ad7873059aaa8af5ea99430</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_partial_ray_energy_estimator.html</anchorfile>
      <anchor>aedaac547c7058ff8146127321ef04bea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_estimationIndex</name>
      <anchorfile>classph_1_1_partial_ray_energy_estimator.html</anchorfile>
      <anchor>a16aaa432849a5a1e5e999e77b2a368a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PathTracingVisualizer</name>
    <filename>classph_1_1_path_tracing_visualizer.html</filename>
    <base>ph::FrameVisualizer</base>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>a5eac0c53c6a39304f1e65bb1e1a8f07b</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override</arglist>
    </member>
    <member kind="function">
      <type>EScheduler</type>
      <name>getScheduler</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>af50057d5c327a2bc25875319847cd1d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ERayEnergyEstimator</type>
      <name>getEstimator</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>ae9cdd943969d90c63df7e333fe565a39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ESampleFilter</type>
      <name>getSampleFilter</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>a93fe68357f82f44177053c98a6db6222</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>a2e01fe6dae6436f4a5c5869a2c1c40fc</anchor>
      <arglist>(TSdlOwnerClass&lt; PathTracingVisualizer &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SampleFilter</type>
      <name>makeSampleFilter</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>afcaea7e501b7ff14f95bc9e00e697bd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; IRayEnergyEstimator &gt;</type>
      <name>makeEstimator</name>
      <anchorfile>classph_1_1_path_tracing_visualizer.html</anchorfile>
      <anchor>a1eecb00aac5140f542dfac72180b16e5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PBasicSphere</name>
    <filename>classph_1_1_p_basic_sphere.html</filename>
    <base>ph::Primitive</base>
    <member kind="function">
      <type></type>
      <name>PBasicSphere</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>ab02ff4bb3d8dbf100c86676fc35ceb6f</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>a64585f20097b2180663ae8cf9c5a4680</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>ac58e5139399fa72a41af4a5d823bd2b4</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>a88cd7ce3f91b24aab35b8f68d8709f79</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>ab305a89c211275b48dad578131e56b7d</anchor>
      <arglist>(const math::AABB3D &amp;volume) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>a75e188eb9cbc9915c9072e741495ec30</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcExtendedArea</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>aa4b4e2a2e02b90ffe5dab26cfed4e0c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getRadius</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>ade9f78c98742edcccc092d385917b314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getRcpRadius</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>aa2675061ad63cf60ccaa179586967613</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>getRefinedSurfaceAndNormal</name>
      <anchorfile>classph_1_1_p_basic_sphere.html</anchorfile>
      <anchor>a88e559569a30f7cef6ca68036beb826c</anchor>
      <arglist>(const math::Vector3R &amp;srcSurface) const -&gt; std::pair&lt; math::Vector3R, math::Vector3R &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::Pcg32</name>
    <filename>classph_1_1math_1_1_pcg32.html</filename>
    <base>ph::math::TUniformRandomBitGenerator&lt; Pcg32, uint32 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_pcg32.html</anchorfile>
      <anchor>acc4335d1b74ddb7f336bdc48fe59137b</anchor>
      <arglist>(Pcg32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pcg32</name>
      <anchorfile>classph_1_1math_1_1_pcg32.html</anchorfile>
      <anchor>a90c6f04a5aae3b91817f0f5e82946b89</anchor>
      <arglist>(uint64 initialSequence)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pcg32</name>
      <anchorfile>classph_1_1math_1_1_pcg32.html</anchorfile>
      <anchor>abc3c48990622975cb4081bc7b2955f22</anchor>
      <arglist>(uint64 initialSequence, uint64 initialState)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>impl_generate</name>
      <anchorfile>classph_1_1math_1_1_pcg32.html</anchorfile>
      <anchor>ac2a09f49a43c2b1f7f747a93e3372b4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jumpAhead</name>
      <anchorfile>classph_1_1math_1_1_pcg32.html</anchorfile>
      <anchor>a0809adf660ace3c5a54c684d8b2cc2d4</anchor>
      <arglist>(uint64 distance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::Pcg64DXSM</name>
    <filename>classph_1_1math_1_1_pcg64_d_x_s_m.html</filename>
    <base>ph::math::TUniformRandomBitGenerator&lt; Pcg64DXSM, uint64 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_pcg64_d_x_s_m.html</anchorfile>
      <anchor>a79ebbe99cd6c17c34f800b7d558ffbd9</anchor>
      <arglist>(Pcg64DXSM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pcg64DXSM</name>
      <anchorfile>classph_1_1math_1_1_pcg64_d_x_s_m.html</anchorfile>
      <anchor>aad24aaca86f1afced5750adac73d47cf</anchor>
      <arglist>(uint64 initialSequenceHigh64, uint64 initialSequenceLow64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pcg64DXSM</name>
      <anchorfile>classph_1_1math_1_1_pcg64_d_x_s_m.html</anchorfile>
      <anchor>a57c401b648addcb097e4aa256ccdf5bb</anchor>
      <arglist>(uint64 initialSequenceHigh64, uint64 initialSequenceLow64, uint64 initialStateHigh64, uint64 initialStateLow64)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>impl_generate</name>
      <anchorfile>classph_1_1math_1_1_pcg64_d_x_s_m.html</anchorfile>
      <anchor>a1da8bafb657167215b9fb567d7fa7176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jumpAhead</name>
      <anchorfile>classph_1_1math_1_1_pcg64_d_x_s_m.html</anchorfile>
      <anchor>a43eb9921dad3cbab34e943bd30d0334a</anchor>
      <arglist>(uint64 distance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::detail::Pcg64UInt128</name>
    <filename>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>Pcg64UInt128</name>
      <anchorfile>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</anchorfile>
      <anchor>a0cb7bfc07833c3629b7bb7e774d1ca2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Pcg64UInt128</name>
      <anchorfile>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</anchorfile>
      <anchor>a0d712ac12e32eba79f7d0134809aa8ce</anchor>
      <arglist>(uint64 high64, uint64 low64)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getHigh64</name>
      <anchorfile>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</anchorfile>
      <anchor>a451b88317fd2c5faf8d072d2650cf0d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getLow64</name>
      <anchorfile>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</anchorfile>
      <anchor>a1753829a79ac4993428151788f6bba36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pcg64UInt128</type>
      <name>operator+</name>
      <anchorfile>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</anchorfile>
      <anchor>a0d8534d00d6ec1d651cd75af112abe52</anchor>
      <arglist>(const Pcg64UInt128 &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Pcg64UInt128</type>
      <name>operator*</name>
      <anchorfile>classph_1_1math_1_1detail_1_1_pcg64_u_int128.html</anchorfile>
      <anchor>a01f4eee7c7a928c2d17faa1f37b10e83</anchor>
      <arglist>(const Pcg64UInt128 &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::PDF</name>
    <filename>classph_1_1lta_1_1_p_d_f.html</filename>
    <member kind="function">
      <type>real</type>
      <name>getPdfW</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a79495ff3c0dc93e4d61af767864cee84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfA</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>af730ab981da152e83eaa65330d40c8c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfD</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a35ec64656be1fa8ce1c8c32c982a8efd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>aea897fa02148220cb415fc0b87dcd4f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>operator*</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a6ee66bcf3daef5334b727be65700737e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a77e5c9adaa2c3dc259b338af60a4d9aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator+</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>ad8fb60d59b7014d0310df59993e92cd6</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator-</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a20a76827ae78912c7e4657a48cc21f45</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator*</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a03816ffb001b127632f81f4d68071b09</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator/</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a24d6aff6ddc2c75b0282347e0a61a224</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PDF</type>
      <name>W</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a7e329956238271355a1ffd7f08997e42</anchor>
      <arglist>(real pdfW)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PDF</type>
      <name>A</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a2e92e42099ce9850cfb1e7c645ba4096</anchor>
      <arglist>(real pdfA)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PDF</type>
      <name>D</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a5362217faf3c93a4ac383551baa5b211</anchor>
      <arglist>(real pdfD)</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>value</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>aae135dfc99b749911edd1ae77ba0ec03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EDomain</type>
      <name>domain</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>ac8e8e26a496a6b9b07092ca239888731</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator+</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>ad8fb60d59b7014d0310df59993e92cd6</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator-</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a20a76827ae78912c7e4657a48cc21f45</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator*</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a03816ffb001b127632f81f4d68071b09</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
    <member kind="function">
      <type>PDF</type>
      <name>operator/</name>
      <anchorfile>classph_1_1lta_1_1_p_d_f.html</anchorfile>
      <anchor>a24d6aff6ddc2c75b0282347e0a61a224</anchor>
      <arglist>(real rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PEmpty</name>
    <filename>classph_1_1_p_empty.html</filename>
    <base>ph::Primitive</base>
    <member kind="function">
      <type></type>
      <name>PEmpty</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>a5df695e54bac72303ce80c2b52ba2f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>ad854b6e548b2b40fe8e018a82903c696</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>a6011181810af58a79daeae876d686313</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>aafd23735b24df4f04e3cc70747d31833</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>a43a6c5ff03bd9873730525907c99f192</anchor>
      <arglist>(const Ray &amp;ray) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>a3ee88ed8bdb84f4bd93aec95e19fc3cd</anchor>
      <arglist>(const math::AABB3D &amp;volume) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_p_empty.html</anchorfile>
      <anchor>a8e08625df62a6cd805ec8a08db527c07</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::halton_detail::PerDigitPermuter</name>
    <filename>classph_1_1halton__detail_1_1_per_digit_permuter.html</filename>
    <member kind="function">
      <type></type>
      <name>PerDigitPermuter</name>
      <anchorfile>classph_1_1halton__detail_1_1_per_digit_permuter.html</anchorfile>
      <anchor>ab6a190660aab1540c6f262c7be49a2e0</anchor>
      <arglist>(const PermutationTable &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>operator()</name>
      <anchorfile>classph_1_1halton__detail_1_1_per_digit_permuter.html</anchorfile>
      <anchor>ab885d4f7863d570cf87632ff4652c29a</anchor>
      <arglist>(const uint64, const uint64 digit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PermutationTable</type>
      <name>makeTable</name>
      <anchorfile>classph_1_1halton__detail_1_1_per_digit_permuter.html</anchorfile>
      <anchor>adbf263000f8258651d67676366a7653d</anchor>
      <arglist>(const std::size_t dimIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PeriodicSingleThreadExecutor</name>
    <filename>classph_1_1_periodic_single_thread_executor.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>Work</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>ad444f32e0e62ce275ab480b70e66c249</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicSingleThreadExecutor</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>a66c05ed0e6c8223b42e2362e378e0b64</anchor>
      <arglist>(uint64 periodMs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeriodicSingleThreadExecutor</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>af64959049a46d832fdc17ff1401e2174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeriodMs</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>a2a20d5fe108981c462ffb2340069c89e</anchor>
      <arglist>(uint64 periodMs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>ae0d99e0a963821503bf81cc0d5e7f746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>ae6f98444f2b9fc2d7e544dfe67929e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTermination</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>abee721f5c889477c640e33b864270b44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWork</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>a13fda4f4bc351f1c8d2bcfbd1c2d22bd</anchor>
      <arglist>(const Work &amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWork</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>a6093361a6054dcf3af5e043f2452b85a</anchor>
      <arglist>(Work &amp;&amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWork</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>a13fda4f4bc351f1c8d2bcfbd1c2d22bd</anchor>
      <arglist>(const Work &amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWork</name>
      <anchorfile>classph_1_1_periodic_single_thread_executor.html</anchorfile>
      <anchor>a6093361a6054dcf3af5e043f2452b85a</anchor>
      <arglist>(Work &amp;&amp;work)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PfmFile</name>
    <filename>classph_1_1_pfm_file.html</filename>
    <member kind="function">
      <type></type>
      <name>PfmFile</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>a95f92e9c6078483aa8854c911fa30a47</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PfmFile</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>afe246de55261711d29bcd5e84ace304a</anchor>
      <arglist>(const TFrame&lt; float32, 3 &gt; &amp;colorFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>aea07babd259b01f3044ee2ad5379e2af</anchor>
      <arglist>(const TFrame&lt; float32, 3 &gt; &amp;colorFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>a035b8be89482e1b26a65b67ee4e4e935</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>a5e336ff1d21e5df20f40c92eca82b692</anchor>
      <arglist>(const Path &amp;filePath) const</arglist>
    </member>
    <member kind="function">
      <type>const TFrame&lt; float32, 3 &gt; &amp;</type>
      <name>getColorFrame</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>ae0adfe361f77d592c905875ff539a5c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMonochromatic</name>
      <anchorfile>classph_1_1_pfm_file.html</anchorfile>
      <anchor>a6ebb26c9535e40b6c0651052b823a082</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::TPhotonMap::PhotonCenterCalculator</name>
    <filename>structph_1_1_t_photon_map_1_1_photon_center_calculator.html</filename>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_t_photon_map_1_1_photon_center_calculator.html</anchorfile>
      <anchor>aa6572dbf71d37b5ea4600b1c8d71b42b</anchor>
      <arglist>(const Photon &amp;photon) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PhotonMappingVisualizer</name>
    <filename>classph_1_1_photon_mapping_visualizer.html</filename>
    <base>ph::FrameVisualizer</base>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_photon_mapping_visualizer.html</anchorfile>
      <anchor>a08cb7af71d45d864af7a4504f74161bd</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override</arglist>
    </member>
    <member kind="function">
      <type>EPhotonMappingMode</type>
      <name>getMode</name>
      <anchorfile>classph_1_1_photon_mapping_visualizer.html</anchorfile>
      <anchor>a296621f3f4df9334d3496d6b9e65c0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ESampleFilter</type>
      <name>getSampleFilter</name>
      <anchorfile>classph_1_1_photon_mapping_visualizer.html</anchorfile>
      <anchor>a06acac3727b0bce5b32d95c9a5d6ea4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_photon_mapping_visualizer.html</anchorfile>
      <anchor>af48bb9d636fc3c347e3feabc4aed9155</anchor>
      <arglist>(TSdlOwnerClass&lt; PhotonMappingVisualizer &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SampleFilter</type>
      <name>makeSampleFilter</name>
      <anchorfile>classph_1_1_photon_mapping_visualizer.html</anchorfile>
      <anchor>ab6ff844d8c460147cee9bb4a49496738</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PMCommonParams</type>
      <name>makeCommonParams</name>
      <anchorfile>classph_1_1_photon_mapping_visualizer.html</anchorfile>
      <anchor>a63b2c73ee77801db7e35ae74f3b7426a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PhysicalActor</name>
    <filename>classph_1_1_physical_actor.html</filename>
    <base>ph::Actor</base>
    <class kind="struct">ph::PhysicalActor::SdlRotate</class>
    <class kind="struct">ph::PhysicalActor::SdlScale</class>
    <class kind="struct">ph::PhysicalActor::SdlTranslate</class>
    <member kind="function" virtualness="pure">
      <type>TransientVisualElement</type>
      <name>cook</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>adf00c99084b67815f70ab09033fff9f1</anchor>
      <arglist>(const CookingContext &amp;ctx, const PreCookReport &amp;report) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a43d037895a890ba568a287994800d89f</anchor>
      <arglist>(const real amountX, const real amountY, const real amountZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>aa2c2b644ed561feb47e615cda2105564</anchor>
      <arglist>(const math::Vector3R &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>ae439524e001352f8f8002e675b3f8c95</anchor>
      <arglist>(const math::Vector3R &amp;axis, const real additionanDegrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a0d7dd8a43a4dba86d7074e087748da2d</anchor>
      <arglist>(const math::QuaternionR &amp;additionalRotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a7ff5d1a9d08b681e581198860385d078</anchor>
      <arglist>(const real uniformAmount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a8c17b8c35dbd35e6b68d794838f6127f</anchor>
      <arglist>(const real amountX, const real amountY, const real amountZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a0521a72cdf5f3aa7bd0ff88ae2ec8a90</anchor>
      <arglist>(const math::Vector3R &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseTransform</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a2b8070049ecbb61ab3af9cfacad92b2e</anchor>
      <arglist>(const math::TDecomposedTransform&lt; real &gt; &amp;baseLocalToWorld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a9555565d804d151905a50be39a9e3f11</anchor>
      <arglist>(TSdlOwnerClass&lt; PhysicalActor &gt;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransformInfo</type>
      <name>m_localToWorld</name>
      <anchorfile>classph_1_1_physical_actor.html</anchorfile>
      <anchor>a105fa1f3f5f03cca17ea961c5d9b3b21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PictureData</name>
    <filename>classph_1_1_picture_data.html</filename>
    <member kind="function">
      <type></type>
      <name>PictureData</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a3eeb66c80d97cd291b7f24aac4bc7d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PictureData</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a4e185d90f2291ce7f6c2c0197a3542fa</anchor>
      <arglist>(math::Vector2S sizePx, std::size_t numPicComponents, EPicturePixelComponent componentType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PictureData</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a67ec95acc506b0e424afa1e9a142df7a</anchor>
      <arglist>(math::Vector2S sizePx, std::size_t numPicComponents, EPicturePixelComponent componentType, const PixelData *pixelData, std::size_t pixelDataSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PictureData</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a8f6d8bb247f2b435e46e57f45f2b7036</anchor>
      <arglist>(PictureData &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector2S &amp;</type>
      <name>getSizePx</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a0e8b4f5fb954fcc86cbea38bf9ce9a95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getWidthPx</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a902668f094b06a6bc48b872545822dcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getHeightPx</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a4e67651f03657d1bef8cb0777acab33e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numComponents</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>af99149d48312c80f4fe4cc08bb3c6b20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EPicturePixelComponent</type>
      <name>getComponentType</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a849a9e1997afc6055d5fc11bf817a502</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; std::byte &gt;</type>
      <name>getBytes</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a54ac3278d789f8a6cf3ff02bc318d737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; std::byte &gt;</type>
      <name>getBytes</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>abff5ac9af8889c85afac0e672ca989d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a90f81c16edd92cfe7d845e5ae4b4f77f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixels</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>ab11aa615ae46d2f2f6827f7b787053bd</anchor>
      <arglist>(const PixelData *pixelData, std::size_t numPixelDataElements)</arglist>
    </member>
    <member kind="function">
      <type>TFrame&lt; FrameComponent, N &gt;</type>
      <name>toFrame</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>af7ff646132e6c0df5a6ea02f486b9994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PictureData &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_picture_data.html</anchorfile>
      <anchor>a299676c492324ba3307718c0d8e0d6ac</anchor>
      <arglist>(PictureData &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PictureMeta</name>
    <filename>classph_1_1_picture_meta.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLayers</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a06d74c51d3e778e64f161454a00a4bac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numChannels</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a53cec6aab0c34d7f0229b9be49862f5b</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addDefaultLayer</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>afd627c7d436f810eb0383eabcccd26dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addEmptyLayer</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>ac30f8febe3eef4b7171d55da4696b660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2S &amp;</type>
      <name>sizePx</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>ad004e0719d6639fec5397637c8ceeb7e</anchor>
      <arglist>(std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>math::EColorSpace &amp;</type>
      <name>colorSpace</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a9f2018282cf857cd67bb0be9981bc3dc</anchor>
      <arglist>(std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumChannels</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a3813a5eabd1eb9f2705177e42878e529</anchor>
      <arglist>(std::size_t numChannels, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector2S &amp;</type>
      <name>getSizePx</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a36d3989f0aa10435211a6fff9acb55cb</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
    <member kind="function">
      <type>const math::EColorSpace &amp;</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>add9de3bec823dfb7e0bf2591f5a9a3c6</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>pictureName</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>ad517abd5cdbd201001baf82d4f9efdd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPictureName</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>ae7795454bad78ee8ea6c86ded30f6c24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>name</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a5c1d609d7401ebb2848a9c984fb0bcf3</anchor>
      <arglist>(std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a336cf091b221cec7db08f8ede34b3fb7</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; std::string &gt;</type>
      <name>channelNames</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a905a45e425db309cc65d89e9dd09e746</anchor>
      <arglist>(std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; std::string &gt;</type>
      <name>getChannelNames</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>aa45f1adeebdedea15daf20e51019bf54</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>pictureName</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>ad517abd5cdbd201001baf82d4f9efdd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPictureName</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>ae7795454bad78ee8ea6c86ded30f6c24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>name</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a5c1d609d7401ebb2848a9c984fb0bcf3</anchor>
      <arglist>(std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a336cf091b221cec7db08f8ede34b3fb7</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; std::string &gt;</type>
      <name>channelNames</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>a905a45e425db309cc65d89e9dd09e746</anchor>
      <arglist>(std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; std::string &gt;</type>
      <name>getChannelNames</name>
      <anchorfile>classph_1_1_picture_meta.html</anchorfile>
      <anchor>aa45f1adeebdedea15daf20e51019bf54</anchor>
      <arglist>(std::size_t layerIdx=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PinholeCamera</name>
    <filename>classph_1_1_pinhole_camera.html</filename>
    <base>ph::RectangularSensorReceiver</base>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>classph_1_1_pinhole_camera.html</anchorfile>
      <anchor>a9679c589bb78b424294114835adde303</anchor>
      <arglist>(const math::Vector2D &amp;sensorSize, const math::Transform *rasterToSensor, const math::RigidTransform *cameraToWorld)</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>receiveRay</name>
      <anchorfile>classph_1_1_pinhole_camera.html</anchorfile>
      <anchor>a8e7b7617f9ca693189748bb4594ad14d</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, Ray *out_ray) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalEmittedImportanceAndPdfW</name>
      <anchorfile>classph_1_1_pinhole_camera.html</anchorfile>
      <anchor>a6dff783b00ed510ce4581bfc08f4f59e</anchor>
      <arglist>(const math::Vector3R &amp;targetPos, math::Vector2R *const out_filmCoord, math::Vector3R *const out_importance, real *out_filmArea, real *const out_pdfW) const override</arglist>
    </member>
    <member kind="function">
      <type>const math::RigidTransform &amp;</type>
      <name>getCameraToWorld</name>
      <anchorfile>classph_1_1_pinhole_camera.html</anchorfile>
      <anchor>a02068b807938bef6d64e98a15d2f5404</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PixelBuffer2D</name>
    <filename>classph_1_1_pixel_buffer2_d.html</filename>
    <member kind="function">
      <type></type>
      <name>PixelBuffer2D</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>ab07e120ee5bf3086aeba8ea0b1aea9a5</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; size, std::size_t numPixelElements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelBuffer2D</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>aca6a11499024ba421b4a75e1a9ac8f8e</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; size, std::size_t numPixelElements, std::size_t numMipLevels)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PixelBuffer2D</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>ab00505ff14beacaec00902a8c09b57a0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual pixel_buffer::TPixel&lt; float64 &gt;</type>
      <name>fetchPixel</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>ac36f995deafbfdebb552349d104fa9f0</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; xy, std::size_t mipLevel) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>estimateMemoryUsageBytes</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>a6b79c7fe12585b04c3bfd27b688d99e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; uint32 &gt;</type>
      <name>getSize</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>a9862dd6ccfcb0f717c56645664bda4b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numPixelElements</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>ab597d654780cb62e668604ce9c275ba6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMipmap</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>ae2b65a24377902fb460d941e3fec01f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numMipLevels</name>
      <anchorfile>classph_1_1_pixel_buffer2_d.html</anchorfile>
      <anchor>a6e7c995149910f44e7930649003874f0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PlateScheduler</name>
    <filename>classph_1_1_plate_scheduler.html</filename>
    <base>ph::WorkScheduler</base>
    <member kind="function">
      <type></type>
      <name>PlateScheduler</name>
      <anchorfile>classph_1_1_plate_scheduler.html</anchorfile>
      <anchor>a604f15782655d656162e2d477843bb4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlateScheduler</name>
      <anchorfile>classph_1_1_plate_scheduler.html</anchorfile>
      <anchor>ae49e7481d403ff134a434d0953f990ec</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PLatLong01Sphere</name>
    <filename>classph_1_1_p_lat_long01_sphere.html</filename>
    <base>ph::PBasicSphere</base>
    <member kind="function">
      <type></type>
      <name>PLatLong01Sphere</name>
      <anchorfile>classph_1_1_p_lat_long01_sphere.html</anchorfile>
      <anchor>a73efa8417633d526c39f265296a7b47b</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_p_lat_long01_sphere.html</anchorfile>
      <anchor>a55d9b187a9b6733dc4cf28c44ae75b87</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPosSample</name>
      <anchorfile>classph_1_1_p_lat_long01_sphere.html</anchorfile>
      <anchor>a7b66db41d9dc86758ff5dced2d0a1e97</anchor>
      <arglist>(PrimitivePosSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPosPdf</name>
      <anchorfile>classph_1_1_p_lat_long01_sphere.html</anchorfile>
      <anchor>a908970d2dd0ebcd06384875395e6315f</anchor>
      <arglist>(PrimitivePosPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2R</type>
      <name>posToUV</name>
      <anchorfile>classph_1_1_p_lat_long01_sphere.html</anchorfile>
      <anchor>ae7f9d3735c4fc2e9976c21f989c862bf</anchor>
      <arglist>(const math::Vector3R &amp;position) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PLatLongEnvSphere</name>
    <filename>classph_1_1_p_lat_long_env_sphere.html</filename>
    <base>ph::PBasicSphere</base>
    <member kind="function">
      <type></type>
      <name>PLatLongEnvSphere</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a44d9e42201895b929eceb63cf7a8114a</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PLatLongEnvSphere</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>ac27e700a7213f85d3b387935a7af3b05</anchor>
      <arglist>(real radius, const math::StaticRigidTransform *localToWorld, const math::StaticRigidTransform *worldToLocal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a021ee0e189084d1047de6766bd22efe9</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a1413932615d2fb24f9ae0bc55736e29a</anchor>
      <arglist>(const Ray &amp;ray) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a19903549b743c79401f6aeb8a690333a</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPosPdf</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a8200d876050a6fc1f08e86b0a2110a87</anchor>
      <arglist>(PrimitivePosPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPosSample</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>ab5b0f9014006aa9d15e6312c6ec46939</anchor>
      <arglist>(PrimitivePosSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a62efab606c54547ca10d717acee6b8b1</anchor>
      <arglist>(const math::AABB3D &amp;volume) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>ab365271a75cb844ac3bb3a1670812737</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcExtendedArea</name>
      <anchorfile>classph_1_1_p_lat_long_env_sphere.html</anchorfile>
      <anchor>a82ef3186774036a140db3979d63d76aa</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::PlyElement</name>
    <filename>structph_1_1_ply_element.html</filename>
    <member kind="function">
      <type></type>
      <name>PlyElement</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a69d9190cc96fd9860be6177779446cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a5cdc130f6ed433d2a02d18eaa3bca0b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsList</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a93c5cc7057583f036d30599e6f25c23e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlyProperty *</type>
      <name>findProperty</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>ad2ff924870e282739ce968106beb7393</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type>PlyPropertyValues</type>
      <name>propertyValues</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a42206985edc3e7a8f26ec1f009cc50bf</anchor>
      <arglist>(PlyProperty *prop)</arglist>
    </member>
    <member kind="function">
      <type>PlyPropertyListValues</type>
      <name>listPropertyValues</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a0b7737f328e538bcc3a6f51e8b7f2761</anchor>
      <arglist>(PlyProperty *prop)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a1ffb3e3de95a3f5a5c8d82dc31ad5483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>ad941e7360fbf019602acc915bc1445a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PlyProperty &gt;</type>
      <name>properties</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a7e6dec011d4ffead02aa0c80e7f62503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>strideSize</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>abd9aa04e99396208881f71970b3059b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::byte &gt;</type>
      <name>rawBuffer</name>
      <anchorfile>structph_1_1_ply_element.html</anchorfile>
      <anchor>a1fd3744a53e99e0f3e119820278825c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PlyFile</name>
    <filename>classph_1_1_ply_file.html</filename>
    <member kind="function">
      <type></type>
      <name>PlyFile</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>abe2da97d1ed09a18b0fd576b43b724e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlyFile</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>af9ec69564cce0914e316a6f9955c90fb</anchor>
      <arglist>(const Path &amp;plyFilePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlyFile</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>abdd51491f14537530a38137e4a7bdd8c</anchor>
      <arglist>(const Path &amp;plyFilePath, const PlyIOConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>PlyElement *</type>
      <name>findElement</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>acdf539b57e9aa511ee0c6b8fffb48231</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>ac2eef48b3b6b95769108041d3a59daae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EPlyDataFormat</type>
      <name>getInputFormat</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>ad28518b9cf1d0e18db2101c1bf4cb505</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputFormat</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a8dacf668956dbeaff1e82197fe8a48e6</anchor>
      <arglist>(EPlyDataFormat format)</arglist>
    </member>
    <member kind="function">
      <type>EPlyDataFormat</type>
      <name>getOutputFormat</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a5f1a5a4a7063ea6ad75b78f8c7cd9462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputFormat</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a53cbaa497ccdfb15139d63662815bfb9</anchor>
      <arglist>(EPlyDataFormat format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFile</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a96e520467f8a0c1b0420543bff3a0f2e</anchor>
      <arglist>(const Path &amp;plyFilePath, const PlyIOConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearBuffer</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>aec991e2f6686c2d08c388d4d75f0ccbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SemanticVersion</type>
      <name>getVersion</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>ad7e17fc3c6a1a1534a65946b9fdbd788</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numComments</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a16d64f74c527ebb954c2f63d43f21218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getComment</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a5e5caef9ebc25bdbe46c312a41cdc86a</anchor>
      <arglist>(std::size_t commentIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numComments</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a16d64f74c527ebb954c2f63d43f21218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getComment</name>
      <anchorfile>classph_1_1_ply_file.html</anchorfile>
      <anchor>a5e5caef9ebc25bdbe46c312a41cdc86a</anchor>
      <arglist>(std::size_t commentIndex) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::PlyIOConfig</name>
    <filename>structph_1_1_ply_i_o_config.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>bIgnoreComments</name>
      <anchorfile>structph_1_1_ply_i_o_config.html</anchorfile>
      <anchor>a8c2e0f4f00a9f27979884607eea89153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bPreloadIntoMemory</name>
      <anchorfile>structph_1_1_ply_i_o_config.html</anchorfile>
      <anchor>a1a8958f6d4f0736deac2537bc0684209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>preloadMemoryThreshold</name>
      <anchorfile>structph_1_1_ply_i_o_config.html</anchorfile>
      <anchor>a6bc00e209ce16e142ea5365a97f9dd67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>reduceStorageMemoryThreshold</name>
      <anchorfile>structph_1_1_ply_i_o_config.html</anchorfile>
      <anchor>abdb578a0e78b06f26da055e0d918db87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::PlyProperty</name>
    <filename>structph_1_1_ply_property.html</filename>
    <member kind="function">
      <type></type>
      <name>PlyProperty</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>ab560bba8b17b68bd19c0abb87d2a0831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isList</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>a356f746d643da2ed2fcdc3fa6f741c27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixedSizeList</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>ad5b0e4f076a5abc8ee87aeb943bfe159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>afd877c471d329ec60c22cc1c046c010c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EPlyDataType</type>
      <name>dataType</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>ab2370e6f5fb0feebdc3e3f0a674ff3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EPlyDataType</type>
      <name>listSizeType</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>acb8ff640cde701409317ba0cc5088375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>strideOffset</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>ac10f111bc12038b6284bace029c9569e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>fixedListSize</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>a336a634da4ee43289bba9c9f1e22378b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::byte &gt;</type>
      <name>rawListBuffer</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>a03540e180098530dc7605efd5fecbe12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>listSizesPrefixSum</name>
      <anchorfile>structph_1_1_ply_property.html</anchorfile>
      <anchor>af9e5e40f3f6052be100e2d68a825e7c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PlyPropertyListValues</name>
    <filename>classph_1_1_ply_property_list_values.html</filename>
    <member kind="function">
      <type>float64</type>
      <name>get</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>a349591f747f299ff8025d66f5cfe6ca4</anchor>
      <arglist>(std::size_t listIndex, std::size_t listElementIndex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>a6855c1c9e010d46518ddc94e64266d5a</anchor>
      <arglist>(std::size_t listIndex, std::size_t listElementIndex, float64 value)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>ad71bcb6a55d94d81c4cfde6a17486bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>listSize</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>a1997585738191aed6d9c5bba01e6b316</anchor>
      <arglist>(std::size_t listIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixedSizeList</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>ab8fb87145c8a284b8edc2e74d0106875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>fixedListSize</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>ad2f775af7fe24d9894461b2467a7a147</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_ply_property_list_values.html</anchorfile>
      <anchor>aa5ca9ebb19eb48755ea061da5b993f96</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PlyPropertyValues</name>
    <filename>classph_1_1_ply_property_values.html</filename>
    <member kind="function">
      <type>float64</type>
      <name>get</name>
      <anchorfile>classph_1_1_ply_property_values.html</anchorfile>
      <anchor>aa5ec6b331fc8f5e3625ecae5fbf47a23</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_ply_property_values.html</anchorfile>
      <anchor>a84c749fdc32127ee9d0bf306585840d3</anchor>
      <arglist>(std::size_t index, float64 value)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_ply_property_values.html</anchorfile>
      <anchor>a92370718d6036cd06c15ee89303803e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_ply_property_values.html</anchorfile>
      <anchor>ab59d2cb193fd8778af34f91b572810ec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PMAtomicStatistics</name>
    <filename>classph_1_1_p_m_atomic_statistics.html</filename>
    <member kind="function">
      <type></type>
      <name>PMAtomicStatistics</name>
      <anchorfile>classph_1_1_p_m_atomic_statistics.html</anchorfile>
      <anchor>aecd58d909b99e614547a0ed952b64b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classph_1_1_p_m_atomic_statistics.html</anchorfile>
      <anchor>a2e6ab8759fef548db549f7f59370714b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumTracedPhotons</name>
      <anchorfile>classph_1_1_p_m_atomic_statistics.html</anchorfile>
      <anchor>a531759a5877e5352e0231b06ff01d963</anchor>
      <arglist>(std::size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementNumProcessedSteps</name>
      <anchorfile>classph_1_1_p_m_atomic_statistics.html</anchorfile>
      <anchor>a6b464ca71665f7f441da7d598d308430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numTracedPhotons</name>
      <anchorfile>classph_1_1_p_m_atomic_statistics.html</anchorfile>
      <anchor>a68f2db2a39fe71387c96c4e554ff98fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numProcessedSteps</name>
      <anchorfile>classph_1_1_p_m_atomic_statistics.html</anchorfile>
      <anchor>a4bcee044ab205d74bc3ce8ba316c0f22</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PMCommonParams</name>
    <filename>classph_1_1_p_m_common_params.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numPhotons</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a968be2f5a5c4e1eaad2d43f54a912c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numPasses</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a2c2d4ce44fc11d2b7f1606ef5109e2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numSamplesPerPixel</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>ab4ab64abc18c0ff0bf7df38f462c0bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>kernelRadius</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a6f6ce6d2ba1faa173486f57649f67f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>minPhotonPathLength</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>af4c882b6325ba8cf8d13266544a843b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>maxPhotonPathLength</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a4e1b17694b07b42c36985325b265f52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>alpha</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a8bec8052cefff4dfbafe8b69bbe4361d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>glossyMergeBeginLength</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a076d4d450f0a8c9c6481fb0bd337f069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>stochasticViewSampleBeginLength</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>a65be7515471087915392cf1b5a0b524c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>DEFAULT_MAX_PATH_LENGTH</name>
      <anchorfile>classph_1_1_p_m_common_params.html</anchorfile>
      <anchor>add7ec0cd3fbcd49279d13ef7a77f4b57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PMRendererBase</name>
    <filename>classph_1_1_p_m_renderer_base.html</filename>
    <base>ph::Renderer</base>
    <member kind="function">
      <type></type>
      <name>PMRendererBase</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a8b015c806b8713273ba1e5c75579288f</anchor>
      <arglist>(PMCommonParams commonParams, Viewport viewport, SampleFilter filter, uint32 numWorkers)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a7dde3a27b56e36524013e132a6f64a88</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>acd65d5adb7540776476f1c37ae62da79</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>acf49f7971a70e0dea9d4d37da7453d19</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a88755057d524db3fd5a5fadb39238c40</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a997091436e8c756b17529c18ee300673</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a010fe894997881bb69fc84a2b7043d21</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUpdate</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a65a8832095f9febcaaac1589e6062948</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world) override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>asyncPollUpdatedRegions</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a951e00b9107119f6415d0a625f1cf5ed</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions) override</arglist>
    </member>
    <member kind="function">
      <type>const SampleFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>af600c58bbe37cff34302906a2a9dbdd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PMCommonParams &amp;</type>
      <name>getCommonParams</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>acb973bb3c97276569d889395d1bc17d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scene *</type>
      <name>getScene</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>aabdb7e6e8fb6003e0de5996ff3e4622e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Receiver *</type>
      <name>getReceiver</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a6c6fee711fafaf7e2210c836b989466d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SampleGenerator *</type>
      <name>getSampleGenerator</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a77029782d043f1569cd0b235c61b0303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TSynchronized&lt; HdrRgbFilm &gt; &amp;</type>
      <name>getPrimaryFilm</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a7fcbefa7b0ef03b9217a912c1e54e998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PMAtomicStatistics &amp;</type>
      <name>getStatistics</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a773ed8cc02107fc1bd61c25c4d287c09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncDevelopPrimaryFilm</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a234c12327545167df4b9600c12c777e8</anchor>
      <arglist>(const Region &amp;region, HdrRgbFrame &amp;out_frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncMergeToPrimaryFilm</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a9a3c08f2d4315d4717e013031267fc58</anchor>
      <arglist>(const HdrRgbFilm &amp;srcFilm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncReplacePrimaryFilm</name>
      <anchorfile>classph_1_1_p_m_renderer_base.html</anchorfile>
      <anchor>a650d3a20d9872ecda95880883eb3df17</anchor>
      <arglist>(const HdrRgbFilm &amp;srcFilm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PointSource</name>
    <filename>classph_1_1_point_source.html</filename>
    <base>ph::AreaSource</base>
    <member kind="function">
      <type></type>
      <name>PointSource</name>
      <anchorfile>classph_1_1_point_source.html</anchorfile>
      <anchor>a6c16e78b33d8f09eeb0a7d46b28665bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSource</name>
      <anchorfile>classph_1_1_point_source.html</anchorfile>
      <anchor>aa758f9a76a08cf27f0bf9cd6e8b5f6e9</anchor>
      <arglist>(const math::Vector3R &amp;linearSrgbColor, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSource</name>
      <anchorfile>classph_1_1_point_source.html</anchorfile>
      <anchor>aa37a2d8ba60b3374bacbff2fb5a8e197</anchor>
      <arglist>(const math::Spectrum &amp;color, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genAreas</name>
      <anchorfile>classph_1_1_point_source.html</anchorfile>
      <anchor>add00935359bfde70e5c270577b179d53</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_point_source.html</anchorfile>
      <anchor>aed24ea263ec5ea6d513fa297c3b0dc0b</anchor>
      <arglist>(TSdlOwnerClass&lt; PointSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PreCookReport</name>
    <filename>classph_1_1_pre_cook_report.html</filename>
    <member kind="function">
      <type></type>
      <name>PreCookReport</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>a42bf0f54bcc71a4b889391c0f902881d</anchor>
      <arglist>(SdlResourceId rawResourceId)</arglist>
    </member>
    <member kind="function">
      <type>PreCookReport &amp;</type>
      <name>markAsCookable</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>a1404c119858bb62107e2641c0d75a521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PreCookReport &amp;</type>
      <name>markAsUncookable</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>a522a79d8fe6bffbc070a8ec2d0db3918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PreCookReport &amp;</type>
      <name>setBaseTransforms</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>a1cd4cdeceae5e0b52c91b201ad469123</anchor>
      <arglist>(const math::Transform *localToWorld, const math::Transform *worldToLocal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCookable</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>ab54587536e1cf7fb279aaa0db79208d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Transform *</type>
      <name>getBaseLocalToWorld</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>a16100b6a77d40628ff38e6d7bcd8374c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Transform *</type>
      <name>getBaseWorldToLocal</name>
      <anchorfile>classph_1_1_pre_cook_report.html</anchorfile>
      <anchor>a65a9a9d266cacd01386b32a9cccd7ab2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PreCookResourceCollectionProxy</name>
    <filename>classph_1_1_pre_cook_resource_collection_proxy.html</filename>
    <member kind="function">
      <type></type>
      <name>PreCookResourceCollectionProxy</name>
      <anchorfile>classph_1_1_pre_cook_resource_collection_proxy.html</anchorfile>
      <anchor>a239df4b6247591e82e57b845507d740a</anchor>
      <arglist>(CookedResourceCollection &amp;resources)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PreethamTexture</name>
    <filename>classph_1_1_preetham_texture.html</filename>
    <base>ph::TTexture&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>PreethamTexture</name>
      <anchorfile>classph_1_1_preetham_texture.html</anchorfile>
      <anchor>a7487041cd7aa9d9fa3d264479ec06e15</anchor>
      <arglist>(real phiSun, real thetaSun, real turbidity, real energyScale=1.0_r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_preetham_texture.html</anchorfile>
      <anchor>a6e4e0da81f3737e4ac39a703a01299e5</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::Spectrum *out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Primitive</name>
    <filename>classph_1_1_primitive.html</filename>
    <base>ph::Intersectable</base>
    <member kind="function" virtualness="pure">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>ae265b7076813fa1c9684f6b128447c91</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>a68c3a4877450bbc0bf0230558b1bbb67</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>a9ab017656ee45d0df91922f3f4f94ff9</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>af5e204e52b0ad4779a6cd888495a248d</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>genPosSample</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>adf10fb27ccbff49031a7ad82b19f1417</anchor>
      <arglist>(PrimitivePosSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPosPdf</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>aa1b961543e99677821a11ccadc588cc9</anchor>
      <arglist>(PrimitivePosPdfQuery &amp;query) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real</type>
      <name>calcExtendedArea</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>a2c352873161e8bab85ddb4a86eb489c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const PrimitiveMetadata *</type>
      <name>getMetadata</name>
      <anchorfile>classph_1_1_primitive.html</anchorfile>
      <anchor>a967b40614b286c46aed37e9cd81fec0e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitiveBuildingMaterial</name>
    <filename>classph_1_1_primitive_building_material.html</filename>
    <member kind="function">
      <type></type>
      <name>PrimitiveBuildingMaterial</name>
      <anchorfile>classph_1_1_primitive_building_material.html</anchorfile>
      <anchor>afda443f44a356380e1105216daae4afa</anchor>
      <arglist>(PrimitiveMetadata *const metadata)</arglist>
    </member>
    <member kind="variable">
      <type>PrimitiveMetadata *</type>
      <name>metadata</name>
      <anchorfile>classph_1_1_primitive_building_material.html</anchorfile>
      <anchor>a51d6141753beaf8dc09a72f4ad68a1ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitiveChannel</name>
    <filename>classph_1_1_primitive_channel.html</filename>
    <member kind="function">
      <type></type>
      <name>PrimitiveChannel</name>
      <anchorfile>classph_1_1_primitive_channel.html</anchorfile>
      <anchor>a166ad28ca1d65ba077ff9151d42eec18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveChannel</name>
      <anchorfile>classph_1_1_primitive_channel.html</anchorfile>
      <anchor>a24f2bae903265c84cd9b50cc3ff46a15</anchor>
      <arglist>(const std::shared_ptr&lt; UvwMapper &gt; &amp;mapper)</arglist>
    </member>
    <member kind="function">
      <type>const UvwMapper *</type>
      <name>getMapper</name>
      <anchorfile>classph_1_1_primitive_channel.html</anchorfile>
      <anchor>a5611d18c5075abcfaed8a497cb2166b6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitiveMetadata</name>
    <filename>classph_1_1_primitive_metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>PrimitiveMetadata</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a051ebfd72fe864cce9eec06c3d0d5a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>addChannel</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>ae4671c35812d943d6ceff92dbe84ab6a</anchor>
      <arglist>(const PrimitiveChannel &amp;channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannel</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a9e212ed9b674085d8335ec01784bb98e</anchor>
      <arglist>(uint8 channelId, PrimitiveChannel channel)</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveChannel &amp;</type>
      <name>getChannel</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a6c5a384d085d3ed16e9955efaf8b6b99</anchor>
      <arglist>(uint8 channelId) const</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveChannel &amp;</type>
      <name>getDefaultChannel</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a47bd4a5c94f7baf77505fdcb54809775</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelIdValid</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>afa78416a23ecdf73d9bbcaf0a99d9685</anchor>
      <arglist>(uint8 channelId) const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceBehavior &amp;</type>
      <name>getSurface</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>aa1de761e2aba6c2e38782234fb84c729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VolumeBehavior &amp;</type>
      <name>getInterior</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a063003f0b61e94427868585a3980e312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VolumeBehavior &amp;</type>
      <name>getExterior</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>afd6a1de28956e9a1180b7050d1eac74e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceBehavior &amp;</type>
      <name>getSurface</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a2dddf84fddc7d3d4e1b6162c4b8a79ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VolumeBehavior &amp;</type>
      <name>getInterior</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a9572ff0f6f46e5563e3ff5956a7ba64e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VolumeBehavior &amp;</type>
      <name>getExterior</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>adcb6e5a8642a5556061d5a28f7909ff5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>INVALID_CHANNEL_ID</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a4a71531bfd00b4b181d597c168629c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DEFAULT_CHANNEL_ID</name>
      <anchorfile>classph_1_1_primitive_metadata.html</anchorfile>
      <anchor>a89960b205df7a03bc03ae59362cff7c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitivePosPdfInput</name>
    <filename>classph_1_1_primitive_pos_pdf_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>a75d768b0c0e10a61170f52d0dc4e608a</anchor>
      <arglist>(const PrimitivePosSampleInput &amp;posInput, const SurfaceHit &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>a21ea5e2bc2f4d5b3987bfbba5f220f80</anchor>
      <arglist>(const DirectEnergyPdfInput &amp;pdfInput, const lta::PDF &amp;uvwPdf={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>aa2aac8a7436e70a13d1412ae6632bb49</anchor>
      <arglist>(const SurfaceHit &amp;X, const std::optional&lt; math::Vector3R &gt; &amp;observationPos=std::nullopt, const lta::PDF &amp;uvwPdf={})</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceHit &amp;</type>
      <name>getX</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>a71f129c7fa6607cf288fa414486e3715</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getPos</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>a1eda38710b960d6c8820d18d4958d431</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getUvw</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>aa80beab69f9ecc35a846d26eccc8ca01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getUvwPdf</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>a3c20a5a7867bed2bfab686f5a1b9a1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; math::Vector3R &gt; &amp;</type>
      <name>getObservationPos</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_input.html</anchorfile>
      <anchor>a52ef9e4eb3e76a6eba3354467f73f03b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitivePosPdfOutput</name>
    <filename>classph_1_1_primitive_pos_pdf_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setPdf</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_output.html</anchorfile>
      <anchor>aa54a3c2c5b8af38073e53c806afcc5c9</anchor>
      <arglist>(const lta::PDF &amp;pdf)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfA</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_output.html</anchorfile>
      <anchor>a072658c795adaecc13915eb7b5b1c105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdf</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_output.html</anchorfile>
      <anchor>addb136b006be104ae6ae29ffd825d063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_output.html</anchorfile>
      <anchor>ac3f38aecc44b6cf175cbfa8e851f9899</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitivePosPdfQuery</name>
    <filename>classph_1_1_primitive_pos_pdf_query.html</filename>
    <member kind="typedef">
      <type>PrimitivePosPdfInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_query.html</anchorfile>
      <anchor>aacf9d4e27d50c8946d5fd983bfd1d0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrimitivePosPdfOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_query.html</anchorfile>
      <anchor>a201728418f3cbb79652762395e4f8cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitivePosPdfQuery</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_query.html</anchorfile>
      <anchor>a41300103b5dcb9912b5c39ebfb784b1a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_query.html</anchorfile>
      <anchor>a166ecea704ab2328260b0e74511c50f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_primitive_pos_pdf_query.html</anchorfile>
      <anchor>a6ab49cbd8bcf50cd8f603d3d8f4d1c53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitivePosSampleInput</name>
    <filename>classph_1_1_primitive_pos_sample_input.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>a0d342752e21121a00d8d545bf2f229b5</anchor>
      <arglist>(const DirectEnergySampleInput &amp;directInput, const math::Vector3R &amp;uvw={0, 0, 0}, const lta::PDF &amp;uvwPdf={}, bool suggestDir=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>a383c346e6440733c06ee85f1a7cd3c0f</anchor>
      <arglist>(const Time &amp;time, const std::optional&lt; math::Vector3R &gt; &amp;observationPos=std::nullopt, const math::Vector3R &amp;uvw={0, 0, 0}, const lta::PDF &amp;uvwPdf={}, bool suggestDir=false)</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getTime</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>a12a6b79543185375ba6e23ab4c0867b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; math::Vector3R &gt; &amp;</type>
      <name>getObservationPos</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>a994dd6f13e557e918e4365be616066f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUvw</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>ae735ea8356b1a6aed72c03130fcb1671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getUvwPdf</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>ac239852d88bdf834c134377c97a661dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>suggestDir</name>
      <anchorfile>classph_1_1_primitive_pos_sample_input.html</anchorfile>
      <anchor>a182e12f4046a9ff09b7283ba51737321</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitivePosSampleOutput</name>
    <filename>classph_1_1_primitive_pos_sample_output.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setPos</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a24be04bcef7c8bd42d4cce6c5e539a0d</anchor>
      <arglist>(const math::Vector3R &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdfPos</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a3484b3684364aef4b1cb3cbfe3ce2171</anchor>
      <arglist>(const lta::PDF &amp;pdfPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdfDir</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a4705b1af3a94291cc50cd4e99374d513</anchor>
      <arglist>(const lta::PDF &amp;pdfDir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservationRay</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>ad24aadc0360bc6789b3fcd426142ff72</anchor>
      <arglist>(const Ray &amp;observationRay)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getPos</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>ab3ef8309ee7d93b9d41eb9a99804e55d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getDir</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a607a00dfb4a207ca10813aed54178385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfA</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>aabf309275e64401a9c61c0ccea346fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPdfW</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>addab49805e0e436e5df164a5fc659509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdfPos</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a4af5ff02126f383b1a36c0b204f773f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const lta::PDF &amp;</type>
      <name>getPdfDir</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a71e4a449daeb1e15f62648d852d945f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ray &amp;</type>
      <name>getObservationRay</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>a2223b2ae513f7bcd80d9e5811f6da8db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_primitive_pos_sample_output.html</anchorfile>
      <anchor>ad8cc36e1ca031fbfb9a981a61b5c0495</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PrimitivePosSampleQuery</name>
    <filename>classph_1_1_primitive_pos_sample_query.html</filename>
    <member kind="typedef">
      <type>PrimitivePosSampleInput</type>
      <name>Input</name>
      <anchorfile>classph_1_1_primitive_pos_sample_query.html</anchorfile>
      <anchor>ae9b5f783dac352e8482a1b0b75d40c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrimitivePosSampleOutput</type>
      <name>Output</name>
      <anchorfile>classph_1_1_primitive_pos_sample_query.html</anchorfile>
      <anchor>add7c163c8c05b680170b78f7e69aea79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitivePosSampleQuery</name>
      <anchorfile>classph_1_1_primitive_pos_sample_query.html</anchorfile>
      <anchor>a768db17d3b7af75b1cdd5e0b54aa13e4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_primitive_pos_sample_query.html</anchorfile>
      <anchor>a6b13e0f42706441037fd30d02a3556b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_primitive_pos_sample_query.html</anchorfile>
      <anchor>aa928c0c2fe11ac0cf89473dcb38509da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ProbabilisticProgressivePMRenderer</name>
    <filename>classph_1_1_probabilistic_progressive_p_m_renderer.html</filename>
    <base>ph::PMRendererBase</base>
    <member kind="function">
      <type></type>
      <name>ProbabilisticProgressivePMRenderer</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a890dba03151e3ca812c3ec132a3d0771</anchor>
      <arglist>(PMCommonParams commonParams, Viewport viewport, SampleFilter filter, uint32 numWorkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a4ffe096deec23bd3a76426eb25255c21</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a6ac4ec33606e785b9bca5c72156b6d9b</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>ad79d013d0404f3dba927daabf0a27122</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a4a571363087d5e629eb3f4c7bbe95228</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>ad42dc9c2205f608416ec384a37b12df0</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_probabilistic_progressive_p_m_renderer.html</anchorfile>
      <anchor>ae6ed78ebb44af58f51eecb3f310fc69f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSPSCRingBuffer::ProducerGuard</name>
    <filename>classph_1_1_t_s_p_s_c_ring_buffer_1_1_producer_guard.html</filename>
    <base protection="private">ph::INoCopyAndMove</base>
    <member kind="function">
      <type></type>
      <name>ProducerGuard</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer_1_1_producer_guard.html</anchorfile>
      <anchor>aa5a79ce891443f60632f7e88ba58c208</anchor>
      <arglist>(TSPSCRingBuffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProducerGuard</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer_1_1_producer_guard.html</anchorfile>
      <anchor>ac881ccadd0fc55e7b293c3241e5d9f88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ProgressivePMRenderer</name>
    <filename>classph_1_1_progressive_p_m_renderer.html</filename>
    <base>ph::PMRendererBase</base>
    <member kind="function">
      <type></type>
      <name>ProgressivePMRenderer</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>a691ff2529433e6b2ea25f616dd43ed8f</anchor>
      <arglist>(PMCommonParams commonParams, Viewport viewport, SampleFilter filter, uint32 numWorkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>ae5d8b2f94d3e4b268df08a240dd2743b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>a5faece552062809d4d6e3ad00e627518</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>a39e941bd02782a6a3a9752f69321702f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>a42ec0c43170decc1aa3593a6f37b07c4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>ad51c9b9c393c274de490111258d3e042</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_progressive_p_m_renderer.html</anchorfile>
      <anchor>ac58331a68ea0e0331558772a136e6684</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::PTriangle</name>
    <filename>classph_1_1_p_triangle.html</filename>
    <base>ph::Primitive</base>
    <member kind="function">
      <type></type>
      <name>PTriangle</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>ac214ee014ccd8b1b170afaf4532049a1</anchor>
      <arglist>(const math::Vector3R &amp;vA, const math::Vector3R &amp;vB, const math::Vector3R &amp;vC)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>aea355fb93eb215f3f048e234c4ff2623</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a864d6a50bb1f2a4b1be3253bf475b6ff</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>af51854a66ab313bd99caf88407ac2a37</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>afef96de5ae97eb477b7d64bf96aed6d5</anchor>
      <arglist>(const math::AABB3D &amp;volume) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>ac8552d3dd854599a6b0c74fc07c85a5f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPosSample</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a551a73fc5c95f7c7f0384cecc663398b</anchor>
      <arglist>(PrimitivePosSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPosPdf</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>afc95e249741ee9b00b003ef820794366</anchor>
      <arglist>(PrimitivePosPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcExtendedArea</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>ad2715bcab6e94d46a7a0f92465b98b73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNa</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a6d556582774633a9d7a34c4f45096a2e</anchor>
      <arglist>(const math::Vector3R &amp;nA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNb</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a74908ccfa979a0aa2d0ac5d8fe136797</anchor>
      <arglist>(const math::Vector3R &amp;nB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNc</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a94e5b128f697107368c3101d0be673ac</anchor>
      <arglist>(const math::Vector3R &amp;nC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUVWa</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a53ca3299f05872f3d821c317211ac10b</anchor>
      <arglist>(const math::Vector3R &amp;uvwA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUVWb</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a100b02b329128a6b29f4477ebc55f899</anchor>
      <arglist>(const math::Vector3R &amp;uvwB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUVWc</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>abc359ab332bfea1e1244806ed3fe97ae</anchor>
      <arglist>(const math::Vector3R &amp;uvwC)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUVWa</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a66c95bc851a87bfe5db8159442620491</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUVWb</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a3e38f0ec558d59bceebd49a26ed1d64b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getUVWc</name>
      <anchorfile>classph_1_1_p_triangle.html</anchorfile>
      <anchor>a9f02baa82fa398de288f4b73da6b02a7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::PtVolumetricEstimator</name>
    <filename>classph_1_1lta_1_1_pt_volumetric_estimator.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sample</name>
      <anchorfile>classph_1_1lta_1_1_pt_volumetric_estimator.html</anchorfile>
      <anchor>a6613fb074e21e4fbf1c59db95789368f</anchor>
      <arglist>(const Scene &amp;scene, const SurfaceHit &amp;Xs, const math::Vector3R &amp;L, SurfaceHit *out_Xe, math::Vector3R *out_V, math::Spectrum *out_weight, math::Spectrum *out_radiance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RadianceSensor</name>
    <filename>classph_1_1_radiance_sensor.html</filename>
    <member kind="function">
      <type></type>
      <name>RadianceSensor</name>
      <anchorfile>classph_1_1_radiance_sensor.html</anchorfile>
      <anchor>a0ea61b47bfb1f5d5d170fe7a30ce6670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>accuR</name>
      <anchorfile>classph_1_1_radiance_sensor.html</anchorfile>
      <anchor>ac5949eaf0ef90ed5104be4b12bdb2bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>accuG</name>
      <anchorfile>classph_1_1_radiance_sensor.html</anchorfile>
      <anchor>ade6abacfd5dce497ea8310a23093e3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>accuB</name>
      <anchorfile>classph_1_1_radiance_sensor.html</anchorfile>
      <anchor>ab888772f9d9b9e49137c780b2d8750af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>accuWeight</name>
      <anchorfile>classph_1_1_radiance_sensor.html</anchorfile>
      <anchor>ae04454680755b8c6e2de831217dbd81d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::Random</name>
    <filename>classph_1_1math_1_1_random.html</filename>
    <member kind="function" static="yes">
      <type>static real</type>
      <name>sample</name>
      <anchorfile>classph_1_1math_1_1_random.html</anchorfile>
      <anchor>a8b21fc3c3cbf0ac4363591caafdce8af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::array&lt; T, N &gt;</type>
      <name>sampleND</name>
      <anchorfile>classph_1_1math_1_1_random.html</anchorfile>
      <anchor>a01d8e76f7d478dd44f072a4bbb445a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>index</name>
      <anchorfile>classph_1_1math_1_1_random.html</anchorfile>
      <anchor>a264cb8fbbeb192e1a0d0763669eb965b</anchor>
      <arglist>(std::size_t lowerBound, std::size_t upperBound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>bits32</name>
      <anchorfile>classph_1_1math_1_1_random.html</anchorfile>
      <anchor>ae4428eef0a5b46d46e25608b4cb60862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>bits64</name>
      <anchorfile>classph_1_1math_1_1_random.html</anchorfile>
      <anchor>af1ab56a753447f8a8b960fec08ab7196</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RasterFileImage</name>
    <filename>classph_1_1_raster_file_image.html</filename>
    <base>ph::RasterImageBase</base>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>afcf2ee3f8430791c8831fb7f3911942b</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>adf97b0878cdfaff2dc9414894c553caf</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>loadRegularPicture</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>ad8d856903e3647324eeb23fb23838bbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilePath</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>a32731e56bb826ef45966a4ab220f437f</anchor>
      <arglist>(Path filePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>a8f2305ca1a433bd8504c566802885d61</anchor>
      <arglist>(TSdlOwnerClass&lt; RasterFileImage &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::shared_ptr&lt; PixelBuffer2D &gt;</type>
      <name>loadPixelBuffer</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>a7f40c041f9ecaa1496c3c2255d5edc8a</anchor>
      <arglist>(const CookingContext &amp;ctx, math::EColorSpace *out_colorSpace=nullptr, pixel_texture::EPixelLayout *out_pixelLayout=nullptr) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>pixel_texture::ESampleMode</type>
      <name>getTextureSampleMode</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>ac51ec298c071b7ea825fd124adc46171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>pixel_texture::EWrapMode</type>
      <name>getTextureWrapModeS</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>a8b779dd2215d2fbee216570dfdebd4ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>pixel_texture::EWrapMode</type>
      <name>getTextureWrapModeT</name>
      <anchorfile>classph_1_1_raster_file_image.html</anchorfile>
      <anchor>a7611ad7a2489e78b9413f1265002d564</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RasterImageBase</name>
    <filename>classph_1_1_raster_image_base.html</filename>
    <base>ph::Image</base>
    <member kind="function" virtualness="pure">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>afd3994b137d8fd8e5e4d1ff889d51d0e</anchor>
      <arglist>(const CookingContext &amp;ctx) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>aefb6f622f05a6be8690ce14fccce346b</anchor>
      <arglist>(const CookingContext &amp;ctx) override=0</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; uint32 &gt;</type>
      <name>getResolution</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>aa74965eea5fca02eb8879a64a99277e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EImageSampleMode</type>
      <name>getSampleMode</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>a2e13b6bb0839fbcb7914f8afac47abf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EImageWrapMode</type>
      <name>getHorizontalWrapMode</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>ae3390b7997b27caf48f0fc00a6a69e0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EImageWrapMode</type>
      <name>getVerticalWrapMode</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>a03c4a653fb5eaa6411c82cb5bcef2ae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RasterImageBase &amp;</type>
      <name>setSampleMode</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>a3f77368868abeb174d0fbc4227bb0000</anchor>
      <arglist>(EImageSampleMode mode)</arglist>
    </member>
    <member kind="function">
      <type>RasterImageBase &amp;</type>
      <name>setWrapMode</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>a7726fbe73d880500d53b56148c31c9c0</anchor>
      <arglist>(EImageWrapMode mode)</arglist>
    </member>
    <member kind="function">
      <type>RasterImageBase &amp;</type>
      <name>setWrapMode</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>a8fd797042d7e4deb184c64446afa6391</anchor>
      <arglist>(EImageWrapMode horizontalWrapMode, EImageWrapMode verticalWrapMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>ae111e5526cd5eedc4e71d7099b717e75</anchor>
      <arglist>(TSdlOwnerClass&lt; RasterImageBase &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RasterImageBase &amp;</type>
      <name>setResolution</name>
      <anchorfile>classph_1_1_raster_image_base.html</anchorfile>
      <anchor>a9aa4abd23f9ee16dd42876545582ddd1</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; resolution)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RawResourceCollection</name>
    <filename>classph_1_1_raw_resource_collection.html</filename>
    <base>ph::ISdlReferenceGroup</base>
    <member kind="function">
      <type>std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>get</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a71014e2c028b96d471867aa050d02dc0</anchor>
      <arglist>(std::string_view resourceName) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>ad9bbdcf0690ce62a6dca54f94671ada4</anchor>
      <arglist>(std::string_view resourceName) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a71c1500b514f6fbfdce9879303225c83</anchor>
      <arglist>(std::shared_ptr&lt; ISdlResource &gt; resource, std::string_view resourceName)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>remove</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>af0bc3b5adc1871d4c7e9386bce318a66</anchor>
      <arglist>(std::string_view resourceName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>rename</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a533dd09d766469c7214d43dead7776c4</anchor>
      <arglist>(std::string_view resourceName, std::string_view newResourceName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeResourceName</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a9788e7d7abcd1d9ad0c5fc396c7cad46</anchor>
      <arglist>(std::string_view intendedName)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; T &gt; &gt;</type>
      <name>getAllOfType</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>abd03ab9fc0bd9524f476d35753f6062a</anchor>
      <arglist>(std::vector&lt; std::string &gt; *out_resourceNames=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; ISdlResource &gt; &gt;</type>
      <name>getAll</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a4fdde646b0e5f0cecd6fc34fa051200b</anchor>
      <arglist>(std::vector&lt; std::string &gt; *out_resourceNames=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const T * &gt;</type>
      <name>listAllOfType</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a611fe135849c9244ba8a481529d8bc03</anchor>
      <arglist>(std::vector&lt; std::string &gt; *out_resourceNames=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const ISdlResource * &gt;</type>
      <name>listAll</name>
      <anchorfile>classph_1_1_raw_resource_collection.html</anchorfile>
      <anchor>a98a430dadbc6e1fcff3940192850e5d6</anchor>
      <arglist>(std::vector&lt; std::string &gt; *out_resourceNames=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Ray</name>
    <filename>classph_1_1_ray.html</filename>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>acc4ae06bcab2383fe046414c784c64bc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>acf0cd9409398cc7d318231c239aa8617</anchor>
      <arglist>(const math::Vector3R &amp;origin, const math::Vector3R &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a45c48bdb8cbeddad8674c529bd49f785</anchor>
      <arglist>(const math::Vector3R &amp;origin, const math::Vector3R &amp;direction, const Time &amp;time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a1c32c56775a6f812f5c99d915ecb0e41</anchor>
      <arglist>(const math::Vector3R &amp;origin, const math::Vector3R &amp;direction, real minT, real maxT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>aae31ad84ba93ccf22afc0471fb48f095</anchor>
      <arglist>(const math::Vector3R &amp;origin, const math::Vector3R &amp;direction, real minT, real maxT, const Time &amp;time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a5f466849ea3948c5c4cd6994dc2376b2</anchor>
      <arglist>(const math::TLineSegment&lt; real &gt; &amp;segment, const Time &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>Ray &amp;</type>
      <name>reverse</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>abfcb423ffa8767e5160e8c81a0be9db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinT</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a56432899635fd0543ac7596fdd36d861</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxT</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a2a87b140e4bcdbdbac4721f390f52cf8</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a19f88fa8fac3b690ff24b8237591046b</anchor>
      <arglist>(real minT, real maxT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a3161bb5c9be3e339d334fa2e21f85567</anchor>
      <arglist>(const math::Vector3R &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDir</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a564cdc532939db2f851e1f2ec7773cc8</anchor>
      <arglist>(const math::Vector3R &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSegment</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a4c64cdc83770d649dedca7242c0d6243</anchor>
      <arglist>(const math::TLineSegment&lt; real &gt; &amp;segment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>ab9278b34ed43cf52d0ec6a9fee1880a8</anchor>
      <arglist>(const Time &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getTime</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a04e6742d9bab6178bb7135f4b5d8e415</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a172c161eec64649740da3abf6332f056</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getDir</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a3c80f865b8ba404194a5afc268fe9651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getMinT</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a62b3d3f28806e167521783ed1fc78b9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getMaxT</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>af2c09abaa22bafa11bc43fce295af2a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::TLineSegment&lt; real &gt; &amp;</type>
      <name>getSegment</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>ae19035096abdcda7a99d8e75b9862cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getTail</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>af801fff480d6ff1a8de07719358ef38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getHead</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>aa69f7fe8c69659d848c81e73f3562919</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a172c161eec64649740da3abf6332f056</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getDir</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a3c80f865b8ba404194a5afc268fe9651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getMinT</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>a62b3d3f28806e167521783ed1fc78b9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getMaxT</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>af2c09abaa22bafa11bc43fce295af2a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::TLineSegment&lt; real &gt; &amp;</type>
      <name>getSegment</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>ae19035096abdcda7a99d8e75b9862cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getTail</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>af801fff480d6ff1a8de07719358ef38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getHead</name>
      <anchorfile>classph_1_1_ray.html</anchorfile>
      <anchor>aa69f7fe8c69659d848c81e73f3562919</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RayDifferential</name>
    <filename>classph_1_1_ray_differential.html</filename>
    <member kind="function">
      <type></type>
      <name>RayDifferential</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>ae398af3cac2c200c5d45d2d5a056cf8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RayDifferential</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>aed3c6a6951ee62c73000466f8f9115c3</anchor>
      <arglist>(const math::Vector3R &amp;dPdX, const math::Vector3R &amp;dPdY, const math::Vector3R &amp;dDdX, const math::Vector3R &amp;dDdY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToSurface</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>aa011bcc5272ed0096309cd6cd1a95230</anchor>
      <arglist>(const math::Vector3R &amp;surfaceP, const math::Vector3R &amp;surfaceN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>aa3beeaf54cb289807bdacb7a7b3fd9a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartialPs</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>acc4d3f12f564f4f0fb051bdfefd5b274</anchor>
      <arglist>(const math::Vector3R &amp;dPdX, const math::Vector3R &amp;dPdY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartialDs</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>a97576899e6ff6994f9980a5886ecc6af</anchor>
      <arglist>(const math::Vector3R &amp;dDdX, const math::Vector3R &amp;dDdY)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getdPdX</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>a9b0b697e48d093283d2fce017662dac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getdPdY</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>a19574104065a02194268c3fb08b2691f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getdDdX</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>a6f55a0ff994cbc82ba39f4c4f5160f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3R &amp;</type>
      <name>getdDdY</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>a00a5a7d7d393c788d209c2359c21465a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNonZero</name>
      <anchorfile>classph_1_1_ray_differential.html</anchorfile>
      <anchor>ac2c514766943108189a88c22fdde5704</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::Real</name>
    <filename>classph_1_1math_1_1_real.html</filename>
    <member kind="function">
      <type></type>
      <name>Real</name>
      <anchorfile>classph_1_1math_1_1_real.html</anchorfile>
      <anchor>a144d86d7a213aa402567db66dfc33378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Real</name>
      <anchorfile>classph_1_1math_1_1_real.html</anchorfile>
      <anchor>af3feb38df073113e463e13547752ed92</anchor>
      <arglist>(const real value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Real</name>
      <anchorfile>classph_1_1math_1_1_real.html</anchorfile>
      <anchor>a2666b42884b94d690f2da3de13324922</anchor>
      <arglist>(const std::vector&lt; real &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Real</name>
      <anchorfile>classph_1_1math_1_1_real.html</anchorfile>
      <anchor>ad05dd41004624a2dd72c4be8bdad6cd8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator real</name>
      <anchorfile>classph_1_1math_1_1_real.html</anchorfile>
      <anchor>ae1ca8489e0770c1565fceb193e56f397</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Receiver</name>
    <filename>classph_1_1_receiver.html</filename>
    <member kind="function">
      <type></type>
      <name>Receiver</name>
      <anchorfile>classph_1_1_receiver.html</anchorfile>
      <anchor>a572047ccf2004d01a442de6a09fd4cdd</anchor>
      <arglist>(const math::RigidTransform *receiverToWorld)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Receiver</name>
      <anchorfile>classph_1_1_receiver.html</anchorfile>
      <anchor>a912edcb651441617898c61302fd14f5b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual math::Spectrum</type>
      <name>receiveRay</name>
      <anchorfile>classph_1_1_receiver.html</anchorfile>
      <anchor>a86ae2fc0d2e99e407b516df1c92b0537</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, Ray *out_ray) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evalEmittedImportanceAndPdfW</name>
      <anchorfile>classph_1_1_receiver.html</anchorfile>
      <anchor>af93f5e3728ef587b038326b0ea3844f7</anchor>
      <arglist>(const math::Vector3R &amp;targetPos, math::Vector2R *const out_filmCoord, math::Vector3R *const out_importance, real *out_filmArea, real *const out_pdfW) const =0</arglist>
    </member>
    <member kind="function">
      <type>const math::RigidTransform &amp;</type>
      <name>getReceiverToWorld</name>
      <anchorfile>classph_1_1_receiver.html</anchorfile>
      <anchor>a6b900536c298d4ea973a82826d1ca209</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ReceiverSamplingWork</name>
    <filename>classph_1_1_receiver_sampling_work.html</filename>
    <base>ph::RenderWork</base>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>ReceiverSamplingWork</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a67214aeea6303435916107302180b884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReceiverSamplingWork</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a5d4636294abecfd531b45eae9a42379d</anchor>
      <arglist>(const Receiver *receiver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReceiverSamplingWork</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>aac128da23e89157ccade12b5d8d76dc5</anchor>
      <arglist>(ReceiverSamplingWork &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SamplingStatistics</type>
      <name>asyncGetStatistics</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>ada4ea02b31ae0b5e5cba07027dd70a23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleGenerator</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a86b55945ad3603bc8d4fd7966ca868f2</anchor>
      <arglist>(std::unique_ptr&lt; SampleGenerator &gt; sampleGenerator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleDimensions</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>aac63a289aa082299da08593b685fd573</anchor>
      <arglist>(const math::TVector2&lt; int64 &gt; &amp;rasterActualResPx, const math::TAABB2D&lt; float64 &gt; &amp;rasterSampleWindowPx, const math::TVector2&lt; int64 &gt; &amp;sampleRes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProcessor</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a5e26fe21ec52d6c648b3201b99d0ef34</anchor>
      <arglist>(IReceivedRayProcessor *processor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onWorkStart</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a2b9acdd03d1ee0c4e7ae90a09ca9d78b</anchor>
      <arglist>(std::function&lt; void()&gt; func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onWorkReport</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a224b7864b815006332e27b11d4491d11</anchor>
      <arglist>(std::function&lt; void()&gt; func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onWorkFinish</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a46ddee0978329737eea4efa5a30584c6</anchor>
      <arglist>(std::function&lt; void()&gt; func)</arglist>
    </member>
    <member kind="function">
      <type>ReceiverSamplingWork &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_receiver_sampling_work.html</anchorfile>
      <anchor>a4394cefe6d93cdb52ab3f0caeecd2abd</anchor>
      <arglist>(ReceiverSamplingWork &amp;&amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Statistics::Record</name>
    <filename>classph_1_1_statistics_1_1_record.html</filename>
    <member kind="function">
      <type></type>
      <name>Record</name>
      <anchorfile>classph_1_1_statistics_1_1_record.html</anchorfile>
      <anchor>a7c04bafdf041444a788ed265eb9289b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>totalWork</name>
      <anchorfile>classph_1_1_statistics_1_1_record.html</anchorfile>
      <anchor>a92ab14a7612aaa8bc767d3468f0d2ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>workDone</name>
      <anchorfile>classph_1_1_statistics_1_1_record.html</anchorfile>
      <anchor>a115ada10517b732e8dc63c58f2d44850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numSamplesTaken</name>
      <anchorfile>classph_1_1_statistics_1_1_record.html</anchorfile>
      <anchor>ab73403c9a710024f7f5652e7d48995d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numMsElapsed</name>
      <anchorfile>classph_1_1_statistics_1_1_record.html</anchorfile>
      <anchor>af8cf2c07cc22cccda0fc99771c9813b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RectangleSource</name>
    <filename>classph_1_1_rectangle_source.html</filename>
    <base>ph::AreaSource</base>
    <member kind="function">
      <type></type>
      <name>RectangleSource</name>
      <anchorfile>classph_1_1_rectangle_source.html</anchorfile>
      <anchor>a6b76ab2234695fe75ca2c4049fee4ef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleSource</name>
      <anchorfile>classph_1_1_rectangle_source.html</anchorfile>
      <anchor>a2e4961be895e39030fc90974f8739f12</anchor>
      <arglist>(real width, real height, const math::Vector3R &amp;linearSrgbColor, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleSource</name>
      <anchorfile>classph_1_1_rectangle_source.html</anchorfile>
      <anchor>a258e42e8ab74f59d1b6b037cb9d62c85</anchor>
      <arglist>(real width, real height, const math::Spectrum &amp;color, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genAreas</name>
      <anchorfile>classph_1_1_rectangle_source.html</anchorfile>
      <anchor>ab0d154e27cf6f494368c1cd456a0a5e7</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classph_1_1_rectangle_source.html</anchorfile>
      <anchor>a44738801c2370a3400ff69ab40b1c1c7</anchor>
      <arglist>(real width, real height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_rectangle_source.html</anchorfile>
      <anchor>ac157edf239a515babf3c3d8aa0677e41</anchor>
      <arglist>(TSdlOwnerClass&lt; RectangleSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RectangularSensorReceiver</name>
    <filename>classph_1_1_rectangular_sensor_receiver.html</filename>
    <base>ph::Receiver</base>
    <member kind="function">
      <type></type>
      <name>RectangularSensorReceiver</name>
      <anchorfile>classph_1_1_rectangular_sensor_receiver.html</anchorfile>
      <anchor>a6b5c4938d14523c52d78ad87776a5731</anchor>
      <arglist>(const math::Vector2D &amp;sensorSize, const math::Transform *rasterToSensor, const math::RigidTransform *receiverToWorld)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>math::Spectrum</type>
      <name>receiveRay</name>
      <anchorfile>classph_1_1_rectangular_sensor_receiver.html</anchorfile>
      <anchor>a588bf8cfdfa499625f6466ff279a8d67</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, Ray *out_ray) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>evalEmittedImportanceAndPdfW</name>
      <anchorfile>classph_1_1_rectangular_sensor_receiver.html</anchorfile>
      <anchor>a1f48819da95e148bd62691d3d8c08acd</anchor>
      <arglist>(const math::Vector3R &amp;targetPos, math::Vector2R *const out_filmCoord, math::Vector3R *const out_importance, real *out_filmArea, real *const out_pdfW) const override=0</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector2D &amp;</type>
      <name>getSensorSize</name>
      <anchorfile>classph_1_1_rectangular_sensor_receiver.html</anchorfile>
      <anchor>a44fe8c31d1c434c2c62ecc4c7dcb172c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Transform &amp;</type>
      <name>getRasterToSensor</name>
      <anchorfile>classph_1_1_rectangular_sensor_receiver.html</anchorfile>
      <anchor>afc65567b4396bf0e7a0f0525a1831025</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::ReferencedPrimitiveMetaGetter</name>
    <filename>structph_1_1_referenced_primitive_meta_getter.html</filename>
    <member kind="function">
      <type></type>
      <name>ReferencedPrimitiveMetaGetter</name>
      <anchorfile>structph_1_1_referenced_primitive_meta_getter.html</anchorfile>
      <anchor>ad28aa681d4bb49ecaf571f0f17a347ef</anchor>
      <arglist>(const PrimitiveMetadata *const metadata)</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveMetadata *</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_referenced_primitive_meta_getter.html</anchorfile>
      <anchor>a1b65ca1c49fd26cbb995f888283f890d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const PrimitiveMetadata *</type>
      <name>metadata</name>
      <anchorfile>structph_1_1_referenced_primitive_meta_getter.html</anchorfile>
      <anchor>aeef3783180003454f2eaf9fd05cd770f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RegularPicture</name>
    <filename>classph_1_1_regular_picture.html</filename>
    <member kind="function">
      <type></type>
      <name>RegularPicture</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a429364a6cf08c878bab7e221e9551db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularPicture</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>aed6a8f5bb1811000ef19e11c1196e06c</anchor>
      <arglist>(math::Vector2S sizePx, std::size_t numComponents, EPicturePixelComponent componentType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularPicture</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a93b9b38de5cad67f6487de0be87aaff2</anchor>
      <arglist>(RegularPicture &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const RegularPictureFormat &amp;</type>
      <name>getFormat</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a465dda08dd77110c5517139cf3b2fb68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFormat</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a6a0160ae28a8680acf58e9e94bf3749f</anchor>
      <arglist>(const RegularPictureFormat &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numComponents</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a31f5eb43943d15763ed613c6aa3cbb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EPicturePixelComponent</type>
      <name>getComponentType</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>ad722546391b5e88e3c8072b2c19139fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLDR</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a0e81d7f6e9cf623fbf268d78b8076733</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHDR</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a96e2baa9c41b1e8c3011580ea3680a91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2S</type>
      <name>getSizePx</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>ad33951a38fe693f78f5d2d2af3f99f37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getWidthPx</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a680071784cfd665d0b26682bfcbc7066</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getHeightPx</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a480da03e910720e98e5d3be5e7f980ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PictureData &amp;</type>
      <name>getPixels</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>af5e4668d0a914ee1df4cbd5ccd479e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PictureData &amp;</type>
      <name>getPixels</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a0fcec127a2f33edf23d92b643dffb577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_regular_picture.html</anchorfile>
      <anchor>a0e2bb8104fafc3e60933f7ffcd6e4d1b</anchor>
      <arglist>(RegularPicture &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RegularPictureFormat</name>
    <filename>classph_1_1_regular_picture_format.html</filename>
    <member kind="function">
      <type></type>
      <name>RegularPictureFormat</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>aacd34772a46783b293f8861af700f462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>math::EColorSpace</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>afe37ab1d54e537c519dbf231a3d87b19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReversedComponents</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>acb448f81214b53768a5b36fdbe401960</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>a4cd7117cd3032aff7ae97582920e3537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGrayscale</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>ae99b5d42575c231e7bd38d977a44da92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColorSpace</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>ad265551d4b44bf0e588298ec9f056dc5</anchor>
      <arglist>(math::EColorSpace colorSpace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsReversedComponents</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>a38901a0b84565f7b8496110c92041f98</anchor>
      <arglist>(bool isReversedComponents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHasAlpha</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>a86c6d396f66a0f6ad4fab202a62dff73</anchor>
      <arglist>(bool hasAlpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsGrayscale</name>
      <anchorfile>classph_1_1_regular_picture_format.html</anchorfile>
      <anchor>a9a56a5c5b09615a40dfd6a9bf3065450</anchor>
      <arglist>(bool isGrayscale)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Renderer</name>
    <filename>classph_1_1_renderer.html</filename>
    <member kind="function">
      <type></type>
      <name>Renderer</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a2aab5f8d048bff77320072e18f47b242</anchor>
      <arglist>(Viewport viewport, uint32 numWorkers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Renderer</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a904f3dc805728dd9efd002749acd6d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>doUpdate</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a2f4189e1d2c699f7244146db1afdc578</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>afe4917775950e5d9945d3ed541022d2e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>aef6910299c203d3537f527067e3921b6</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>asyncPollUpdatedRegions</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a608a44e798226c1bdb591ccf3c1c4dd2</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a19e25bfd0d5b7e7230be357fd87ede24</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a3ff30b76619602fb84530ade1a73fd63</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a31db03014d59cb1a0d4332db547232fc</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a1ba8678db34d73ece1540362f28a644d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>ae6d0f72c37ef4680e3e6399d10553b7c</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>adab549a4f26a5c8eb4d63d8bf514f936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumWorkers</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>acb94fca033ca3aa8b35a43b42385be87</anchor>
      <arglist>(uint32 numWorkers)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>numWorkers</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>aee3d015bf17aa93acab1bb833a5e77f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getRenderWidthPx</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a54d949b61b12994ade05a3132f583dd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getRenderHeightPx</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a3839ef7de1541e84379f860835e7efb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>getCropWindowPx</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a20ada347f45d9c4b189a305f1a7c5345</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>getRenderRegionPx</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a7b3f00f5396e7459541d951b49a2cacd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Viewport &amp;</type>
      <name>getViewport</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a42d8776ecca1c73e0150583970f74749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>asyncIsUpdating</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>a4a970abb912298c1357ff3cb55200c95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>asyncIsRendering</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>afb2a3475b769c3bf5b26f9cb0be5773c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>asyncPollMergedUpdatedRegions</name>
      <anchorfile>classph_1_1_renderer.html</anchorfile>
      <anchor>af01dfb5b621929945a5d47131cbe9222</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions, std::size_t mergeSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RendererProxy</name>
    <filename>classph_1_1_renderer_proxy.html</filename>
    <member kind="typedef">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>Region</name>
      <anchorfile>classph_1_1_renderer_proxy.html</anchorfile>
      <anchor>a4fca3c7b73563f49b15a00120cc57680</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RendererProxy</name>
      <anchorfile>classph_1_1_renderer_proxy.html</anchorfile>
      <anchor>aab396f7f9c05eadc3d805b72e59b1633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RendererProxy</name>
      <anchorfile>classph_1_1_renderer_proxy.html</anchorfile>
      <anchor>a16e227f59e70718f659b3afb8235bbf9</anchor>
      <arglist>(Renderer *renderer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderObservationInfo</name>
    <filename>classph_1_1_render_observation_info.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setProgressTimeMeasurement</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a4c31df5bed06ce2d1925a5734529026e</anchor>
      <arglist>(const std::string &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayer</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>aeeab6c38dad502ad0b397d6c43839fc4</anchor>
      <arglist>(std::size_t index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegerStat</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a5a44635c0275f99f58343892a8a0a100</anchor>
      <arglist>(std::size_t index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealStat</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a4257034210eec7ab22ed77a4b4ed3e6a</anchor>
      <arglist>(std::size_t index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getProgressTimeMeasurement</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a31afc6340d1911de765ca3909fdb3cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLayerName</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>af8a495b4b299a4b6bae7dae7ca27ddda</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getIntegerStatName</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>afdca91b9575189a8ef9ae7eb7c44583e</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRealStatName</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a4a01bab53789ef558d0173284107401d</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLayers</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a8b9cad1a57eaf649d39d560b2c256c98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numIntegerStats</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a87400f7d8b8030f68f0f5de23deff867</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numRealStats</name>
      <anchorfile>classph_1_1_render_observation_info.html</anchorfile>
      <anchor>a7f78768440395061baad27e4a122ebb6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderProgress</name>
    <filename>classph_1_1_render_progress.html</filename>
    <member kind="function">
      <type></type>
      <name>RenderProgress</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>a01b606d6b57e8cd798e4c3ee0667c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderProgress</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>a1af5c83ad3f0815e5d7dd4b6bf4867c9</anchor>
      <arglist>(uint64 totalWork, uint64 workDone, uint64 elapsedMs)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getTotalWork</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>a4c7fcbe59dda8d81588565a1e5b72290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getWorkDone</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>a72b829204b80f462f4b6d86811c62fed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getElapsedMs</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>abf54833f5714d51c06b0e34357fa402c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getNormalizedProgress</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>a97c9dadd4df0860baab1f7693497f44a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getPercentageProgress</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>a91996a1a18c3a410440f65e599a9e0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress &amp;</type>
      <name>operator+=</name>
      <anchorfile>classph_1_1_render_progress.html</anchorfile>
      <anchor>afa5415b1254dd2293c68887c92376466</anchor>
      <arglist>(const RenderProgress &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderRegionStatus</name>
    <filename>classph_1_1_render_region_status.html</filename>
    <member kind="function">
      <type></type>
      <name>RenderRegionStatus</name>
      <anchorfile>classph_1_1_render_region_status.html</anchorfile>
      <anchor>ac5a41b06e6b6d1522795a810378efa81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderRegionStatus</name>
      <anchorfile>classph_1_1_render_region_status.html</anchorfile>
      <anchor>a5966c1f9100710faea284cd767d2d267</anchor>
      <arglist>(Region region, ERegionStatus status)</arglist>
    </member>
    <member kind="function">
      <type>Region</type>
      <name>getRegion</name>
      <anchorfile>classph_1_1_render_region_status.html</anchorfile>
      <anchor>a9e857093769dcd67a7630b4890181931</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ERegionStatus</type>
      <name>getStatus</name>
      <anchorfile>classph_1_1_render_region_status.html</anchorfile>
      <anchor>a837b97a5de80a27a09c23b3ed0131b28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderRegionStatus</type>
      <name>getMerged</name>
      <anchorfile>classph_1_1_render_region_status.html</anchorfile>
      <anchor>ab4ee6c2db4a499d2989d6c3af468096f</anchor>
      <arglist>(const RenderRegionStatus &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderSession</name>
    <filename>classph_1_1_render_session.html</filename>
    <base>ph::Option</base>
    <member kind="function">
      <type></type>
      <name>RenderSession</name>
      <anchorfile>classph_1_1_render_session.html</anchorfile>
      <anchor>afaa2e2068147e3519f219e83e320925f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyToContext</name>
      <anchorfile>classph_1_1_render_session.html</anchorfile>
      <anchor>a892c7f4afc0ff0aa1a46809563ddeb9f</anchor>
      <arglist>(CoreCookingContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::shared_ptr&lt; CoreSdlResource &gt; &gt;</type>
      <name>gatherResources</name>
      <anchorfile>classph_1_1_render_session.html</anchorfile>
      <anchor>a939fb2912a0ffbfa917920171ecca9bd</anchor>
      <arglist>(const SceneDescription &amp;scene) const =0</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>numWorkers</name>
      <anchorfile>classph_1_1_render_session.html</anchorfile>
      <anchor>aec604dc615d3539c99e4e2185216f9b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_render_session.html</anchorfile>
      <anchor>a628f7f829ad84a3b28d27405304434c1</anchor>
      <arglist>(TSdlOwnerClass&lt; RenderSession &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderStats</name>
    <filename>classph_1_1_render_stats.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EType</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>a4c503028ad70f971c5f2726472708554</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_render_stats.html" anchor="a4c503028ad70f971c5f2726472708554a5d5cd46919fa987731fb2edefe0f2a0c">INTEGER</enumvalue>
      <enumvalue file="classph_1_1_render_stats.html" anchor="a4c503028ad70f971c5f2726472708554a8cf125b0e31559ba75a9d9b4f818a554">REAL</enumvalue>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>IntegerType</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>a3ab604915ade0865a33875a4a2ebb829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float32</type>
      <name>RealType</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>a81b6621c0560e0efe5ddd1cbf9b070f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderStats</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>a876d7f3fd9c13f8585e09460e54b8826</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>IntegerType</type>
      <name>getInteger</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>a84afb34d96ec26d4e698aec301148eed</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getReal</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>aefcda77b67de5fc4e2399a1566a4f7ed</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteger</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>ac55a5248108fd15c7e40415f2da5433a</anchor>
      <arglist>(std::size_t index, IntegerType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReal</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>aeef5d94267a77da67e859d0446c5e3e9</anchor>
      <arglist>(std::size_t index, RealType value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>numStats</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>ac40c56c871666fa7449c7a79b56ee5e6</anchor>
      <arglist>(EType type)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>NUM_INTEGERS</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>a9c9e92766c4ba6d73be058edbdcab664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>NUM_REALS</name>
      <anchorfile>classph_1_1_render_stats.html</anchorfile>
      <anchor>afd801fadb477d0a6264dd006bb897417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderWork</name>
    <filename>classph_1_1_render_work.html</filename>
    <member kind="function">
      <type></type>
      <name>RenderWork</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>a87dcfaa060f45d941660a7f461937722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderWork</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>a251e894552725cfbd65278def82c0f67</anchor>
      <arglist>(const RenderWork &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RenderWork</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>a0ffd22a2787d667047d1a941e62d26f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>work</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>ad09a92eeb820ed322524831873101d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncGetProgress</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>a8ae7b506e79f708d9770cf2f7930807b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTotalWork</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>ae48bb79da4f0cf4211bc25726a69aa7e</anchor>
      <arglist>(std::size_t totalWork)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWorkDone</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>ad349f5f7602838e61cd3ad41cdcf1f52</anchor>
      <arglist>(std::size_t workDone)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementWorkDone</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>a1637b87b542b5802d11d77ca5edf94c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setElapsedMs</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>ae1f23d0dfe96849822e3ceb776c05acd</anchor>
      <arglist>(std::size_t elapsedMs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RenderWork &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_render_work.html</anchorfile>
      <anchor>ad8e315ae7de414b8cb24afaa385f3158</anchor>
      <arglist>(const RenderWork &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RenderWorker</name>
    <filename>classph_1_1_render_worker.html</filename>
    <member kind="function">
      <type></type>
      <name>RenderWorker</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a4df686fc23c9f26ba463979c4745099e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderWorker</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a89c496a9e2efc390e4d34e9b924a8f44</anchor>
      <arglist>(const RendererProxy &amp;renderer, uint32 id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderWorker</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a4577daf0e6fa6c2a389769ee385f4416</anchor>
      <arglist>(const RenderWorker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a29c55e7d61a90f5f2e0351b810088e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWork</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a3a3d90bcc391b4dc2a4aa3b0364215e9</anchor>
      <arglist>(RenderWork *work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalWork</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a4af789e6263780f7ea76e5d7b5a15f1e</anchor>
      <arglist>(uint32 totalWork)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkDone</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>aa493f590b8d04704c38e910a9c06977f</anchor>
      <arglist>(uint32 workDone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementWorkDone</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a1fcf703f4cda070555ddee622314d53a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getId</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a6db8768705db6aaf137c815e7a07c1ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderWorker &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_render_worker.html</anchorfile>
      <anchor>a29a772cceb86f62add654ffcaef51719</anchor>
      <arglist>(const RenderWorker &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ResourceIdentifier</name>
    <filename>classph_1_1_resource_identifier.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceIdentifier</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>aaf87b280366516dbf4325a927d37ab08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceIdentifier</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a42589e689ce468ced8f02923dd14e9df</anchor>
      <arglist>(std::string identifier)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resolve</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a87a7e90d0b2dc0872dab01eec88bf0ea</anchor>
      <arglist>(IResourceIdentifierResolver &amp;resolver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResolved</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>aecf39db08b7f3188528f33ad3cef6357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasIdentifier</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>afbfea134a2ceb0ac835cf93c16712507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getIdentifier</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a0d46f01bf9934a2f2bcf2f0abbf30385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>getPath</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a5d6dcb59a98221fac8af9c96d4ac18e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getString</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a2bfcef877a40e73890b78b129b5d3c56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a9a39e30d7cabaafbd9c04c44ff75ac79</anchor>
      <arglist>(Path path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>ad84f2d655522994e4b44dcb95c361990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>a78e8e89b681be8728b8e322c747790d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IResourceIdentifierResolver</name>
      <anchorfile>classph_1_1_resource_identifier.html</anchorfile>
      <anchor>aeaa2a31a7c0b5f423838a859108c9fa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::RigidTransform</name>
    <filename>classph_1_1math_1_1_rigid_transform.html</filename>
    <base>ph::math::Transform</base>
  </compound>
  <compound kind="class">
    <name>ph::RoughnessToAlphaMapping</name>
    <filename>classph_1_1_roughness_to_alpha_mapping.html</filename>
    <member kind="function" static="yes">
      <type>static real</type>
      <name>equaled</name>
      <anchorfile>classph_1_1_roughness_to_alpha_mapping.html</anchorfile>
      <anchor>a39193c61b6682185e9b1ab1862a6b6fa</anchor>
      <arglist>(const real roughness)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static real</type>
      <name>squared</name>
      <anchorfile>classph_1_1_roughness_to_alpha_mapping.html</anchorfile>
      <anchor>ac947d1881b0c38abeb00b2fd670b2541</anchor>
      <arglist>(const real roughness)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static real</type>
      <name>pbrtV3</name>
      <anchorfile>classph_1_1_roughness_to_alpha_mapping.html</anchorfile>
      <anchor>ae83bf94a6857a163f2a8161ed2032692</anchor>
      <arglist>(const real roughness)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static real</type>
      <name>map</name>
      <anchorfile>classph_1_1_roughness_to_alpha_mapping.html</anchorfile>
      <anchor>aee96d7d5f0865271c46678626ad894a2</anchor>
      <arglist>(const real roughness, ERoughnessToAlpha mapType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::RuntimeSampleSource</name>
    <filename>classph_1_1_runtime_sample_source.html</filename>
    <base>ph::SampleSource</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_runtime_sample_source.html</anchorfile>
      <anchor>aa62d2c578b49712c43eb487bee80eaa7</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override=0</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSamples</name>
      <anchorfile>classph_1_1_runtime_sample_source.html</anchorfile>
      <anchor>ae1bd5f288f34df03e775dd5d5ecdf911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_runtime_sample_source.html</anchorfile>
      <anchor>a34ae9b5abb3ea3bea424590bc6b323bd</anchor>
      <arglist>(TSdlOwnerClass&lt; RuntimeSampleSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::RussianRoulette</name>
    <filename>classph_1_1lta_1_1_russian_roulette.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>surviveOnLuminance</name>
      <anchorfile>classph_1_1lta_1_1_russian_roulette.html</anchorfile>
      <anchor>aa26e51b98be1903cb062a9b4634234eb</anchor>
      <arglist>(const math::Spectrum &amp;s, SampleFlow &amp;sampleFlow, real *out_survivalProbability) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Sample</name>
    <filename>classph_1_1_sample.html</filename>
    <member kind="variable">
      <type>real</type>
      <name>m_cameraX</name>
      <anchorfile>classph_1_1_sample.html</anchorfile>
      <anchor>adebba0bcba86b10a8f5c4d7284e1e4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>m_cameraY</name>
      <anchorfile>classph_1_1_sample.html</anchorfile>
      <anchor>a1029f841607f27923031ec1ec5c0bc36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleContext</name>
    <filename>classph_1_1_sample_context.html</filename>
    <member kind="function">
      <type></type>
      <name>SampleContext</name>
      <anchorfile>classph_1_1_sample_context.html</anchorfile>
      <anchor>a69c8c2a15f03d7dc3d9bf101d934ad8c</anchor>
      <arglist>(std::size_t sampleBatchIndex)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>sampleBatchIndex</name>
      <anchorfile>classph_1_1_sample_context.html</anchorfile>
      <anchor>a3ea306f18a52e7857f40cee44f5bb27f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleFilter</name>
    <filename>classph_1_1_sample_filter.html</filename>
    <member kind="function">
      <type></type>
      <name>SampleFilter</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a963878e8aa57bf0d033522d577423c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleFilter</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a6d3bb21206c3b96934426d22558c0390</anchor>
      <arglist>(std::shared_ptr&lt; math::TMathFunction2D&lt; float64 &gt; &gt; filterFunc, float64 widthPx, float64 heightPx)</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>af14bb52214c17411f9b245bee4a710fe</anchor>
      <arglist>(float64 xPx, float64 yPx) const</arglist>
    </member>
    <member kind="function">
      <type>const math::TVector2&lt; float64 &gt; &amp;</type>
      <name>getSizePx</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a6b14facd385a4673d8a98b4f38d5fffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::TVector2&lt; float64 &gt; &amp;</type>
      <name>getHalfSizePx</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a0b833204184d86a5fc3a9124bd3bbda5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleFilter</type>
      <name>make</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a529c9090ebd80148f913d6bffef4d334</anchor>
      <arglist>(MathFunction func, float64 widthPx, float64 heightPx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleFilter</type>
      <name>makeBox</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>ac434f0dc1a27a4bd57874313e60b682e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleFilter</type>
      <name>makeGaussian</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a0da7e87fde91ad71b1295e5777b4c8e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleFilter</type>
      <name>makeMitchellNetravali</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>a48eb29a4a2e15bddf6c55b19c67ee606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleFilter</type>
      <name>makeBlackmanHarris</name>
      <anchorfile>classph_1_1_sample_filter.html</anchorfile>
      <anchor>aeb3bc508a027691e231a235355c9c893</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleFlow</name>
    <filename>classph_1_1_sample_flow.html</filename>
    <member kind="function">
      <type></type>
      <name>SampleFlow</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>a94be81c7a51b48a808f83e6ce839d01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleFlow</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>aa57826030eabf81bc30f69e0ebe8d573</anchor>
      <arglist>(const real *savedDims, std::size_t numSavedDims)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>flow1D</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>a8d93ef2d1e1d131e8c735e2224d3dd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>flow2D</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>ac3501b945b12110b55ddc41e31134c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, 3 &gt;</type>
      <name>flow3D</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>a62272ab3edcfd6d0a073a6945de03e90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, N &gt;</type>
      <name>flowND</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>a2f72c899dcaa55221eaa6f161fbafee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pick</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>a1ee7d8902ff81c8acbbb948709178644</anchor>
      <arglist>(real pickProbability)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unflowedPick</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>afc150517d79595beb57e792dcb3d1e0f</anchor>
      <arglist>(real pickProbability)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unflowedRandomPick</name>
      <anchorfile>classph_1_1_sample_flow.html</anchorfile>
      <anchor>a4f580847a20e8fe7777480e97d0a756e</anchor>
      <arglist>(real pickProbability)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleGenerator</name>
    <filename>classph_1_1_sample_generator.html</filename>
    <member kind="function">
      <type></type>
      <name>SampleGenerator</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>ad18e2cc85a9bb8f4fc8df6031e60cdeb</anchor>
      <arglist>(std::size_t numSampleBatches, std::size_t maxCachedBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleGenerator</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>ac3def52a89b46c93603a96f084dca43b</anchor>
      <arglist>(std::size_t numSampleBatches)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SampleGenerator</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>afca6e5af28e5f65be3bc83740c95967e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>makeNewborn</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>aa4f9f004fb02f33836562de91ce1fae2</anchor>
      <arglist>(std::size_t numSampleBatches) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rebirth</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>a08d4fe62f9a5b30da204c7d66b586cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSplitted</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>af3a0506e6f463c5a63d67c424e36304c</anchor>
      <arglist>(std::size_t numSplits, std::vector&lt; std::unique_ptr&lt; SampleGenerator &gt; &gt; &amp;out_sgs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepareSampleBatch</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>a761b9d5dba5cf68a0a7738e0949193eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SamplesNDHandle</type>
      <name>declareStageND</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>a4ee7cb159594b35bd2251b64af07e516</anchor>
      <arglist>(std::size_t numDims, std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type>SamplesNDHandle</type>
      <name>declareStageND</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>a9b40463337e94df4b8c7e3441356d292</anchor>
      <arglist>(std::size_t numDims, std::size_t numSamples, std::vector&lt; std::size_t &gt; dimSizeHints)</arglist>
    </member>
    <member kind="function">
      <type>SamplesNDStream</type>
      <name>getSamplesND</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>ada73517fb696bb7daccdbf26d0fc53cc</anchor>
      <arglist>(const SamplesNDHandle &amp;handle) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numSampleBatches</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>a9edb109e3a59ca98916a04396bd18f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxCachedBatches</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>af47f8935a22467cb85f9200ea951c073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numRemainingBatches</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>affa7565a4bb64f5dc7136ff9448390b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoreBatches</name>
      <anchorfile>classph_1_1_sample_generator.html</anchorfile>
      <anchor>adbca8efb8c2ee12f0da1b714a77e12bd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleLocation</name>
    <filename>classph_1_1_sample_location.html</filename>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a92e18a6a01b8bd01fd4dba63642c57bb</anchor>
      <arglist>(const SampleLocation &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SampleLocation</type>
      <name>getUvwScaled</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>ae065a07c1334ef62d26ea969e2719833</anchor>
      <arglist>(const math::Vector3R &amp;scale) const</arglist>
    </member>
    <member kind="function">
      <type>math::EColorUsage</type>
      <name>expectedUsage</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a3c1e3b216ab49235a5db3efd00a1f657</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a6030eddad404c15f486e4797051542eb</anchor>
      <arglist>(const math::Vector3R &amp;uvw, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a6f6ceeca85a086cd927175211bb16f08</anchor>
      <arglist>(const math::Vector2R &amp;uv, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>aa79c1e42885b757322b94e030908d7ca</anchor>
      <arglist>(const HitDetail &amp;hit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a10da5f1520375e4a32f0bb94ce43ac60</anchor>
      <arglist>(const HitDetail &amp;hit, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>uvw</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>ac351e93a5024f7425c723f5852bb24e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2R</type>
      <name>uv</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a78193ae93dd235b9fedf79badf09be83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUvw</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a2df0afca02051e4af0160be384946a24</anchor>
      <arglist>(const math::Vector3R &amp;uvw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUv</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a3bffe569a8ba58e6a9a49c084be582e1</anchor>
      <arglist>(const math::Vector2R &amp;uv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a6030eddad404c15f486e4797051542eb</anchor>
      <arglist>(const math::Vector3R &amp;uvw, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a6f6ceeca85a086cd927175211bb16f08</anchor>
      <arglist>(const math::Vector2R &amp;uv, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>aa79c1e42885b757322b94e030908d7ca</anchor>
      <arglist>(const HitDetail &amp;hit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleLocation</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a10da5f1520375e4a32f0bb94ce43ac60</anchor>
      <arglist>(const HitDetail &amp;hit, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>uvw</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>ac351e93a5024f7425c723f5852bb24e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2R</type>
      <name>uv</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a78193ae93dd235b9fedf79badf09be83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUvw</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a2df0afca02051e4af0160be384946a24</anchor>
      <arglist>(const math::Vector3R &amp;uvw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUv</name>
      <anchorfile>classph_1_1_sample_location.html</anchorfile>
      <anchor>a3bffe569a8ba58e6a9a49c084be582e1</anchor>
      <arglist>(const math::Vector2R &amp;uv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SamplesND</name>
    <filename>classph_1_1_samples_n_d.html</filename>
    <member kind="function">
      <type></type>
      <name>SamplesND</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>af493306b924dacd097b992067f9dd961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplesND</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a3308691db60a0acb40b28bc408fa7e83</anchor>
      <arglist>(real *buffer, std::size_t numDims, std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplesND</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a2367d740f9d7610ae5b2e0d50604d6b3</anchor>
      <arglist>(real *buffer, std::size_t numDims, std::size_t numSamples, std::size_t strideSize, std::size_t offsetInStride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>ae75c15c0417351950ff5183ade317124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffleDimension</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a9e39c31ce2c3dcfbe7444a6e12321d12</anchor>
      <arglist>(std::size_t dimIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffleDimensions</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a863dea9aacc16a442386b95cc9302a68</anchor>
      <arglist>(std::size_t dimIndexBegin, std::size_t dimIndexEnd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffleAllDimensions</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>ab738b44e34d494972eef6c9dea35c229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSample</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a12f45514e5126247ce2594d897f7107c</anchor>
      <arglist>(std::size_t index, const real *sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSample</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a68d6783d4755a456ed31c7e3de1324e9</anchor>
      <arglist>(std::size_t index, const std::array&lt; real, N &gt; &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>real *</type>
      <name>buffer</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a97c560557e4aacace2b6d8fe8318fd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numDims</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a2b558fdba716e27c733fe7864c3b55c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numSamples</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>acb06e0525fb2170236fc65b5d4779df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a65b6a20d23b9f4c7ba378b0d7b053ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a26d8dd42c43a7f4b5bfd42b70bca4f70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real *</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_samples_n_d.html</anchorfile>
      <anchor>a63ba5c483bc0fb19f39baf9af9172883</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SamplesNDHandle</name>
    <filename>classph_1_1_samples_n_d_handle.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>SamplesNDHandle</name>
      <anchorfile>classph_1_1_samples_n_d_handle.html</anchorfile>
      <anchor>a275e6738dc8d587315691461d9800977</anchor>
      <arglist>(std::size_t stageIndex, std::size_t numDims)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>getStageIndex</name>
      <anchorfile>classph_1_1_samples_n_d_handle.html</anchorfile>
      <anchor>ad49628cfe610067eef57e2e621695c81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>numDims</name>
      <anchorfile>classph_1_1_samples_n_d_handle.html</anchorfile>
      <anchor>a82468d30cfa5bc6d6998490035fd15b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SampleGenerator</name>
      <anchorfile>classph_1_1_samples_n_d_handle.html</anchorfile>
      <anchor>aff85efc5797fd992e692918db96361d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SamplesNDStream</name>
    <filename>classph_1_1_samples_n_d_stream.html</filename>
    <member kind="function">
      <type></type>
      <name>SamplesNDStream</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>adfa3f6f54d5b7936125a003e014db720</anchor>
      <arglist>(const real *buffer, std::size_t numDims, std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type>const real *</type>
      <name>readSample</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>a41fa29c6432304ffb2be4cec04600656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, N &gt;</type>
      <name>readSample</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>aa7e053f241c963b26f9f01313fe3ba78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SampleFlow</type>
      <name>readSampleAsFlow</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>ab3b0b77bb77750833840bece8ec227af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numDims</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>acf986228ed1cda7597d51e2e98eb695b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numSamples</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>a2c1ec4a2f08d12c426eda7392ae5b7e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; real, N &gt;</type>
      <name>get</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>a5c1172023a4811cb013b7f52dd3b905d</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const real *</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_samples_n_d_stream.html</anchorfile>
      <anchor>a0ed1de82a91b4ecf1453e54639244fd4</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleSource</name>
    <filename>classph_1_1_sample_source.html</filename>
    <base>ph::CoreSdlResource</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_sample_source.html</anchorfile>
      <anchor>a54f0ffeaa4dd517aa20c0c7da57147e6</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override=0</arglist>
    </member>
    <member kind="function">
      <type>ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_sample_source.html</anchorfile>
      <anchor>acedd8207076b09beaaa5c6ea95a83b46</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_sample_source.html</anchorfile>
      <anchor>a4f6afbdc9f88f7a63d016189176440a8</anchor>
      <arglist>(TSdlOwnerClass&lt; SampleSource &gt;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr ESdlTypeCategory</type>
      <name>CATEGORY</name>
      <anchorfile>classph_1_1_sample_source.html</anchorfile>
      <anchor>a09552f13d66aee6cad331cb3d5cf4676</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleStage</name>
    <filename>classph_1_1_sample_stage.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>SizeHints</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a9d7b480ce52d8e7698d033861661a26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; T, T &gt;</type>
      <name>TRange</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>ac41467e66cee70084b43c786f7f535d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleStage</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a207569b7f5b46235bbdbd9c162995c10</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleStage</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a7f4ffa7148ac0d158782902d766851cd</anchor>
      <arglist>(std::size_t bufferIndex, std::size_t numSamples, TRange&lt; std::size_t &gt; dimIndexRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleStage</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>aaeb3e641a39b2e40a783c9adeb8edfff</anchor>
      <arglist>(std::size_t bufferIndex, std::size_t numSamples, TRange&lt; std::size_t &gt; dimIndexRange, SizeHints dimSizeHints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamples</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a7c646a429167204aa558eff721aa19a6</anchor>
      <arglist>(std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimSizeHints</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a216492d3184f2dd91089b5586f2be33f</anchor>
      <arglist>(SizeHints sizeHints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrideLayout</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>ae546610794f51c79b701f232e1e6f4d9</anchor>
      <arglist>(std::size_t strideSize, std::size_t offsetInStride)</arglist>
    </member>
    <member kind="function">
      <type>SampleStage</type>
      <name>popFirstND</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a7a8be171ba36ec7a356899a763574d58</anchor>
      <arglist>(std::size_t N)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBufferIndex</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a1543bfe615880f4721bed4cc3c5ac439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numDims</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a0ad2db95a89f51e49205b6d4bcb07067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numSamples</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a53a8a0a434809a5fc044752fac1ac46e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a14a1e0634ba38f82135846d6bab8be4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStrideSize</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a38d33dce491aaaf9afc236cd66f9736c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getOffsetInStride</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>ad65d75c221308224b473df59448214be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBufferSize</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a41a308de75164c1071987e7fac196713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TRange&lt; std::size_t &gt;</type>
      <name>getDimIndexRange</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>aa41c70be441be44716fd7ae353cd461c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SizeHints &amp;</type>
      <name>getDimSizeHints</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>a31c9a173cb8f222caf3ef9eddf4bc812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>af53a942d6319f25619ec2c0dadf0e615</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SizeHints</type>
      <name>makeIdentityDimSizeHints</name>
      <anchorfile>classph_1_1_sample_stage.html</anchorfile>
      <anchor>abda87aca8c1df7dd66fb1c6008686f4e</anchor>
      <arglist>(std::size_t numDims)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SampleStageReviser</name>
    <filename>classph_1_1_sample_stage_reviser.html</filename>
    <member kind="function">
      <type></type>
      <name>SampleStageReviser</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>aa0402a7e543117e39aae6b6687ec304b</anchor>
      <arglist>(SampleStage &amp;stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increaseNumSamples</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>a3684e1a8b1f539162e2841a1d2caf91f</anchor>
      <arglist>(std::size_t numAddedSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDimSizeHints</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>a8a1e3809ccf49f926ff081ddf485278f</anchor>
      <arglist>(SampleStage::SizeHints sizeHints)</arglist>
    </member>
    <member kind="function">
      <type>const SampleStage &amp;</type>
      <name>getStage</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>aecef29d833f0ee42efd41bb1df752a1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numDims</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>a539678f58c7f3f3cfd62291d372cb01a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numSamples</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>af791cd9b208dd6e7244b00048421af10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>a0cacad8901463bff62759db60ccfcf40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SampleStage::SizeHints &amp;</type>
      <name>getDimSizeHints</name>
      <anchorfile>classph_1_1_sample_stage_reviser.html</anchorfile>
      <anchor>a64da01bb2c5c67b87cf8e38e12003086</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::SamplingFilmDimensions</name>
    <filename>structph_1_1_sampling_film_dimensions.html</filename>
    <member kind="variable">
      <type>math::TVector2&lt; int64 &gt;</type>
      <name>actualResPx</name>
      <anchorfile>structph_1_1_sampling_film_dimensions.html</anchorfile>
      <anchor>a8c37dd018b78ad49d9209252ce28468d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>effectiveWindowPx</name>
      <anchorfile>structph_1_1_sampling_film_dimensions.html</anchorfile>
      <anchor>ae5fd955c81dcfe1b1f5d5c58c556793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::TAABB2D&lt; float64 &gt;</type>
      <name>sampleWindowPx</name>
      <anchorfile>structph_1_1_sampling_film_dimensions.html</anchorfile>
      <anchor>af70294ed9719ccd94d8eae707af57683</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SamplingRenderer</name>
    <filename>classph_1_1_sampling_renderer.html</filename>
    <base>ph::Renderer</base>
    <member kind="function">
      <type></type>
      <name>SamplingRenderer</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a95ec3dd9c542ba56c35fb4c780549787</anchor>
      <arglist>(std::unique_ptr&lt; IRayEnergyEstimator &gt; estimator, Viewport viewport, SampleFilter filter, uint32 numWorkers)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>doUpdate</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>aa8d8b0bfd5c6d1d235b25247f189311f</anchor>
      <arglist>(const CoreCookedUnit &amp;cooked, const VisualWorld &amp;world) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>acc989dff6f09064750a21ad0152e3b9b</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a76ed63ee85169f65e086b994204e7e74</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::size_t</type>
      <name>asyncPollUpdatedRegions</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a6d8fe891309986e969ddc62205882b39</anchor>
      <arglist>(TSpan&lt; RenderRegionStatus &gt; out_regions) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a317e4a58e543391f93cdb5989dd3b381</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a6c6ddfa18a7a9225d79c9408c0d7da68</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a8d0e9d6cb6fb30e735c00558b683d2ba</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a4cdb34451fb158d79545ae24ff83ec01</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SampleFilter</type>
      <name>m_filter</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a7ead3e84ac14aa7cf5c2f90a3bcd4d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; IRayEnergyEstimator &gt;</type>
      <name>m_estimator</name>
      <anchorfile>classph_1_1_sampling_renderer.html</anchorfile>
      <anchor>a09e90be1b2f016d0a9df55f36c2276b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::SamplingStatistics</name>
    <filename>structph_1_1_sampling_statistics.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>numSamplesTaken</name>
      <anchorfile>structph_1_1_sampling_statistics.html</anchorfile>
      <anchor>a595b835acf3406453e0be90ca385c2f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ScatterFunction</name>
    <filename>classph_1_1_scatter_function.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ScatterFunction</name>
      <anchorfile>classph_1_1_scatter_function.html</anchorfile>
      <anchor>af3c3008ec1931a7db89cf75f636d7f91</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evalPhaseFunc</name>
      <anchorfile>classph_1_1_scatter_function.html</anchorfile>
      <anchor>a23c6def9a5984801edf7f9476d07caef</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;I, const math::Vector3R &amp;O, real *out_pf) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Scene</name>
    <filename>classph_1_1_scene.html</filename>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>a8a73e8fd7b4b625ddee761f423b00b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>a88bb9472006443fc9d1a224713e839c6</anchor>
      <arglist>(const Intersector *intersector, const EmitterSampler *emitterSampler)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>a143777f2999f6a8e3629a4347d5a1049</anchor>
      <arglist>(const Ray &amp;ray) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>a5a7a34b8af81678644090d368e46eae9</anchor>
      <arglist>(const Ray &amp;ray, HitProbe *out_probe) const</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>pickEmitter</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>af2efec3c93d76b3dfc669d360acc5f33</anchor>
      <arglist>(SampleFlow &amp;sampleFlow, real *out_PDF) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>ac0b56216b94458892cd258d19299bb9b</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>a71c9457defa48599796d88951a185f67</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>af4631dd4a0588a3d81851e5639620569</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundPrimitive</name>
      <anchorfile>classph_1_1_scene.html</anchorfile>
      <anchor>a9644fca5331effcde3271673da6c1c5d</anchor>
      <arglist>(const Primitive *const primitive)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SceneDescription</name>
    <filename>classph_1_1_scene_description.html</filename>
    <base>ph::ISdlReferenceGroup</base>
    <member kind="function">
      <type></type>
      <name>SceneDescription</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>aa87c2c46eafa6368f92adac35f5cb1bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>get</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>a4b7500383abbb435b8a3a48b25d4fcb5</anchor>
      <arglist>(std::string_view resourceName) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>a19b717a7e7855d54c81968c56914a0ff</anchor>
      <arglist>(std::string_view resourceName) const override</arglist>
    </member>
    <member kind="function">
      <type>RawResourceCollection &amp;</type>
      <name>getResources</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>a3dfb7b5b21ea791d2bd0b93f0b72c4d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RawResourceCollection &amp;</type>
      <name>getResources</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>ade34cb37ba450dda9ff9a01f46f3ef59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RawResourceCollection &amp;</type>
      <name>getPhantoms</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>afaecbbb44424905b2fcfe7571a653f45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RawResourceCollection &amp;</type>
      <name>getPhantoms</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>a23a5bcd3d0c255a59cf1d4712cd87111</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getWorkingDirectory</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>a138f08b903878931dbc01772ff93e9b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkingDirectory</name>
      <anchorfile>classph_1_1_scene_description.html</anchorfile>
      <anchor>a8938e93a8d23ab656e3b95b947ab6ff8</anchor>
      <arglist>(Path directory)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SchlickApproxConductorFresnel</name>
    <filename>classph_1_1_schlick_approx_conductor_fresnel.html</filename>
    <base>ph::ConductorFresnel</base>
    <member kind="function">
      <type></type>
      <name>SchlickApproxConductorFresnel</name>
      <anchorfile>classph_1_1_schlick_approx_conductor_fresnel.html</anchorfile>
      <anchor>a33de618dc4cee0c4e2a7b9c759c81afb</anchor>
      <arglist>(real iorOuter, const math::Spectrum &amp;iorInnerN, const math::Spectrum &amp;iorInnerK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SchlickApproxConductorFresnel</name>
      <anchorfile>classph_1_1_schlick_approx_conductor_fresnel.html</anchorfile>
      <anchor>a38a93a293779febed78a5922f6f8a2fe</anchor>
      <arglist>(const math::Spectrum &amp;f0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_schlick_approx_conductor_fresnel.html</anchorfile>
      <anchor>acb45d60cef073e37b5732be0efc5d38f</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SchlickApproxDielectricFresnel</name>
    <filename>classph_1_1_schlick_approx_dielectric_fresnel.html</filename>
    <base>ph::DielectricFresnel</base>
    <member kind="function">
      <type></type>
      <name>SchlickApproxDielectricFresnel</name>
      <anchorfile>classph_1_1_schlick_approx_dielectric_fresnel.html</anchorfile>
      <anchor>ac5d39450798c7af10ff50edc22743480</anchor>
      <arglist>(real iorOuter, real iorInner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcReflectance</name>
      <anchorfile>classph_1_1_schlick_approx_dielectric_fresnel.html</anchorfile>
      <anchor>a96b394e875a5eec68a941c6b0c35ba43</anchor>
      <arglist>(real cosThetaIncident, math::Spectrum *out_reflectance) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlClass</name>
    <filename>classph_1_1_sdl_class.html</filename>
    <base>ph::ISdlInstantiable</base>
    <member kind="function">
      <type></type>
      <name>SdlClass</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a5844d536912901e08878c460cf6c3712</anchor>
      <arglist>(ESdlTypeCategory category, const std::string &amp;typeName)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>createResource</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a502c489607a7ae66a883cebe1baa125d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initResource</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a6ee79c73e0f924f78fd093d0b776e7b8</anchor>
      <arglist>(ISdlResource &amp;resource, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initDefaultResource</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>adac95fa0dea658b8abdc876122837318</anchor>
      <arglist>(ISdlResource &amp;resource) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveResource</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>ab41d947622289038b5b6a2944378971d</anchor>
      <arglist>(const ISdlResource &amp;resource, SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a5ebc76affc4ccd5527a7de93c9779eb5</anchor>
      <arglist>(std::string_view funcName, ISdlResource *resource, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>referencedResources</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>aa702efffc1017fc6430a960d93f8510b</anchor>
      <arglist>(const ISdlResource *targetResource, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numFunctions</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a5f9713d0f51960f16e127338dd4a792c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SdlFunction *</type>
      <name>getFunction</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a29fb7cee1c980ccc3fe04c65061bc4dc</anchor>
      <arglist>(std::size_t index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>ab4f6711c67d63596a534e0948c8f9fac</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>const SdlField *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>af91c20527b2d962d319f79519f553917</anchor>
      <arglist>(std::size_t index) const override=0</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getTypeName</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>affcb65110891df80de7b16bc81c1926d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getDescription</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>afafd3f5e4f5830109c5171bc88f2bba7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBlueprint</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a9c4b19b0ad2a15ff3a740af2cb784579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowCreateFromClass</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a5981e83bbf50e724728155754f89badc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>genPrettyName</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a1fe752a3078d4d88c7eaf6c053ea4d97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>genCategoryName</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>aab02ef7f93aeba77ac1ad4cf54943c14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ESdlTypeCategory</type>
      <name>getCategory</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a3af032bb23aa9971bd40c82a68ef9042</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getDocName</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>adf812457d6f0e6308d249638073999d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlClass *</type>
      <name>getBase</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>ac5ac93ed093f3dff68cde23f6d61dbfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDerived</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a63110c53ebf68d77d88182454215b23c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasField</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a2430d5ebc0604e1ff6fa4e3de622a84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFunction</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a252f7a97396dcd723e2a15ec642861ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlClass &amp;</type>
      <name>setDescription</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a13121b39121583a751c3f16cf82a2233</anchor>
      <arglist>(std::string description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlClass &amp;</type>
      <name>setDocName</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a9feafcf052b0e3b7edbe56875bc61f68</anchor>
      <arglist>(std::string docName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlClass &amp;</type>
      <name>setBase</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>adaf2fef70d4bafd2a9878f25515ae523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlClass &amp;</type>
      <name>setIsBlueprint</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>a1b596f34643d7bbede7a591f5bd659d1</anchor>
      <arglist>(bool isBlueprint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlClass &amp;</type>
      <name>setAllowCreateFromClass</name>
      <anchorfile>classph_1_1_sdl_class.html</anchorfile>
      <anchor>ac59e28111c9ee9269711636a40c27ac6</anchor>
      <arglist>(bool allowCreateFromClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlCommandGenerator</name>
    <filename>classph_1_1_sdl_command_generator.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlCommandGenerator</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>ae6a12c42c7eb81769e6329a9e5f55d19</anchor>
      <arglist>(TSpanView&lt; const SdlClass * &gt; targetClasses)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlCommandGenerator</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>aa968f4cfc174d72a3742bc248e3f503b</anchor>
      <arglist>(TSpanView&lt; const SdlClass * &gt; targetClasses, const Path &amp;sceneWorkingDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SdlCommandGenerator</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a4daa3de9407b5f47b2950982d0e9f383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateResourceCommand</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a690fbb449f8563ce4d13894abfbd3236</anchor>
      <arglist>(const ISdlResource *resource, std::string_view resourceName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCachedNamedDataPacketCommand</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>abddebcc059d4244eba5f63b191958489</anchor>
      <arglist>(const SdlNamedOutputClauses &amp;namedClauses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateVersionCommand</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>aba042d4188286aafae8b3701a1e80a3f</anchor>
      <arglist>(const SemanticVersion &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacketInterface</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a529ce049c6d6c553a6855faa78e4fcb8</anchor>
      <arglist>(std::unique_ptr&lt; SdlDataPacketInterface &gt; interface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSceneWorkingDirectory</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a960347572d255ead1c4a6bff82844631</anchor>
      <arglist>(const Path &amp;directory)</arglist>
    </member>
    <member kind="function">
      <type>SdlDataPacketInterface &amp;</type>
      <name>getPacketInterface</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>ae3184c0620d3b8d1ad822e7e5816b4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getSceneWorkingDirectory</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a7bf8638cd4c5f0e794ab75f383b0c411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numGeneratedCommands</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a83981e2de7ff2ba9277146ceb07476e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numGenerationErrors</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>aa94631b462d4aec8a1078d314d3dfd5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStats</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>ab24ea1273d4f27f53d17cd9e12de1743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTarget</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a0cf1d2831bccd4f0c93c3e9fa9280485</anchor>
      <arglist>(const SdlClass *clazz) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>beginCommand</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a1d8d53aa96c3242b55b43163ea7376ff</anchor>
      <arglist>(const SdlClass *targetClass, SdlOutputContext *out_ctx)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>endCommand</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a577b7e3153929a5a78845be6bac1dddd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>saveResource</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>acd4ac424be26d4a1549bdfc44bf5538b</anchor>
      <arglist>(const ISdlResource *resource, const SdlOutputContext &amp;ctx, SdlOutputClauses &amp;clauses)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>commandGenerated</name>
      <anchorfile>classph_1_1_sdl_command_generator.html</anchorfile>
      <anchor>a72af8a28923b6be64cc374d7eb97c247</anchor>
      <arglist>(std::string_view commandStr, const SdlOutputContext &amp;ctx)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlCommandParser</name>
    <filename>classph_1_1_sdl_command_parser.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlCommandParser</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a0957cec16c8c77c7ce18663736d37e19</anchor>
      <arglist>(TSpanView&lt; const SdlClass * &gt; targetClasses)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlCommandParser</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a45351adc2f9168ec68efa5d0e30d8b61</anchor>
      <arglist>(TSpanView&lt; const SdlClass * &gt; targetClasses, const Path &amp;sceneWorkingDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SdlCommandParser</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a3e3efbc49f89b3d4643ec25ec7e00915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>ae6690d96819e4c27ada131b368f997d1</anchor>
      <arglist>(std::string_view rawCommandSegment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a860def2d9300d7c61adac4582ba8d93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacketInterface</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>ab9d1d2e9f18dab4b57b8c7b92b9aa7d9</anchor>
      <arglist>(std::unique_ptr&lt; SdlDataPacketInterface &gt; interface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSceneWorkingDirectory</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a6a901817901668d59a5fbbeb14e68fab</anchor>
      <arglist>(const Path &amp;directory)</arglist>
    </member>
    <member kind="function">
      <type>SdlDataPacketInterface &amp;</type>
      <name>getPacketInterface</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a5f53ec5be74beba730324d715972b37e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getSceneWorkingDirectory</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>acc552752500341f1a2af3f5e2c1f71b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SemanticVersion &amp;</type>
      <name>getCommandVersion</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>ae5ae61605f28c7d97a4d303cde1e5be2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numParsedCommands</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a93d366f188ff34a4ec2f71ed1aaf26a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numParseErrors</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>aa2542ef995afbf9e90093c0d8b6b2847</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>beginCommand</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a422573abdd0c16f7af66b6008d392392</anchor>
      <arglist>(ESdlCommandType commandType, const SdlClass *targetClass, SdlInputContext *out_ctx)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>endCommand</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>aaa1f5c896d27d34146340f5796bc574c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ISdlResource *</type>
      <name>createResource</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a2eea8b8d5537c70b01333d8378b9f2e3</anchor>
      <arglist>(std::string_view resourceName, const SdlInputContext &amp;ctx, ESdlCommandType commandType)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initResource</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a5b8a8c9f24675ea2f1ddc6fb388f4c38</anchor>
      <arglist>(std::string_view resourceName, ISdlResource *resource, const SdlInputContext &amp;ctx, SdlInputClauses &amp;clauses, ESdlCommandType commandType)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ISdlResource *</type>
      <name>getResource</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a5621c638e2cf09ac2adc5458268a57bb</anchor>
      <arglist>(std::string_view resourceName, const SdlInputContext &amp;ctx)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>runExecutor</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a5b1db2f6dc5a68913698a0c61f7aac7f</anchor>
      <arglist>(std::string_view executorName, const SdlInputContext &amp;ctx, ISdlResource *targetResource, SdlInputClauses &amp;clauses, ESdlCommandType commandType)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>commandVersionSet</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a7373a76f969aa919453a6e0e3ec29c18</anchor>
      <arglist>(const SemanticVersion &amp;version, const SdlInputContext &amp;ctx)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>storeNamedDataPacket</name>
      <anchorfile>classph_1_1_sdl_command_parser.html</anchorfile>
      <anchor>a516347e9cf8fdf5430d5197ce7d4e8f7</anchor>
      <arglist>(std::string_view packetName, const SdlInputClauses &amp;packet, const SdlInputContext &amp;ctx)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlDataPacketCollection</name>
    <filename>classph_1_1_sdl_data_packet_collection.html</filename>
    <base>ph::ISdlDataPacketGroup</base>
    <member kind="function">
      <type>const SdlInputClauses *</type>
      <name>get</name>
      <anchorfile>classph_1_1_sdl_data_packet_collection.html</anchorfile>
      <anchor>a43742a4581d131a5e9892f92822bcc96</anchor>
      <arglist>(std::string_view packetName) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUnique</name>
      <anchorfile>classph_1_1_sdl_data_packet_collection.html</anchorfile>
      <anchor>a04d1e15f5d1dbe74354fb6cb6f01012e</anchor>
      <arglist>(SdlInputClauses packet, std::string_view packetName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrUpdate</name>
      <anchorfile>classph_1_1_sdl_data_packet_collection.html</anchorfile>
      <anchor>af761473859b056f405e25c5a5cfd7fb5</anchor>
      <arglist>(SdlInputClauses packet, std::string_view packetName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlDataPacketInterface</name>
    <filename>classph_1_1_sdl_data_packet_interface.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlDataPacketInterface</name>
      <anchorfile>classph_1_1_sdl_data_packet_interface.html</anchorfile>
      <anchor>a42af87a60a828b1fdd3b595dbf3e3ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SdlDataPacketInterface</name>
      <anchorfile>classph_1_1_sdl_data_packet_interface.html</anchorfile>
      <anchor>a728bff093bfd5658e0345979638731d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classph_1_1_sdl_data_packet_interface.html</anchorfile>
      <anchor>a1d7c49ed92cedcffaac150e1403b714d</anchor>
      <arglist>(std::string_view packetCommand, const SdlInputContext &amp;ctx, std::string_view targetName, ISdlResource *targetInstance, SdlInputClauses &amp;out_clauses) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>classph_1_1_sdl_data_packet_interface.html</anchorfile>
      <anchor>a729bf5bd48c987ac54eea9400685fed0</anchor>
      <arglist>(const SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx, std::string_view targetName, const ISdlResource *targetInstance, std::string &amp;out_packetCommand) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlDependencyResolver</name>
    <filename>classph_1_1_sdl_dependency_resolver.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlDependencyResolver</name>
      <anchorfile>classph_1_1_sdl_dependency_resolver.html</anchorfile>
      <anchor>a0544d5d34c0cebfd3ec4f5c311cbbff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyze</name>
      <anchorfile>classph_1_1_sdl_dependency_resolver.html</anchorfile>
      <anchor>aae605a8cf8e7dcc5766a40c5e121e467</anchor>
      <arglist>(TSpanView&lt; const ISdlResource * &gt; resources, TSpanView&lt; std::string &gt; resourceNames={})</arglist>
    </member>
    <member kind="function">
      <type>const ISdlResource *</type>
      <name>next</name>
      <anchorfile>classph_1_1_sdl_dependency_resolver.html</anchorfile>
      <anchor>af05f2b613bafdc4ba3a8bd1c48f02535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getResourceName</name>
      <anchorfile>classph_1_1_sdl_dependency_resolver.html</anchorfile>
      <anchor>a1956e285ccb13dff17bfb417b52fe3ba</anchor>
      <arglist>(const ISdlResource *resource) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlEnum</name>
    <filename>classph_1_1_sdl_enum.html</filename>
    <class kind="struct">ph::SdlEnum::TEntry</class>
    <member kind="typedef">
      <type>TEntry&lt; int64 &gt;</type>
      <name>Entry</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>a4e729b371bb5d0279a8d16a41e4a923c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlEnum</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>aa9fceb1a046fac18017049f0f03e0fc9</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Entry</type>
      <name>getEntry</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>acebdfb20281412a75e3767dfe9322de8</anchor>
      <arglist>(std::size_t entryIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numEntries</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>ae1223bb1f5c5cc583fb6e35573e92493</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>a1010bd837f7cbebabfddcdfc76789c8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDescription</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>ac3aee79d239cde1a0269fb3c3eebf51a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getEntryDescription</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>aa8ec930f1e3ed91cccc9b52aab581072</anchor>
      <arglist>(std::size_t entryIndex) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlEnum &amp;</type>
      <name>setDescription</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>a9c1ecf1eb5d0726e1b81dd69e37b9c8d</anchor>
      <arglist>(std::string description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlEnum &amp;</type>
      <name>setEntryDescription</name>
      <anchorfile>classph_1_1_sdl_enum.html</anchorfile>
      <anchor>ac1ecb358ee5919da013529790c1d26b8</anchor>
      <arglist>(std::size_t entryIndex, std::string description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlException</name>
    <filename>classph_1_1_sdl_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlException</name>
      <anchorfile>classph_1_1_sdl_exception.html</anchorfile>
      <anchor>ac4bb2593450272b5e3595e23dff2b43b</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlException</name>
      <anchorfile>classph_1_1_sdl_exception.html</anchorfile>
      <anchor>a65a1eacbaf4117263d108cbba1ff096e</anchor>
      <arglist>(const char *message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlField</name>
    <filename>classph_1_1_sdl_field.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlField</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>a34f15ae41ba8509bdae6b7a3c094630e</anchor>
      <arglist>(std::string typeName, std::string fieldName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlField</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>a07624c9c16e8d1d4382bc9b9e78e5cc0</anchor>
      <arglist>(std::string typeName, std::string fieldName, std::string typeSignature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SdlField</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>ae828dc3ae32da662026bc2ae33221e75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SdlNativeData</type>
      <name>nativeData</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>ab5a18bde91522ffbd3eaff9dc2df2bd8</anchor>
      <arglist>(SdlNonConstInstance instance) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>genPrettyName</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>ad231bc85c5023c88444c4996d761ec6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getTypeName</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>acdfebdd9b567d13788c46d82ac6090b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getFieldName</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>a962c98679001aa7ac716d39af9da64bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getDescription</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>ac7e52049013f276cf3a81837492cab5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getTypeSignature</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>aca549ed84b8d8f951a4ff80c9632d3cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EFieldImportance</type>
      <name>getImportance</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>adfc13b55de1ac7a6df4d86f64b8216d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFallbackEnabled</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>aaabe04025dfb15c03a90e8d434837df4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlField &amp;</type>
      <name>setDescription</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>ad6ac3ef20e4c4e77c780e89e6e4a4218</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlField &amp;</type>
      <name>setImportance</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>ad0030e6c2e46e2dda93064e0f04a9196</anchor>
      <arglist>(EFieldImportance importance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlField &amp;</type>
      <name>setEnableFallback</name>
      <anchorfile>classph_1_1_sdl_field.html</anchorfile>
      <anchor>a3c3ec4af226672c84292648f8b6e17a3</anchor>
      <arglist>(bool isFallbackEnabled)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlFunction</name>
    <filename>classph_1_1_sdl_function.html</filename>
    <base>ph::ISdlInstantiable</base>
    <member kind="function">
      <type></type>
      <name>SdlFunction</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>a33305f037a35db977a4d330cadd22932</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>a3ed20390ed7a0cb8961805d7d2c0ac74</anchor>
      <arglist>(ISdlResource *resource, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numParams</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>abb7d57567eda76f1e0e122b8dfb95f64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SdlField *</type>
      <name>getParam</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>ae1587869af84ae108ef6070ce4ce34cb</anchor>
      <arglist>(std::size_t index) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>a2e7bb879f7c0e4d40b0c8e4f840219de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const SdlField *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>a1c26bdd31149e072dc94d6285c175a6e</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getTypeName</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>ad45662ce838641df14e70e75cb61472c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getDescription</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>a9ad7dcd1d9c91333195236cb4e04069f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getName</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>ab51e4911b07457cb64224ec0d4acb97f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>genPrettyName</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>ae8a33d8bc5579c4db47d5952f777961e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlFunction &amp;</type>
      <name>setDescription</name>
      <anchorfile>classph_1_1_sdl_function.html</anchorfile>
      <anchor>ad303f7def8dbbec8d8b6fe997e3e0b23</anchor>
      <arglist>(std::string description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlInlinePacketInterface</name>
    <filename>classph_1_1_sdl_inline_packet_interface.html</filename>
    <base>ph::SdlDataPacketInterface</base>
    <member kind="function">
      <type></type>
      <name>SdlInlinePacketInterface</name>
      <anchorfile>classph_1_1_sdl_inline_packet_interface.html</anchorfile>
      <anchor>aeebce827600eb304abbd36a013dd6e1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInlinePacketInterface</name>
      <anchorfile>classph_1_1_sdl_inline_packet_interface.html</anchorfile>
      <anchor>a9a605c9d336a08ce599292fe464de7a6</anchor>
      <arglist>(int clauseIndentAmount, char clauseIndentChar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classph_1_1_sdl_inline_packet_interface.html</anchorfile>
      <anchor>abb90f9a241fe70ee1df6f78122fda854</anchor>
      <arglist>(std::string_view packetCommand, const SdlInputContext &amp;ctx, std::string_view targetName, ISdlResource *targetInstance, SdlInputClauses &amp;out_clauses) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classph_1_1_sdl_inline_packet_interface.html</anchorfile>
      <anchor>a37cce06dfae7fbc65354a85b933db7a2</anchor>
      <arglist>(const SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx, std::string_view targetName, const ISdlResource *targetInstance, std::string &amp;out_packetCommand) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlInputClause</name>
    <filename>classph_1_1_sdl_input_clause.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlInputClause</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a837b2121d1702554fd748b453ec1c68f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInputClause</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>aab66f530f294526c3c03da92258862bb</anchor>
      <arglist>(std::string value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInputClause</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a3f5ba45bbebd0694f40631998c169941</anchor>
      <arglist>(std::string value, std::string tag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInputClause</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a861866fdecd03866ab0f7dbd12718c8e</anchor>
      <arglist>(std::string type, std::string name, std::string value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInputClause</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a28c5ee56d55368259895955fc3703e3b</anchor>
      <arglist>(std::string type, std::string name, std::string value, std::string tag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResourceIdentifier</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a8da6abbcb9c670971ff62c1a64bf0f19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>genPrettyName</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a9d314d0fff971d212ee8bbd8c1c91268</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a3450d2f965feafa1ad3cc397f8edfe7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a7162485fa80709d5ec67db71a5da8542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a9450d11904c3cb53e06a7b9ba6dd8aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a3a57fdbbab5543025ef072715c949c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>tag</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>a3ef6dc0b68d0996b68eaac312958a070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ESdlClauseValue</type>
      <name>valueType</name>
      <anchorfile>classph_1_1_sdl_input_clause.html</anchorfile>
      <anchor>ac6d842783c555da700a545d0239050be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlInputClauses</name>
    <filename>classph_1_1_sdl_input_clauses.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a2a340c050dec770d9305ae46a9298b84</anchor>
      <arglist>(SdlInputClause clause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a3c388d5c296e736eb8a4938f49e39604</anchor>
      <arglist>(std::string type, std::string name, std::string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a1caa400fbe934f9a94b81ffae2f6d59d</anchor>
      <arglist>(std::string type, std::string name, std::string value, std::string tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a877f0dd5cf1e0c86444d83f349f59af2</anchor>
      <arglist>(const SdlInputClauses &amp;clauses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>consume</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a9b08c419c44a087555584f9f17ab1677</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>consumeBySwapPop</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>ad180e36b76bc3397de35abe3244194a9</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a6abc540d41ef36fa591c4848a58f140a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a8f5df6493c597b9421bc45d6e9fcb899</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a7886b504f4a111f2861f51101ecf6038</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlInputClause &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_sdl_input_clauses.html</anchorfile>
      <anchor>a66d54fe6f1b81c8a4cc3eaacc52f59b2</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlInputContext</name>
    <filename>classph_1_1_sdl_input_context.html</filename>
    <base>ph::SdlIOContext</base>
    <member kind="function">
      <type></type>
      <name>SdlInputContext</name>
      <anchorfile>classph_1_1_sdl_input_context.html</anchorfile>
      <anchor>a11cbd9d67166fb8d66d7d18b2a3a98d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInputContext</name>
      <anchorfile>classph_1_1_sdl_input_context.html</anchorfile>
      <anchor>aaba4abeead5f7f5abcf11f8eb066d475</anchor>
      <arglist>(const Path *workingDirectory, const SdlClass *srcClass=nullptr, const SdlStruct *srcStruct=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlInputContext</name>
      <anchorfile>classph_1_1_sdl_input_context.html</anchorfile>
      <anchor>a05db98a0fa5d3107257b9f8ea8eb3eda</anchor>
      <arglist>(const ISdlReferenceGroup *srcResources, const ISdlDataPacketGroup *srcDataPackets, const Path *workingDirectory, const SdlClass *srcClass=nullptr, const SdlStruct *srcStruct=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const ISdlReferenceGroup *</type>
      <name>getSrcResources</name>
      <anchorfile>classph_1_1_sdl_input_context.html</anchorfile>
      <anchor>ad10a6db86e2a8cc7bf7099b4d9d3c85e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ISdlDataPacketGroup *</type>
      <name>getSrcDataPackets</name>
      <anchorfile>classph_1_1_sdl_input_context.html</anchorfile>
      <anchor>a9adc4b7a596c28a387058041f2ca96d3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlIOContext</name>
    <filename>classph_1_1_sdl_i_o_context.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>genPrettySrcInfo</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a0d0097ef3a8e3e652225996cd3a5167d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getWorkingDirectory</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a5c1482b919ed7f64eb2439b52e8edbf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlClass *</type>
      <name>getSrcClass</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a5b9c08b5228d2e5e4718e08485cb83d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlStruct *</type>
      <name>getSrcStruct</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>af02706a0434a5c0f8a0f7a78f0145023</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcClass</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>abf3ad114f56f72da3856fd443145b0d3</anchor>
      <arglist>(const SdlClass *srcClass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcStruct</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a1280eb0ecf3116e275801a35a04f79a4</anchor>
      <arglist>(const SdlStruct *srcStruct)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlIOContext</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a3f2041dffa41186dbbe715ab663a55a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlIOContext</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a5162c05e789864144b390ebc28dcd7f6</anchor>
      <arglist>(const Path *workingDirectory, const SdlClass *srcClass=nullptr, const SdlStruct *srcStruct=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlIOContext</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a8f8f2f83d1bfb2719debefb8534f1767</anchor>
      <arglist>(const SdlIOContext &amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlIOContext</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a9b31e756fc00ad61f1179de8a3394bee</anchor>
      <arglist>(SdlIOContext &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlIOContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>a3f1d3a03704903d995862e73f70d367e</anchor>
      <arglist>(const SdlIOContext &amp;rhs)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlIOContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_sdl_i_o_context.html</anchorfile>
      <anchor>acea03cb93ed6a5c97f6f26fafef028c9</anchor>
      <arglist>(SdlIOContext &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlLoadError</name>
    <filename>classph_1_1_sdl_load_error.html</filename>
    <base>ph::SdlException</base>
    <member kind="function">
      <type></type>
      <name>SdlException</name>
      <anchorfile>classph_1_1_sdl_load_error.html</anchorfile>
      <anchor>ac4bb2593450272b5e3595e23dff2b43b</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlException</name>
      <anchorfile>classph_1_1_sdl_load_error.html</anchorfile>
      <anchor>a65a1eacbaf4117263d108cbba1ff096e</anchor>
      <arglist>(const char *message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlNamedOutputClauses</name>
    <filename>classph_1_1_sdl_named_output_clauses.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addUnique</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>a5ac7985ec3b4f70767c61eed8e0d70a8</anchor>
      <arglist>(SdlOutputClauses clauses, std::string_view clausesName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrUpdate</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>a2fddc6e23548f7ce07144353d6042932</anchor>
      <arglist>(SdlOutputClauses clauses, std::string_view clausesName)</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>addOrUpdate</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>addfd82a1958c31235cbadefa48f961a4</anchor>
      <arglist>(SdlOutputClauses packet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>a6a1ff7bf0013e24a57531e58b900bf15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numNamedOutputClauses</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>af95929f4012211fa8d9d768fe58b8f4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>afc0ab02a8c2d5d6f1607954252de9c08</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const SdlOutputClauses &amp;</type>
      <name>getOutputClauses</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>a458ab9d0eef23901e10d1f7b19914e65</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>afc0ab02a8c2d5d6f1607954252de9c08</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const SdlOutputClauses &amp;</type>
      <name>getOutputClauses</name>
      <anchorfile>classph_1_1_sdl_named_output_clauses.html</anchorfile>
      <anchor>a458ab9d0eef23901e10d1f7b19914e65</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlNativeData</name>
    <filename>classph_1_1_sdl_native_data.html</filename>
    <member kind="typedef">
      <type>TFunction&lt; Func, 32 &gt;</type>
      <name>TElementAccessor</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a513bb44b489f5d0cee32d268ccca1475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TElementAccessor&lt; SdlGetterVariant(std::size_t elementIdx)&gt;</type>
      <name>ElementGetter</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a02fbe221eda10918f66842e33389b2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TElementAccessor&lt; bool(std::size_t elementIdx, SdlSetterVariant input)&gt;</type>
      <name>ElementSetter</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>aa86e64cce5e322e0362ebb3b58fc4b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlNativeData</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>acbd610e7d97131c539827ae78cc74578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlNativeData</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a3e652b3e003c4ca4c2b3ab573960dedb</anchor>
      <arglist>(ElementGetter getter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlNativeData</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a2937230f4db0e9e26c48e5b7bb50cba3</anchor>
      <arglist>(ElementGetter getter, ElementSetter setter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlNativeData</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a4eedfebe4bb9b5b1d9549c4ba4c3635b</anchor>
      <arglist>(ElementGetter getter, ElementSetter setter, AnyNonConstPtr directPtr)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ab9df6c61cddb77473d34e53c149f2feb</anchor>
      <arglist>(std::size_t elementIdx) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ab61576cbdd1405607b1fcad44e2739a0</anchor>
      <arglist>(std::size_t elementIdx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a8cc524adf9e296227e59b429607f5ddf</anchor>
      <arglist>(std::size_t elementIdx, T value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ae294402f8bcc80f2f36c74e79986e98a</anchor>
      <arglist>(std::size_t elementIdx, T ptr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a526b7ee870f17a40437e42f5fbd4f9d5</anchor>
      <arglist>(std::size_t elementIdx, T nullPtr) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>directAccess</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a4c509e742a3e42ee42ae9dca7bd2b3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectAccessor</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a45dcc41c48399e519c4ae1bbedf3742c</anchor>
      <arglist>(AnyNonConstPtr accessor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntegerElement</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>aed38b27873727ce2f1aee10b0b489b18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloatingPointElement</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ac93cfb21ce14bb6c192d0f17cc67fa15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ab6964182d000b7b61daca02cc5a12f77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SdlNativeData</type>
      <name>fromSingleElement</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ae95e05b58c7e3ea8eddd69dcee0b6bc4</anchor>
      <arglist>(ElementType *elementPtr, ESdlDataFormat elementContainer, ESdlDataType elementType, bool canSet=false, bool canDirectAccess=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>permissiveElementGetter</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a632f90a9950791b7c25f89293d3822d5</anchor>
      <arglist>(ElementType *elementPtr) -&gt; SdlGetterVariant</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>permissiveElementSetter</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a035296228dfe6619da40577b68ecc3f0</anchor>
      <arglist>(SdlSetterVariant input, ElementType *out_elementPtr) -&gt; bool</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a31819f46d6bd68e7854be1efa3e1adfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>tupleSize</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a346603e838af711c249a686cba104fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ESdlDataFormat</type>
      <name>elementContainer</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>ac4ae3347b42cda22281f162b50afd205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ESdlDataType</type>
      <name>elementType</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a82fcba9016c044594965ced726e61d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>isNullClearable</name>
      <anchorfile>classph_1_1_sdl_native_data.html</anchorfile>
      <anchor>a1b89ff6b1d76dad6fa69d76be98a49dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlOutputClause</name>
    <filename>classph_1_1_sdl_output_clause.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlOutputClause</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>ae816480ab48ad03f91668ccd45d4ff27</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>ac90fec482ed5556f1e0ab5e4dcac7baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTag</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>ab17e68873caded4b8ca38e03572ae456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>ab89542e2b1d512873ff662cd2f9fbe5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>ac8c4a918d9b8954966f954e015524fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>a45a2cbf87bc2871170ee361d6d6a4bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>a27625fd790a2cb49f0cfd9c113ddb5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>tag</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>a5362817b9ca80f89f5783ba6e3d77294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ESdlClauseValue</type>
      <name>valueType</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>ac70d706c010aded3a37a6cfe3d45af43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>a8bd6ce2a952288003b3b7d085f375cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isUsingNamedOutputClauses</name>
      <anchorfile>classph_1_1_sdl_output_clause.html</anchorfile>
      <anchor>a96c282840516c2e072ec8edf7a711849</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlOutputClauses</name>
    <filename>classph_1_1_sdl_output_clauses.html</filename>
    <member kind="function">
      <type></type>
      <name>SdlOutputClauses</name>
      <anchorfile>classph_1_1_sdl_output_clauses.html</anchorfile>
      <anchor>aaca69aca37dc4d7eb9173f261e9da3b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SdlOutputClause &amp;</type>
      <name>createClause</name>
      <anchorfile>classph_1_1_sdl_output_clauses.html</anchorfile>
      <anchor>a0cda7ec745897c926164ad2d88cc0533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_sdl_output_clauses.html</anchorfile>
      <anchor>a76dbbb881dd1b70d2c0d7baa8049d260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numClauses</name>
      <anchorfile>classph_1_1_sdl_output_clauses.html</anchorfile>
      <anchor>a3b9cac978409458f09b93ac2ab57ff9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlOutputClause &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_sdl_output_clauses.html</anchorfile>
      <anchor>ab4f7a7503e5b6d2a4ce56df009c5bbf8</anchor>
      <arglist>(std::size_t clauseIdx) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlOutputContext</name>
    <filename>classph_1_1_sdl_output_context.html</filename>
    <base>ph::SdlIOContext</base>
    <member kind="function">
      <type></type>
      <name>SdlOutputContext</name>
      <anchorfile>classph_1_1_sdl_output_context.html</anchorfile>
      <anchor>a33105037b02f48378c71f76c6d733087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlOutputContext</name>
      <anchorfile>classph_1_1_sdl_output_context.html</anchorfile>
      <anchor>a0fc5236d3fbee3f316e0d3230c138188</anchor>
      <arglist>(const Path *workingDirectory, const SdlClass *srcClass=nullptr, const SdlStruct *srcStruct=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlOutputContext</name>
      <anchorfile>classph_1_1_sdl_output_context.html</anchorfile>
      <anchor>a8e5243ae10ebb6cddb20abc5a19430c6</anchor>
      <arglist>(const SdlDependencyResolver *dependencyResolver, SdlNamedOutputClauses *namedOutputClauses, const Path *workingDirectory, const SdlClass *srcClass=nullptr, const SdlStruct *srcStruct=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const SdlDependencyResolver *</type>
      <name>getDependencyResolver</name>
      <anchorfile>classph_1_1_sdl_output_context.html</anchorfile>
      <anchor>a392081b678fa1c44f2c9837e536f0ba7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SdlNamedOutputClauses *</type>
      <name>getNamedOutputClauses</name>
      <anchorfile>classph_1_1_sdl_output_context.html</anchorfile>
      <anchor>ae91bcb6bb431844696a8754f2c6bd7d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getResourceName</name>
      <anchorfile>classph_1_1_sdl_output_context.html</anchorfile>
      <anchor>aa17963043f3dfd9b7fedc763277b0e6c</anchor>
      <arglist>(const ISdlResource *resource) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlResourceBase</name>
    <filename>classph_1_1_sdl_resource_base.html</filename>
    <base>ph::ISdlResource</base>
    <member kind="function" virtualness="pure">
      <type>ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>a3fe4b3e85b3a7807ffef3ef330db8ef2</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function">
      <type>SdlResourceId</type>
      <name>getId</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>ab93f1e6e54b900257c3088fdc25eca2c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlResourceBase</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>a92f3f80f621383543c0b9c42e66db89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlResourceBase</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>aaec4928d3d974553dbaab26a1192a654</anchor>
      <arglist>(const SdlResourceBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SdlResourceBase</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>a384fbefb87ca36bb52b58e9888f95375</anchor>
      <arglist>(SdlResourceBase &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlResourceBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>ae298f00a42d037e5b502f7cf8d059f58</anchor>
      <arglist>(const SdlResourceBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlResourceBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_sdl_resource_base.html</anchorfile>
      <anchor>a24ffbd4a9a64cb06e0c662b627a3e8dc</anchor>
      <arglist>(SdlResourceBase &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlResourceLocator</name>
    <filename>classph_1_1_sdl_resource_locator.html</filename>
    <base>ph::IResourceIdentifierResolver</base>
    <member kind="function">
      <type></type>
      <name>SdlResourceLocator</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a1b04e802504259d71e88830bbc476029</anchor>
      <arglist>(const SdlIOContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resolve</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a03d5a8902f88be822133972d8bfc364d</anchor>
      <arglist>(ResourceIdentifier &amp;identifier) override</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>toPath</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a69abff54bd7bbd3c42332d5f7ea97261</anchor>
      <arglist>(std::string_view sri) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toBundleSRI</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a4bc8e340214fa0e47b754b1820749826</anchor>
      <arglist>(std::string_view sri) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toExternalSRI</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a38055d5a85b2314488f7e4636b7abbd8</anchor>
      <arglist>(std::string_view sri) const</arglist>
    </member>
    <member kind="function">
      <type>ResourceIdentifier</type>
      <name>toBundleIdentifier</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a6587498f3fb0a5ea81e23e3b92db1a35</anchor>
      <arglist>(const Path &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>ResourceIdentifier</type>
      <name>toExternalIdentifier</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a8b36f875c38ba5dbace3d16f3b5867e1</anchor>
      <arglist>(const Path &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>ESriType</type>
      <name>getType</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>af1b5ce6eaacd015d72e81a493ccd2383</anchor>
      <arglist>(std::string_view identifier) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isRecognized</name>
      <anchorfile>classph_1_1_sdl_resource_locator.html</anchorfile>
      <anchor>a43ec1f625b45aa2e81b224adfaf92235</anchor>
      <arglist>(std::string_view sdlValueStr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::PhysicalActor::SdlRotate</name>
    <filename>structph_1_1_physical_actor_1_1_sdl_rotate.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_rotate.html</anchorfile>
      <anchor>a3ed618a9871b4f2e89d29f7f77d5270f</anchor>
      <arglist>(PhysicalActor &amp;actor) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_FUNCTION</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_rotate.html</anchorfile>
      <anchor>afe1c98e2d653cfa8e7c0ea3a4f7e3d5c</anchor>
      <arglist>(TSdlMethod&lt; SdlRotate, PhysicalActor &gt;)</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; math::Vector3R &gt;</type>
      <name>axis</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_rotate.html</anchorfile>
      <anchor>a36db524ee4500ccf8db01f10c5dd85a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; real &gt;</type>
      <name>degrees</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_rotate.html</anchorfile>
      <anchor>a20508221a508f4fef0d9c007f67d0908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; math::QuaternionR &gt;</type>
      <name>rotation</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_rotate.html</anchorfile>
      <anchor>a936bde60cb73a3704dd5c1699d84a926</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlSaveError</name>
    <filename>classph_1_1_sdl_save_error.html</filename>
    <base>ph::SdlException</base>
    <member kind="function">
      <type></type>
      <name>SdlException</name>
      <anchorfile>classph_1_1_sdl_save_error.html</anchorfile>
      <anchor>ac4bb2593450272b5e3595e23dff2b43b</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlException</name>
      <anchorfile>classph_1_1_sdl_save_error.html</anchorfile>
      <anchor>a65a1eacbaf4117263d108cbba1ff096e</anchor>
      <arglist>(const char *message)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::PhysicalActor::SdlScale</name>
    <filename>structph_1_1_physical_actor_1_1_sdl_scale.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_scale.html</anchorfile>
      <anchor>a96cebd95ac2a366207808dd515ccf276</anchor>
      <arglist>(PhysicalActor &amp;actor) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_FUNCTION</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_scale.html</anchorfile>
      <anchor>aea7b929e38f075fc51be0c83f303c009</anchor>
      <arglist>(TSdlMethod&lt; SdlScale, PhysicalActor &gt;)</arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3R</type>
      <name>amount</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_scale.html</anchorfile>
      <anchor>a1e775469116b875b69dd015a8d4b1d4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlSceneFileReader</name>
    <filename>classph_1_1_sdl_scene_file_reader.html</filename>
    <base>ph::SdlCommandParser</base>
    <member kind="function">
      <type></type>
      <name>SdlSceneFileReader</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>acee557a3cc02d887d1abd6a0e19461ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlSceneFileReader</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a5b3f9659fe66e9e753b30d8513e41264</anchor>
      <arglist>(const Path &amp;sceneFile, const Path &amp;sceneWorkingDirectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlSceneFileReader</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>ad809c6ef9e885e4acc5727f6e50148af</anchor>
      <arglist>(TSpanView&lt; const SdlClass * &gt; targetClasses, const Path &amp;sceneFile, const Path &amp;sceneWorkingDirectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SdlSceneFileReader</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>ad410e5d295afb5a0d3322577876f335e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>acb3dd6c0469e651bdb509297c1f9e7fc</anchor>
      <arglist>(SceneDescription *scene=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSceneFile</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>ab4c19bba310a0a61c2d15ff7675424e0</anchor>
      <arglist>(Path sceneFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScene</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a9c3389c67002243a8270698207d8f3ca</anchor>
      <arglist>(SceneDescription *scene)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>beginCommand</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a1b8ade948757de283f57df89c5431db7</anchor>
      <arglist>(ESdlCommandType commandType, const SdlClass *targetClass, SdlInputContext *out_ctx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endCommand</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>aa1134955edc977715f079cc178a59c7c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ISdlResource *</type>
      <name>createResource</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a811e658f77819e4558ce442ca62fbe5a</anchor>
      <arglist>(std::string_view resourceName, const SdlInputContext &amp;ctx, ESdlCommandType commandType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initResource</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>aa0ed5f16c3bb5a5007a45d2744a6a7b7</anchor>
      <arglist>(std::string_view resourceName, ISdlResource *resource, const SdlInputContext &amp;ctx, SdlInputClauses &amp;clauses, ESdlCommandType commandType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ISdlResource *</type>
      <name>getResource</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a85a4b09db0a55cc4615eaee69b9c0be2</anchor>
      <arglist>(std::string_view resourceName, const SdlInputContext &amp;ctx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>runExecutor</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>af1da028fa54b4e17b25a4f1370d98b3d</anchor>
      <arglist>(std::string_view executorName, const SdlInputContext &amp;ctx, ISdlResource *targetResource, SdlInputClauses &amp;clauses, ESdlCommandType commandType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>commandVersionSet</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a22f9f67a10dd68f660900cc2949b4fd1</anchor>
      <arglist>(const SemanticVersion &amp;version, const SdlInputContext &amp;ctx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>storeNamedDataPacket</name>
      <anchorfile>classph_1_1_sdl_scene_file_reader.html</anchorfile>
      <anchor>a3b5c87cfd47b8aa6bac2d5b6763b5451</anchor>
      <arglist>(std::string_view packetName, const SdlInputClauses &amp;packet, const SdlInputContext &amp;ctx) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlSceneFileWriter</name>
    <filename>classph_1_1_sdl_scene_file_writer.html</filename>
    <base>ph::SdlCommandGenerator</base>
    <member kind="function">
      <type></type>
      <name>SdlSceneFileWriter</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>aacddfb2fff02e2dd9f272a26d8eec05d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlSceneFileWriter</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>ae83cbd049d4f70569ba0ef3595730df7</anchor>
      <arglist>(const Path &amp;sceneFile, const Path &amp;sceneWorkingDirectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SdlSceneFileWriter</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>a23bcda1ca51644c4955f70f8be1e14bd</anchor>
      <arglist>(TSpanView&lt; const SdlClass * &gt; targetClasses, const Path &amp;sceneFile, const Path &amp;sceneWorkingDirectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>a329dcc51a49dc9ec4bfdb6eadff6f238</anchor>
      <arglist>(const SceneDescription &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSceneFile</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>aed9d4961c2e0d23067fb401fa6942265</anchor>
      <arglist>(Path sceneFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>beginCommand</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>a990742e87a6ee87e01e0a4078215c587</anchor>
      <arglist>(const SdlClass *targetClass, SdlOutputContext *out_ctx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endCommand</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>a6379f8fc2694fd61c1cc87e384960ee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveResource</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>a7feb6759c8a7888dc89dd82e82f4233c</anchor>
      <arglist>(const ISdlResource *resource, const SdlOutputContext &amp;ctx, SdlOutputClauses &amp;clauses) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>commandGenerated</name>
      <anchorfile>classph_1_1_sdl_scene_file_writer.html</anchorfile>
      <anchor>a63b988be7bd6c7aa2578cc8145f41afe</anchor>
      <arglist>(std::string_view commandStr, const SdlOutputContext &amp;ctx) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlStruct</name>
    <filename>classph_1_1_sdl_struct.html</filename>
    <base>ph::ISdlInstantiable</base>
    <member kind="function">
      <type></type>
      <name>SdlStruct</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a893757bdde5aa63ac2eac59e34626a62</anchor>
      <arglist>(std::string typeName)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initObject</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a7fcfdca876d8940480aa7d4bc723d97e</anchor>
      <arglist>(AnyNonConstPtr obj, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initDefaultObject</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>aa58fabd6845c3bb5b30e46d0d4ca05f6</anchor>
      <arglist>(AnyNonConstPtr obj) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveObject</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a9ec5012b1997714aca42a8b24c72d248</anchor>
      <arglist>(AnyConstPtr obj, SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>referencedResources</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>ab9c6f8a561193d8caf8f23fbbeee9fdd</anchor>
      <arglist>(AnyConstPtr obj, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a309d39dc56739aeffce345cd30de93f9</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>const SdlField *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a5b019aaf4ffacb0f234b0ca2a6f25ee2</anchor>
      <arglist>(std::size_t index) const override=0</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getTypeName</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a9f7ce7f00d64b21e99fb90983cf90900</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getDescription</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a4b2f2d66c3a2b8c39ca74be7ec6bf851</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SdlStruct &amp;</type>
      <name>setDescription</name>
      <anchorfile>classph_1_1_sdl_struct.html</anchorfile>
      <anchor>a4c3b42dd12fa3ce13a57d5d85a85d540</anchor>
      <arglist>(std::string description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SdlStructFieldStump</name>
    <filename>classph_1_1_sdl_struct_field_stump.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>genFieldSet</name>
      <anchorfile>classph_1_1_sdl_struct_field_stump.html</anchorfile>
      <anchor>a2a22d4a13469cd3f03dd6d0cd538ee2e</anchor>
      <arglist>(StructType Owner::*structObjPtr) const -&gt; TSdlBruteForceFieldSet&lt; TSdlOwnedField&lt; Owner &gt; &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::PhysicalActor::SdlTranslate</name>
    <filename>structph_1_1_physical_actor_1_1_sdl_translate.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_translate.html</anchorfile>
      <anchor>a91de3da107c814add3546fc65e476f74</anchor>
      <arglist>(PhysicalActor &amp;actor) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_FUNCTION</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_translate.html</anchorfile>
      <anchor>af27610de16ad5b313f216846c051ae61</anchor>
      <arglist>(TSdlMethod&lt; SdlTranslate, PhysicalActor &gt;)</arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3R</type>
      <name>amount</name>
      <anchorfile>structph_1_1_physical_actor_1_1_sdl_translate.html</anchorfile>
      <anchor>a80d8a5b3b86c8edd923305fa08f2e4c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SemanticVersion</name>
    <filename>classph_1_1_semantic_version.html</filename>
    <member kind="function">
      <type></type>
      <name>SemanticVersion</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>aedecb05eced76313f0aa58f919e5ec7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SemanticVersion</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>ac022a8e5e10a6488dd1658d97a453df5</anchor>
      <arglist>(uint16 major, uint16 minor, uint16 patch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SemanticVersion</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>aa213ca045933b94b8de887067e1268d6</anchor>
      <arglist>(std::string_view version)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitial</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>a218e18eb23e44cdc08f24bc9f131e3f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>abce11e9fe53ad04c378bc4af79594249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>ad69b6fd9f8b580d6418dda28b0fd481d</anchor>
      <arglist>(const SemanticVersion &amp;other) const =default</arglist>
    </member>
    <member kind="function">
      <type>std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>classph_1_1_semantic_version.html</anchorfile>
      <anchor>a2b45963c6bb7c6a79482dde33765e352</anchor>
      <arglist>(const SemanticVersion &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::SenseEvent</name>
    <filename>classph_1_1lta_1_1_sense_event.html</filename>
    <member kind="function">
      <type></type>
      <name>SenseEvent</name>
      <anchorfile>classph_1_1lta_1_1_sense_event.html</anchorfile>
      <anchor>a7b98568a75c7fb2d83277c8b971b20a7</anchor>
      <arglist>(const Spectrum &amp;radiance)</arglist>
    </member>
    <member kind="variable">
      <type>Spectrum</type>
      <name>radiance</name>
      <anchorfile>classph_1_1lta_1_1_sense_event.html</anchorfile>
      <anchor>a68ada6e668854bf3ada2943b9affd82f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SGHalton</name>
    <filename>classph_1_1_s_g_halton.html</filename>
    <base>ph::SampleGenerator</base>
    <member kind="function">
      <type></type>
      <name>SGHalton</name>
      <anchorfile>classph_1_1_s_g_halton.html</anchorfile>
      <anchor>afe2d7abb4cc25d995745da507596bcca</anchor>
      <arglist>(std::size_t numSamples, EHaltonPermutation permutation, EHaltonSequence sequence)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>makeNewborn</name>
      <anchorfile>classph_1_1_s_g_halton.html</anchorfile>
      <anchor>a24e4d6d1065c51f15e7322a6837ec790</anchor>
      <arglist>(std::size_t numSampleBatches) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SGStratified</name>
    <filename>classph_1_1_s_g_stratified.html</filename>
    <base>ph::SampleGenerator</base>
    <member kind="function">
      <type></type>
      <name>SGStratified</name>
      <anchorfile>classph_1_1_s_g_stratified.html</anchorfile>
      <anchor>a866ac9281e64a751c80ace753e61263c</anchor>
      <arglist>(std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>makeNewborn</name>
      <anchorfile>classph_1_1_s_g_stratified.html</anchorfile>
      <anchor>a9de27f9f24ddca95dffa33e621f4aa2c</anchor>
      <arglist>(std::size_t numSampleBatches) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SGUniformRandom</name>
    <filename>classph_1_1_s_g_uniform_random.html</filename>
    <base>ph::SampleGenerator</base>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>makeNewborn</name>
      <anchorfile>classph_1_1_s_g_uniform_random.html</anchorfile>
      <anchor>a8aee79da9d9b62e1530e43717632fd20</anchor>
      <arglist>(std::size_t numSampleBatches) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleGenerator</name>
      <anchorfile>classph_1_1_s_g_uniform_random.html</anchorfile>
      <anchor>ad18e2cc85a9bb8f4fc8df6031e60cdeb</anchor>
      <arglist>(std::size_t numSampleBatches, std::size_t maxCachedBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleGenerator</name>
      <anchorfile>classph_1_1_s_g_uniform_random.html</anchorfile>
      <anchor>ac3def52a89b46c93603a96f084dca43b</anchor>
      <arglist>(std::size_t numSampleBatches)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SGUtil</name>
    <filename>classph_1_1_s_g_util.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>genArray2dStrata</name>
      <anchorfile>classph_1_1_s_g_util.html</anchorfile>
      <anchor>ae267611c7da77a01cb5022526c1b52cb</anchor>
      <arglist>(math::Vector2R *out_coordArray2Ds, std::size_t numXs, std::size_t numYs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>genArray2dLatinHypercube</name>
      <anchorfile>classph_1_1_s_g_util.html</anchorfile>
      <anchor>ae2428d4d82ab940d03bc7e5030462d3f</anchor>
      <arglist>(math::Vector2R *out_coordArray2Ds, std::size_t num2Ds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shuffleDurstenfeld</name>
      <anchorfile>classph_1_1_s_g_util.html</anchorfile>
      <anchor>a60c383d37a389b579146858f0b1e51b3</anchor>
      <arglist>(T *out_array, std::size_t arraySize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ShapeInvariantMicrofacet</name>
    <filename>classph_1_1_shape_invariant_microfacet.html</filename>
    <base>ph::Microfacet</base>
    <member kind="function">
      <type></type>
      <name>ShapeInvariantMicrofacet</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a97d959b7fa6f8992079eedd33fa9069d</anchor>
      <arglist>(EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a762ece4612e3f52f8f393f7ec51d399e</anchor>
      <arglist>(const SurfaceHit &amp;X) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real</type>
      <name>lambda</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a04535a5d0a6a328d82129b9ed153b638</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;unitDir, const std::array&lt; real, 2 &gt; &amp;alphas) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>real</type>
      <name>distribution</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a319035a3f662a3496b9134b16fc28dde</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>sampleH</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a455abd61be1344105e1ef09e2975bd20</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const override=0</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>geometry</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a18f5cdb724cd59545dec58a98e9b4131</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;L, const math::Vector3R &amp;V) const override</arglist>
    </member>
    <member kind="function">
      <type>lta::PDF</type>
      <name>pdfSampleH</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a66942003496cff7c3d2c406b12b5c67c</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>real</type>
      <name>smithG1</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a7565e65c5fc49eefe1b773819da07b16</anchor>
      <arglist>(real lambdaValue) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>real</type>
      <name>empiricalPhiCorrelation</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a3924ed3af13bdd0b9d3c0edefa289387</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;L, const math::Vector3R &amp;V) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>real</type>
      <name>projectedDistribution</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a4dff398df95cf9caecf0a05f0354243a</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>real</type>
      <name>visibleDistribution</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a0e8fff5bd849b8a134d61c44350ea797</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;V) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EMaskingShadowing</type>
      <name>m_maskingShadowingType</name>
      <anchorfile>classph_1_1_shape_invariant_microfacet.html</anchorfile>
      <anchor>a4a4d1dc8b281ce08df4c6f24c3f3c54e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::SidednessAgreement</name>
    <filename>classph_1_1lta_1_1_sidedness_agreement.html</filename>
    <member kind="function">
      <type></type>
      <name>SidednessAgreement</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>ac0e8c203d2e47d3a162da1234cdf9491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SidednessAgreement</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>af2ae2b97666a8da507465710f6d369f0</anchor>
      <arglist>(ESidednessPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSidednessAgreed</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>a4809b47dbbc175c835fad756b0f4fdbb</anchor>
      <arglist>(const math::Vector3R &amp;Ng, const math::Vector3R &amp;Ns, const math::Vector3R &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSidednessAgreed</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>a8e0e849f69ce5a80ab91264ec30bc1f4</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrontHemisphere</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>ae9eb27d25ecb4b106e5be529df936954</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBackHemisphere</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>abf6dce86779607d83312c3e16046b87a</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameHemisphere</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>ae8b384b34f816cd2e27d19d22760d1b9</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;vecA, const math::Vector3R &amp;vecB) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOppositeHemisphere</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>a3e01b9726c8757165985c92ba7bf10e1</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;vecA, const math::Vector3R &amp;vecB) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustForSidednessAgreement</name>
      <anchorfile>classph_1_1lta_1_1_sidedness_agreement.html</anchorfile>
      <anchor>a20b532b150791b479245845ccea0eb98</anchor>
      <arglist>(SurfaceHit &amp;X) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SingleFrameRenderSession</name>
    <filename>classph_1_1_single_frame_render_session.html</filename>
    <base>ph::RenderSession</base>
    <member kind="function">
      <type></type>
      <name>SingleFrameRenderSession</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a658b3b8f1accf541da1b5ccf2836f29e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToContext</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a636b4d1446acd6fd14a4085f8ff19c1a</anchor>
      <arglist>(CoreCookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; CoreSdlResource &gt; &gt;</type>
      <name>gatherResources</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a13c31f40255c3045683c80aafe8ade7d</anchor>
      <arglist>(const SceneDescription &amp;scene) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopLevelAcceleratorType</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a80a1024e9e475b078cb40f2879d80d19</anchor>
      <arglist>(EAccelerator accelerator)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getVisualizerName</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a3333ba161d902f3e7a9cb47e6f8b5bd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObserverName</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>ad6178bf99a44c4d0d19c9dcaf4647080</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSampleSourceName</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>aab1aceb2e9a2b689e727a7023c9db88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EAccelerator</type>
      <name>getTopLevelAcceleratorType</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a39b9c3281a724bc0e814aaf225189e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_single_frame_render_session.html</anchorfile>
      <anchor>a1b07ff434d5d20c5326f41e6ef41cfe5</anchor>
      <arglist>(TSdlOwnerClass&lt; SingleFrameRenderSession &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SingleLensObserver</name>
    <filename>classph_1_1_single_lens_observer.html</filename>
    <base>ph::OrientedRasterObserver</base>
    <member kind="function">
      <type></type>
      <name>SingleLensObserver</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>aa7f9ed8864a3f766626c5358a9b7dcf1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a2914d110395bbd136a3ad01c011823ec</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getLensRadius</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a677a86d8851e3364509dd5ad5ad99509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getFocalDistance</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a8824f921f7ca8d80e743e9e4fa5ed9f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2D</type>
      <name>getSensorSize</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a0f5fdf8b9bc722c6b9f0e8e5cf6dc9e9</anchor>
      <arglist>(const CoreCookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getSensorOffset</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a6fda2d89a240dc7ec2fb7afbe76143af</anchor>
      <arglist>(const CoreCookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a236e7bc821e9d55b51dce1bd966a68e9</anchor>
      <arglist>(TSdlOwnerClass&lt; SingleLensObserver &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>math::TDecomposedTransform&lt; float64 &gt;</type>
      <name>makeRasterToSensor</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>ad3d3d80b6dc4da0722aa6851bde3605c</anchor>
      <arglist>(const CoreCookingContext &amp;ctx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>genPinholeCamera</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a884515208656707ed6aee6e0fa37244d</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>genThinLensCamera</name>
      <anchorfile>classph_1_1_single_lens_observer.html</anchorfile>
      <anchor>a88ac69bd21f115e40fa1073c79e1e780</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SphereSource</name>
    <filename>classph_1_1_sphere_source.html</filename>
    <base>ph::AreaSource</base>
    <member kind="function">
      <type></type>
      <name>SphereSource</name>
      <anchorfile>classph_1_1_sphere_source.html</anchorfile>
      <anchor>aec7c53476789f08515be22a6fbee8a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphereSource</name>
      <anchorfile>classph_1_1_sphere_source.html</anchorfile>
      <anchor>a9170f06cd6f4ce6e64e7ec335ea82d78</anchor>
      <arglist>(real radius, const math::Vector3R &amp;linearSrgbColor, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphereSource</name>
      <anchorfile>classph_1_1_sphere_source.html</anchorfile>
      <anchor>abbcf227d84a3e9f3541f23e42c123450</anchor>
      <arglist>(real radius, const math::Spectrum &amp;color, real numWatts)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Geometry &gt;</type>
      <name>genAreas</name>
      <anchorfile>classph_1_1_sphere_source.html</anchorfile>
      <anchor>aa1b24f0f2dd4a2ca8eb6e69aa5ac53de</anchor>
      <arglist>(CookingContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classph_1_1_sphere_source.html</anchorfile>
      <anchor>a9352a249f5f4c2d748f2a71ee2f3fc49</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_sphere_source.html</anchorfile>
      <anchor>ad0efed9a856b29e13ab32e26ac5ac1ba</anchor>
      <arglist>(TSdlOwnerClass&lt; SphereSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SphericalMapper</name>
    <filename>classph_1_1_spherical_mapper.html</filename>
    <base>ph::UvwMapper</base>
    <member kind="function">
      <type>void</type>
      <name>posToUvw</name>
      <anchorfile>classph_1_1_spherical_mapper.html</anchorfile>
      <anchor>ad7320e257efdd9cd70bd83bd5da2949b</anchor>
      <arglist>(const math::Vector3R &amp;pos, math::Vector3R *out_uvw) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dirToUvw</name>
      <anchorfile>classph_1_1_spherical_mapper.html</anchorfile>
      <anchor>a1eb6471215c77e64e2ad7cbd9ea77740</anchor>
      <arglist>(const math::Vector3R &amp;dir, math::Vector3R *out_uvw) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uvwToPos</name>
      <anchorfile>classph_1_1_spherical_mapper.html</anchorfile>
      <anchor>a7a5e0225f7f01598b7be04ef0a4ec6b3</anchor>
      <arglist>(const math::Vector3R &amp;uvw, math::Vector3R *out_pos) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uvwToDir</name>
      <anchorfile>classph_1_1_spherical_mapper.html</anchorfile>
      <anchor>a992ed753973c1a6ae9fbb49d8100dfc5</anchor>
      <arglist>(const math::Vector3R &amp;uvw, math::Vector3R *out_dir) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SpiralGridScheduler</name>
    <filename>classph_1_1_spiral_grid_scheduler.html</filename>
    <base>ph::WorkScheduler</base>
    <member kind="function">
      <type></type>
      <name>SpiralGridScheduler</name>
      <anchorfile>classph_1_1_spiral_grid_scheduler.html</anchorfile>
      <anchor>a3d6e2ebcb0f8b81bd5db0c07c67eaa10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpiralGridScheduler</name>
      <anchorfile>classph_1_1_spiral_grid_scheduler.html</anchorfile>
      <anchor>a834b50bf6c585acf220f5e29a26cf8f2</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;spiralTileSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpiralGridScheduler</name>
      <anchorfile>classph_1_1_spiral_grid_scheduler.html</anchorfile>
      <anchor>a63532f7aa41e41fbb74d3a16ff3ebb7e</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;spiralTileSize, const math::Vector2S &amp;numGridCells)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SpiralScheduler</name>
    <filename>classph_1_1_spiral_scheduler.html</filename>
    <base>ph::WorkScheduler</base>
    <member kind="function">
      <type></type>
      <name>SpiralScheduler</name>
      <anchorfile>classph_1_1_spiral_scheduler.html</anchorfile>
      <anchor>a0e6afb053239e847c859cf55daedd516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpiralScheduler</name>
      <anchorfile>classph_1_1_spiral_scheduler.html</anchorfile>
      <anchor>ae761ad94a85009d960fa11f9b8830b17</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, std::size_t tileSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpiralScheduler</name>
      <anchorfile>classph_1_1_spiral_scheduler.html</anchorfile>
      <anchor>a72f886d57768f2010e55ed376459a6fb</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;tileSize)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::math::detail::shuffle::StandardSwapper</name>
    <filename>structph_1_1math_1_1detail_1_1shuffle_1_1_standard_swapper.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structph_1_1math_1_1detail_1_1shuffle_1_1_standard_swapper.html</anchorfile>
      <anchor>af4be0cd453e2e6cca5795c34306edd98</anchor>
      <arglist>(T &amp;a, T &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::StaticAffineTransform</name>
    <filename>classph_1_1math_1_1_static_affine_transform.html</filename>
    <base>ph::math::Transform</base>
    <member kind="function">
      <type></type>
      <name>StaticAffineTransform</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>a75359d95a9380ca7d6ccd36d18eb67e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticAffineTransform</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>a22db5a9c78de6aca0f62634598d78d40</anchor>
      <arglist>(const Matrix4R &amp;transform, const Matrix4R &amp;inverseTransform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Transform &gt;</type>
      <name>genInversed</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>a4d12dca780fd890d6a9250c11aa9bc4b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const math::Matrix4R &amp;</type>
      <name>getTransformMatrix</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>abff6a79b9b0925074c7a2258921323b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::Matrix4R &amp;</type>
      <name>getInversedTransformMatrix</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>ae060ec076f0b1d44ba861be46b9a4491</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const StaticAffineTransform &amp;</type>
      <name>IDENTITY</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>afd03a03630c871619c02258a6f89403d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticAffineTransform</type>
      <name>makeForward</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>ad0bc164183735e995eacaaa3c218a524</anchor>
      <arglist>(const TDecomposedTransform&lt; U &gt; &amp;transform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticAffineTransform</type>
      <name>makeInverse</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>aa99883eb6fecf695b305689f0d65caf8</anchor>
      <arglist>(const TDecomposedTransform&lt; U &gt; &amp;transform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticAffineTransform</type>
      <name>makeParentedForward</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>af52b7e4515709e91ae7e9b07a45dc138</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;fromRootToLocal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticAffineTransform</type>
      <name>makeParentedInverse</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>a2d6d721fe221547e9678b643556e2b9f</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;fromRootToLocal)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StaticRigidTransform</name>
      <anchorfile>classph_1_1math_1_1_static_affine_transform.html</anchorfile>
      <anchor>ac2aacd8479717a89a4bf4983b4224dbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::StaticRigidTransform</name>
    <filename>classph_1_1math_1_1_static_rigid_transform.html</filename>
    <base>ph::math::RigidTransform</base>
    <member kind="function">
      <type></type>
      <name>StaticRigidTransform</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>ade438c40b0ef3c3043dc4917f397e780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>makeForward</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>ad1878c80e0c78ae08450a22858afb80e</anchor>
      <arglist>(const TDecomposedTransform&lt; U &gt; &amp;transform) -&gt; StaticRigidTransform</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>makeInverse</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a43fcec6fa3dfda85068c84ee29057e2a</anchor>
      <arglist>(const TDecomposedTransform&lt; U &gt; &amp;transform) -&gt; StaticRigidTransform</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>makeParentedForward</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a4c656b7f0c10e6e3b7100d769068fc4a</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;fromRootToLocal) -&gt; StaticRigidTransform</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>makeParentedInverse</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a7ba21c7f8d9054f72a186751eee3af33</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;fromRootToLocal) -&gt; StaticRigidTransform</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getScaleFreeTransforms</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a673c6636e6f65618d14e28cf236ea616</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;transforms) -&gt; std::vector&lt; TDecomposedTransform&lt; U &gt; &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const StaticRigidTransform &amp;</type>
      <name>IDENTITY</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>af2ba0d670d42e4cacfcf5652d6a88ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticRigidTransform</type>
      <name>makeForward</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a41104ddc28e16672f5b0737b9a68fea2</anchor>
      <arglist>(const TDecomposedTransform&lt; U &gt; &amp;transform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticRigidTransform</type>
      <name>makeInverse</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a11efa9d8cbc258cc7c61c7ec2c2b63f5</anchor>
      <arglist>(const TDecomposedTransform&lt; U &gt; &amp;transform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticRigidTransform</type>
      <name>makeParentedForward</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>a3fbb8051f3c2f0b06fe4f3de339652fc</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;fromRootToLocal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticRigidTransform</type>
      <name>makeParentedInverse</name>
      <anchorfile>classph_1_1math_1_1_static_rigid_transform.html</anchorfile>
      <anchor>af0b8038f06f3c68a2b18cf65d98484b3</anchor>
      <arglist>(const std::vector&lt; TDecomposedTransform&lt; U &gt; &gt; &amp;fromRootToLocal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Statistics</name>
    <filename>classph_1_1_statistics.html</filename>
    <class kind="class">ph::Statistics::Record</class>
    <member kind="function">
      <type></type>
      <name>Statistics</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>a2cb5a6cd127f2aacba62c42fd2daec3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistics</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>aa2f337c4661bb1181b797dbe2326e935</anchor>
      <arglist>(const Statistics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalWork</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>a43327cb6e234ddad4b8464590c3a8b16</anchor>
      <arglist>(const uint32 totalWork)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkDone</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>a96e82226d41f9c0a2e5ff7c4a1e32a2c</anchor>
      <arglist>(const uint32 workDone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamplesTaken</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>a2735a11251a9951e13770b54800d5f95</anchor>
      <arglist>(const uint32 numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumMsElapsed</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>a7e071ff1c6a2f3dbc901a953b400d5e7</anchor>
      <arglist>(const uint32 numMsElapsed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementWorkDone</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>ab1bca37a22e2c68f52169875cc45a30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Record</type>
      <name>record</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>a78fac303e701b576888d9926c97dc7d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Statistics &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_statistics.html</anchorfile>
      <anchor>adefbad26209852033a25b0fb75d2a382</anchor>
      <arglist>(const Statistics &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::StdInputStream</name>
    <filename>classph_1_1_std_input_stream.html</filename>
    <base>ph::IInputStream</base>
    <member kind="function">
      <type></type>
      <name>StdInputStream</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a7a4f74efc29f3383c6e3f72a95941113</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StdInputStream</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a929493b9d612cd22e18b5f22d47f19a2</anchor>
      <arglist>(std::unique_ptr&lt; std::istream &gt; stream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StdInputStream</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a8b26adaf896f8135b5c0ab1144880be0</anchor>
      <arglist>(StdInputStream &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>ab8c9d01867872e91f368fb2d50ebab58</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readString</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>aae5f49371b54fecb9633bd8d654314ca</anchor>
      <arglist>(std::string *out_string, char delimiter) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekGet</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a483589deecb654d1402b6db9fcbc7f35</anchor>
      <arglist>(std::size_t pos) override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>tellGet</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>ac3fa974f5b6a7e466cf751e6feadaca7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a8adf0e6434c40257dab6aad6cced629a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>readSome</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a406004c7e442a020692d502715f263a5</anchor>
      <arglist>(std::size_t numBytes, std::byte *out_bytes) override</arglist>
    </member>
    <member kind="function">
      <type>std::istream *</type>
      <name>getStream</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>af0ddfb46596e584ff06b448390a6b91f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StdInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a410e568d089cd17bbc0d15cc64586e19</anchor>
      <arglist>(StdInputStream &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isStreamGoodForRead</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a471231cb017e3bd1e8a3098ea6e8325c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ensureStreamIsGoodForRead</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>a73709a1ba1393a1e9cf86f49b43378be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getReasonForError</name>
      <anchorfile>classph_1_1_std_input_stream.html</anchorfile>
      <anchor>ac8b088dba7def4a95550309236cc52f9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::StdOutputStream</name>
    <filename>classph_1_1_std_output_stream.html</filename>
    <base>ph::IOutputStream</base>
    <member kind="function">
      <type></type>
      <name>StdOutputStream</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a1b8dc96d0f896fc7db7d15e1e9771bc9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StdOutputStream</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>ac22e454f932ba263c233904dd84697c9</anchor>
      <arglist>(std::unique_ptr&lt; std::ostream &gt; stream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StdOutputStream</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a389f127cd10dc7b769fd564f433c2841</anchor>
      <arglist>(StdOutputStream &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a4f6c34a21ca27f4548e6f9982044a451</anchor>
      <arglist>(std::size_t numBytes, const std::byte *bytes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeString</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a9c1709a7e774cbd23f19af85462502f8</anchor>
      <arglist>(std::string_view str) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekPut</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a9f544e5844f07d05451457b65b350b3d</anchor>
      <arglist>(std::size_t pos) override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>tellPut</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a6d43c85f8530ee2de0964696c4078395</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a966d43950e6363fea1f18c793bf9b9d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>getStream</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>ae01161088f64f97553401119423a7896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StdOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a01ec671652a440c0eb2c117bbf4d3ab3</anchor>
      <arglist>(StdOutputStream &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isStreamGoodForWrite</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>ac526bf9858900fc86ee43cb2347f53e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ensureStreamIsGoodForWrite</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>ac8c8b7910844d56a66be12d481a86ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getReasonForError</name>
      <anchorfile>classph_1_1_std_output_stream.html</anchorfile>
      <anchor>a3ceb9da86fb857c229c925f111f82e79</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::StochasticProgressivePMRenderer</name>
    <filename>classph_1_1_stochastic_progressive_p_m_renderer.html</filename>
    <base>ph::PMRendererBase</base>
    <member kind="function">
      <type></type>
      <name>StochasticProgressivePMRenderer</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>ac03940cd04252d66487a27b0178d8fa4</anchor>
      <arglist>(PMCommonParams commonParams, Viewport viewport, SampleFilter filter, uint32 numWorkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>ada976302dacfe70b4446359623362621</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a43789f9b9bd902d11f7936ffa0797811</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a10b7b1bc86ef249fc0888fb088a4794d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>aa43a8f5e2329ce718c7728cca486f7fc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>a240b7a79191e6635a65997fa3f444779</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_stochastic_progressive_p_m_renderer.html</anchorfile>
      <anchor>af34358952d76a085b266490e1e5c3065</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::StratifiedSampleSource</name>
    <filename>classph_1_1_stratified_sample_source.html</filename>
    <base>ph::RuntimeSampleSource</base>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_stratified_sample_source.html</anchorfile>
      <anchor>ae36885d61f1a8e64853e156a6b0a7793</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_stratified_sample_source.html</anchorfile>
      <anchor>a32607f77c90ab7d43c8e52e61a579c34</anchor>
      <arglist>(TSdlOwnerClass&lt; StratifiedSampleSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::StripeScheduler</name>
    <filename>classph_1_1_stripe_scheduler.html</filename>
    <base>ph::WorkScheduler</base>
    <member kind="function">
      <type></type>
      <name>StripeScheduler</name>
      <anchorfile>classph_1_1_stripe_scheduler.html</anchorfile>
      <anchor>a2d7cea70ec76e7e2707a0f4dfc04cd29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StripeScheduler</name>
      <anchorfile>classph_1_1_stripe_scheduler.html</anchorfile>
      <anchor>a56459c3909e5d831c10003159a7a75ad</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StripeScheduler</name>
      <anchorfile>classph_1_1_stripe_scheduler.html</anchorfile>
      <anchor>a2148e75d844e894eb8860cdfcb1da0d3</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, math::constant::AxisIndexType slicedAxis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceAttributeEstimator</name>
    <filename>classph_1_1_surface_attribute_estimator.html</filename>
    <base>ph::TIRayEstimator&lt; math::Vector3R &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_surface_attribute_estimator.html</anchorfile>
      <anchor>a2259e23f30807abfeb4f604c39780cb0</anchor>
      <arglist>(const Integrand &amp;integrand) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_surface_attribute_estimator.html</anchorfile>
      <anchor>ac3cdbd430ecd362da81f79a1f92c43db</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, TEstimationArray&lt; math::Vector3R &gt; &amp;out_estimation) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_surface_attribute_estimator.html</anchorfile>
      <anchor>aaa29083062ef0faf85a75a8885045f20</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceBehavior</name>
    <filename>classph_1_1_surface_behavior.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceBehavior</name>
      <anchorfile>classph_1_1_surface_behavior.html</anchorfile>
      <anchor>a1dcc556415e8e76fe9af11472210f152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptics</name>
      <anchorfile>classph_1_1_surface_behavior.html</anchorfile>
      <anchor>ac989d24b0a67a29dda91ba7d4a5d180b</anchor>
      <arglist>(std::shared_ptr&lt; SurfaceOptics &gt; optics)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmitter</name>
      <anchorfile>classph_1_1_surface_behavior.html</anchorfile>
      <anchor>a5af9b9169ae349c6ffb4782fdaa6a4b4</anchor>
      <arglist>(const Emitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; SurfaceOptics &gt;</type>
      <name>getOpticsResource</name>
      <anchorfile>classph_1_1_surface_behavior.html</anchorfile>
      <anchor>aec7b375e59725a59e5ce1087fd0452ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceOptics *</type>
      <name>getOptics</name>
      <anchorfile>classph_1_1_surface_behavior.html</anchorfile>
      <anchor>a06ac41f6b5ced55e9c6dbd42de755a87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>getEmitter</name>
      <anchorfile>classph_1_1_surface_behavior.html</anchorfile>
      <anchor>afcd71b27cb7fb1042923227bcd29fbd7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceEmitter</name>
    <filename>classph_1_1_surface_emitter.html</filename>
    <base>ph::Emitter</base>
    <member kind="function">
      <type></type>
      <name>SurfaceEmitter</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>a93088ef770938c276ce9633edfd47117</anchor>
      <arglist>(EmitterFeatureSet featureSet=defaultFeatureSet)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>evalEmittedEnergy</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>ae9c5e92b9d2e808c2bb716ce77f2d703</anchor>
      <arglist>(const SurfaceHit &amp;Xe, math::Spectrum *out_energy) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>genDirectSample</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>ad96722ea5d7b2ff39fdc3a67d5e23107</anchor>
      <arglist>(DirectEnergySampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>calcDirectPdf</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>a1ab7e793cee461e021ff57e4fd5a7a05</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>emitRay</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>ac6b565e044fd1b9c91d8e915828ff545</anchor>
      <arglist>(EnergyEmissionSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFrontFaceEmit</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>a8d07fafe4b98b27b25e3c2b02c3c1fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackFaceEmit</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>a741009bbbe564231ce79cee0f630736c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>canEmit</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>abdb18866afce7af88f3494742cab422e</anchor>
      <arglist>(const math::Vector3R &amp;emitDir, const math::Vector3R &amp;N) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calcDirectPdfWForSrcPrimitive</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>a202e5a1e27951eda31d37d8b708f0bd8</anchor>
      <arglist>(DirectEnergyPdfQuery &amp;query, const lta::PDF &amp;pickPdf=lta::PDF::D(1), const lta::PDF &amp;emitPosUvwPdf={}) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isBackFaceEmission</name>
      <anchorfile>classph_1_1_surface_emitter.html</anchorfile>
      <anchor>a462b7bec51d5a4e242359613fd34eef0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceHit</name>
    <filename>classph_1_1_surface_hit.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceHit</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a6d710545e6541e5467320f9f4c29c020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceHit</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a393617463f37bfddd19999087cd041bf</anchor>
      <arglist>(const Ray &amp;ray, const HitProbe &amp;probe, SurfaceHitReason reason)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceHit</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>af33842bb9b7ce580e258d736e2fe7e8d</anchor>
      <arglist>(const Ray &amp;ray, const HitProbe &amp;probe, const HitDetail &amp;detail, SurfaceHitReason reason)</arglist>
    </member>
    <member kind="function">
      <type>SurfaceHit</type>
      <name>switchChannel</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a79b4cb19de425a2e4e73fe942c06bf0b</anchor>
      <arglist>(uint32 newChannel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a15479d1cbec2a4e8ee67ca00ce5f0d75</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSurfaceOptics</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a5aa56bbfe581343becbdd2f3f7c89d66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInteriorOptics</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a4e5bb137052c4179332d53f0fc740756</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExteriorOptics</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>afec7e98220b8cff78a5886a13a18baf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HitDetail &amp;</type>
      <name>getDetail</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a796492b34ec40eb78da4b70c287b26d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceHitReason</type>
      <name>getReason</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>ac3682ffd128991eba27bf658b07ddbd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ray &amp;</type>
      <name>getRay</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a49a643c1fa327421d9e4fc665ad6982d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ray &amp;</type>
      <name>getIncidentRay</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a61d656616db630197f8b06093705fba6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getTime</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>ac2cb393b2496e941c712c302fa1bdc78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getPos</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>ab6da2653e522e20b368900dd55121362</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getShadingNormal</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a189bd3896f87838eea8b7e06f5e71286</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getGeometryNormal</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a03950ddbe22d5c8bcf72c04306660f36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Emitter *</type>
      <name>getSurfaceEmitter</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a65af3adb7f79bb7f6ac996983af46e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceOptics *</type>
      <name>getSurfaceOptics</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a75da2f51e2142ca3e24859620965333c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VolumeOptics *</type>
      <name>getInteriorOptics</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a92c607f245db419e4a49cae5e93c1544</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VolumeOptics *</type>
      <name>getExteriorOptics</name>
      <anchorfile>classph_1_1_surface_hit.html</anchorfile>
      <anchor>a373057cb0ae8ac7f32dee93e126eab8b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::SurfaceHitRefinery</name>
    <filename>classph_1_1lta_1_1_surface_hit_refinery.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceHitRefinery</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a75bc034d868dbd1e2dc59008c579a621</anchor>
      <arglist>(const SurfaceHit &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>escape</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a463b3df2c8364f1dfad2057d52712a20</anchor>
      <arglist>(const math::Vector3R &amp;dir) const</arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>escapeManually</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a43af66d1e9329ea4b1618d9a23d79ba4</anchor>
      <arglist>(const math::Vector3R &amp;dir, real delta=selfIntersectDelta()) const</arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>escapeEmpirically</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>abb31e47187595d2ba876e5c772367aa8</anchor>
      <arglist>(const math::Vector3R &amp;dir) const</arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>escapeIteratively</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a0d3ed9875f88c6d014f2051f13c2c3ef</anchor>
      <arglist>(const math::Vector3R &amp;dir, std::size_t numIterations=numIterations()) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Ray &gt;</type>
      <name>tryEscape</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a3178568d8d14150884ba23fabacdf109</anchor>
      <arglist>(const SurfaceHit &amp;X2) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Ray &gt;</type>
      <name>tryEscapeManually</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>aa5035449fd9bfbf84082e2b14766df4e</anchor>
      <arglist>(const SurfaceHit &amp;X2, real delta=selfIntersectDelta()) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Ray &gt;</type>
      <name>tryEscapeEmpirically</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a15a1f3d84398fe49270e40e006cfed01</anchor>
      <arglist>(const SurfaceHit &amp;X2) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Ray &gt;</type>
      <name>tryEscapeIteratively</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a7fc66945eebeb48706fa6c3a976971ee</anchor>
      <arglist>(const SurfaceHit &amp;X2, std::size_t numIterations=numIterations()) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>af7678887d7a0952aac072cff4758b1bf</anchor>
      <arglist>(const EngineInitSettings &amp;settings)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static real</type>
      <name>selfIntersectDelta</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>ad474ff65b38e1f61aedba63070d491d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numIterations</name>
      <anchorfile>classph_1_1lta_1_1_surface_hit_refinery.html</anchorfile>
      <anchor>a34e330834b1e60f9094154957c31d4a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceLayerInfo</name>
    <filename>classph_1_1_surface_layer_info.html</filename>
    <member kind="function">
      <type>real</type>
      <name>getRoughness</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a22f9322b7b65dda21c5400b0b5527d7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getAlpha</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a780e306ad11f8871ea908f27b1bee29d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>getIorN</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>ac4df26132ffa97ac50c2c4574ed07558</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>getIorK</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a5232b2e55cde4937a79de5f6273e8cb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getDepth</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a8bf89b94f5f50060ce20fcdf1123f3c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>getG</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a73c2db30c60172f8a374a9ffc2d2539b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>getSigmaA</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a67e5c15b7f027fbeae6f868c1a2cb092</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>getSigmaS</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>a6c9f260d3e1a3c733022a895b5eb8402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_STRUCT</name>
      <anchorfile>classph_1_1_surface_layer_info.html</anchorfile>
      <anchor>aed861c8fafea3ddb8f77069b87937e45</anchor>
      <arglist>(TSdlOwnerStruct&lt; SurfaceLayerInfo &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceMaterial</name>
    <filename>classph_1_1_surface_material.html</filename>
    <base>ph::Material</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_surface_material.html</anchorfile>
      <anchor>ac3b524cc69242f45a4223fd307fac016</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genBehaviors</name>
      <anchorfile>classph_1_1_surface_material.html</anchorfile>
      <anchor>acf48048789a8b6eb29f0ff06c582bf61</anchor>
      <arglist>(const CookingContext &amp;ctx, PrimitiveMetadata &amp;metadata) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_surface_material.html</anchorfile>
      <anchor>a01696aadefa834de4b1312bdff6b5fa1</anchor>
      <arglist>(TSdlOwnerClass&lt; SurfaceMaterial &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SurfaceOptics</name>
    <filename>classph_1_1_surface_optics.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceOptics</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a3459ef14fb8637c1d5b0e9244067f568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceOptics</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>abcb8d3358316d6ccc37ca40c03b6aaf6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a17d7a3c372f7875b808d361b68d27cc3</anchor>
      <arglist>(SurfaceElemental elemental) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBsdf</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a058042308616bcf1c7a63ab27b211cc4</anchor>
      <arglist>(BsdfEvalQuery &amp;eval) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genBsdfSample</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a52f55e3a73d1ab32b412ce6a4f328965</anchor>
      <arglist>(BsdfSampleQuery &amp;sample, SampleFlow &amp;sampleFlow) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBsdfPdf</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>aadd9f9f59af50d27cef10b87aab192b6</anchor>
      <arglist>(BsdfPdfQuery &amp;pdfQuery) const</arglist>
    </member>
    <member kind="function">
      <type>SurfacePhenomena</type>
      <name>getAllPhenomena</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>adac0e938a47756775943ff1e5f4bb9fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceElemental</type>
      <name>numElementals</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a1edd327e96cba01761e07bb8633d5086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>aa04b47b43449c37fa6dc5ef1bf579869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SurfacePhenomena</type>
      <name>m_phenomena</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>ae4fa98efb25246e47a583fe02e52c95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SurfaceElemental</type>
      <name>m_numElementals</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a9c548ecb0c612f717d1461d388c7f7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LerpedSurfaceOptics</name>
      <anchorfile>classph_1_1_surface_optics.html</anchorfile>
      <anchor>a8c837ea3881b4336c205dde24395f0a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::SurfaceTracer</name>
    <filename>classph_1_1lta_1_1_surface_tracer.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceTracer</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>aeec2d81b1d7033b4893962361cab0675</anchor>
      <arglist>(const Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>traceNextSurface</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>afb4d1b70a391fb9f65752936dc4edbe3</anchor>
      <arglist>(const Ray &amp;ray, const SidednessAgreement &amp;sidedness, SurfaceHit *out_X) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>traceNextSurfaceFrom</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>a65191d2bc821e0d846227a5d4b65d164</anchor>
      <arglist>(const SurfaceHit &amp;X, const Ray &amp;ray, const SidednessAgreement &amp;sidedness, SurfaceHit *out_X) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bsdfSampleNextSurface</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>a72cb791283ca6b41d78666f7cd86680e</anchor>
      <arglist>(BsdfSampleQuery &amp;bsdfSample, SampleFlow &amp;sampleFlow, SurfaceHit *out_X) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doBsdfSample</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>aebd3c9cd7305d1092f2b1b3ec01cdf86</anchor>
      <arglist>(BsdfSampleQuery &amp;bsdfSample, SampleFlow &amp;sampleFlow) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doBsdfSample</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>ac18874203896036415c65e27ac06128b</anchor>
      <arglist>(BsdfSampleQuery &amp;bsdfSample, SampleFlow &amp;sampleFlow, Ray *out_sampledRay) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doBsdfEvaluation</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>a54b19a97532cc7e70364750054f4b460</anchor>
      <arglist>(BsdfEvalQuery &amp;bsdfEval) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doBsdfPdfQuery</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>a3ecf82246725fa997fcaa3bf56d977bb</anchor>
      <arglist>(BsdfPdfQuery &amp;bsdfPdfQuery) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleZeroBounceEmission</name>
      <anchorfile>classph_1_1lta_1_1_surface_tracer.html</anchorfile>
      <anchor>aa2621be637ce1c0642b22f0c4b7ff6e4</anchor>
      <arglist>(const SurfaceHit &amp;Xe, const SidednessAgreement &amp;sidedness, math::Spectrum *out_Le) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::SwizzledImage</name>
    <filename>classph_1_1_swizzled_image.html</filename>
    <base>ph::Image</base>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; Image::ArrayType &gt; &gt;</type>
      <name>genNumericTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>ac7a09641c67ed4ca1c8a5d4ad3c01b30</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Spectrum &gt; &gt;</type>
      <name>genColorTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>ae686ec2288149ede0a39ea416ce7f2ff</anchor>
      <arglist>(const CookingContext &amp;ctx) override</arglist>
    </member>
    <member kind="function">
      <type>SwizzledImage &amp;</type>
      <name>setInput</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>add6689d869798c988a2fb4069a77fdfe</anchor>
      <arglist>(std::shared_ptr&lt; Image &gt; image)</arglist>
    </member>
    <member kind="function">
      <type>SwizzledImage &amp;</type>
      <name>setSwizzleSubscripts</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>af8984b489994cad6481ab664f8e70d35</anchor>
      <arglist>(std::string swizzleSubscripts)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>getInput</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>a27eb4ab03008c06df7b247e60ed8b682</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>getSwizzleSubscripts</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>ab5d03b57ec58304b00f8f88520bb597d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>a01299876fde5de7ff7b7f6bd96dbdafe</anchor>
      <arglist>(TSdlOwnerClass&lt; SwizzledImage &gt;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; real &gt; &gt;</type>
      <name>genRealTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>a552afbed47cb289c136405cee26b0564</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Vector2R &gt; &gt;</type>
      <name>genVector2RTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>aff1e7c4a2a277ecd0a9a4b0ba089021c</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Vector3R &gt; &gt;</type>
      <name>genVector3RTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>ad12a378143ea6cdad18094bccb65d83f</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Vector4R &gt; &gt;</type>
      <name>genVector4RTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>acd05764d4917bf58630bab8ed4425263</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; real &gt; &gt;</type>
      <name>genRealTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>a552afbed47cb289c136405cee26b0564</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Vector2R &gt; &gt;</type>
      <name>genVector2RTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>aff1e7c4a2a277ecd0a9a4b0ba089021c</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Vector3R &gt; &gt;</type>
      <name>genVector3RTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>ad12a378143ea6cdad18094bccb65d83f</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TTexture&lt; math::Vector4R &gt; &gt;</type>
      <name>genVector4RTexture</name>
      <anchorfile>classph_1_1_swizzled_image.html</anchorfile>
      <anchor>acd05764d4917bf58630bab8ed4425263</anchor>
      <arglist>(const CookingContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TAABB2D</name>
    <filename>classph_1_1math_1_1_t_a_a_b_b2_d.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TAABB2D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>af3c05a2614504328fa5807d28a61bc52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAABB2D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>acd863f880de535ed615ed9d4010acec9</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;minVertex, const TVector2&lt; T &gt; &amp;maxVertex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAABB2D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>abc0e3a3131e53f40a5918ccb73e21e13</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAABB2D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a2cc641f2f36f8542ff0e5f2a52f0b6f3</anchor>
      <arglist>(const TAABB2D&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingArea</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>aac9e6275909e61f5b549ea1894b90997</anchor>
      <arglist>(const TAABB2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingArea</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>ab5c103a3646b4503c266a19be8a95536</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingRange</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a7ac9c5dbbe9651b31872854b3bdfa8ed</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getArea</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a97e6e7d0d7ae6e33fc5a85ca58d2aad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a9cdb4cf2cc26a9eaf67a833f5b13e348</anchor>
      <arglist>(const TAABB2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D &amp;</type>
      <name>intersectWith</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a26fce226638ef218a6a80a1841db4411</anchor>
      <arglist>(const TAABB2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D &amp;</type>
      <name>setMinVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>ae588242b93780af4c3288c0e803fd805</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;minVertex)</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D &amp;</type>
      <name>setMaxVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a81769f58ada4a4d6959ed6645919094c</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;maxVertex)</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D &amp;</type>
      <name>setVertices</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a7db98a2355ad9850e96628a200db8f30</anchor>
      <arglist>(std::pair&lt; TVector2&lt; T &gt;, TVector2&lt; T &gt; &gt; minMaxVertices)</arglist>
    </member>
    <member kind="function">
      <type>const TVector2&lt; T &gt; &amp;</type>
      <name>getMinVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>ac78db088c8023b3e555759eff399110b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TVector2&lt; T &gt; &amp;</type>
      <name>getMaxVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a4df9f4984a7cfe372c16e2e16ad56326</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TVector2&lt; T &gt;, TVector2&lt; T &gt; &gt;</type>
      <name>getVertices</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a7bd875b57b085f4a4091e97a248b1409</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getWidth</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a2f69c95543fdfbfd75445ee866671e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getHeight</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a18723828439f5b7c9c8232e7485c59c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>getExtents</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a11f78e763ceb6a50257c98c9e782c408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>getCenter</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a7368744e2a3ba2242191d245eb5a9710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TAABB2D, TAABB2D &gt;</type>
      <name>getSplitted</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a1155d9d652442d02f81f642f1cb0a1d0</anchor>
      <arglist>(std::size_t axis, T splitPoint) const</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D</type>
      <name>getUnioned</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a3b4fce3954685ae348dd8d26d8d3c268</anchor>
      <arglist>(const TAABB2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>TAABB2D</type>
      <name>getIntersected</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>afcae384eab19e7e012f8d26dc192cd2d</anchor>
      <arglist>(const TAABB2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a4887bcbc3c7a3d375a06c93b880724d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPoint</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a589e22f797b64a6df6d68ff8880348ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArea</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a3c9d87cbcd38a3f8cb3cae3c6207b2ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>sampleToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a6894920d7c8fe6b3b37ffe4ac90da441</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>xy01ToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>aec0238fc3592155c6f2fb8548e847809</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;xy01) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a7b78880748c832ea0cf49be127292470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a52470ee0f3f051525103cff166eed442</anchor>
      <arglist>(const TAABB2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a3abcf73e501aecf73d9e645c3f41a231</anchor>
      <arglist>(const TAABB2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>ab3ea67044f83c5c7fc62ea70f470d407</anchor>
      <arglist>(const TAABB2D &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAABB2D</type>
      <name>makeEmpty</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b2_d.html</anchorfile>
      <anchor>a09bfc9d4e4e1723d6eafb1b32a281cff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TAABB3D</name>
    <filename>classph_1_1math_1_1_t_a_a_b_b3_d.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TAABB3D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a41b40578767a587b90cb561990706302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAABB3D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a7d87716e2ca2ea271d823c89302c3780</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAABB3D</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>acf2f5922d9daf84ff81fdd093ce4c230</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;minVertex, const TVector3&lt; T &gt; &amp;maxVertex)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a14473a59e33504a3ac1503796c421a78</anchor>
      <arglist>(const TAABB3D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a049853e5af78ae6658644c197c7b5c8f</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>setMinVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a7b4f6009133871cbefc62bf0f2597fcd</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;minVertex)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>setMaxVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a9b974e52317e2b64846ec809943f52c7</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;maxVertex)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>setVertices</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ab2d377fcfdd1eaf166ffad753742fb8e</anchor>
      <arglist>(std::pair&lt; TVector3&lt; T &gt;, TVector3&lt; T &gt; &gt; minMaxVertices)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>translate</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>acf1d827e2e68aa0e6e7bd9372b6968b8</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D &amp;</type>
      <name>expand</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ad06d107942d236ee0f6090e572467dd1</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingVolume</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a61f8f534fe13793cba10fc7ef927e00a</anchor>
      <arglist>(const TLineSegment&lt; T &gt; &amp;segment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingVolume</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a04875136f1971f746a8a5e835bde1e4c</anchor>
      <arglist>(const TLineSegment&lt; T &gt; &amp;segment, T *out_nearHitT, T *out_farHitT) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersectingVolume</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ae61d6511772599873df40f790bd15347</anchor>
      <arglist>(const TAABB3D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a50070e02e92810a2bbe305688a7eb786</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPoint</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>af9ced1d62f056abf6f30a4dad3e03716</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFiniteVolume</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ad2c67dc332b7422cc9fc9f9de643f2aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TVector3&lt; T &gt;, TVector3&lt; T &gt; &gt;</type>
      <name>getVertices</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a930e7c02892bf2f36fc1365faa792a0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; TVector3&lt; T &gt;, 8 &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a8bff2c55afb8d71160edca1edba8befa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TVector3&lt; T &gt; &amp;</type>
      <name>getMinVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>af374aa4e2c99cf83c5324f7e5f376fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TVector3&lt; T &gt; &amp;</type>
      <name>getMaxVertex</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a1c7cf27e2b7ecf50add7da77b78c5e3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getCentroid</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>aa3d3b111b39060a279c21e50519c9806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getExtents</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ae6a2cecea2f301839e76c1222672b99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getSurfaceArea</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a87a7e69b389f32ab59a020d816379314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getVolume</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>aa76a56ac613aae72e1c6d11195f22e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D</type>
      <name>getTranslated</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ab1a9510b332616e8d8987c3af36ffa54</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;amount) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TAABB3D, TAABB3D &gt;</type>
      <name>getSplitted</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>aea05a658d36d416c1d04a6916a3f71f9</anchor>
      <arglist>(constant::AxisIndexType axis, T splitPoint) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ac987283dd6180a0accc11bb284885de6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>a05d186af1327a74800ee66583c86dc42</anchor>
      <arglist>(const TAABB3D &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAABB3D</type>
      <name>makeEmpty</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>acd1ef6d19364c61bd5d10e513ed8ad29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAABB3D</type>
      <name>makeUnioned</name>
      <anchorfile>classph_1_1math_1_1_t_a_a_b_b3_d.html</anchorfile>
      <anchor>ab8a4a18e04cd0077c5ae1bdfdec3752c</anchor>
      <arglist>(const TAABB3D &amp;a, const TAABB3D &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TableFGD</name>
    <filename>classph_1_1_table_f_g_d.html</filename>
    <member kind="function">
      <type></type>
      <name>TableFGD</name>
      <anchorfile>classph_1_1_table_f_g_d.html</anchorfile>
      <anchor>ac103896146e0643c071b57d5b452e1ad</anchor>
      <arglist>(const Path &amp;tableFilePath)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>sample</name>
      <anchorfile>classph_1_1_table_f_g_d.html</anchorfile>
      <anchor>a29b54da0dbf82a5bc9226253dc7d5bd4</anchor>
      <arglist>(real cosWi, real alpha, real iorN, real iorK) const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>sample</name>
      <anchorfile>classph_1_1_table_f_g_d.html</anchorfile>
      <anchor>af72505f98f89c3be4ec0bcb06140e854</anchor>
      <arglist>(real cosWi, real alpha, const math::Spectrum &amp;iorN, const math::Spectrum &amp;iorK) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TableTIR</name>
    <filename>classph_1_1_table_t_i_r.html</filename>
    <member kind="function">
      <type></type>
      <name>TableTIR</name>
      <anchorfile>classph_1_1_table_t_i_r.html</anchorfile>
      <anchor>af1eca64aca2c14ccf348b49dc9fa4256</anchor>
      <arglist>(const Path &amp;tableFilePath)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>sample</name>
      <anchorfile>classph_1_1_table_t_i_r.html</anchorfile>
      <anchor>a9d483bd97936847d50e2991310934a2b</anchor>
      <arglist>(real cosWi, real alpha, real relIor) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TAbsolute</name>
    <filename>classph_1_1texfunc_1_1_t_absolute.html</filename>
    <templarg>typename InputType</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_absolute.html</anchorfile>
      <anchor>a7146f2662d7ed726469b085869b192b5</anchor>
      <arglist>(const InputType &amp;inputValue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TAbstractPixelTex2D</name>
    <filename>classph_1_1_t_abstract_pixel_tex2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TTexture&lt; TTexPixel&lt; T, N &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>TAbstractPixelTex2D</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a4a7ae3e11ee9f8e1af9d1656cb375c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAbstractPixelTex2D</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>af8e8ebdf934a8c30980ca3b7f142f811</anchor>
      <arglist>(const uint32 widthPx, const uint32 heightPx)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a45566c5326881031bf4ffc77526da925</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, TTexPixel&lt; T, N &gt; *out_value) const override=0</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getWidthPx</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a497f6bc3e9c4def7639d62a067b4b2b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getHeightPx</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a6916d58f929e1a3e0e1ec7712da6a1a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getTexelSizeU</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a840741da611032a14c115abfdb3c7a1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getTexelSizeV</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a04a81e5579d8b1f1b32203f983e6239a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ETexWrapMode</type>
      <name>getWrapMode</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>ad662f7c709f40fe0a97837e4b069e5cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapMode</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a3b9a3d0eb15e4a301457d912d849088b</anchor>
      <arglist>(const ETexWrapMode mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>normalizeUV</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>aef26a9364d7e3304333adb9a11fda94b</anchor>
      <arglist>(const float64 u, const float64 v, float64 *const out_u, float64 *const out_v) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWidthPx</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a4e7d23dbfd642cc35cc5943fc9a66c79</anchor>
      <arglist>(const uint32 widthPx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setHeightPx</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a9f2ab06dfd1e4641a162cc1f38898c94</anchor>
      <arglist>(const uint32 heightPx)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>m_widthPx</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a4b0bf6e54023e7191a1ff88ed22d9dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>m_heightPx</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>adde47378b3ad446c12bb09da1c274c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float64</type>
      <name>m_texelSizeU</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a8cf229025a9b5499764e421e6e85c19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float64</type>
      <name>m_texelSizeV</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a26209859704aca8334d660ada05dac2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ETexWrapMode</type>
      <name>m_wrapMode</name>
      <anchorfile>classph_1_1_t_abstract_pixel_tex2_d.html</anchorfile>
      <anchor>a6a96f8b72808310a4fd237be120a33e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TAdd</name>
    <filename>classph_1_1texfunc_1_1_t_add.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_add.html</anchorfile>
      <anchor>a410991e8b71b96304df854446d6d9161</anchor>
      <arglist>(const InputTypeA &amp;inputValueA, const InputTypeB &amp;inputValueB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TAnalyticalIntegrator1D</name>
    <filename>classph_1_1math_1_1_t_analytical_integrator1_d.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TAnalyticalIntegrator1D</name>
      <anchorfile>classph_1_1math_1_1_t_analytical_integrator1_d.html</anchorfile>
      <anchor>af83e9085af9b80d0be00bdc8996361fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAnalyticalIntegrator1D</name>
      <anchorfile>classph_1_1math_1_1_t_analytical_integrator1_d.html</anchorfile>
      <anchor>a9e11167b9a95bbca7b2b5bbdb33c3583</anchor>
      <arglist>(T x0, T x1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate</name>
      <anchorfile>classph_1_1math_1_1_t_analytical_integrator1_d.html</anchorfile>
      <anchor>a83f0ae866579450c8d6ce3df1938d76c</anchor>
      <arglist>(const TPiecewiseLinear1D&lt; T &gt; &amp;func) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegrationDomain</name>
      <anchorfile>classph_1_1math_1_1_t_analytical_integrator1_d.html</anchorfile>
      <anchor>af105708b622bbd3d435e2e39b93f26d2</anchor>
      <arglist>(T x0, T x1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::DammertzDispatcher::TAnalyzer</name>
    <filename>classph_1_1_dammertz_dispatcher_1_1_t_analyzer.html</filename>
    <templarg>ERefineMode MODE</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzeFinishedRegion</name>
      <anchorfile>classph_1_1_dammertz_dispatcher_1_1_t_analyzer.html</anchorfile>
      <anchor>a41025fc325c066514104d7c5b065ca78</anchor>
      <arglist>(const Region &amp;finishedRegion, const HdrRgbFrame &amp;allEffortFrame, const HdrRgbFrame &amp;halfEffortFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConverged</name>
      <anchorfile>classph_1_1_dammertz_dispatcher_1_1_t_analyzer.html</anchorfile>
      <anchor>a489fc6b9f2ae20f98d0c7c2ef4ab593b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeFinishedRegion</name>
      <anchorfile>classph_1_1_dammertz_dispatcher_1_1_t_analyzer.html</anchorfile>
      <anchor>a8eea890570f328f7955a946bb12e19d2</anchor>
      <arglist>(const Region &amp;finishedRegion, const HdrRgbFrame &amp;allEffortFrame, const HdrRgbFrame &amp;halfEffortFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeFinishedRegion</name>
      <anchorfile>classph_1_1_dammertz_dispatcher_1_1_t_analyzer.html</anchorfile>
      <anchor>a684e1ed42a599e61ec98360065d55f51</anchor>
      <arglist>(const Region &amp;finishedRegion, const HdrRgbFrame &amp;allEffortFrame, const HdrRgbFrame &amp;halfEffortFrame)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TAnyPtr</name>
    <filename>classph_1_1_t_any_ptr.html</filename>
    <templarg>bool IS_CONST</templarg>
    <member kind="function">
      <type></type>
      <name>TAnyPtr</name>
      <anchorfile>classph_1_1_t_any_ptr.html</anchorfile>
      <anchor>a79c43a7cd5180ccb47281b6e35d8e804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAnyPtr</name>
      <anchorfile>classph_1_1_t_any_ptr.html</anchorfile>
      <anchor>a2e907efd7e476bebe9b8544684fb5096</anchor>
      <arglist>(std::nullptr_t ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAnyPtr</name>
      <anchorfile>classph_1_1_t_any_ptr.html</anchorfile>
      <anchor>ab1c8596b99ab9c0fa86d2c486c9629b6</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_any_ptr.html</anchorfile>
      <anchor>a175bbce5a54aed0ee8e8f81c6a324058</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_t_any_ptr.html</anchorfile>
      <anchor>a3000a1d9f7b4d974c1688d504c1f46ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T*</name>
      <anchorfile>classph_1_1_t_any_ptr.html</anchorfile>
      <anchor>a8293de362796392428540e9b7e62236d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TAosTriMesh</name>
    <filename>classph_1_1_t_aos_tri_mesh.html</filename>
    <templarg>typename Index</templarg>
    <templarg>typename Vertex</templarg>
    <templarg>typename VerticesToTriFace</templarg>
    <base>ph::IndexedTriMesh</base>
    <member kind="function">
      <type></type>
      <name>TAosTriMesh</name>
      <anchorfile>classph_1_1_t_aos_tri_mesh.html</anchorfile>
      <anchor>a5d094bcf979045891ca8046f9a0f63b4</anchor>
      <arglist>(std::vector&lt; Vertex &gt; vertices, std::vector&lt; Index &gt; indices, VerticesToTriFace verticesToTriFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAosTriMesh</name>
      <anchorfile>classph_1_1_t_aos_tri_mesh.html</anchorfile>
      <anchor>adeb3d4fac1c7670929cab46f28a5e527</anchor>
      <arglist>(const Vertex *vertices, std::size_t numVertices, const Index *indices, std::size_t numIndices, VerticesToTriFace verticesToTriFace)</arglist>
    </member>
    <member kind="function">
      <type>TriFace</type>
      <name>getFace</name>
      <anchorfile>classph_1_1_t_aos_tri_mesh.html</anchorfile>
      <anchor>a50405e0eb0fde1bf50f41fc1b275819c</anchor>
      <arglist>(std::size_t faceIndex) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TArithmeticArray</name>
    <filename>classph_1_1math_1_1_t_arithmetic_array.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::math::TArithmeticArrayBase&lt; TArithmeticArray&lt; T, N &gt;, T, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>TArithmeticArray</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>acd09ff01930be0a9b59ffd4e9b71f553</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TArithmeticArray</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>a0514ba4ab6b0b587b5dc112f9729e246</anchor>
      <arglist>(const TArithmeticArray &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TArithmeticArray</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>a8f1629a86e8c587f4a168e45035c9655</anchor>
      <arglist>(TArithmeticArray &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>TArithmeticArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>a5588e5954e7f2e0492d6aabe8df9e31e</anchor>
      <arglist>(const TArithmeticArray &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TArithmeticArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>aef176ec08f54957d77e5cb51c9a2b0cb</anchor>
      <arglist>(TArithmeticArray &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TArithmeticArray</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>a0eb5269ce4c7619bb70e38b51565e192</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TArithmeticArray</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array.html</anchorfile>
      <anchor>a85dd471b4ded5f7aaa7a6e12cb062fb5</anchor>
      <arglist>(const TArithmeticArray&lt; U, N &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TArithmeticArrayBase</name>
    <filename>classph_1_1math_1_1_t_arithmetic_array_base.html</filename>
    <templarg>typename Derived</templarg>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>std::array&lt; T, N &gt;</type>
      <name>Elements</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ae515d64df44dfea4133823bd7783acf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TArithmeticArrayBase</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ac0abf453cd066869c9dbeb8acc1497ae</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TArithmeticArrayBase</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a7d61bb5858be075f242cef83326ad39d</anchor>
      <arglist>(Elements values)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ae0cd96d5e4ee2794bb3b00f2d9c450cf</anchor>
      <arglist>(const U exponent) const -&gt; Derived</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a18c99523c481f76c912a6d77449aabca</anchor>
      <arglist>(const U exponent) -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a7fdb07a13697578899ba96c985509199</anchor>
      <arglist>(const U exponent) const -&gt; Derived</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>acdc4d4d12871aa3221c2262cec5e3643</anchor>
      <arglist>(const U exponent) -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lerp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a9634d0b951e35e73db89ab166783985a</anchor>
      <arglist>(const Derived &amp;rhs, const U factor) const -&gt; Derived</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ae40a73d4efd26f6f1b01754620bbe026</anchor>
      <arglist>(TArithmeticArrayBase)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ad9b3c4056c2371ff9bf6d680a1031b12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ad58cdb9489c07d271045fb770b461eed</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a85dc45510760e6026d759ceea0a3aea5</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>addLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a87644527c2610a09cee0bcf0f2fb92e9</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>addLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab52d1f75429c733f40cc1bf67cea9cde</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a8ef096d70a1bc8e75e4c7e7ae48e5b62</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a5fea77fb91c8f995cb8a794990e13f19</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>subLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ad744ed0f908909ee03836d23611318ea</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>subLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a19a4b20333481455ebb44e0b3f708dc0</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a15602e64861b8d4b90033e87b168b846</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a3531b3d72cdee209df8075de302399ec</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab2c2c0e821a2752db5eab046a8b945a3</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aef2162b043c6e34587709916774a931d</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>div</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a90e51e4c7b0bf070959cc95ed9784288</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>div</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aa9943171a69d3c7ec425b7882bbe5f5f</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>divLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a6273db08da0c40dfde410f1eeca60fb3</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>divLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aff35cc5d69d947d5002f93de9e884c4c</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a262f8eb4c31cc5be7ae32135320e1ee7</anchor>
      <arglist>(U exponent) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>adbf8ecf427a78628a7f3901cca049ea8</anchor>
      <arglist>(U exponent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a1baaf83772ecee9aef92d76686ed2b1f</anchor>
      <arglist>(const Derived &amp;exponent) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a0049fe2ad27bea95370ce6ac38207be8</anchor>
      <arglist>(const Derived &amp;exponent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a10d20d0085c7f75c1cd09ea86baa357d</anchor>
      <arglist>(U exponent) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a5892fd2200f9d6d190bafa0798998678</anchor>
      <arglist>(U exponent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>afc20a4a19b6712a79f08d4586fe4fcc7</anchor>
      <arglist>(const Derived &amp;exponent) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a31bc3d0d7dcfa963b5bf88bdf7bd199b</anchor>
      <arglist>(const Derived &amp;exponent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>sqrt</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a4083fab5bb93cfb01c24f9ac2f65ea98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>sqrtLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a54885af82b78ccf8ad4a74c85049da40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>abs</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a9dc304b7c2933c68133bf76c8683b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>absLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a6bd4a79d5a2a201602d32b2b958a4aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>rcp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>afca307cdbbb18eeb29b05968ec67e0a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>rcpLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a9d545dc5233a0f2cfc3fe8498ab2287e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>complement</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a49a3930581705ba2c88558e3e301410f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>complementLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aee07bdd2bf6ad2a8fc6cccf2d9214c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>sum</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a12dea26c2cb7371796c0bbdc06d8a6e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>avg</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a43155c4e80247cd2b2831599e9adbcba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>product</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a5017418f0b8b2fd8b14dc9ec97dc8c5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>min</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a9d7c74ed57f9eb3b148e93aa58acc93d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>min</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a306125f226763f667b339d227d629794</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>minIndex</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>abeff772645e1958b68435cc842ad52de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>max</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ac8f6534906d279ce79b81ccfc4e615e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>max</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a8db16a1737dacbcec0629f042ccba828</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>maxIndex</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab1777714ed85b2abc26115af89f039ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>ceil</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aedee759eab6d4ba1fc96b4a110298baa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>floor</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a4c60bc682281c483ba904ec377038f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>lerp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a8b30c7ef9e8c3b01cf4491862eb947ec</anchor>
      <arglist>(const Derived &amp;rhs, U factor) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a11ab9e6a744eabdd639954f771223e48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isNonNegative</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ac90f555143144708032eecd6910c980f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aabbf0b0d4f4d90122f70331d072aaaa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a66bef10def6b7cfc11adea52b28094e0</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ac7a8e0e0a67a56c9e1af64b9e77881fa</anchor>
      <arglist>(std::size_t index, T value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a7ee175d24dbb281117b96a60b7f1d6c5</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a67c6e1e1e756c160b2cb909840c01af0</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a7bfce5e0c7fd1ba4fc70d06a4db76b36</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>adbc3c75c377dfa6e3e0cb236079c584a</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab687653f08af35d5a1abec23280a19d9</anchor>
      <arglist>(const Derived &amp;other, T margin) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aecb3bf4c1c5ee8623159a9816559e6d8</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a18fbfeac534563261949ee662708642a</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator+</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a69a6d4e96090970d68ce55f40ed8a53a</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator+</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a3f646eb4ae9cbc7adf7f004a0ef823c8</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator-</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a61c98aa898e36afa8a9cebd055c9561f</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator-</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ac6e9d0182728a4782255c96742be1e15</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator*</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a1ba913e623adfd278e56974483716abe</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator*</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a6d5d5354c62e8530797e492afd109608</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator/</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a80bf5721785dcf90e7b7e1f4466794f4</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>operator/</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a6c07edcbbdecf23f46e6f800749db81c</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a1c5478fdfeefc64ea23679ed1aebda84</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a1eb402310a2c84af82981d9098cdc393</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a8c6d6808c1149b3c45c4053cff494ca2</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aae70cbc69704b4cf8e864812656ed99b</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>aff4da9a11491a75a9111e8d848d08b64</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a6933f58e1f5642aa46b248fa05416c61</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator/=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>af8927de543381742e6defabf969acb4a</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>operator/=</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a44945ad96bdfe837c4a21fa0b243d2a4</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a10350fd399635b3d1ece36d85b9143bd</anchor>
      <arglist>() noexcept -&gt; typename std::array&lt; T, N &gt;::iterator</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>af4c04c18027c589965c28283c400a878</anchor>
      <arglist>() const noexcept -&gt; typename std::array&lt; T, N &gt;::const_iterator</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a6997b8f5fc568f16e38ddb359f5999ed</anchor>
      <arglist>() noexcept -&gt; typename std::array&lt; T, N &gt;::iterator</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a306531a5b52d94a8663664da7eb940b6</anchor>
      <arglist>() const noexcept -&gt; typename std::array&lt; T, N &gt;::const_iterator</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a945f66ed8e65964d232f259b223debd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>toVector</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a423d2b7e2c2207fdad5cdc3e027d3caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::array&lt; T, N &gt;</type>
      <name>toArray</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a4fc4de014adb7946df69ce2ca873d78c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TSpan&lt; T, N &gt;</type>
      <name>toSpan</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab31fa7a608a3b3330e39351c0e7acf9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TSpanView&lt; T, N &gt;</type>
      <name>toView</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a5acfe2ab947966811c66ec6241f7c723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a7b50e0448ed7cc40e01ee77aed1ed0ac</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ad2b8a87560ab65188ec7a7795eb4179d</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab3ac183e2e33046262b612399e4c402b</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a4535032412a9de38c30eb5308b1d9769</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a5945374aaaee95ac178306ee3bcf1d5a</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a54908315882651cc81ddbfeef0563c60</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a877ad009e538b850c950464f73471e34</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a666030e870acbd9666360893ca2049ce</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; T, N &gt;</type>
      <name>m</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a3da28ca9690edd63fd4536e2f01b5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr auto</type>
      <name>NUM_ELEMENTS</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>acf85cb4e182f1c93672e6ff6793119d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a7b50e0448ed7cc40e01ee77aed1ed0ac</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ad2b8a87560ab65188ec7a7795eb4179d</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>ab3ac183e2e33046262b612399e4c402b</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a4535032412a9de38c30eb5308b1d9769</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a5945374aaaee95ac178306ee3bcf1d5a</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a54908315882651cc81ddbfeef0563c60</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a877ad009e538b850c950464f73471e34</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_arithmetic_array_base.html</anchorfile>
      <anchor>a666030e870acbd9666360893ca2049ce</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TArrayStack</name>
    <filename>classph_1_1_t_array_stack.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>TArrayStack</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>ade80ed89008f9b8596cfc5ff4d57e4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>a51868f681542a61cd2d194c70401e3d4</anchor>
      <arglist>(U &amp;&amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>afbebdf469f1b9acfd39de1d07b602901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>top</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>a72fa9c013874f5c283f294e30d1c605c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>top</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>a3a1960539aecbe50fda38f3776760c79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>height</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>a82b1133db16ea86e616a0c3f06b7db1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>aaff99c6357e272849b6a887a62b14f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>ab4973a77ae764dd2805a89440b2f13f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>a88ed547362533e472b189dcf8aa2a1b6</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_array_stack.html</anchorfile>
      <anchor>a8a6ab1f67611734400b12f36d0415af6</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TArrayVector</name>
    <filename>classph_1_1_t_array_vector.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>TArrayVector</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>ab4d7821eba1f0e389397017932840b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a42486f6804d992749805b2377bd67bcd</anchor>
      <arglist>(U &amp;&amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popBack</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>acd9333e31b9c72810aa5e76ef7575577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>front</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>af2842837904c7cd77cb2dfdfe36331f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>front</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>ab8fa0fd778013ab3703bdb5694951ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a1eed5f94f0a0d41bdd9c019bc183002d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a6df84e609038cc6d3fe7597b2eec40b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a8f1bcc40e9ac3da6e6ec3aa5afe44994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>abb29fe02fed6b8bb42761265dcafc8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a580d6a61e2f42f3407b14c30ef89945e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>ad6e9d7690dc9b09cdb4e1092f246733f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>ada14004485c6b40999f4306bcd762945</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>aca8f318ee4ace6e809524227e19f3966</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a46c4e44c46309e44cc65f6cce13e19b3</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a033533265fccbb5a49f3bdec9e07b906</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a13deafa11931332a38b4a68e75cf08ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>aa740001a6964af9aab3f002fa6a6e8a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>ad136d5d68330f40d7d2d93a2ef60872a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>add7c060faff29d171f6782d2a8f2c98b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>a13deafa11931332a38b4a68e75cf08ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>aa740001a6964af9aab3f002fa6a6e8a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>ad136d5d68330f40d7d2d93a2ef60872a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_array_vector.html</anchorfile>
      <anchor>add7c060faff29d171f6782d2a8f2c98b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TAtomicQuasiQueue</name>
    <filename>classph_1_1_t_atomic_quasi_queue.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TAtomicQuasiQueue</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>abc3a7b740e9f6c0fe69ef731f076629b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAtomicQuasiQueue</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>a171c295f895f7d145938580f651373be</anchor>
      <arglist>(std::size_t initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>aef12bfe3e639ef4b72d9d24ec59de22a</anchor>
      <arglist>(U &amp;&amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueueBulk</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>afca5b0773748c084d5ace907be044a71</anchor>
      <arglist>(Iterator firstItem, std::size_t numItems)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnqueue</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>ae60f1c33f0ab1b97920ab66481d9f2d8</anchor>
      <arglist>(U &amp;&amp;item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryDequeue</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>a2cbff98c159d9c613988a792292744a5</anchor>
      <arglist>(T *out_item)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>tryDequeueBulk</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>a8d59d081184c662de6ed5ba1440b42ec</anchor>
      <arglist>(Iterator out_firstItem, std::size_t numItems)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>estimatedSize</name>
      <anchorfile>classph_1_1_t_atomic_quasi_queue.html</anchorfile>
      <anchor>a01fca94d667587ae18b36ca558b1167c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TBasicTriangle</name>
    <filename>classph_1_1math_1_1_t_basic_triangle.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TBasicTriangle</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>ad7bd4f1ef630c0ba0a0ea4790accc1b1</anchor>
      <arglist>(TVector3&lt; T &gt; vA, TVector3&lt; T &gt; vB, TVector3&lt; T &gt; vC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TBasicTriangle</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a2745c6dba44e705f82030246eeb47178</anchor>
      <arglist>(std::array&lt; TVector3&lt; T &gt;, 3 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getArea</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a98168ad50c00dc674daae97823a34e3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getFaceNormal</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a265d0e3578abe559ed0647bcd6ae261b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getCentroid</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a0c6c4a57ff528925082f340e47525d57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D&lt; T &gt;</type>
      <name>getAABB</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a978066ad0ca0bda8547c0780d9a631fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getAspectRatio</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a1dfcd144b891189050377f5afaf85907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>safeGetFaceNormal</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a7d8fe1ded33828e66b156f5379951707</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;failSafe={0, 1, 0}) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TVector3&lt; T &gt;, TVector3&lt; T &gt; &gt;</type>
      <name>getEdgeVectors</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>ac200481e5c9dcb5c1b2dc805ccc6d35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>surfaceToBarycentric</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a742c7a62d0857bde8ef6d85f7a8c03c4</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;position) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>barycentricToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>aa44b3b5f9abc3273c838e561e69bc2a3</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;barycentricCoords) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToBarycentricOsada</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a70a506eccf03983f7b6adda33ad931be</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToBarycentricOsada</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>aa6b3d24dc8689ac953cee503874bd6d5</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uniformSurfaceSamplePdfA</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a218c98c0421beb5060cb339fb412adec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a6fc14f5262f3594bb0aad3724d17580d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getVa</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a8f99f7336f82e71102b7fae5463bc100</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getVb</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a62b7f151ddf9b914b6bed55384eb4f94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getVc</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a9578c423d185e5aea3b5d79173db3161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TVector3&lt; T &gt;</type>
      <name>interpolate</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a28e40ee9ac97584fb7f0a9cfdfc7b49f</anchor>
      <arglist>(const std::array&lt; TVector3&lt; T &gt;, 3 &gt; &amp;attributes, const TVector3&lt; T &gt; &amp;barycentricCoords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TVector3&lt; T &gt;</type>
      <name>interpolate</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>acf9ddcbc6f6d9184ef034dd4797960cd</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;attributeA, const TVector3&lt; T &gt; &amp;attributeB, const TVector3&lt; T &gt; &amp;attributeC, const TVector3&lt; T &gt; &amp;barycentricCoords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>calcSurfaceParamDerivatives</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>a52e84502b08712d441ac777315915094</anchor>
      <arglist>(const std::array&lt; TVector3&lt; T &gt;, 3 &gt; &amp;attributes, const std::array&lt; TVector2&lt; T &gt;, 3 &gt; &amp;parameterizations, TVector3&lt; T &gt; *out_dXdU, TVector3&lt; T &gt; *out_dXdV)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_basic_triangle.html</anchorfile>
      <anchor>aa5a294975bdf97cf952a059421992e13</anchor>
      <arglist>(TBasicTriangle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TBilinearPixelTex2D</name>
    <filename>classph_1_1_t_bilinear_pixel_tex2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TPixelTex2D&lt; T, N &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_bilinear_pixel_tex2_d.html</anchorfile>
      <anchor>a03ec293b8eab6230bb9e7e1e6e7742a9</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, TTexPixel&lt; T, N &gt; *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TBinaryTextureOperator</name>
    <filename>classph_1_1_t_binary_texture_operator.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <templarg>texfunc::CBinaryOperator&lt; InputTypeA, InputTypeB, OutputType &gt; OperatorType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputTypeA &gt; &gt;</type>
      <name>InputTexResA</name>
      <anchorfile>classph_1_1_t_binary_texture_operator.html</anchorfile>
      <anchor>aae7158195264d67cfc2197be194e2fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputTypeB &gt; &gt;</type>
      <name>InputTexResB</name>
      <anchorfile>classph_1_1_t_binary_texture_operator.html</anchorfile>
      <anchor>ac3129e44f0ffba9faa3998f9ddcc59fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TBinaryTextureOperator</name>
      <anchorfile>classph_1_1_t_binary_texture_operator.html</anchorfile>
      <anchor>ad92491a2d6e1c903a5388608af2bf0b1</anchor>
      <arglist>(InputTexResA inputA, InputTexResB inputB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TBinaryTextureOperator</name>
      <anchorfile>classph_1_1_t_binary_texture_operator.html</anchorfile>
      <anchor>a22405196cb35ba1072b6e4a383c26da2</anchor>
      <arglist>(InputTexResA inputA, InputTexResB inputB, OperatorType op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_binary_texture_operator.html</anchorfile>
      <anchor>ad7eef9a7e3d067f632abd25504ceae6b</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TBitFlags</name>
    <filename>classph_1_1_t_bit_flags.html</filename>
    <templarg>typename Value</templarg>
    <templarg>typename Input</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>TBitFlags</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a86369f00e8eaa23eb7dbf4c678a759de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TBitFlags</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>aae54f988b01dd2f6d024d5d3c476dccb</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TBitFlags</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a0b928e01ac5241ff8d29fe6b65244c91</anchor>
      <arglist>(Input flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TBitFlags</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ac0c44eb6205bd6e53618a2c6ed7ac97b</anchor>
      <arglist>(const TBitFlags&lt; Value, OtherInput &gt; &amp;otherFlags)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>intersectWith</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a6bf5bc3be83da9bb928e49384f19690c</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasNone</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a847a820da08c5b1d624bfa3c3c8bc96d</anchor>
      <arglist>(const FlagsSet &amp;flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasAny</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a7597f0560d17c6647429a0e07b38afb9</anchor>
      <arglist>(const FlagsSet &amp;flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasAll</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ac2ec09cf4f0be8de0c7b2746346a5d38</anchor>
      <arglist>(const FlagsSet &amp;flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasExactly</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a35e98dd171cbc7aecfc237e6d1621a12</anchor>
      <arglist>(const FlagsSet &amp;flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasNone</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>adddc75d59578fde5ec0b9b207c61b886</anchor>
      <arglist>(Input flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasAny</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a9d51fbeb24d206d562a7b25e6fb172d4</anchor>
      <arglist>(Input flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasAll</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a5148fb5788c326fc09ccb77b1dd721d4</anchor>
      <arglist>(Input flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasExactly</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a5ba4996048242d57ef51e5761b996be2</anchor>
      <arglist>(Input flagsSet) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a481cf188f6423a3fb5ee717dcd70b004</anchor>
      <arglist>(Input singleFlag) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasNo</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a7b26ef6fddc05eaa7c0f714f95408ef5</anchor>
      <arglist>(Input singleFlag) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a531411ef1cf82e8ef943dffc29c717d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>af3f1d3946cf1f7c51fbd3ea4f9a85f07</anchor>
      <arglist>(const TBitFlags &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr Value</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ab53f36a437f9a8d88093465a34e3211a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a625ce3217f61b4a31bf1baf31c288c78</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a73e3994603434b7ba54ff7263adf40b8</anchor>
      <arglist>(Input flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Input</type>
      <name>getEnum</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ae26c371205805ff61da61cd97f72c9fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ad4ce784c31bc806c489e50a8429a9558</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a9d45b49df1fcbf657d6340edeee07ebd</anchor>
      <arglist>(const TBitFlags &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>turnOn</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ac60a0ae63f614b60cdfd2fe4b0dd8813</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>turnOff</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a74cc47a64ac646560375a8bc262ceeb4</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ad4ce784c31bc806c489e50a8429a9558</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>unionWith</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a9d45b49df1fcbf657d6340edeee07ebd</anchor>
      <arglist>(const TBitFlags &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>turnOn</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>ac60a0ae63f614b60cdfd2fe4b0dd8813</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TBitFlags &amp;</type>
      <name>turnOff</name>
      <anchorfile>classph_1_1_t_bit_flags.html</anchorfile>
      <anchor>a74cc47a64ac646560375a8bc262ceeb4</anchor>
      <arglist>(const FlagsSet &amp;flagsSet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TBlackmanHarris2D</name>
    <filename>classph_1_1math_1_1_t_blackman_harris2_d.html</filename>
    <templarg>typename Value</templarg>
    <base>ph::math::TMathFunction2D&lt; Value &gt;</base>
    <member kind="function">
      <type></type>
      <name>TBlackmanHarris2D</name>
      <anchorfile>classph_1_1math_1_1_t_blackman_harris2_d.html</anchorfile>
      <anchor>a03058a6bb2106e0040d07e46d7866357</anchor>
      <arglist>(Value radius)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_blackman_harris2_d.html</anchorfile>
      <anchor>a785c9ce477bf7647532e478ef8cd2434</anchor>
      <arglist>(Value x, Value y) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TBlockableAtomicQuasiQueue</name>
    <filename>classph_1_1_t_blockable_atomic_quasi_queue.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TBlockableAtomicQuasiQueue</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>ab6f61f4c07efc1d1ae4c425d2f2665eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TBlockableAtomicQuasiQueue</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>a5f47601b7414d4b1e5584614f229d8b0</anchor>
      <arglist>(std::size_t initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>abb085a43e7de1339fbad15365b08c36d</anchor>
      <arglist>(U &amp;&amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueueBulk</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>a9837d99ddb32b7317f47de7a4174338a</anchor>
      <arglist>(Iterator firstItem, std::size_t numItems)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnqueue</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>a1ac97cfcc51484bfd428b4db46e01d81</anchor>
      <arglist>(U &amp;&amp;item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryDequeue</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>abccaa60269a3e0824eb94588f7fa4657</anchor>
      <arglist>(T *out_item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitDequeue</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>ab61d3af1feee2ebefd2ab5e7f90ddd79</anchor>
      <arglist>(T *out_item)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>waitDequeueBulk</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>ae0004e99fc958f152e3bffd2af2589f7</anchor>
      <arglist>(Iterator out_firstItem, std::size_t numItems)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>estimatedSize</name>
      <anchorfile>classph_1_1_t_blockable_atomic_quasi_queue.html</anchorfile>
      <anchor>abdd8f48f70e35b29c73cbef59ea5b9b3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TCheckerboardTexture</name>
    <filename>classph_1_1_t_checkerboard_texture.html</filename>
    <templarg>typename OutputType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="function">
      <type></type>
      <name>TCheckerboardTexture</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>a53787647da23038b270884989f510f6d</anchor>
      <arglist>(real numUtiles, real numVtiles, const OutputType &amp;oddValue, const OutputType &amp;evenValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCheckerboardTexture</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>a96d71e96f1cbe30569e0966673a4ea81</anchor>
      <arglist>(real numUtiles, real numVtiles, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;oddTexture, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;evenTexture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>a14c1f27b70afa7a3b5f15e48d8081134</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *out_value) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOddTexture</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>a7f3955a99d36264ac62a811bf4eb6f84</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;oddTexture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvenTexture</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>aaee1ee2a54826d4a602a3a16cdcd6355</anchor>
      <arglist>(const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;evenTexture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOddTextureScale</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>aae41757d88e18afa4648ca6e5e0e6f86</anchor>
      <arglist>(const math::Vector3R &amp;sale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvenTextureScale</name>
      <anchorfile>classph_1_1_t_checkerboard_texture.html</anchorfile>
      <anchor>a5ab686deb34aa7babd34a585e61e4a29</anchor>
      <arglist>(const math::Vector3R &amp;scale)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TChromaticAdaptationDefinition</name>
    <filename>classph_1_1math_1_1_t_chromatic_adaptation_definition.html</filename>
    <templarg>EChromaticAdaptation ALGORITHM</templarg>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::Bradford, T &gt;</name>
    <filename>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_bradford_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TChromaticAdaptationDefinitionHelper&lt; EChromaticAdaptation::Bradford &gt;</base>
    <member kind="function" static="yes">
      <type>static TMatrix3&lt; T &gt;</type>
      <name>getCIEXYZToConeResponse</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_bradford_00_01_t_01_4.html</anchorfile>
      <anchor>a41f115f0385276e9fec0adeddb87bf83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TMatrix3&lt; T &gt;</type>
      <name>getConeResponseToCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_bradford_00_01_t_01_4.html</anchorfile>
      <anchor>acd3c532f26c4772e5c439057c8f4505a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>adapt</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_bradford_00_01_t_01_4.html</anchorfile>
      <anchor>aa0a7468c1c0386503931f3248cd0ccc1</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor, const EReferenceWhite srcRefWhite, const EReferenceWhite dstRefWhite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::VonKries, T &gt;</name>
    <filename>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_von_kries_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TChromaticAdaptationDefinitionHelper&lt; EChromaticAdaptation::VonKries &gt;</base>
    <member kind="function" static="yes">
      <type>static TMatrix3&lt; T &gt;</type>
      <name>getCIEXYZToConeResponse</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_von_kries_00_01_t_01_4.html</anchorfile>
      <anchor>abc5967d3767ff39d4d6f0e8b93f86fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TMatrix3&lt; T &gt;</type>
      <name>getConeResponseToCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_von_kries_00_01_t_01_4.html</anchorfile>
      <anchor>a477bdcf96bd3201508348e718d09fe23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>adapt</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_von_kries_00_01_t_01_4.html</anchorfile>
      <anchor>a428172b427b61ae4c7da6d3e7d37a142</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor, const EReferenceWhite srcRefWhite, const EReferenceWhite dstRefWhite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::XYZScaling, T &gt;</name>
    <filename>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_x_y_z_scaling_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TChromaticAdaptationDefinitionHelper&lt; EChromaticAdaptation::XYZScaling &gt;</base>
    <member kind="function" static="yes">
      <type>static TMatrix3&lt; T &gt;</type>
      <name>getCIEXYZToConeResponse</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_x_y_z_scaling_00_01_t_01_4.html</anchorfile>
      <anchor>ab42e73f7a83100e98b37e48b62164220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TMatrix3&lt; T &gt;</type>
      <name>getConeResponseToCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_x_y_z_scaling_00_01_t_01_4.html</anchorfile>
      <anchor>a684b11872acc06e0c35392c3bc845059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>adapt</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_3_01_e_chromatic_adaptation_1_1_x_y_z_scaling_00_01_t_01_4.html</anchorfile>
      <anchor>a8ddfc5fcb7639a661418c9a9b400caae</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor, const EReferenceWhite srcRefWhite, const EReferenceWhite dstRefWhite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TChromaticAdaptationDefinitionHelper</name>
    <filename>classph_1_1math_1_1_t_chromatic_adaptation_definition_helper.html</filename>
    <templarg>EChromaticAdaptation ALGORITHM</templarg>
    <base protection="private">ph::IUninstantiable</base>
    <member kind="function" static="yes">
      <type>static consteval EChromaticAdaptation</type>
      <name>getAlgorithm</name>
      <anchorfile>classph_1_1math_1_1_t_chromatic_adaptation_definition_helper.html</anchorfile>
      <anchor>a05cae291257795a004753681af7f44e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::math::detail::TCIEXYZCmfKernel</name>
    <filename>structph_1_1math_1_1detail_1_1_t_c_i_e_x_y_z_cmf_kernel.html</filename>
    <templarg>typename T</templarg>
    <templarg>CSpectralSampleProps SampleProps</templarg>
    <member kind="typedef">
      <type>TVectorN&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>ArrayType</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_c_i_e_x_y_z_cmf_kernel.html</anchorfile>
      <anchor>ae541cb3f00a17960c049dc4ac5ab3f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCIEXYZCmfKernel</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_c_i_e_x_y_z_cmf_kernel.html</anchorfile>
      <anchor>aa24bf191681281503c262616d2ff651c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::array&lt; ArrayType, 3 &gt;</type>
      <name>weights</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_c_i_e_x_y_z_cmf_kernel.html</anchorfile>
      <anchor>a92cc33d482e618b60e1b94a7991bcd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, 3 &gt;</type>
      <name>illuminantD65Normalizer</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_c_i_e_x_y_z_cmf_kernel.html</anchorfile>
      <anchor>ab6871e0e305d8d3e8eb90473cf84f774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, 3 &gt;</type>
      <name>illuminantENormalizer</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_c_i_e_x_y_z_cmf_kernel.html</anchorfile>
      <anchor>a9156892e1f607fdf4b25b25a60525c20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TClamp</name>
    <filename>classph_1_1texfunc_1_1_t_clamp.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename InputTypeC</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_clamp.html</anchorfile>
      <anchor>a920fcb5f611fbce0312c28874b150b1a</anchor>
      <arglist>(const InputTypeA &amp;inputValueA, const InputTypeB &amp;inputValueB, const InputTypeC &amp;inputValueC) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TColorPixelTexture2D</name>
    <filename>classph_1_1_t_color_pixel_texture2_d.html</filename>
    <templarg>math::EColorSpace COLOR_SPACE</templarg>
    <base>ph::TPixelTexture2D&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>TColorPixelTexture2D</name>
      <anchorfile>classph_1_1_t_color_pixel_texture2_d.html</anchorfile>
      <anchor>afc20e58d134665db873349cf5da15dcd</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::EPixelLayout colorLayout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TColorPixelTexture2D</name>
      <anchorfile>classph_1_1_t_color_pixel_texture2_d.html</anchorfile>
      <anchor>ac44a476e37574c82ab946665ecb750e8</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::EPixelLayout colorLayout, pixel_texture::ESampleMode sampleMode, pixel_texture::EWrapMode wrapModeS, pixel_texture::EWrapMode wrapModeT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_color_pixel_texture2_d.html</anchorfile>
      <anchor>a2b3e6e10631e3ecc4f8b290074f8fe2f</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::Spectrum *out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition</name>
    <filename>classph_1_1math_1_1_t_color_space_definition.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static consteval EColorSpace</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition.html</anchorfile>
      <anchor>a55d9eddcfddabf3ce0179e8f75b29682</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval bool</type>
      <name>isTristimulus</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition.html</anchorfile>
      <anchor>a6b1a82a44f15be5641f746f5a69539b4</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition&lt; EColorSpace::ACEScg, T &gt;</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_a_c_e_scg_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TTristimulusColorSpaceDefinitionHelper&lt; EColorSpace::ACEScg, EReferenceWhite::ACES &gt;</base>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>toCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_a_c_e_scg_00_01_t_01_4.html</anchorfile>
      <anchor>aef42d80544d577ca03610a30de49179f</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;thisColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>fromCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_a_c_e_scg_00_01_t_01_4.html</anchorfile>
      <anchor>a5c63e577f4c7f25d50be041633377263</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition&lt; EColorSpace::CIE_xyY, T &gt;</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_c_i_e__xy_y_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TTristimulusColorSpaceDefinitionHelper&lt; EColorSpace::CIE_xyY, EReferenceWhite::D65 &gt;</base>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>toCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_c_i_e__xy_y_00_01_t_01_4.html</anchorfile>
      <anchor>a97ee7cececff5342329b5ff31a29208f</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;thisColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>fromCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_c_i_e__xy_y_00_01_t_01_4.html</anchorfile>
      <anchor>a9de6cee5cb63049d4f33d183637101eb</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition&lt; EColorSpace::CIE_XYZ, T &gt;</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_c_i_e___x_y_z_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TTristimulusColorSpaceDefinitionHelper&lt; EColorSpace::CIE_XYZ, EReferenceWhite::D65 &gt;</base>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>toCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_c_i_e___x_y_z_00_01_t_01_4.html</anchorfile>
      <anchor>a614a4f4539515d3a7ca307c9c88d2a95</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;thisColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>fromCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_c_i_e___x_y_z_00_01_t_01_4.html</anchorfile>
      <anchor>a2103760170ea1e11d794b113a2ef2412</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition&lt; EColorSpace::Linear_sRGB, T &gt;</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_linear__s_r_g_b_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TTristimulusColorSpaceDefinitionHelper&lt; EColorSpace::Linear_sRGB, EReferenceWhite::D65 &gt;</base>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>toCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_linear__s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>add536e3c48d2701dffaece4737011ddb</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;thisColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>fromCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_linear__s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>ae6074639bb9c453c0f74f87f0357619a</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition&lt; EColorSpace::Spectral_Smits, T &gt;</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_spectral___smits_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TSpectralColorSpaceDefinitionHelper&lt; EColorSpace::Spectral_Smits, EColorSpace::Linear_sRGB &gt;</base>
    <member kind="function" static="yes">
      <type>static TSpectralSampleValues&lt; T &gt;</type>
      <name>upSample</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_spectral___smits_00_01_t_01_4.html</anchorfile>
      <anchor>a2a8ea5258b437c3d3211cb79dd1acb19</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;boundColor, const EColorUsage usage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>downSample</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1_spectral___smits_00_01_t_01_4.html</anchorfile>
      <anchor>ae6d808ac779c7a454911b4f6b82b66f9</anchor>
      <arglist>(const TSpectralSampleValues&lt; T &gt; &amp;sampleValues, const EColorUsage usage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinition&lt; EColorSpace::sRGB, T &gt;</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TTristimulusColorSpaceDefinitionHelper&lt; EColorSpace::sRGB, EReferenceWhite::D65 &gt;</base>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>gammaCompressSingleChannel</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>ae155e141850892d23b7c02c2b8c8d92c</anchor>
      <arglist>(const T linearColorValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>gammaExpandSingleChannel</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>a9d51db220d9d2ad7f625bc6017b1fee5</anchor>
      <arglist>(const T nonlinearColorValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>gammaCompress</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>a021401eab1f29b273a471c3b87b2242a</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;linearSRGBColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>gammaExpand</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>ae10fd3f069d89dab2f83365deb1fb091</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;nonlinearSRGBColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>toCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>a3cc3b3b7b40f9c66c394ff612b28ae1e</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;thisColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TTristimulusValues&lt; T &gt;</type>
      <name>fromCIEXYZ</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_3_01_e_color_space_1_1s_r_g_b_00_01_t_01_4.html</anchorfile>
      <anchor>ab96d9fdaf91982a92d2d0d8259ed902b</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;CIEXYZColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TColorSpaceDefinitionHelper</name>
    <filename>classph_1_1math_1_1_t_color_space_definition_helper.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>EReferenceWhite REF_WHITE</templarg>
    <base protection="private">ph::IUninstantiable</base>
    <member kind="function" protection="protected" static="yes">
      <type>static consteval EColorSpace</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1math_1_1_t_color_space_definition_helper.html</anchorfile>
      <anchor>a6ead1f54a46c6ad6048244328f1fc0ce</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::detail::TColorSpaceDummy</name>
    <filename>classph_1_1math_1_1detail_1_1_t_color_space_dummy.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
  </compound>
  <compound kind="class">
    <name>ph::math::TConstant2D</name>
    <filename>classph_1_1math_1_1_t_constant2_d.html</filename>
    <templarg>typename Value</templarg>
    <base>ph::math::TMathFunction2D&lt; Value &gt;</base>
    <member kind="function">
      <type></type>
      <name>TConstant2D</name>
      <anchorfile>classph_1_1math_1_1_t_constant2_d.html</anchorfile>
      <anchor>abdfe5c231bd9781542a92d0378f8848f</anchor>
      <arglist>(Value constantValue)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_constant2_d.html</anchorfile>
      <anchor>a202951a172dd14807a2d6fb98b9437c4</anchor>
      <arglist>(Value x, Value y) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TConstantSpectralTexture</name>
    <filename>classph_1_1_t_constant_spectral_texture.html</filename>
    <templarg>math::EColorSpace COLOR_SPACE</templarg>
    <base>ph::TTexture&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>TConstantSpectralTexture</name>
      <anchorfile>classph_1_1_t_constant_spectral_texture.html</anchorfile>
      <anchor>a2ef12c0b30b581b15ed26be3c1c79a68</anchor>
      <arglist>(math::SpectralSampleValues value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_constant_spectral_texture.html</anchorfile>
      <anchor>ab0803a1e10b743d36aab296f50601cbe</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::Spectrum *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TConstantTexture</name>
    <filename>classph_1_1_t_constant_texture.html</filename>
    <templarg>typename OutputType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="function">
      <type></type>
      <name>TConstantTexture</name>
      <anchorfile>classph_1_1_t_constant_texture.html</anchorfile>
      <anchor>a5ecc4c7a9928af0614a88f44a4288f1c</anchor>
      <arglist>(OutputType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_constant_texture.html</anchorfile>
      <anchor>a407e63aafa2cf21cab7e95369463abe0</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TConstantTristimulusTexture</name>
    <filename>classph_1_1_t_constant_tristimulus_texture.html</filename>
    <templarg>math::EColorSpace COLOR_SPACE</templarg>
    <base>ph::TTexture&lt; math::Spectrum &gt;</base>
    <member kind="function">
      <type></type>
      <name>TConstantTristimulusTexture</name>
      <anchorfile>classph_1_1_t_constant_tristimulus_texture.html</anchorfile>
      <anchor>af8c68e903a9f03250eaeaf92c074d773</anchor>
      <arglist>(math::TristimulusValues value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TConstantTristimulusTexture</name>
      <anchorfile>classph_1_1_t_constant_tristimulus_texture.html</anchorfile>
      <anchor>ab11a6fc98a3304eee0e0b3963a1a6b46</anchor>
      <arglist>(math::ColorValue value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_constant_tristimulus_texture.html</anchorfile>
      <anchor>a93f2638663499b7029d624776cb66d94</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::Spectrum *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TConstIteratorProxy</name>
    <filename>classph_1_1_t_const_iterator_proxy.html</filename>
    <templarg>typename ContainerType</templarg>
    <member kind="function">
      <type></type>
      <name>TConstIteratorProxy</name>
      <anchorfile>classph_1_1_t_const_iterator_proxy.html</anchorfile>
      <anchor>aa99b89c7fe08d24ee25749c0cdb80871</anchor>
      <arglist>(const ContainerType &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_const_iterator_proxy.html</anchorfile>
      <anchor>ad0d91dd1c5541cec7742a47a015b07a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ContainerType::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_const_iterator_proxy.html</anchorfile>
      <anchor>aaeed5fcd152d190396f38646f28154d7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TDecomposedTransform</name>
    <filename>classph_1_1math_1_1_t_decomposed_transform.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TDecomposedTransform</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>aa65d2b89183683acd3f20bcda9cba229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TDecomposedTransform</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a4bf145f0350aa98124db15fb760c4a48</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;pos, const TQuaternion&lt; T &gt; &amp;rot, const TVector3&lt; T &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>translate</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>af779b3dc0010b093789086cc18dd8446</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>translate</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a69a60dd9f9d80515b099efe6119b4e6a</anchor>
      <arglist>(const T x, const T y, const T z)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform</type>
      <name>rotate</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a143df51b5a26df9b8a313cf0eaa577bb</anchor>
      <arglist>(const TQuaternion&lt; T &gt; &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>rotate</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a1b8a8e41d1efadea0c55dc2ca0782504</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;axis, const T degrees)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>scale</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a8ae40d6f30e2b3ecb8e01cdf756fcb91</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>scale</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a31807599d789442c9e6b75f80fdddb98</anchor>
      <arglist>(const T x, const T y, const T z)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>setPos</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>ad517325a624f347514d7ad1c12fcd2aa</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>setRot</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a82c6ce3790e83341846a17557b0e244f</anchor>
      <arglist>(const TQuaternion&lt; T &gt; &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>setScale</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>afd5b9d60232885754ab742636a5ff8ed</anchor>
      <arglist>(const T scale)</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform &amp;</type>
      <name>setScale</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>ac52d6d60c108cc3d36bc2777c227264f</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getPos</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>ae86239944148d5af53d9a257414361f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion&lt; T &gt;</type>
      <name>getRot</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a3632ded414cc31be81565376111faa56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getScale</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>adfd644049b7ced7a927ad1e00606262f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genTransformMatrix</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a707bc57f5b96f6cf01d899ca566a7285</anchor>
      <arglist>(TMatrix4&lt; T &gt; *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genInverseTransformMatrix</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a9a8fbdb0c2105f2ae897aefd48bc655c</anchor>
      <arglist>(TMatrix4&lt; T &gt; *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TDecomposedTransform</type>
      <name>invert</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a510d69ab3cf1fae77c73200a77bae20e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScaleEffect</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>ad821ca4d2a10368e0a834cec4dd9096c</anchor>
      <arglist>(T margin=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScaleUniform</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a5b0d3605c7cac4d4a91435f63ec92d90</anchor>
      <arglist>(T margin=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a59d246666504b576f1467ab55aa1ae43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>aa45fdcecf5611ffcacd42751b702b414</anchor>
      <arglist>(const TDecomposedTransform &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classph_1_1math_1_1_t_decomposed_transform.html</anchorfile>
      <anchor>a56851db7cf1ac4befd336b65d51b27ed</anchor>
      <arglist>(const TDecomposedTransform &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TDefaultConversion</name>
    <filename>classph_1_1texfunc_1_1_t_default_conversion.html</filename>
    <templarg>typename InputType</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_default_conversion.html</anchorfile>
      <anchor>af37c86e33a1c5f58a5e799e4e3e52cff</anchor>
      <arglist>(const InputType &amp;inputValue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::TDirectLightEstimator</name>
    <filename>classph_1_1lta_1_1_t_direct_light_estimator.html</filename>
    <templarg>ESidednessPolicy POLICY</templarg>
    <member kind="function">
      <type></type>
      <name>TDirectLightEstimator</name>
      <anchorfile>classph_1_1lta_1_1_t_direct_light_estimator.html</anchorfile>
      <anchor>a63a04ec0df7e6dc1b5095b10f317236c</anchor>
      <arglist>(const Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bsdfSampleEmission</name>
      <anchorfile>classph_1_1lta_1_1_t_direct_light_estimator.html</anchorfile>
      <anchor>a245f268857c8bb9988e766c95d6406a5</anchor>
      <arglist>(BsdfSampleQuery &amp;bsdfSample, SampleFlow &amp;sampleFlow, math::Spectrum *out_Le=nullptr, std::optional&lt; SurfaceHit &gt; *out_X=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neeSampleEmission</name>
      <anchorfile>classph_1_1lta_1_1_t_direct_light_estimator.html</anchorfile>
      <anchor>aaf17280d6b32cb7ae5037251523f5eaf</anchor>
      <arglist>(DirectEnergySampleQuery &amp;directSample, SampleFlow &amp;sampleFlow, SurfaceHit *out_Xe=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bsdfSamplePathWithNee</name>
      <anchorfile>classph_1_1lta_1_1_t_direct_light_estimator.html</anchorfile>
      <anchor>a0ab62eb48b7793411c4c0d07d928734e</anchor>
      <arglist>(BsdfSampleQuery &amp;bsdfSample, SampleFlow &amp;sampleFlow, math::Spectrum *out_Lo=nullptr, std::optional&lt; SurfaceHit &gt; *out_X=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>neeSamplePdfWUnoccluded</name>
      <anchorfile>classph_1_1lta_1_1_t_direct_light_estimator.html</anchorfile>
      <anchor>ae264d6fc1c916e86aa96e788b6d8a9f6</anchor>
      <arglist>(const SurfaceHit &amp;X, const SurfaceHit &amp;Xe) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNeeSamplable</name>
      <anchorfile>classph_1_1lta_1_1_t_direct_light_estimator.html</anchorfile>
      <anchor>a6fd335f50bce1a71748affc54b550d0f</anchor>
      <arglist>(const SurfaceHit &amp;X) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TDisk</name>
    <filename>classph_1_1math_1_1_t_disk.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TDisk</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>aff2adf0042cf2ffe38984c2deb3ae3bc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TDisk</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>a63a30bc667cac27b33d8c81edffedf89</anchor>
      <arglist>(T radius)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getArea</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>a5ae25bd4faac6b1f8db3abe2b7c3d1e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>a7121c55765fe32aca8e715e2017510ba</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>a4865ba2c6fa0b2ea445344c37561df08</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>sampleToSurface2D</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>ab8aeefea301feaafbcf750d7af5db34e</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>sampleToSurface2D</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>a73cae4acfcf3065b33f48df8a82ddb5c</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceOriented</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>a2f4b2ec2d30a0e4c7bd90b3496e14031</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, const TVector3&lt; T &gt; &amp;normal=TVector3&lt; T &gt;(0, 1, 0), const TVector3&lt; T &gt; &amp;offset=TVector3&lt; T &gt;(0)) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceOriented</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>ac8d0c1643e16f57571f56c25da18cfe2</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA, const TVector3&lt; T &gt; &amp;normal=TVector3&lt; T &gt;(0, 1, 0), const TVector3&lt; T &gt; &amp;offset=TVector3&lt; T &gt;(0)) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TDisk</type>
      <name>makeUnit</name>
      <anchorfile>classph_1_1math_1_1_t_disk.html</anchorfile>
      <anchor>ab3d72b69108939bfb34399602a9fd895</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TDivide</name>
    <filename>classph_1_1texfunc_1_1_t_divide.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_divide.html</anchorfile>
      <anchor>aff28def8dcb203505021d1b46b8229c5</anchor>
      <arglist>(const InputTypeA &amp;inputValueA, const InputTypeB &amp;inputValueB) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::TEmbeddedPrimitiveGetter</name>
    <filename>structph_1_1_t_embedded_primitive_getter.html</filename>
    <templarg>CDerived&lt; Primitive &gt; PrimitiveType</templarg>
    <member kind="function">
      <type></type>
      <name>TEmbeddedPrimitiveGetter</name>
      <anchorfile>structph_1_1_t_embedded_primitive_getter.html</anchorfile>
      <anchor>ad69ff9b871e17c338ea136c408d69919</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveType *</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_t_embedded_primitive_getter.html</anchorfile>
      <anchor>aa649187e55b32dbfaac5c5875976949a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>PrimitiveType</type>
      <name>primitive</name>
      <anchorfile>structph_1_1_t_embedded_primitive_getter.html</anchorfile>
      <anchor>aeb73ac0e5c15058973b86cd4871a32e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::SdlEnum::TEntry</name>
    <filename>structph_1_1_sdl_enum_1_1_t_entry.html</filename>
    <templarg>typename ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>TEntry</name>
      <anchorfile>structph_1_1_sdl_enum_1_1_t_entry.html</anchorfile>
      <anchor>ae9f7d4cfe3f8bd5919601c1169665813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEntry</name>
      <anchorfile>structph_1_1_sdl_enum_1_1_t_entry.html</anchorfile>
      <anchor>a5fe904c6c0d918e9d8f48841ebfaee34</anchor>
      <arglist>(std::string_view name, ValueType value)</arglist>
    </member>
    <member kind="variable">
      <type>std::string_view</type>
      <name>name</name>
      <anchorfile>structph_1_1_sdl_enum_1_1_t_entry.html</anchorfile>
      <anchor>ae5f9af021146bc92ee750bf22684671c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>value</name>
      <anchorfile>structph_1_1_sdl_enum_1_1_t_entry.html</anchorfile>
      <anchor>a41b26b019a97fbdd6b317601c98919fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TEstimationArray</name>
    <filename>classph_1_1_t_estimation_array.html</filename>
    <templarg>typename EstimationType</templarg>
    <member kind="function">
      <type></type>
      <name>TEstimationArray</name>
      <anchorfile>classph_1_1_t_estimation_array.html</anchorfile>
      <anchor>a43e2d39efc4a003a8a9fffcb3c01aab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEstimationArray</name>
      <anchorfile>classph_1_1_t_estimation_array.html</anchorfile>
      <anchor>a2c8d9eb296b19b45e22625efe096295d</anchor>
      <arglist>(std::size_t numEstimations)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numEstimations</name>
      <anchorfile>classph_1_1_t_estimation_array.html</anchorfile>
      <anchor>a7c0dc38add8ce3fca9ce7ae868079081</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EstimationType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_estimation_array.html</anchorfile>
      <anchor>a52cdf44c1bab9ccb09463fe245386342</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const EstimationType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_estimation_array.html</anchorfile>
      <anchor>a7ac5a377e4ec977a043fba9649fc054b</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TestPoint</name>
    <filename>classph_1_1_test_point.html</filename>
    <member kind="function">
      <type></type>
      <name>TestPoint</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>ab339a8e8b653bcd05cbfc11325dae4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TestPoint</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>a0eb7bf8787bc4b16b23406d3518c05f8</anchor>
      <arglist>(const real testPoint, const int32 pointType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>aae60a4131eb9b0f084092b248513a308</anchor>
      <arglist>(const TestPoint &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>m_testPoint</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>a053508d35f39e0af62fc4f8989522459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>m_pointType</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>ac9485f8a02cd944c8c5c609c33c95dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32</type>
      <name>INTERSECTABLE_MIN</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>ae080a11ebfbb920dccf1ea1e3d23fb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32</type>
      <name>INTERSECTABLE_MAX</name>
      <anchorfile>classph_1_1_test_point.html</anchorfile>
      <anchor>a084a6650a53d1f4e1e8dc23efa27e57a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TextFileLoader</name>
    <filename>classph_1_1_text_file_loader.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>load</name>
      <anchorfile>classph_1_1_text_file_loader.html</anchorfile>
      <anchor>a76dadce331cf92477bb957fa5af68289</anchor>
      <arglist>(const Path &amp;filePath, std::string *out_text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TextureLoader</name>
    <filename>classph_1_1_texture_loader.html</filename>
    <member kind="function">
      <type></type>
      <name>TextureLoader</name>
      <anchorfile>classph_1_1_texture_loader.html</anchorfile>
      <anchor>aadd93c3ebd9d86195b5ec18620ac6dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classph_1_1_texture_loader.html</anchorfile>
      <anchor>a06613e5da3e2515a85a6fbbf7607613a</anchor>
      <arglist>(const std::string &amp;fullFilename, RgbPixelTexture *const out_rgbPixelTexture)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TFixedMapBase</name>
    <filename>classph_1_1_t_fixed_map_base.html</filename>
    <templarg>typename... Entries</templarg>
    <member kind="typedef">
      <type>std::tuple&lt; Entries... &gt;</type>
      <name>EntryArray</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a96338dc170a2d9a5a7d74cd45a658503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::tuple_element_t&lt; 0, EntryArray &gt;::Key</type>
      <name>Key</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>ab5e0c4fd76d18765cc6f38f8244ecd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple_element_t&lt; ENTRY_INDEX, EntryArray &gt;</type>
      <name>Entry</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a91901bcacba92501afddff04e52d09d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFixedMapBase</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a5c930e5d575437e3904577efe4fe77d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFixedMapBase</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a1e057ebf05aaeae68e4acd088b4e27c0</anchor>
      <arglist>(TFixedMapBase &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFixedMapBase</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a4f0c83712a0d4b34b937fbead9420304</anchor>
      <arglist>(Entries &amp;&amp;... entries)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>getEntry</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a857d4052a8cc3272468f93854b6fdc5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>getEntry</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a01a6aff83f58c4fed2c3743ee7c39365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>ad0efdc32055fc8ef3fecaa5293435ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a989af9c832f698dae98e685b415d5e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TFixedMapBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a97139a46c2fa1f6e1f7af11341c7a3fb</anchor>
      <arglist>(TFixedMapBase &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>hasKey</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a3914fdd0790348bb29452a00a3dc5796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Key</type>
      <name>entryKey</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a816c47292874943907d664c1b965f6b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>entryIndex</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>ac39611ad80682cd142a7a833608bcf16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>ENTRY_ARRAY_SIZE</name>
      <anchorfile>classph_1_1_t_fixed_map_base.html</anchorfile>
      <anchor>a579184ca120e856dd5afb9826c1a0da8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TFixedMapEntry</name>
    <filename>classph_1_1_t_fixed_map_entry.html</filename>
    <templarg>typename KeyType</templarg>
    <templarg>KeyType KEY_VAL</templarg>
    <templarg>typename ValueType</templarg>
    <member kind="typedef">
      <type>KeyType</type>
      <name>Key</name>
      <anchorfile>classph_1_1_t_fixed_map_entry.html</anchorfile>
      <anchor>a5e974169c2cf1415a5214ac69a3ea126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>Value</name>
      <anchorfile>classph_1_1_t_fixed_map_entry.html</anchorfile>
      <anchor>a5ce15520e1e30a6d0dd6a632f25e1f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_fixed_map_entry.html</anchorfile>
      <anchor>a3bb5004bac7336d58cfec338cb393440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_fixed_map_entry.html</anchorfile>
      <anchor>accaac3b8f556653d69a7c3a92b41a1b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Key</type>
      <name>KEY</name>
      <anchorfile>classph_1_1_t_fixed_map_entry.html</anchorfile>
      <anchor>ab727d314dd7ac0128255a30f12aa8118</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TFraction</name>
    <filename>classph_1_1math_1_1_t_fraction.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>TFraction</name>
      <anchorfile>classph_1_1math_1_1_t_fraction.html</anchorfile>
      <anchor>a80f7cfeb87da0bc803b1929c5c34fc2b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TFraction</name>
      <anchorfile>classph_1_1math_1_1_t_fraction.html</anchorfile>
      <anchor>a65714a1ea86bd5b0f9e01cf5c2e54f28</anchor>
      <arglist>(T nume, T deno)</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>toReal</name>
      <anchorfile>classph_1_1math_1_1_t_fraction.html</anchorfile>
      <anchor>ae65c47281b797553de05243885d0346a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classph_1_1math_1_1_t_fraction.html</anchorfile>
      <anchor>aa1e029fc8cdbf1ed9beab34b4e24d116</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TFrame</name>
    <filename>classph_1_1_t_frame.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ElementType</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a56c39a44998328e08e764385d023f620</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>math::TArithmeticArray&lt; U, N &gt;</type>
      <name>TPixelType</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ad7f00c8c96aaca854489a8f8a5da0769</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPixelType&lt; T &gt;</type>
      <name>PixelType</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a011971270bfecfc36862f4ef56955ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFrame</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a4d4576141cf399e01733a3ca87fcb4e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFrame</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a9efd7ecf8a7f37d67b24848aa30051d0</anchor>
      <arglist>(uint32 wPx, uint32 hPx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFrame</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a996faeaec799032f7ffe8febf3dbe456</anchor>
      <arglist>(const TFrame &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFrame</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a70c5616df8897e68e21c1b8cb699df3d</anchor>
      <arglist>(TFrame &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TFrame</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a16229c71a6397b6d35feceb2a9fe323e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a9813ad98ff90fada402f296a34bd8d5d</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a8f4ead1b805661158617635bbed65b9c</anchor>
      <arglist>(T value, const math::TAABB2D&lt; uint32 &gt; &amp;region)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipHorizontally</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>acb9210ffa01b56f7c86509bd655bf902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipVertically</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ab5a18df82e52d31fe16aeea27245f3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ae7c8a68b09bb8a9ef7848ac483d9e289</anchor>
      <arglist>(uint32 wPx, uint32 hPx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ab2689adf832f6b74b6014a5af0b307d9</anchor>
      <arglist>(const math::TVector2&lt; uint32 &gt; &amp;sizePx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a7723a1cf39cd33c2f32268de02e85faf</anchor>
      <arglist>(TFrame &amp;sampled, const math::TMathFunction2D&lt; float64 &gt; &amp;kernel, uint32 kernelRadiusPx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>aaf66a8a2b44e5336c87a2ff31ede16dc</anchor>
      <arglist>(const math::TVector2&lt; uint32 &gt; &amp;coordPx, const PixelType &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>accde2df016db45824d3ca9cd9da377ef</anchor>
      <arglist>(uint32 x, uint32 y, const PixelType &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type>PixelType</type>
      <name>getPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>aef4963452da3dcee7e9373f3a30983ed</anchor>
      <arglist>(const math::TVector2&lt; uint32 &gt; &amp;coordPx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a8f3ba5d4eba2934f776ac85910051a07</anchor>
      <arglist>(uint32 x, uint32 y, PixelType *out_pixel) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyPixelData</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a690cebd4231842145c24cb5f32e3003c</anchor>
      <arglist>(const math::TAABB2D&lt; uint32 &gt; &amp;region, TSpan&lt; T &gt; out_data) const</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; uint32 &gt;</type>
      <name>getSizePx</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ad2b5ff4ddaf573ca769aa979bcf5a104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ad516346130203c69d95fa4b5b73ac10c</anchor>
      <arglist>(const TFrame &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a7f9edfba8347930318787812d6e7a0ca</anchor>
      <arglist>(TFrame &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>widthPx</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ab5d17e08684e85a4b644c1d678f0bd0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>heightPx</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a159a201823ab57d7cb45a4fc8efcf4f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ae97b9356ec29f90e58fd70af856e4e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>numPixelComponents</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>aafaa069719243ac5dded6f8735a7b984</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TFrame&lt; T, N &gt;::template TPixelType&lt; U &gt;</type>
      <name>makeMonochromaticPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a1a9ab7ec94b55b66d96eebd79bb9b830</anchor>
      <arglist>(const U value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a413fc408c290db1fc546248b3fd98cae</anchor>
      <arglist>(PerPixelOperation op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>af432c003884319df09e882e1645b6f01</anchor>
      <arglist>(PerPixelOperation op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ac54c3412d743f97faaec088735b9057e</anchor>
      <arglist>(const math::TAABB2D&lt; uint32 &gt; &amp;region, PerPixelOperation op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>aa8f9c97f2eab90280c10a86755dcf2eb</anchor>
      <arglist>(const math::TAABB2D&lt; uint32 &gt; &amp;region, PerPixelOperation op) const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; T &gt;</type>
      <name>getPixelData</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a1e40cd607beb3bc9d3998ae3c7ec5f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; T &gt;</type>
      <name>getPixelData</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a1e00809bcafc5a1f232f238bb1f1cfe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TPixelType&lt; U &gt;</type>
      <name>makeMonochromaticPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a6ca527800362b03ad8744272194ee185</anchor>
      <arglist>(U value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a413fc408c290db1fc546248b3fd98cae</anchor>
      <arglist>(PerPixelOperation op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>af432c003884319df09e882e1645b6f01</anchor>
      <arglist>(PerPixelOperation op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>ac54c3412d743f97faaec088735b9057e</anchor>
      <arglist>(const math::TAABB2D&lt; uint32 &gt; &amp;region, PerPixelOperation op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachPixel</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>aa8f9c97f2eab90280c10a86755dcf2eb</anchor>
      <arglist>(const math::TAABB2D&lt; uint32 &gt; &amp;region, PerPixelOperation op) const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; T &gt;</type>
      <name>getPixelData</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a1e40cd607beb3bc9d3998ae3c7ec5f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; T &gt;</type>
      <name>getPixelData</name>
      <anchorfile>classph_1_1_t_frame.html</anchorfile>
      <anchor>a1e00809bcafc5a1f232f238bb1f1cfe1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TFrameBuffer2D</name>
    <filename>classph_1_1_t_frame_buffer2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::PixelBuffer2D</base>
    <member kind="function">
      <type></type>
      <name>TFrameBuffer2D</name>
      <anchorfile>classph_1_1_t_frame_buffer2_d.html</anchorfile>
      <anchor>aec846b806b8084c6cfc31b12785ae336</anchor>
      <arglist>(TFrame&lt; T, N &gt; frame)</arglist>
    </member>
    <member kind="function">
      <type>pixel_buffer::TPixel&lt; float64 &gt;</type>
      <name>fetchPixel</name>
      <anchorfile>classph_1_1_t_frame_buffer2_d.html</anchorfile>
      <anchor>a4baf4374b4ea86383c9cac0ca0a93784</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; xy, std::size_t mipLevel) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>estimateMemoryUsageBytes</name>
      <anchorfile>classph_1_1_t_frame_buffer2_d.html</anchorfile>
      <anchor>a9361d35a033cbb2a79ec09220cd25061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getFramePixel</name>
      <anchorfile>classph_1_1_t_frame_buffer2_d.html</anchorfile>
      <anchor>a610758b44a43658396d6f5ed50470f68</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; xy, std::size_t mipLevel) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::function_detail::TFunction</name>
    <filename>classph_1_1function__detail_1_1_t_function.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t MIN_SIZE_HINT</templarg>
  </compound>
  <compound kind="class">
    <name>ph::function_detail::TFunction&lt; R(Args...), MIN_SIZE_HINT &gt;</name>
    <filename>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename... Args</templarg>
    <templarg>std::size_t MIN_SIZE_HINT</templarg>
    <member kind="typedef">
      <type>std::bool_constant&lt; sizeof(std::decay_t&lt; Func &gt;)&lt;=BUFFER_SIZE &amp;&amp; alignof(std::decay_t&lt; Func &gt;)&lt;=BUFFER_ALIGNMENT &gt;</type>
      <name>TCanFitBuffer</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ad3ffb8b8e9d5313999c3902c6c298d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; TIsEmptyFunctor&lt; Func &gt;::value|| TIsNonEmptyFunctor&lt; Func &gt;::value &gt;</type>
      <name>TIsStorableFunctor</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>aac88655ce4dcef1c8b1d6e7c7a124afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CFreeFunctionForm&lt; Func, R, Args... &gt; &gt;</type>
      <name>TIsFreeFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>abd1fb57dabab6aecf1b825d021864c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CConstCallableMethodForm&lt; Func, Class, R, Args... &gt; &gt;</type>
      <name>TIsConstCallableMethod</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ab1f67cc8d9fa872596cae2bef37788a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CNonConstCallableMethodForm&lt; Func, Class, R, Args... &gt; &gt;</type>
      <name>TIsNonConstCallableMethod</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>aa39ce551201991358893a4c7d269eaed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CEmptyFunctorForm&lt; Func, R, Args... &gt; &gt;</type>
      <name>TIsEmptyFunctor</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ae1b62c51b49a6af5387072fce3b71498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CNonEmptyFunctorForm&lt; Func, R, Args... &gt; &amp;&amp;( TCanFitBuffer&lt; Func &gt;::value|| sizeof(std::decay_t&lt; Func &gt;)&lt;=BUFFER_SIZE)&gt;</type>
      <name>TIsNonEmptyFunctor</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a3857a35f1c0f6f94ce376ce719bd071d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a527aee62cc23f260da38fe18c8a2691c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>abee9a0fc91151eb2c2da5dc84ebc254b</anchor>
      <arglist>(std::nullptr_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a56299c30b51d0bd6813a3beccaddba8a</anchor>
      <arglist>(Func &amp;&amp;func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a4ebd7705215d4f695761c3c7da3007a9</anchor>
      <arglist>(const TFunction &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a7527a8053ba250b4537e6e2e1db0a7ee</anchor>
      <arglist>(TFunction &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a02d50f169eba766c736bd8e63a238986</anchor>
      <arglist>(const TFunction &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a7860b7f63d243ee8a8ec637f46b5e2b5</anchor>
      <arglist>(TFunction &amp;&amp;rhs) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ab9366f2a2a333d9ce037210087ae6064</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>operator()</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a75a2a82c24b7a69508e8f06ea83013f1</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a665c856b589513fc7cb26c4af3dfef3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a37e914989a34cabaecbc519713a370a8</anchor>
      <arglist>(const Class *const instancePtr)</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a74f435a291db93890a9a4f42b12989b1</anchor>
      <arglist>(Class *const instancePtr)</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ace0400325ac4cc99c8bd321f197a44aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a9023ba2599c60e71c88ad448051d07d4</anchor>
      <arglist>(const Func &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TFunction &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>aee405910e23b0784619e69dbd2580a4a</anchor>
      <arglist>(Func &amp;&amp;func)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a815e30f7f8a7ba050db1156baed78860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a2960b196e8354500a18988896b5e57b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a788aa80303cd9f8fa777fc05e0950a01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CFreeFunctionForm&lt; Func, R, Args... &gt; &gt;</type>
      <name>TIsFreeFunction</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>abd1fb57dabab6aecf1b825d021864c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CConstCallableMethodForm&lt; Func, Class, R, Args... &gt; &gt;</type>
      <name>TIsConstCallableMethod</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ab1f67cc8d9fa872596cae2bef37788a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CNonConstCallableMethodForm&lt; Func, Class, R, Args... &gt; &gt;</type>
      <name>TIsNonConstCallableMethod</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>aa39ce551201991358893a4c7d269eaed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CEmptyFunctorForm&lt; Func, R, Args... &gt; &gt;</type>
      <name>TIsEmptyFunctor</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>ae1b62c51b49a6af5387072fce3b71498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bool_constant&lt; CNonEmptyFunctorForm&lt; Func, R, Args... &gt; &amp;&amp;( TCanFitBuffer&lt; Func &gt;::value|| sizeof(std::decay_t&lt; Func &gt;)&lt;=BUFFER_SIZE)&gt;</type>
      <name>TIsNonEmptyFunctor</name>
      <anchorfile>classph_1_1function__detail_1_1_t_function_3_01_r_07_args_8_8_8_08_00_01_m_i_n___s_i_z_e___h_i_n_t_01_4.html</anchorfile>
      <anchor>a3857a35f1c0f6f94ce376ce719bd071d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TGaussian2D</name>
    <filename>classph_1_1math_1_1_t_gaussian2_d.html</filename>
    <templarg>typename Value</templarg>
    <base>ph::math::TMathFunction2D&lt; Value &gt;</base>
    <member kind="function">
      <type></type>
      <name>TGaussian2D</name>
      <anchorfile>classph_1_1math_1_1_t_gaussian2_d.html</anchorfile>
      <anchor>a90f54b369f59280ac58f14f541d575b0</anchor>
      <arglist>(Value sigmaX, Value sigmaY, Value amplitude)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_gaussian2_d.html</anchorfile>
      <anchor>a94d6d722bbaa8451f35d3470ba2a59e9</anchor>
      <arglist>(Value x, Value y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubmergeAmount</name>
      <anchorfile>classph_1_1math_1_1_t_gaussian2_d.html</anchorfile>
      <anchor>ae3258bc331920a441285cb0ac720e044</anchor>
      <arglist>(Value amt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::THeavisideStep2D</name>
    <filename>classph_1_1math_1_1_t_heaviside_step2_d.html</filename>
    <templarg>typename Value</templarg>
    <base>ph::math::TMathFunction2D&lt; Value &gt;</base>
    <member kind="function">
      <type></type>
      <name>THeavisideStep2D</name>
      <anchorfile>classph_1_1math_1_1_t_heaviside_step2_d.html</anchorfile>
      <anchor>afff55b1df77587ef76c474ac4c5e5098</anchor>
      <arglist>(TVector2&lt; Value &gt; normal)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_heaviside_step2_d.html</anchorfile>
      <anchor>a86a36694b540c36a36ffd0e38e3b5383</anchor>
      <arglist>(Value x, Value y) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>makeHorizontal</name>
      <anchorfile>classph_1_1math_1_1_t_heaviside_step2_d.html</anchorfile>
      <anchor>a9ca0baebc8c5206a32745de02e742701</anchor>
      <arglist>() -&gt; THeavisideStep2D</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>makeVertical</name>
      <anchorfile>classph_1_1math_1_1_t_heaviside_step2_d.html</anchorfile>
      <anchor>a429408b9aa4dcd6325ed388d051ab097</anchor>
      <arglist>() -&gt; THeavisideStep2D</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::THemisphere</name>
    <filename>classph_1_1math_1_1_t_hemisphere.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>THemisphere</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>afe07e247cd2c41466f5eaa728ba4ed8f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>THemisphere</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>adc155d873b8aa4860631deaca568185f</anchor>
      <arglist>(T radius)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getArea</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>ad25b9d9be8ddbf16c644667f883fbc1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceArchimedes</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>af1c7c19aedf818db1f4a73b9301c74e5</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceArchimedes</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>abbc06f74dc0643744c50b6f72ee8b4cd</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceCosThetaWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>a1892d2e054182ed14f5bd698150959c7</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceCosThetaWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>a9e1359f13b0a934122a3396c3acf1db0</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceCosLobeWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>a059da0f485fb5350768e26d117717a91</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T exponent) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceCosLobeWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>a100d338ccaa70cf3ddf07fa573cb67f7</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T exponent, T *out_pdfA) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static THemisphere</type>
      <name>makeUnit</name>
      <anchorfile>classph_1_1math_1_1_t_hemisphere.html</anchorfile>
      <anchor>aaeda349661b66a065a9ad7194a64c10b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ThinDielectricFilm</name>
    <filename>classph_1_1_thin_dielectric_film.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>ThinDielectricFilm</name>
      <anchorfile>classph_1_1_thin_dielectric_film.html</anchorfile>
      <anchor>aeedebcf42450cb89d5408648c7a32ccc</anchor>
      <arglist>(const std::shared_ptr&lt; DielectricFresnel &gt; &amp;fresnel, const std::vector&lt; math::SampledSpectrum &gt; &amp;reflectanceTable, const std::vector&lt; math::SampledSpectrum &gt; &amp;transmittanceTable)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_thin_dielectric_film.html</anchorfile>
      <anchor>af84e8961d2917e753792e5fc5ddcb36d</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ThinFilm</name>
    <filename>classph_1_1_thin_film.html</filename>
    <base>ph::SurfaceMaterial</base>
    <member kind="function">
      <type></type>
      <name>ThinFilm</name>
      <anchorfile>classph_1_1_thin_film.html</anchorfile>
      <anchor>a3d363383da99831d5804895478a60701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSurface</name>
      <anchorfile>classph_1_1_thin_film.html</anchorfile>
      <anchor>a343f1e26bdd58a9c47b8e2bc6c2dfba2</anchor>
      <arglist>(const CookingContext &amp;ctx, SurfaceBehavior &amp;behavior) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ThinLensCamera</name>
    <filename>classph_1_1_thin_lens_camera.html</filename>
    <base>ph::RectangularSensorReceiver</base>
    <member kind="function">
      <type></type>
      <name>ThinLensCamera</name>
      <anchorfile>classph_1_1_thin_lens_camera.html</anchorfile>
      <anchor>a092bd924f28c8e3df03d4ec076da8bd3</anchor>
      <arglist>(float64 lensRadius, float64 focalDistance, const math::Vector2D &amp;sensorSize, const math::Transform *rasterToSensor, const math::RigidTransform *cameraToWorld)</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>receiveRay</name>
      <anchorfile>classph_1_1_thin_lens_camera.html</anchorfile>
      <anchor>a747909bac36e1cfb89ff0a5f619d058d</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, Ray *out_ray) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalEmittedImportanceAndPdfW</name>
      <anchorfile>classph_1_1_thin_lens_camera.html</anchorfile>
      <anchor>a162065b7a8e6711470c7c831c94e6572</anchor>
      <arglist>(const math::Vector3R &amp;targetPos, math::Vector2R *const out_filmCoord, math::Vector3R *const out_importance, real *out_filmArea, real *const out_pdfW) const override</arglist>
    </member>
    <member kind="function">
      <type>const math::RigidTransform &amp;</type>
      <name>getCameraToWorld</name>
      <anchorfile>classph_1_1_thin_lens_camera.html</anchorfile>
      <anchor>aac52601e8673c7c54a387fcd437a4b20</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TileScheduler</name>
    <filename>classph_1_1_tile_scheduler.html</filename>
    <base>ph::WorkScheduler</base>
    <member kind="enumeration">
      <type></type>
      <name>EOrigin</name>
      <anchorfile>classph_1_1_tile_scheduler.html</anchorfile>
      <anchor>abc3dbcfa9f572e40ea3b6ba24adb2f24</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_tile_scheduler.html" anchor="abc3dbcfa9f572e40ea3b6ba24adb2f24a56052100a4c3a420907d2fc77f1227a8">LOWER_LEFT</enumvalue>
      <enumvalue file="classph_1_1_tile_scheduler.html" anchor="abc3dbcfa9f572e40ea3b6ba24adb2f24a9434fe4878cd007b366fa72d3694f1b4">LOWER_RIGHT</enumvalue>
      <enumvalue file="classph_1_1_tile_scheduler.html" anchor="abc3dbcfa9f572e40ea3b6ba24adb2f24ac122adb2ef4ea606a12c5af1b8ca5319">UPPER_LEFT</enumvalue>
      <enumvalue file="classph_1_1_tile_scheduler.html" anchor="abc3dbcfa9f572e40ea3b6ba24adb2f24a24cd25dbc37d130d0a94554e560ead06">UPPER_RIGHT</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>TileScheduler</name>
      <anchorfile>classph_1_1_tile_scheduler.html</anchorfile>
      <anchor>a192af8f9b98fc0a1d3a7a8408967e610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TileScheduler</name>
      <anchorfile>classph_1_1_tile_scheduler.html</anchorfile>
      <anchor>aa13a643f48bfc61a64d3e06f9e8710a2</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;tileSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TileScheduler</name>
      <anchorfile>classph_1_1_tile_scheduler.html</anchorfile>
      <anchor>abc474d05d281698b94bb868c633661ca</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit, const math::Vector2S &amp;tileSize, EOrigin origin, math::constant::AxisIndexType prioriAxis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Time</name>
    <filename>classph_1_1_time.html</filename>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>ab4a2e772af5bb1c4194ff6c92ac70f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>a89a250188bc9ad2b85a85dca3d20c79b</anchor>
      <arglist>(real absoluteS, real relativeS, real relativeT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>a54b3551978b9b906661a6b043d226218</anchor>
      <arglist>(const Time &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>acc75c117090ff3881c613412f1b526af</anchor>
      <arglist>(const Time &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>absoluteS</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>ad64b2d79c936ef9059d1b17abc9966a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>relativeS</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>a5dca47caaf9364162b5ecc5f53d16bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>relativeT</name>
      <anchorfile>classph_1_1_time.html</anchorfile>
      <anchor>afc001cd11ba3a4c088bc17675b45e925</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Timer</name>
    <filename>classph_1_1_timer.html</filename>
    <member kind="typedef">
      <type>std::chrono::steady_clock</type>
      <name>Clock</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>ae2bb5daae1dceed1a76a7a2463dad604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clock::duration</type>
      <name>DefaultTimeUnit</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a2fe3706faa7cc4d82f249f9c7bc96635</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a2e179383729f466d58d3c63534e8ebe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>start</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>aced04c0fd3c262cd90260c60116f6db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>accumulatedStart</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a5811024f54e638a9ec18e9eba32aacd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>stop</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a806b8e6c88e04cb4b6551838a54f6371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DefaultTimeUnit</type>
      <name>markLap</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>ad84461cff50c286d4a44ef65d3a1e194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DefaultTimeUnit</type>
      <name>peekLap</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>ab341685b402bd3d10dd443fe4951f371</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DefaultTimeUnit</type>
      <name>getDelta</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a99b4f650346c6898aa6c756fdd0f7d8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapS</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a9d0fc873191692d7ee86537ae42b3a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapMs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>aa79cda7db7c5dee3fa5b68aee860db3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapUs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a0e1c3502192c49db02b7b6aa46b876f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapNs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>aa68095ee8a4c0dd08e5305e99ca8b991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaS</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>ac13d542715ae428881410094cd077d63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaMs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a3e613d6459224760593463ec04ab44f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaUs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>afe4300e855a501122ab10e95238e3195</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaNs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a122b27ecc98ea1742fc0085db4e35d89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapS</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a9d0fc873191692d7ee86537ae42b3a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapMs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>aa79cda7db7c5dee3fa5b68aee860db3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapUs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a0e1c3502192c49db02b7b6aa46b876f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>markLapNs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>aa68095ee8a4c0dd08e5305e99ca8b991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaS</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>ac13d542715ae428881410094cd077d63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaMs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a3e613d6459224760593463ec04ab44f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaUs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>afe4300e855a501122ab10e95238e3195</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>getDeltaNs</name>
      <anchorfile>classph_1_1_timer.html</anchorfile>
      <anchor>a122b27ecc98ea1742fc0085db4e35d89</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::math::TIndexedItemEndpoint</name>
    <filename>structph_1_1math_1_1_t_indexed_item_endpoint.html</filename>
    <templarg>typename Index</templarg>
    <member kind="variable">
      <type>real</type>
      <name>position</name>
      <anchorfile>structph_1_1math_1_1_t_indexed_item_endpoint.html</anchorfile>
      <anchor>a80779100a77939b0c72cb073044d7b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>index</name>
      <anchorfile>structph_1_1math_1_1_t_indexed_item_endpoint.html</anchorfile>
      <anchor>a84c188721cc4845e6277afba71b4e0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EEndpoint</type>
      <name>type</name>
      <anchorfile>structph_1_1math_1_1_t_indexed_item_endpoint.html</anchorfile>
      <anchor>a8c08852cff0861afd8d93b8d96b41a92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TIndexedKdtree</name>
    <filename>classph_1_1math_1_1_t_indexed_kdtree.html</filename>
    <templarg>typename IndexToItem</templarg>
    <templarg>typename ItemToAABB</templarg>
    <templarg>typename Index</templarg>
    <member kind="typedef">
      <type>decltype(std::declval&lt; IndexToItem &gt;()(std::declval&lt; Index &gt;()))</type>
      <name>Item</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>af1ea45a3e2cae5763f5ecb18acd91dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TIndexedKdtree</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>a89f9d63fd726b2e57181d50f79641773</anchor>
      <arglist>(std::size_t numItems, IndexToItem indexToItem, ItemToAABB itemToAABB, IndexedKdtreeParams params=IndexedKdtreeParams())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nearestTraversal</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>a6f57082667af476643683ff2100e66b8</anchor>
      <arglist>(const TLineSegment&lt; real &gt; &amp;segment, TesterFunc &amp;&amp;intersectionTester) const</arglist>
    </member>
    <member kind="function">
      <type>AABB3D</type>
      <name>getAABB</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>a4f376736b43f803f876ac9d867e752e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>a1acc9cd96f2104bd882cc7728e42c3ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>getItem</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>a0c575af1cc0d86cc29fd5c3a3c14b2c2</anchor>
      <arglist>(std::size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nearestTraversal</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree.html</anchorfile>
      <anchor>ac2eaab14229d9164d7a15a0b09cd269a</anchor>
      <arglist>(const TLineSegment&lt; real &gt; &amp;segment, TesterFunc &amp;&amp;intersectionTester) const -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TIndexedKdtreeIntersector</name>
    <filename>classph_1_1_t_indexed_kdtree_intersector.html</filename>
    <templarg>typename Index</templarg>
    <base>ph::Intersector</base>
    <member kind="function">
      <type></type>
      <name>TIndexedKdtreeIntersector</name>
      <anchorfile>classph_1_1_t_indexed_kdtree_intersector.html</anchorfile>
      <anchor>a0471cacb265d08e549e6675b8e6b9274</anchor>
      <arglist>(math::IndexedKdtreeParams params=math::IndexedKdtreeParams())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1_t_indexed_kdtree_intersector.html</anchorfile>
      <anchor>a73d99f5870c1d3a299761bef2e2e4056</anchor>
      <arglist>(TSpanView&lt; const Intersectable * &gt; intersectables) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_t_indexed_kdtree_intersector.html</anchorfile>
      <anchor>a7e661abc7fe76c05118eedf5399b0a75</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_t_indexed_kdtree_intersector.html</anchorfile>
      <anchor>a91d5e4e6ac26d55d010eb904d483481a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TIndexedKdtreeNode</name>
    <filename>classph_1_1math_1_1_t_indexed_kdtree_node.html</filename>
    <templarg>typename Index</templarg>
    <templarg>bool USE_SINGLE_ITEM_OPT</templarg>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a1c23ae45d09daab8d726c9faaffdc60c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>positiveChildIndex</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a18ea605290d8f72b79ea11f819ee03c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numItems</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a81e7c59b6e847996908707cd6d8d03a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>splitPos</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a9953f87c4a2775168a928b6d72c0cdd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>splitAxisIndex</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a751eb1b8900850b1ea6f4b7af97270ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a16d603e46b03148759c5c160222a7902</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>singleItemDirectIndex</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a8b2d0afc453237b40cf8575c963336f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>indexBufferOffset</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a5bc617d46dfd30f2db79662506aa0b8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TIndexedKdtreeNode</type>
      <name>makeInner</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a513252ecccd5c64951324c1b903c328d</anchor>
      <arglist>(real splitPos, math::constant::AxisIndexType splitAxisIndex, std::size_t positiveChildIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TIndexedKdtreeNode</type>
      <name>makeLeaf</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a9b0c5244b76fc2335d8d680e618abb6c</anchor>
      <arglist>(Index index, std::size_t numItems)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TIndexedKdtreeNode</type>
      <name>makeLeaf</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a84df8869e7a95eb316f208fa28d33d32</anchor>
      <arglist>(TSpanView&lt; Index &gt; itemIndices, std::vector&lt; Index &gt; &amp;indexBuffer)</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>u0_splitPos</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>ae41e6e4af858606df3d5b08fb0335957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>u0_index</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>a469cb8b792cb4fb1a5e8d47b264df886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>u1_flags</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>acc17332ce5825165f3720007c8f5acc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>u1_numItems</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>ae1fe3f240606e24811633f5fb2c3a8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>u1_positiveChildIndex</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_kdtree_node.html</anchorfile>
      <anchor>ad2349dd670554434eb9fc57cbd1947d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TIndexedPointKdtree</name>
    <filename>classph_1_1math_1_1_t_indexed_point_kdtree.html</filename>
    <templarg>typename Item</templarg>
    <templarg>typename Index</templarg>
    <templarg>typename PointCalculator</templarg>
    <templarg>CIndexedPointKdtreeItemStorage&lt; Item &gt; ItemStorage</templarg>
    <class kind="struct">ph::math::TIndexedPointKdtree::BuildCache</class>
    <member kind="function">
      <type></type>
      <name>TIndexedPointKdtree</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>a39172a3e4409d3fa8a5d07dd00bc7769</anchor>
      <arglist>(const std::size_t maxNodeItems, const PointCalculator &amp;pointCalculator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>aac4a7a12e85819b95c001619a9b9c8c5</anchor>
      <arglist>(ItemStorage items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>a576b57090a15285c069d4ef7e894b3c4</anchor>
      <arglist>(ItemStorage items, BuildCache &amp;buildCache)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findWithinRange</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>a41e6c17d09ed35c19f67ea6c95945608</anchor>
      <arglist>(const math::Vector3R &amp;location, const real searchRadius, std::vector&lt; Item &gt; &amp;results) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findNearest</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>a9dc8273ea975dc31c69d16c1f52df536</anchor>
      <arglist>(const math::Vector3R &amp;location, const std::size_t maxItems, std::vector&lt; Item &gt; &amp;results) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rangeTraversal</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>a7ca842bdeb4e15322673024b8f17a3e3</anchor>
      <arglist>(const math::Vector3R &amp;location, const real squaredSearchRadius, ItemHandler itemHandler) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestTraversal</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>aedee1c3e0d192cb2a793ddbf1c587713</anchor>
      <arglist>(const math::Vector3R &amp;location, const real initialSquaredSearchRadius, ItemHandler itemHandler) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numItems</name>
      <anchorfile>classph_1_1math_1_1_t_indexed_point_kdtree.html</anchorfile>
      <anchor>a6dbfe1039ac9d1bfd086ea29c38cb2b6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TIndexedPolygonBuffer</name>
    <filename>classph_1_1_t_indexed_polygon_buffer.html</filename>
    <templarg>std::size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>TIndexedPolygonBuffer</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>aa163a85cc79d0103bb03be38b07cb07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; math::Vector3R, N &gt;</type>
      <name>getPositions</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>a5e0b862a4bb38744470d76426acf0fe7</anchor>
      <arglist>(std::size_t faceIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; math::Vector3R, N &gt;</type>
      <name>getTexCoords</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>a19bf10d0d4ede7a7b618fbf171cb5681</anchor>
      <arglist>(std::size_t faceIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; math::Vector3R, N &gt;</type>
      <name>getNormals</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>afe3b9c0280ee653f68004cabfc3fbf39</anchor>
      <arglist>(std::size_t faceIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; math::Vector3R, N &gt;</type>
      <name>getFaceAttribute</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>ab3dfa712906f3b6d723623244ba3fd38</anchor>
      <arglist>(EVertexAttribute attribute, std::size_t faceIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFaces</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>acae24983998acdd99956431fc9eb210c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoord</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>a64574c001b51fc432b18bfab0c8a0695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNormal</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>aacabc7598d290f51c2cf3c4be69a314a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFaceAttribute</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>ae8e723dd8fc71da5feaa1eef80d42a37</anchor>
      <arglist>(EVertexAttribute attribute) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>memoryUsage</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>a848e259575541dacf93267470e8846e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>averagePerPolygonMemoryUsage</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>ab59e4339b10a6ee474c91bf287b83eb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexedVertexBuffer &amp;</type>
      <name>getVertexBuffer</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>a59c04ef146e810e5afc7aa1026e7cf92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndexedVertexBuffer &amp;</type>
      <name>getVertexBuffer</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>ad0600e8c5030a9bd2d59cf1a01443b60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexedUIntBuffer &amp;</type>
      <name>getIndexBuffer</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>a4ec66adf93380158a5babc18de168f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndexedUIntBuffer &amp;</type>
      <name>getIndexBuffer</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>aca0d2b58fc7f1444a3ca0e73314c57b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>numPolygonVertices</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>ae776eca6866daaf764d45bcb32f7ac6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>isTriangular</name>
      <anchorfile>classph_1_1_t_indexed_polygon_buffer.html</anchorfile>
      <anchor>ae8af4806f0e2023799970aad0097ba8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TIndexedVector3</name>
    <filename>classph_1_1math_1_1_t_indexed_vector3.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>ph::lta::TIndirectLightEstimator</name>
    <filename>classph_1_1lta_1_1_t_indirect_light_estimator.html</filename>
    <templarg>ESidednessPolicy POLICY</templarg>
    <member kind="function">
      <type></type>
      <name>TIndirectLightEstimator</name>
      <anchorfile>classph_1_1lta_1_1_t_indirect_light_estimator.html</anchorfile>
      <anchor>a844fe25c1d0a654a63de0f1bb5c60887</anchor>
      <arglist>(const Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bsdfSamplePathWithNee</name>
      <anchorfile>classph_1_1lta_1_1_t_indirect_light_estimator.html</anchorfile>
      <anchor>ab44f4355ef6b8bb149bb0ffa0ea754bb</anchor>
      <arglist>(const SurfaceHit &amp;X, SampleFlow &amp;sampleFlow, std::size_t pathLength, const RussianRoulette &amp;rr, math::Spectrum *out_Lo=nullptr, std::size_t rrBeginPathLength=0, const math::Spectrum &amp;initialPathWeight=math::Spectrum(1)) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bsdfSamplePathWithNee</name>
      <anchorfile>classph_1_1lta_1_1_t_indirect_light_estimator.html</anchorfile>
      <anchor>a98934261140aa3dbdf3d3e8288a33103</anchor>
      <arglist>(const SurfaceHit &amp;X, SampleFlow &amp;sampleFlow, std::size_t minPathLength, std::size_t maxPathLength, const RussianRoulette &amp;rr, math::Spectrum *out_Lo=nullptr, std::size_t rrBeginPathLength=0, const math::Spectrum &amp;initialPathWeight=math::Spectrum(1)) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TIRayEstimator</name>
    <filename>classph_1_1_t_i_ray_estimator.html</filename>
    <templarg>typename EstimationType</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TIRayEstimator</name>
      <anchorfile>classph_1_1_t_i_ray_estimator.html</anchorfile>
      <anchor>a5b8d92c9cd3db9cdac13b1f63e27f475</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classph_1_1_t_i_ray_estimator.html</anchorfile>
      <anchor>a7389da269abe4ba7b99553c23f98c65f</anchor>
      <arglist>(const Integrand &amp;integrand)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>estimate</name>
      <anchorfile>classph_1_1_t_i_ray_estimator.html</anchorfile>
      <anchor>a0af318621b949a1c0704761c08097c99</anchor>
      <arglist>(const Ray &amp;ray, const Integrand &amp;integrand, SampleFlow &amp;sampleFlow, TEstimationArray&lt; EstimationType &gt; &amp;out_estimation) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mapAttributeToEstimation</name>
      <anchorfile>classph_1_1_t_i_ray_estimator.html</anchorfile>
      <anchor>a77707afab84b2b836400625c86bfcc85</anchor>
      <arglist>(std::size_t attributeId, std::size_t estimationIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_t_i_ray_estimator.html</anchorfile>
      <anchor>ab45648c6dcc4ea8a8ea4c3b0ea84d601</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TIteratorProxy</name>
    <filename>classph_1_1_t_iterator_proxy.html</filename>
    <templarg>typename ContainerType</templarg>
    <member kind="function">
      <type></type>
      <name>TIteratorProxy</name>
      <anchorfile>classph_1_1_t_iterator_proxy.html</anchorfile>
      <anchor>aa4e98a8100c3cbd4fce4d607eb7fc6c2</anchor>
      <arglist>(ContainerType &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_iterator_proxy.html</anchorfile>
      <anchor>a0bbfd4ec2a687d57fd39f47f7e316087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ContainerType::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_iterator_proxy.html</anchorfile>
      <anchor>adcfe980078d4ad9f21a2d84dbc59fc50</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TLinearGradient2D</name>
    <filename>classph_1_1math_1_1_t_linear_gradient2_d.html</filename>
    <templarg>typename Value</templarg>
    <base>ph::math::TMathFunction2D&lt; Value &gt;</base>
    <member kind="function">
      <type></type>
      <name>TLinearGradient2D</name>
      <anchorfile>classph_1_1math_1_1_t_linear_gradient2_d.html</anchorfile>
      <anchor>ac59c61295b2d24e746836537a36e2b39</anchor>
      <arglist>(TVector2&lt; Value &gt; direction, Value slope)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_linear_gradient2_d.html</anchorfile>
      <anchor>a0d1ea9d3ea79303be8336e0efc01fea6</anchor>
      <arglist>(Value x, Value y) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>makeHorizontal</name>
      <anchorfile>classph_1_1math_1_1_t_linear_gradient2_d.html</anchorfile>
      <anchor>a3684798b550c669977f7c7630df91bd5</anchor>
      <arglist>(Value slope) -&gt; TLinearGradient2D</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>makeVertical</name>
      <anchorfile>classph_1_1math_1_1_t_linear_gradient2_d.html</anchorfile>
      <anchor>a4542b8ac84398c9509c4949cb3841492</anchor>
      <arglist>(Value slope) -&gt; TLinearGradient2D</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TLinearGradientTexture</name>
    <filename>classph_1_1_t_linear_gradient_texture.html</filename>
    <templarg>typename OutputType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="function">
      <type></type>
      <name>TLinearGradientTexture</name>
      <anchorfile>classph_1_1_t_linear_gradient_texture.html</anchorfile>
      <anchor>aef573078878e60db096db34a8a675502</anchor>
      <arglist>(real beginU, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;beginTexture, real endU, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;endTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TLinearGradientTexture</name>
      <anchorfile>classph_1_1_t_linear_gradient_texture.html</anchorfile>
      <anchor>a1b1f57344949e0eedd10db682d4bc5d0</anchor>
      <arglist>(const math::Vector2R &amp;beginUV, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;beginTexture, const math::Vector2R &amp;endUV, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;endTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TLinearGradientTexture</name>
      <anchorfile>classph_1_1_t_linear_gradient_texture.html</anchorfile>
      <anchor>a830a8d498c90209171485133fce8ecaa</anchor>
      <arglist>(const math::Vector3R &amp;beginUVW, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;beginTexture, const math::Vector3R &amp;endUVW, const std::shared_ptr&lt; TTexture&lt; OutputType &gt; &gt; &amp;endTexture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_linear_gradient_texture.html</anchorfile>
      <anchor>a8d465e253ae6657f145e301b7e6323d4</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TLineSegment</name>
    <filename>classph_1_1math_1_1_t_line_segment.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TLineSegment</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a92d9343eae6f0985d482662a25b902e0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TLineSegment</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a5930a2e8d953ace777887a013f4d1d5b</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;origin, const TVector3&lt; T &gt; &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TLineSegment</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a57474330aa822982543e7e84395615a5</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;origin, const TVector3&lt; T &gt; &amp;dir, T minT, T maxT)</arglist>
    </member>
    <member kind="function">
      <type>TLineSegment &amp;</type>
      <name>flip</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>ac280613f6cf399ac92e263946dcd1b3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinT</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a259eb54a360327a01d002f9ccfb0e940</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxT</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a4f1d7d83b56d27e3f6edad58baa55e00</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>abf8c9a5e8700754aeb5012e3b291cf4a</anchor>
      <arglist>(T minT, T maxT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>ad3ee5615e6e847c0a87dda389ef04a7b</anchor>
      <arglist>(const std::pair&lt; T, T &gt; &amp;minMaxT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a78ec98027d2a0a52fae0bbdbfff36a4b</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDir</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a83d9e7807d94d76ae434e96b93b38a91</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>const TVector3&lt; T &gt; &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a7eb6381eadee282d2f2afa035ddaba18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TVector3&lt; T &gt; &amp;</type>
      <name>getDir</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a82d600951a74de4eec8a63baabe282e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getMinT</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a588ff84da8c9cf249fd988d174c9c186</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getMaxT</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>aa2611afa9715bba822ed0f4f5216b6ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; T, T &gt;</type>
      <name>getRange</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>abecb952b3a8e512de9015612e41a2db7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getTail</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>aafd3d7fbfc22bd131f0b4656f5dfae69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getHead</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a4bfd982487825dce403e61385af5a71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getPoint</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a911de7baded48e928c4a1bdcd2538cd8</anchor>
      <arglist>(T t) const</arglist>
    </member>
    <member kind="function">
      <type>const TVector3&lt; T &gt; &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a7eb6381eadee282d2f2afa035ddaba18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TVector3&lt; T &gt; &amp;</type>
      <name>getDir</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a82d600951a74de4eec8a63baabe282e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getMinT</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a588ff84da8c9cf249fd988d174c9c186</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getMaxT</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>aa2611afa9715bba822ed0f4f5216b6ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; T, T &gt;</type>
      <name>getRange</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>abecb952b3a8e512de9015612e41a2db7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getTail</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>aafd3d7fbfc22bd131f0b4656f5dfae69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getHead</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a4bfd982487825dce403e61385af5a71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getPoint</name>
      <anchorfile>classph_1_1math_1_1_t_line_segment.html</anchorfile>
      <anchor>a911de7baded48e928c4a1bdcd2538cd8</anchor>
      <arglist>(T t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMathFunction2D</name>
    <filename>classph_1_1math_1_1_t_math_function2_d.html</filename>
    <templarg>typename Value</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TMathFunction2D</name>
      <anchorfile>classph_1_1math_1_1_t_math_function2_d.html</anchorfile>
      <anchor>a500df07f982f7cbcbddba45a180bdb03</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_math_function2_d.html</anchorfile>
      <anchor>a94c24929715a60f68c3cc6f729e53a3e</anchor>
      <arglist>(Value x, Value y) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMatrix2</name>
    <filename>classph_1_1math_1_1_t_matrix2.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>std::array&lt; std::array&lt; T, 2 &gt;, 2 &gt;</type>
      <name>Elements</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a7f268db27d18cb17a9866f33bcf3e902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix2</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>ab99a77b3f9c34a57546c8725516c0690</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix2</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>abdb15bbded63940b506ba1629b0e33fe</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix2</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a79063d14c28bc60cb9e590fbd82b5d5a</anchor>
      <arglist>(T m00, T m01, T m10, T m11)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix2</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>abefca4e2f349c4882d963325275184c9</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;m00m01, const TVector2&lt; T &gt; &amp;m10m11)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix2</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a5c09b4d7a6e3cfdc628dbab632d3e230</anchor>
      <arglist>(const TMatrix2 &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix2</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a223e42a03be7f401bbb52f0f717a3f93</anchor>
      <arglist>(const TMatrix2&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix2 &amp;</type>
      <name>initIdentity</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a8b3796f4f7c159d9963ee6969167e036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TMatrix2</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a2f2bd39640a8c8248330b7f39093679a</anchor>
      <arglist>(const TMatrix2 &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TMatrix2</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>ae08ca45cbea73e600fa757d566eb4743</anchor>
      <arglist>(T value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a4116fa9284d815b1bf7c7a4473ae6767</anchor>
      <arglist>(const TMatrix2 &amp;rhs, TMatrix2 *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TMatrix2 &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a6a9984f83e9f696f7a6c15e4c37af309</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix2</type>
      <name>inverse</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>ae836ad5fa933310655105ae026fb3bd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a7a127f232bc7ae6b230873b941b7bad5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>af045e437800e5761ade0ee9129738d07</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;b, std::array&lt; T, 2 &gt; *out_x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a73de8e9d38218b7fac97852ea3479f4e</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;b, TVector2&lt; T &gt; *out_x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a21f1deb33a82695ef3f3a0b2688328a0</anchor>
      <arglist>(const std::array&lt; std::array&lt; T, 2 &gt;, N &gt; &amp;bs, std::array&lt; std::array&lt; T, 2 &gt;, N &gt; *out_xs) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a648d805f57865f3faca4c09198e189c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TMatrix2</type>
      <name>makeIdentity</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a66163e6eea9f3cce3aad14f752db991e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Elements</type>
      <name>m</name>
      <anchorfile>classph_1_1math_1_1_t_matrix2.html</anchorfile>
      <anchor>a6a2c1953190587a0aebb81ef8b7abab5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMatrix3</name>
    <filename>classph_1_1math_1_1_t_matrix3.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TMatrixNBase&lt; TMatrix3&lt; T &gt;, T, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a691517583a4a632c87ab9900d59ccd66</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a90648849eca7ecb0be091b775500ddf6</anchor>
      <arglist>(const TMatrix3 &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a93696ea63fa1fd0bf76c76aa89eec6b9</anchor>
      <arglist>(TMatrix3 &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a296b21e0b248c7491bfb852837333aef</anchor>
      <arglist>(const TMatrix3 &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a7323d31858b7e0af179ac02a77280e89</anchor>
      <arglist>(TMatrix3 &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TMatrix3</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a3b5286f035570fd01e828c7506dde1fc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>af77d76609a7a3e5e301f1fcb9317366c</anchor>
      <arglist>(const TMatrix3&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>aecebda1323dcd5f3381f2a610f61675c</anchor>
      <arglist>(T m00, T m01, T m02, T m10, T m11, T m12, T m20, T m21, T m22)</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>aa0db23d8838f4ebe543afbad98b64746</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;rhsColVector) const</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>inverse</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>ad5c37cec8a266c22bf227b664d270852</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a7574536ff3219acaf1ea53234492d07a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classph_1_1math_1_1_t_matrix3.html</anchorfile>
      <anchor>a5466c7f87adda8aa02112dbb9ee821b4</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;rhsColVector) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMatrix4</name>
    <filename>classph_1_1math_1_1_t_matrix4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>std::array&lt; std::array&lt; T, 4 &gt;, 4 &gt;</type>
      <name>Elements</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a5059430641d81026521e2a7c4096e10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix4</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a0db902864593e05a2c19c447e84510d9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix4</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a9aea4e9372fea6fe77af28e9f0d14905</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix4</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>ac6f6ea5c083a4ad7228efb4c87af3899</anchor>
      <arglist>(const Elements &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix4</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a139429144669404a2573769e0d931924</anchor>
      <arglist>(const TMatrix4 &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix4</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>af64e9ff92b722035ab435a06470da402</anchor>
      <arglist>(const TMatrix4&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initIdentity</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>ad3a99eaefacb0c1e73c26a9907ac103e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initTranslation</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>aadbd7224974579ec40eccfdf2e80db31</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initTranslation</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>af4faec11d7e5e008fabd200c58379d5f</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initRotation</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a2f8e0a99b6db2c619f5cc1ef96c3f0d0</anchor>
      <arglist>(const TQuaternion&lt; T &gt; &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initRotation</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a8bde2b3463ea28a06a1a68e2b049bfd2</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;orthBasisX, const TVector3&lt; T &gt; &amp;orthBasisY, const TVector3&lt; T &gt; &amp;orthBasisZ)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initScale</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a6e2b41156f91abc5a77d3f6e6f126792</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initScale</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a670d2f975f8bb60de916071145a6ec4e</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>initPerspectiveProjection</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>acb0294b5ed77dc1146bd15e5e80b8a9b</anchor>
      <arglist>(T fov, T aspectRatio, T zNear, T zFar)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a2d33be52a53bf960deef1ef641b5c891</anchor>
      <arglist>(const TMatrix4 &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>aed5b34bfd3d821697fd343be3048ec02</anchor>
      <arglist>(const TMatrix4 &amp;rhs, TMatrix4 *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>ab2fc054577b255c41e31a92c58bb1bcb</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;rhsXYZ, T rhsW, TVector3&lt; T &gt; *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a3da8f8fb724ce831feeb89d9ab602642</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4 &amp;</type>
      <name>inverse</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>ae43e4631b5c099c7ecc4c3b1a2506d77</anchor>
      <arglist>(TMatrix4 *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TMatrix4</type>
      <name>transpose</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>afb628149bdd849f32c24993ccaf59f51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a9ec4e15e7716d90d01493f3260126fe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a756bbdab9efab43edd5c9f7f488f1b11</anchor>
      <arglist>(const TMatrix4 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a49c2a084f0a72f37a4b451e2379b49c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TMatrix4</type>
      <name>makeIdentity</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>a0388c3328086d0889dcf78adcb978030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Elements</type>
      <name>m</name>
      <anchorfile>classph_1_1math_1_1_t_matrix4.html</anchorfile>
      <anchor>abfeaa59d8cd3edb85888c708c3bdfe2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMatrixMxNBase</name>
    <filename>classph_1_1math_1_1_t_matrix_mx_n_base.html</filename>
    <templarg>typename Derived</templarg>
    <templarg>typename T</templarg>
    <templarg>std::size_t M</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>TRawMatrix&lt; T, M, N &gt;</type>
      <name>Elements</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>af25a4f09b6ae51caa33e18c445fdbba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrixMxNBase</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>ad1335391332d9f998b4206b5e2b88bb3</anchor>
      <arglist>(T elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrixMxNBase</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a681af844266d5313277fa0a3a8066697</anchor>
      <arglist>(Elements elements)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a1fcbbef2a2a0f4237bcc886d09ec00d7</anchor>
      <arglist>(TMatrixMxNBase)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr std::size_t</type>
      <name>numRows</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a5e1ba598f7954ac7440cd5c79cdf329b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr std::size_t</type>
      <name>numCols</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>abc3633a284a50a237a25dfa372459799</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a34a6589b3edbf6230c6ee69362e9e7c6</anchor>
      <arglist>(T constantValue) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a51eb4baa56883811d66eb0ea859b4164</anchor>
      <arglist>(T constantValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a5fa9b0a6c83a720156d35c75d57e7af0</anchor>
      <arglist>(T constantValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TRawColVector&lt; T, M &gt;</type>
      <name>multiplyVector</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>adb31940ade56da868f7b1834d6e3e22c</anchor>
      <arglist>(const TRawColVector&lt; T, M &gt; &amp;rhsColVector) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>multiplyMatrix</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a1935f23c3d4f0fd8f1b59dc45de8189e</anchor>
      <arglist>(const TRawMatrix&lt; T, N, K &gt; &amp;rhsMatrix, TRawMatrix&lt; T, M, K &gt; *out_result) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>multiplyTransposedMatrix</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>acaaef1c28b10c786dc6b9dda084a7624</anchor>
      <arglist>(const TRawMatrix&lt; T, K, N &gt; &amp;rhsMatrix, TRawMatrix&lt; T, M, K &gt; *out_result) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TRawMatrix&lt; T, N, M &gt;</type>
      <name>transposeMatrix</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a501e5d8edbb58607520bf18cb59e9b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TRawRowVector&lt; T, N &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>aff8827b4b6ee3420f54af6ba3d32e587</anchor>
      <arglist>(std::size_t rowIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const TRawRowVector&lt; T, N &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a55faf2304e58afdfad453a1fd7e0a0e7</anchor>
      <arglist>(std::size_t rowIndex) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>ab73ff130767533970069573471f3f063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TRawMatrix&lt; T, M, N &gt;</type>
      <name>m</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>a4d6450b9fbb942522bdc9b528b6f4a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr auto</type>
      <name>NUM_ROWS</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>aba946b216a7756fd59bfad23cbf401e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr auto</type>
      <name>NUM_COLS</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_mx_n_base.html</anchorfile>
      <anchor>adaa0b70a85bfb717ac295c20aec35a0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMatrixNBase</name>
    <filename>classph_1_1math_1_1_t_matrix_n_base.html</filename>
    <templarg>typename Derived</templarg>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::math::TMatrixMxNBase&lt; Derived, T, N, N &gt;</base>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a0618460442b2a4ca39639e3b215bdc56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setScale</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>adb9ced97b1f3361c2f00d1a99764aa32</anchor>
      <arglist>(const TRawColVector&lt; T, N &gt; &amp;scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a038b709c4d5697376ad0c2f3936a0a9b</anchor>
      <arglist>(const Derived &amp;rhsMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>acdadb0e6b323e756f62317948033df57</anchor>
      <arglist>(const Derived &amp;rhsMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>mulTransposed</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>acfb4ae2090758189fe7537f50b1f9347</anchor>
      <arglist>(const Derived &amp;rhsMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>mulTransposedLocal</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a76f541843100a049f92540fc8dec99d9</anchor>
      <arglist>(const Derived &amp;rhsMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a1dd6078fcb4bab584e9a4033bc674050</anchor>
      <arglist>(const Derived &amp;rhsMatrix, Derived *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mulTransposed</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a8d9dc5f3d0505fd91721b915ff2fdc00</anchor>
      <arglist>(const Derived &amp;rhsMatrix, Derived *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>transpose</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>ac30b0329389c15bdc65c1042945a19db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>transposeLocal</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a8bdecb8d84f42becdb92b859f6581738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_matrix_n_base.html</anchorfile>
      <anchor>a486abee0a0b5a0bfad5f8415ec4f5ee3</anchor>
      <arglist>(TMatrixNBase)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TMergeableFilmProxy</name>
    <filename>classph_1_1_t_mergeable_film_proxy.html</filename>
    <templarg>typename Sample</templarg>
  </compound>
  <compound kind="class">
    <name>ph::TMetaInjectionPrimitive</name>
    <filename>classph_1_1_t_meta_injection_primitive.html</filename>
    <templarg>detail::CPrimitiveMetaGetter PrimitiveMetaGetter</templarg>
    <templarg>detail::CPrimitiveGetter PrimitiveGetter</templarg>
    <base>ph::Primitive</base>
    <member kind="function">
      <type></type>
      <name>TMetaInjectionPrimitive</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>adc29d8a2b322f80b120a693bbef6a619</anchor>
      <arglist>(PrimitiveMetaGetter metaGetter, PrimitiveGetter primitiveGetter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>afd52c5a8f64c66107e1911772acf6db4</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a627cd07c3fde34c0a7fc8b37656c7ba2</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a275e560ef0b3107b4a956326eeb8740f</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *const out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a9d726a028a60e5cc0f2fd4434926ae7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a41acc60dc086618458fc44b5756dcdea</anchor>
      <arglist>(const Ray &amp;ray) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a2bd15a864afc3102a0d9288383eaa408</anchor>
      <arglist>(const math::AABB3D &amp;volume) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPosSample</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a8c398e85e26f0ac242b52b8215dea775</anchor>
      <arglist>(PrimitivePosSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPosPdf</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a293fc1e42d62b1df14afef77797dc600</anchor>
      <arglist>(PrimitivePosPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcExtendedArea</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a929a93a8cf18107053441a979252f582</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveMetadata *</type>
      <name>getMetadata</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a460a5e4a0e5a8981fdccfdd1a1e0d061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const auto *</type>
      <name>getInjectee</name>
      <anchorfile>classph_1_1_t_meta_injection_primitive.html</anchorfile>
      <anchor>a6e5c8239f37b4445519c9b0f7b2e894d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TMipmap</name>
    <filename>classph_1_1_t_mipmap.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TAbstractPixelTex2D&lt; T, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>TMipmap</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>ac9711f991d4250c8b1f6574cc85780b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMipmap</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>a987b648c81c73c099ecc1ec3870ade34</anchor>
      <arglist>(const std::size_t numLevels)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TMipmap</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>ae92103a79e717592eff328edb2fe23ff</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>aa46f73f4bf440e044dc83799fe893aa1</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, TTexPixel&lt; T, N &gt; *const out_value) const =0</arglist>
    </member>
    <member kind="function">
      <type>const TAbstractPixelTex2D&lt; T, N &gt; *</type>
      <name>getLevel</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>a901f220e96519fddbaca5460bae37ef6</anchor>
      <arglist>(const std::size_t level) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLevels</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>a6b1fa2f44b4a5a4a59352a946851a038</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setLevel</name>
      <anchorfile>classph_1_1_t_mipmap.html</anchorfile>
      <anchor>a48b86a7259b9a0a476730a9067c98083</anchor>
      <arglist>(const std::size_t level, std::unique_ptr&lt; TAbstractPixelTex2D&lt; T, N &gt; &gt; texture)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::lta::TMIS</name>
    <filename>classph_1_1lta_1_1_t_m_i_s.html</filename>
    <templarg>EMISStyle STYLE</templarg>
    <member kind="function">
      <type>real</type>
      <name>weight</name>
      <anchorfile>classph_1_1lta_1_1_t_m_i_s.html</anchorfile>
      <anchor>abb6b32ed2c4b67f4b3be64011f309676</anchor>
      <arglist>(const real pdf0, const real pdf1) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMitchellNetravaliCubic2D</name>
    <filename>classph_1_1math_1_1_t_mitchell_netravali_cubic2_d.html</filename>
    <templarg>typename Value</templarg>
    <base>ph::math::TMathFunction2D&lt; Value &gt;</base>
    <member kind="function">
      <type></type>
      <name>TMitchellNetravaliCubic2D</name>
      <anchorfile>classph_1_1math_1_1_t_mitchell_netravali_cubic2_d.html</anchorfile>
      <anchor>aa2a6b115833c5583747dcea48c23430c</anchor>
      <arglist>(Value b, Value c)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_mitchell_netravali_cubic2_d.html</anchorfile>
      <anchor>a2e38ba2e72f6294c450a98e5b12f683d</anchor>
      <arglist>(Value x, Value y) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TMRSWResource</name>
    <filename>classph_1_1_t_m_r_s_w_resource.html</filename>
    <templarg>typename Resource</templarg>
    <base protection="private">ph::INoCopyAndMove</base>
    <member kind="function">
      <type></type>
      <name>TMRSWResource</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>a69634c4c9347314da7e0053689cfd4f9</anchor>
      <arglist>(Res &amp;&amp;resource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>a54ac304abf7df21ea8b4b001864be145</anchor>
      <arglist>(Reader reader) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>a1e7364d3e650f938ecf20090e006bd05</anchor>
      <arglist>(Writer writer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryRead</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>ace89b7e2b90def7aff3c18a1d9df2a68</anchor>
      <arglist>(Reader reader) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryWrite</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>ae4045ea717b7621808e0d9e591ba0ad4</anchor>
      <arglist>(Writer writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>directCall</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>aea9bd7ae0abf87a1fec0f441f9719724</anchor>
      <arglist>(Operation operation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMRSWResource</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>a8db498cdf499a91139e451b4fdc85a78</anchor>
      <arglist>(const TMRSWResource &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>TMRSWResource &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>aa8527adcafed96c38007fa916736fc78</anchor>
      <arglist>(const TMRSWResource &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMRSWResource</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>ab51865821742f8208350467e7f5c881e</anchor>
      <arglist>(TMRSWResource &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>TMRSWResource &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_m_r_s_w_resource.html</anchorfile>
      <anchor>a6f2d956f9498d191b0d01391fc12cc3e</anchor>
      <arglist>(TMRSWResource &amp;&amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TMt19937</name>
    <filename>classph_1_1math_1_1_t_mt19937.html</filename>
    <templarg>typename Bits</templarg>
    <base>ph::math::TUniformRandomBitGenerator&lt; TMt19937&lt; Bits &gt;, Bits &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_mt19937.html</anchorfile>
      <anchor>a87d335531478f803b751c6130daaa664</anchor>
      <arglist>(TMt19937)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMt19937</name>
      <anchorfile>classph_1_1math_1_1_t_mt19937.html</anchorfile>
      <anchor>ab80072d812b5f9a3847d83b48d556259</anchor>
      <arglist>(Bits seed)</arglist>
    </member>
    <member kind="function">
      <type>Bits</type>
      <name>impl_generate</name>
      <anchorfile>classph_1_1math_1_1_t_mt19937.html</anchorfile>
      <anchor>a698d8fbaec1e505659f345394c9d9c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jumpAhead</name>
      <anchorfile>classph_1_1math_1_1_t_mt19937.html</anchorfile>
      <anchor>a43a95e344cc3dfb17ae393b10394a70a</anchor>
      <arglist>(uint64 distance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TMultiply</name>
    <filename>classph_1_1texfunc_1_1_t_multiply.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_multiply.html</anchorfile>
      <anchor>a4faf47c867f208071e0b7c97bf601632</anchor>
      <arglist>(const InputTypeA &amp;inputValueA, const InputTypeB &amp;inputValueB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TNearestPixelTex2D</name>
    <filename>classph_1_1_t_nearest_pixel_tex2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TPixelTex2D&lt; T, N &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_nearest_pixel_tex2_d.html</anchorfile>
      <anchor>a9a4a2548075f235201ba51ea4f06a2fa</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, TTexPixel&lt; T, N &gt; *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::TNonTypeTemplateArgDummy</name>
    <filename>structph_1_1_t_non_type_template_arg_dummy.html</filename>
    <templarg>typename T</templarg>
    <templarg>T VALUE</templarg>
  </compound>
  <compound kind="class">
    <name>ph::TNumericPixelTexture2D</name>
    <filename>classph_1_1_t_numeric_pixel_texture2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TPixelTexture2D&lt; math::TArithmeticArray&lt; T, N &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>TNumericPixelTexture2D</name>
      <anchorfile>classph_1_1_t_numeric_pixel_texture2_d.html</anchorfile>
      <anchor>aa56a377d59b15a4826076eadcc90d145</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TNumericPixelTexture2D</name>
      <anchorfile>classph_1_1_t_numeric_pixel_texture2_d.html</anchorfile>
      <anchor>a04c541b0855ae871a985c9cad35d1bcf</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::ESampleMode sampleMode, pixel_texture::EWrapMode wrapModeS, pixel_texture::EWrapMode wrapModeT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TNumericPixelTexture2D</name>
      <anchorfile>classph_1_1_t_numeric_pixel_texture2_d.html</anchorfile>
      <anchor>a7400c3238afbff04ad4ba3a0ca8dc508</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::ESampleMode sampleMode, pixel_texture::EWrapMode wrapModeS, pixel_texture::EWrapMode wrapModeT, std::size_t pixelIndexOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_numeric_pixel_texture2_d.html</anchorfile>
      <anchor>aa1fad60a951e2138e1eb5329c6076422</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, math::TArithmeticArray&lt; T, N &gt; *out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Tokenizer</name>
    <filename>classph_1_1_tokenizer.html</filename>
    <member kind="function">
      <type></type>
      <name>Tokenizer</name>
      <anchorfile>classph_1_1_tokenizer.html</anchorfile>
      <anchor>a74961d08b9381cec8272c435b0266062</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;separators)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tokenizer</name>
      <anchorfile>classph_1_1_tokenizer.html</anchorfile>
      <anchor>a5d28514997b95ebd04fe0d2a4865088b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; char, char &gt; &gt; &amp;enclosures)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tokenizer</name>
      <anchorfile>classph_1_1_tokenizer.html</anchorfile>
      <anchor>af519448707b236f8618ec46e94dbcb56</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;separators, const std::vector&lt; std::pair&lt; char, char &gt; &gt; &amp;enclosures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tokenize</name>
      <anchorfile>classph_1_1_tokenizer.html</anchorfile>
      <anchor>a2e20d3458fae278b2d04142110cba83a</anchor>
      <arglist>(const std::string &amp;source, std::vector&lt; std::string &gt; &amp;out_results) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ToneMapper</name>
    <filename>classph_1_1_tone_mapper.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ToneMapper</name>
      <anchorfile>classph_1_1_tone_mapper.html</anchorfile>
      <anchor>ada8cfcbda9d04788174768f0bd3e4d27</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TOrthonormalBasis3</name>
    <filename>classph_1_1math_1_1_t_orthonormal_basis3.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TOrthonormalBasis3</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>af86f7b3c88091e0b527997392e7a2d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOrthonormalBasis3</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>af39531e755d5ceb09cbcf4a98e5b8f3a</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;xAxis, const TVector3&lt; T &gt; &amp;yAxis, const TVector3&lt; T &gt; &amp;zAxis)</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>worldToLocal</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a0f7cfe829b14de51d6b0992331cef087</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;worldVec) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>localToWorld</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>afec03f05361afa009eea63e8baae5742</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;localVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cos2Phi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ac0ae89d5156f0f8b15623584144d05e0</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sin2Phi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ab644d7d477f53a694afb3fa7ad9b8c5e</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tan2Phi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>adf2b94a34f4d96add15967aebefb6b95</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cos2Theta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ae5e0e912f74255199b807d0f0624ad46</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sin2Theta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a7249c3fe26052bbe8a3c93b9772e010a</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tan2Theta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a7b507cd000d0d5c55ebf0bdef2ff745b</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>absCosTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a0ef75a37f90af1da0b37f77b970c8dcc</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>absSinTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a8af2319cb1d298508b165ba22ff8edd4</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>renormalize</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a4cf958e335bc7a1d634e6a16d0355853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>renormalizeXAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>aaf3c28a9fab2ae56b313125119b31132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>renormalizeYAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>acb4035fa6dc3c5a1e2e3b8f1c98139d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>renormalizeZAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>aa3afe51b649ca4a8baa7ad6318c5b4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>setXAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a6b8eab0936140eb577e6c720d41cb433</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>setYAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>aec974bee9985d43ac483788ba177583c</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>setZAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a9a03fb3bed582a92ed2e7f21883dd1c6</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>TOrthonormalBasis3 &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a437c567a018e401b7b26d2d6247359f7</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;xAxis, const TVector3&lt; T &gt; &amp;yAxis, const TVector3&lt; T &gt; &amp;zAxis)</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getXAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a55e62a1e93af1285f0f9bab36b8f0b6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getYAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a292a84d14f5ded9fcb640de83d2289d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>getZAxis</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a2da892795c848c0801eb782650117d3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosPhi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ae61ee338d90a34485c3065f9ef50f8d8</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinPhi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a910aca8952c85562e162c93877547b4c</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tanPhi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a63e2ac8a48a523843377756a6b235b33</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ab00ce530fd0a2d81b1fc764f5e1eeae1</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a7f91a957c54f874c0d0bf6516b5a81d8</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tanTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a5e69fd64023fe5b4c44a55622415d472</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TOrthonormalBasis3</type>
      <name>makeFromUnitY</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a4c527b1dd22229b5cb47d55b8a804592</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitYAxis)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosPhi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ae61ee338d90a34485c3065f9ef50f8d8</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinPhi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a910aca8952c85562e162c93877547b4c</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tanPhi</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a63e2ac8a48a523843377756a6b235b33</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>ab00ce530fd0a2d81b1fc764f5e1eeae1</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a7f91a957c54f874c0d0bf6516b5a81d8</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tanTheta</name>
      <anchorfile>classph_1_1math_1_1_t_orthonormal_basis3.html</anchorfile>
      <anchor>a5e69fd64023fe5b4c44a55622415d472</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPhoton</name>
    <filename>classph_1_1_t_photon.html</filename>
    <templarg>typename Derived</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>PMPhotonTag</name>
      <anchorfile>classph_1_1_t_photon.html</anchorfile>
      <anchor>aa8c4dd712ed2fd4fb64e2552bcffc265</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_photon.html</anchorfile>
      <anchor>a67cdf0761f2cdf469ba047291503d1d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_t_photon.html</anchorfile>
      <anchor>a69541eaf3793e156941a75969229ff3a</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_t_photon.html</anchorfile>
      <anchor>a30ae0588690f0591d4af517d4accc364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1_t_photon.html</anchorfile>
      <anchor>a73b398353042d9e1e9978cf785633634</anchor>
      <arglist>(TPhoton)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPhotonMap</name>
    <filename>classph_1_1_t_photon_map.html</filename>
    <templarg>CPhoton Photon</templarg>
    <templarg>math::CIndexedPointKdtreeItemStorage&lt; Photon &gt; PhotonStorage</templarg>
    <class kind="struct">ph::TPhotonMap::PhotonCenterCalculator</class>
    <member kind="typedef">
      <type>math::TIndexedPointKdtree&lt; Photon, int, PhotonCenterCalculator, PhotonStorage &gt;</type>
      <name>MapType</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>ab4ca9b65cc8b68363e679daf4f42cd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MapType::BuildCache</type>
      <name>BuildCacheType</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>af8f22c022faa7f72103c0d39cd9b4c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canContribute</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>a5453753b482eb0f0ff7f3693da6423a1</anchor>
      <arglist>(const std::size_t viewPathLength, const std::size_t minFullPathLength, const std::size_t maxFullPathLength) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>aa855988bc09c1f02a9df5e0ff5405081</anchor>
      <arglist>(const math::Vector3R &amp;position, const real kernelRadius, std::vector&lt; Photon &gt; &amp;photons) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>aeb1056a57f8778dc4950985ab5c1e4fb</anchor>
      <arglist>(const math::Vector3R &amp;position, const real kernelRadius, const std::size_t viewPathLength, const std::size_t minFullPathLength, const std::size_t maxFullPathLength, std::vector&lt; Photon &gt; &amp;photons) const</arglist>
    </member>
    <member kind="function">
      <type>TPhotonMapInfo&lt; Photon &gt;</type>
      <name>getInfo</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>a785a3af45e87a38581fb45283bc40c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>MapType</type>
      <name>map</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>a66dd13a81bfd185475ac9f0286845c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numPaths</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>af49e3490bed1be375c532f11fb7cc1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>minPathLength</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>a1fc838f70a895e9af14a33d8773aafad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>maxPathLength</name>
      <anchorfile>classph_1_1_t_photon_map.html</anchorfile>
      <anchor>a064e7a9f4019a5a5444b058e80e8666a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPhotonMapInfo</name>
    <filename>classph_1_1_t_photon_map_info.html</filename>
    <templarg>CPhoton Photon</templarg>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numPaths</name>
      <anchorfile>classph_1_1_t_photon_map_info.html</anchorfile>
      <anchor>a6bd624d5ce1ea3912f5bf779258be1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>minPathLength</name>
      <anchorfile>classph_1_1_t_photon_map_info.html</anchorfile>
      <anchor>a48f21b98fbc3ae4fdec7b319665150f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>maxPathLength</name>
      <anchorfile>classph_1_1_t_photon_map_info.html</anchorfile>
      <anchor>ab7590812266c3a9bde7c41112b46624a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPhotonPathTracingWork</name>
    <filename>classph_1_1_t_photon_path_tracing_work.html</filename>
    <templarg>CPhoton Photon</templarg>
    <base>ph::RenderWork</base>
    <member kind="function">
      <type></type>
      <name>TPhotonPathTracingWork</name>
      <anchorfile>classph_1_1_t_photon_path_tracing_work.html</anchorfile>
      <anchor>a9227387742ef272f9ca11074471ddd53</anchor>
      <arglist>(const Scene *scene, const Receiver *receiver, SampleGenerator *sampleGenerator, TSpan&lt; Photon &gt; photonBuffer, uint32 minPhotonPathLength=1, uint32 maxPhotonPathLength=PMCommonParams::DEFAULT_MAX_PATH_LENGTH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatistics</name>
      <anchorfile>classph_1_1_t_photon_path_tracing_work.html</anchorfile>
      <anchor>a1f7b60472c8a764ec41aa2f8eac98d73</anchor>
      <arglist>(PMAtomicStatistics *statistics)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numPhotonPaths</name>
      <anchorfile>classph_1_1_t_photon_path_tracing_work.html</anchorfile>
      <anchor>a8c55189d38a579a28bdae9add7e9d061</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TPiecewiseLinear1D</name>
    <filename>classph_1_1math_1_1_t_piecewise_linear1_d.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a8e74a0f7a6910dd44c3d5507557069f6</anchor>
      <arglist>(T x) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a4cf3762b17f85b84861fbe0fbf175329</anchor>
      <arglist>(T x, std::size_t p0Index, std::size_t p1Index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>ab3b2f276770ac4f78b431898ae09f19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a900f062ef46bf61b68036b2f1c06b58f</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoints</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>aeed5f091ab9faa9d9df9537097cdeef2</anchor>
      <arglist>(const TPiecewiseLinear1D &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>TPiecewiseLinear1D</type>
      <name>getMirrored</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a0b73cfe791859fd54c24c0ed25bedf1c</anchor>
      <arglist>(T pivotX) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numPoints</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a8501285b1a8d319e8e457f239753d2cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>getPoint</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a1fa2e5877aefb34509c5778b1ecc706d</anchor>
      <arglist>(std::size_t pointIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_piecewise_linear1_d.html</anchorfile>
      <anchor>a967ee947d266f43ef8eae4488e92f49a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPIndexedKdTreeTriangleMesh</name>
    <filename>classph_1_1_t_p_indexed_kd_tree_triangle_mesh.html</filename>
    <templarg>typename Index</templarg>
    <base>ph::Primitive</base>
    <member kind="function">
      <type></type>
      <name>TPIndexedKdTreeTriangleMesh</name>
      <anchorfile>classph_1_1_t_p_indexed_kd_tree_triangle_mesh.html</anchorfile>
      <anchor>ab226ffee4400f72b168406074480f37a</anchor>
      <arglist>(IndexedTriangleBuffer *triangleBuffer, math::IndexedKdtreeParams params=math::IndexedKdtreeParams())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_t_p_indexed_kd_tree_triangle_mesh.html</anchorfile>
      <anchor>a15eb63ba9141e5ccb103692994f231b2</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_t_p_indexed_kd_tree_triangle_mesh.html</anchorfile>
      <anchor>a7eea33b4bb474af47833b13bf46ffb07</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_t_p_indexed_kd_tree_triangle_mesh.html</anchorfile>
      <anchor>a8d7837d923dbf4b2d2dcc73ca2ef22c3</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_t_p_indexed_kd_tree_triangle_mesh.html</anchorfile>
      <anchor>a38e0a28a8693e6be5087906cc1884970</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::pixel_buffer::TPixel</name>
    <filename>classph_1_1pixel__buffer_1_1_t_pixel.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TPixel</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>a441565e12bd1977835e361b0c5b7c0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPixel</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>a32546b0f6fda2fe37917848fa2e0a06e</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPixel</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>acb32bddd8cb03894f6bc6f4fd981d4d6</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;valueBuffer, std::size_t numUsedValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPixel</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>a3089f80859e7daaa4ca033f1ec9c2cca</anchor>
      <arglist>(const TPixel&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;</type>
      <name>getValues</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>adab32dd428db557bd2798f24600dca28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, MAX_PIXEL_ELEMENTS &gt;</type>
      <name>getAllValues</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>ab97533fb1d87d1c9b5ad536bca94885a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numValues</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>aabc9da2c996aa1af04697914cb546c26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1pixel__buffer_1_1_t_pixel.html</anchorfile>
      <anchor>a7365d416e4cb9ee25eecd6049db32ae4</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPixelTex2D</name>
    <filename>classph_1_1_t_pixel_tex2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TAbstractPixelTex2D&lt; T, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>TPixelTex2D</name>
      <anchorfile>classph_1_1_t_pixel_tex2_d.html</anchorfile>
      <anchor>aa7b9952f81127647fe57fbc0331b4ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPixelTex2D</name>
      <anchorfile>classph_1_1_t_pixel_tex2_d.html</anchorfile>
      <anchor>a2ea6da71df59eeccb806751f513c4fe0</anchor>
      <arglist>(const TFrame&lt; T, N &gt; &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPixelTex2D</name>
      <anchorfile>classph_1_1_t_pixel_tex2_d.html</anchorfile>
      <anchor>a002f70bf5999599c92856a7684fb712e</anchor>
      <arglist>(TFrame&lt; T, N &gt; &amp;&amp;frame)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_pixel_tex2_d.html</anchorfile>
      <anchor>ade02380c065bd60bfd75561f30e5fd52</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, TTexPixel&lt; T, N &gt; *out_value) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPixel</name>
      <anchorfile>classph_1_1_t_pixel_tex2_d.html</anchorfile>
      <anchor>a2def8de26eae4beb7ed0f528e59b6678</anchor>
      <arglist>(const uint32 x, const uint32 y, TTexPixel&lt; T, N &gt; *const out_pixel) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixels</name>
      <anchorfile>classph_1_1_t_pixel_tex2_d.html</anchorfile>
      <anchor>ac04e13ae87717ad35f0822468cf626fc</anchor>
      <arglist>(const TFrame&lt; T, N &gt; &amp;frame)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPixelTexture2D</name>
    <filename>classph_1_1_t_pixel_texture2_d.html</filename>
    <templarg>typename OutputType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="function">
      <type></type>
      <name>TPixelTexture2D</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a5604cefa5e2ddefcfef9f6881d854e9e</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPixelTexture2D</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>ab23d9f1f1401a925e60f746ad5ba65e0</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::ESampleMode sampleMode, pixel_texture::EWrapMode wrapModeS, pixel_texture::EWrapMode wrapModeT)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a90388bd9b41002cb61f0ba20f01a147c</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *out_value) const override=0</arglist>
    </member>
    <member kind="function">
      <type>pixel_buffer::TPixel&lt; float64 &gt;</type>
      <name>samplePixelBuffer</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a0ec913c3244401c45bd5fd089974003f</anchor>
      <arglist>(const math::Vector2D &amp;sampleUV) const</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; uint32 &gt;</type>
      <name>getSizePx</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>aa4309321480d89f422a688de2e8d9eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2D</type>
      <name>getTexelSize</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>ae2e4f5340d81c77905fc3b61f99257f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pixel_texture::ESampleMode</type>
      <name>getSampleMode</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a5521a01b114b54707ae30753a45e9cb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pixel_texture::EWrapMode</type>
      <name>getWrapModeS</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a60bd80fb7aaad4485e81c5bf64301dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pixel_texture::EWrapMode</type>
      <name>getWrapModeT</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a0e804b49fa535d6c60f60e26c62f0355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PixelBuffer2D *</type>
      <name>getPixelBuffer</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a0fd9d040f76a4119ce20d29b32b9b0c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pixel_buffer::TPixel&lt; float64 &gt;</type>
      <name>samplePixelBufferNearest</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a0e05bebf75a9c5b7d5deec9720c7cd31</anchor>
      <arglist>(const math::Vector2D &amp;sampleUV) const</arglist>
    </member>
    <member kind="function">
      <type>pixel_buffer::TPixel&lt; float64 &gt;</type>
      <name>samplePixelBufferBilinear</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a9c87b292e3993e7b86d1dba9b1f2f5c9</anchor>
      <arglist>(const math::Vector2D &amp;sampleUV) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>math::Vector2D</type>
      <name>sampleUVToST</name>
      <anchorfile>classph_1_1_t_pixel_texture2_d.html</anchorfile>
      <anchor>a573f3ef606e6554b30777ee54b016bb0</anchor>
      <arglist>(const math::Vector2D &amp;sampleUV) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TPower</name>
    <filename>classph_1_1texfunc_1_1_t_power.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_power.html</anchorfile>
      <anchor>a8cd80efe7cd5ff09f0218914d5bf2b76</anchor>
      <arglist>(const InputTypeA &amp;inputValueA, const InputTypeB &amp;inputValueB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPPMRadianceEvaluationWork</name>
    <filename>classph_1_1_t_p_p_m_radiance_evaluation_work.html</filename>
    <templarg>CPhoton Photon</templarg>
    <templarg>CViewpoint Viewpoint</templarg>
    <base>ph::RenderWork</base>
    <member kind="function">
      <type></type>
      <name>TPPMRadianceEvaluationWork</name>
      <anchorfile>classph_1_1_t_p_p_m_radiance_evaluation_work.html</anchorfile>
      <anchor>a474e8788833ac331d494db5a33ad3364</anchor>
      <arglist>(TSpan&lt; Viewpoint &gt; viewpoints, const TPhotonMap&lt; Photon &gt; *photonMap, const Scene *scene, TSamplingFilm&lt; math::Spectrum &gt; *film, std::size_t totalPhotonPaths)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatistics</name>
      <anchorfile>classph_1_1_t_p_p_m_radiance_evaluation_work.html</anchorfile>
      <anchor>a2ae46f92a6dd10d842266f7cdd766156</anchor>
      <arglist>(PMAtomicStatistics *statistics)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classph_1_1_t_p_p_m_radiance_evaluation_work.html</anchorfile>
      <anchor>aac24296fe3fa01227b5ad11cfc4b5eda</anchor>
      <arglist>(real alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TPPMViewpointCollector</name>
    <filename>classph_1_1_t_p_p_m_viewpoint_collector.html</filename>
    <templarg>CViewpoint Viewpoint</templarg>
    <templarg>CPhoton Photon</templarg>
    <base>ph::TViewPathHandler&lt; TPPMViewpointCollector&lt; Viewpoint, Photon &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>TPPMViewpointCollector</name>
      <anchorfile>classph_1_1_t_p_p_m_viewpoint_collector.html</anchorfile>
      <anchor>afebe3a31bde54bf32af10e87a054da9b</anchor>
      <arglist>(std::size_t maxViewpointDepth, real initialKernelRadius, const TPhotonMapInfo&lt; Photon &gt; &amp;photonMapInfo, const Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>impl_onReceiverSampleStart</name>
      <anchorfile>classph_1_1_t_p_p_m_viewpoint_collector.html</anchorfile>
      <anchor>aa1ef9f2b05c7b305449434eb1b0ef257</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const math::Vector2S &amp;sampleIndex, const math::Spectrum &amp;pathThroughput)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>impl_onPathHitSurface</name>
      <anchorfile>classph_1_1_t_p_p_m_viewpoint_collector.html</anchorfile>
      <anchor>a90a9150c96bb720c49746dd113e50af9</anchor>
      <arglist>(std::size_t pathLength, const SurfaceHit &amp;surfaceHit, const math::Spectrum &amp;pathThroughput) -&gt; ViewPathTracingPolicy</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_onReceiverSampleEnd</name>
      <anchorfile>classph_1_1_t_p_p_m_viewpoint_collector.html</anchorfile>
      <anchor>a7646b5b8b76fd3888d6312d5e2cca6a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_onSampleBatchFinished</name>
      <anchorfile>classph_1_1_t_p_p_m_viewpoint_collector.html</anchorfile>
      <anchor>aec25c41ab2a71984a5b597feb3490d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Viewpoint &gt;</type>
      <name>claimViewpoints</name>
      <anchorfile>classph_1_1_t_p_p_m_viewpoint_collector.html</anchorfile>
      <anchor>ace36c608806ef17d756dc6f5ff8acc34</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TPwcDistribution1D</name>
    <filename>classph_1_1math_1_1_t_pwc_distribution1_d.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution1D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a43218a67875ba33823938da6e3ac3a2a</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution1D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a55aa3452ddcef621ce8c58cc2b73bed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>sampleDiscrete</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a38acc887d5cc778725fdd979575d58c3</anchor>
      <arglist>(T sample) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pdfContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a663a1b8cd2232d6628dbb35df8e19ada</anchor>
      <arglist>(T value) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pdfContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a6be9997c0b363a407fe6ec2188d58e5d</anchor>
      <arglist>(std::size_t columnIndex) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pdfDiscrete</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a5b0a70b1ef00a60034860c319cdd3870</anchor>
      <arglist>(std::size_t columnIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>continuousToDiscrete</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a993e4ca3387921463081fa2e5e9b3f7a</anchor>
      <arglist>(T value) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numColumns</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a8d900f7c082be05d41b18655f7d56aec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution1D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a48f641b884f7f78da2304f699eb79044</anchor>
      <arglist>(T min, T max, const T *weights, std::size_t numWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution1D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a2b76a55405365348a97d549601e2e6f8</anchor>
      <arglist>(T min, T max, const std::vector&lt; T &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a424f6079efb4540838580862e6a1f202</anchor>
      <arglist>(T sample) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>ae2352f7c6961456d421b0bf55483b833</anchor>
      <arglist>(T sample, T *out_pdf) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>ab28954a89ebf5cea3c7affe6d53be04c</anchor>
      <arglist>(T sample, T *out_pdf, std::size_t *out_straddledColumn) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution1D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a48f641b884f7f78da2304f699eb79044</anchor>
      <arglist>(T min, T max, const T *weights, std::size_t numWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution1D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a2b76a55405365348a97d549601e2e6f8</anchor>
      <arglist>(T min, T max, const std::vector&lt; T &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>a424f6079efb4540838580862e6a1f202</anchor>
      <arglist>(T sample) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>ae2352f7c6961456d421b0bf55483b833</anchor>
      <arglist>(T sample, T *out_pdf) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution1_d.html</anchorfile>
      <anchor>ab28954a89ebf5cea3c7affe6d53be04c</anchor>
      <arglist>(T sample, T *out_pdf, std::size_t *out_straddledColumn) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TPwcDistribution2D</name>
    <filename>classph_1_1math_1_1_t_pwc_distribution2_d.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution2D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution2_d.html</anchorfile>
      <anchor>ad70ab0de6da38a9407a3992afd595322</anchor>
      <arglist>(const TAABB2D&lt; T &gt; &amp;range, const T *weights, const TVector2&lt; std::size_t &gt; &amp;numWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution2D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution2_d.html</anchorfile>
      <anchor>a9cbe49142cfa8dbdfaed5dd1725d8f4b</anchor>
      <arglist>(const T *weights, const TVector2&lt; std::size_t &gt; &amp;numWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TPwcDistribution2D</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution2_d.html</anchorfile>
      <anchor>ab07edab61cf92d5130910a52e3e9d415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>sampleContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution2_d.html</anchorfile>
      <anchor>ae0838ad0b7c99cc5c80ea7c9ab0f8afa</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdf) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pdfContinuous</name>
      <anchorfile>classph_1_1math_1_1_t_pwc_distribution2_d.html</anchorfile>
      <anchor>a8478721a01ceded165f9f61143e5ab9d</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TQuaternion</name>
    <filename>classph_1_1math_1_1_t_quaternion.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TArithmeticArrayBase&lt; TQuaternion&lt; T &gt;, T, 4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a0934a5eb5d118f7b9f1b0af5f0496620</anchor>
      <arglist>(TQuaternion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TQuaternion</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>acfd225f0f71c53bb803339633e293daf</anchor>
      <arglist>(T vx, T vy, T vz, T vw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TQuaternion</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a911809fb3cfd05d36378dbf54f75779a</anchor>
      <arglist>(const TQuaternion&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TQuaternion</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ad0d0b2f7f9c26da0b972ededbf302fb5</anchor>
      <arglist>(const std::array&lt; U, 4 &gt; &amp;xyzwValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TQuaternion</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>abf83bfee495e7294fbf45066cc53d862</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;normalizedAxis, T radians)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TQuaternion</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a31316a7d7768c5a00b85a595196cbe87</anchor>
      <arglist>(const TMatrix4&lt; T &gt; &amp;rotationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a42e5f6cce7ae854af3d9914d42638592</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>afd8f8550878cb7282edd3693e73b3881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>z</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a5e16c61bcbf975255080a6af6cdf8f01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>w</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a60b4ac56bb3dcc403d8fcadc4843975f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a776558b5a6a05e8424fcd462d81757b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a59c68e9eb3b5efde2291da7bbb070103</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>z</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>aa1a720fd75211c57f1d68618bb537f2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>w</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a2e5c360aa3471e95972231793d7c23a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ada3e29e3c0857d85b0cb5ac64914c0bd</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;xyz) const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>normalize</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ab557533f61bbd4a66fbbfc310af3e734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion &amp;</type>
      <name>normalizeLocal</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ab58186a8d18d59d3744e47d2624ec1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a8ed8501172986d26b2efd933c6d7d9ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>conjugate</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a3e19d09b42a1cd2ee69d910e3d47f4ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conjugate</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a40c13d8e8e04cbfbfe428db316918a4e</anchor>
      <arglist>(TQuaternion *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion &amp;</type>
      <name>conjugateLocal</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ab43316ea18d54d9545b197a253968299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a71afa289d3ff6fe1d2cf9edd564ea243</anchor>
      <arglist>(const TQuaternion &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a4ab834e757ec5ad3ab27cc83636749b6</anchor>
      <arglist>(const TQuaternion &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ab5516ef5a3ce831a42c4bfd216061396</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ab0e8cd747bf002980c1fa2607c88ca13</anchor>
      <arglist>(const TQuaternion &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TQuaternion</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a4a844524d1d6bb3ff5a7b50feafd741d</anchor>
      <arglist>(const TQuaternion &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a9392cccabea3a1a4fa79d85aac15d6e2</anchor>
      <arglist>(const TQuaternion &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRot</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>aa0d250735c5a5717af2610aa835df34e</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;normalizedAxis, T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toRotationMatrix</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>a243a9eb6bdd69710180ab6d631e06f92</anchor>
      <arglist>(TMatrix4&lt; T &gt; *out_result) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TQuaternion</type>
      <name>makeNoRotation</name>
      <anchorfile>classph_1_1math_1_1_t_quaternion.html</anchorfile>
      <anchor>ad8e7dfff6ce93849a2c9e7580ea3e631</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::Transform</name>
    <filename>classph_1_1math_1_1_transform.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transform</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a443cec5884864a1a1fbbe044417f9295</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Transform &gt;</type>
      <name>genInversed</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a8cf7a9e972b54df971fd800d4fe9de6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformV</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a4cb6ccf429b03c12b77b4d93e1b47bd9</anchor>
      <arglist>(const Vector3R &amp;vector, Vector3R *out_vector) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformO</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a35b4fa1c642ae4c00d1d99d95fcb2a02</anchor>
      <arglist>(const Vector3R &amp;orientation, Vector3R *out_orientation) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformP</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>ad31f90687918aea6ef5a3cba2bb7696e</anchor>
      <arglist>(const Vector3R &amp;point, Vector3R *out_point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformV</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a40e29751dd99855f100856046b86a1bc</anchor>
      <arglist>(const Vector3R &amp;vector, const Time &amp;time, Vector3R *out_vector) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformO</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a276c24959e5c0c3e6a44065407d02bac</anchor>
      <arglist>(const Vector3R &amp;orientation, const Time &amp;time, Vector3R *out_orientation) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformP</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a73127d8e75deba7535e936d80d21e6d5</anchor>
      <arglist>(const Vector3R &amp;point, const Time &amp;time, Vector3R *out_point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a3ba60fbe49dc4907c95b28d9d128ebd4</anchor>
      <arglist>(const Ray &amp;ray, Ray *out_ray) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a9f0295786587f8eba371c5b8ee658f06</anchor>
      <arglist>(const HitInfo &amp;info, HitInfo *out_info) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a03f14acf305591847082ae041bfc5b70</anchor>
      <arglist>(const AABB3D &amp;aabb, AABB3D *out_aabb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>ad74c0934ee9ff7c532d31aa1896a1596</anchor>
      <arglist>(const HitInfo &amp;info, const Time &amp;time, HitInfo *out_info) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classph_1_1math_1_1_transform.html</anchorfile>
      <anchor>a4913ec51527d9f7bfd780ba162364c66</anchor>
      <arglist>(const AABB3D &amp;aabb, const Time &amp;time, AABB3D *out_aabb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TransformedIntersectable</name>
    <filename>classph_1_1_transformed_intersectable.html</filename>
    <base>ph::Intersectable</base>
    <member kind="function">
      <type></type>
      <name>TransformedIntersectable</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>a8ff415d1516b549bf29138ce58659cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformedIntersectable</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>a49fbd632750883ba9da215f3d72d365d</anchor>
      <arglist>(const Intersectable *intersectable, const math::Transform *localToWorld, const math::Transform *worldToLocal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>a918040fa8e9455c62928f5ebde8179c3</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>aa23abfa0c9af5fd7c0a8d1bc1cac4b4f</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>ab55f9ed76bba72505c36be5c5c309205</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *const out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>a8c8fa9657f7359d0daad6dd66f50d339</anchor>
      <arglist>(const Ray &amp;ray) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>abf80f1c049916a6a4f80b16f4b3a6222</anchor>
      <arglist>(const math::AABB3D &amp;aabb) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>afd1b64239cb06e04dea3d633c6954fdf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Intersectable *</type>
      <name>m_intersectable</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>a29206ee9a2589f74fa0bf53f4f1d0c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const math::Transform *</type>
      <name>m_localToWorld</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>af694e2f0840ebacac62910e54fe74a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const math::Transform *</type>
      <name>m_worldToLocal</name>
      <anchorfile>classph_1_1_transformed_intersectable.html</anchorfile>
      <anchor>a61f46ae4fa5b79231fc0b7c45eb3b5ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TransformedPrimitive</name>
    <filename>classph_1_1_transformed_primitive.html</filename>
    <base>ph::Primitive</base>
    <member kind="function">
      <type></type>
      <name>TransformedPrimitive</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a70780efd1fccd45212e6c81c1662f7f1</anchor>
      <arglist>(const Primitive *primitive, const math::RigidTransform *localToWorld, const math::RigidTransform *worldToLocal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccluding</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a3b5142026448657c61a7a25267e1586b</anchor>
      <arglist>(const Ray &amp;ray) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a871b99c5bdd3037f466f4d9c926dc638</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reintersect</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a6be2d5ccf96ed0832c8916eb2cb258ca</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, const Ray &amp;srcRay, HitProbe &amp;srcProbe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcHitDetail</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>ab34b5458d6a295369b7ff328fb479f64</anchor>
      <arglist>(const Ray &amp;ray, HitProbe &amp;probe, HitDetail *const out_detail) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>ab70d17a2922239b42b14fb7c15214355</anchor>
      <arglist>(const math::AABB3D &amp;aabb) const override</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>calcAABB</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a80d4ff93de46b1a99e5c75de26be49bc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPosSample</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>ac299d8e9d3e082465ccaf8f80a375695</anchor>
      <arglist>(PrimitivePosSampleQuery &amp;query, SampleFlow &amp;sampleFlow, HitProbe &amp;probe) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPosPdf</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>af05b71bdeb8fcc9d9be965bf6e3bb370</anchor>
      <arglist>(PrimitivePosPdfQuery &amp;query) const override</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calcExtendedArea</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a162d74bca4c46883046723aff3da4b96</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveMetadata *</type>
      <name>getMetadata</name>
      <anchorfile>classph_1_1_transformed_primitive.html</anchorfile>
      <anchor>a189b3bf0f929378c3f81ab931fe04edc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TransformInfo</name>
    <filename>classph_1_1_transform_info.html</filename>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setPos</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>ae2b7e7a410a7d6438c4c66f198b84087</anchor>
      <arglist>(real x, real y, real z)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setPos</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a99d5c8f281ac4f1c7a17eba9858a3b57</anchor>
      <arglist>(const math::Vector3R &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setRot</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a48f7355ce186b95ee2385be1be1864a9</anchor>
      <arglist>(const math::Vector3R &amp;axis, real degrees)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setRot</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a6767f21ff35035b00d17570022de2d91</anchor>
      <arglist>(const math::QuaternionR &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setScale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>aa0f2c419430050b8a4abeff73b8a47e1</anchor>
      <arglist>(real uniformScale)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setScale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a910da9f77c68f1d9272ca42c5279389c</anchor>
      <arglist>(real x, real y, real z)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>setScale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a7a8f882acfb42511f3a97669156303c8</anchor>
      <arglist>(const math::Vector3R &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>translate</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a477c1ab84b5e11346c59f4c207f69bda</anchor>
      <arglist>(real amountX, real amountY, real amountZ)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>translate</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>afbbdfe24588102997b806b8310a9d6a5</anchor>
      <arglist>(const math::Vector3R &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>rotate</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a315698173004aa7264570d133b488e4d</anchor>
      <arglist>(const math::Vector3R &amp;axis, real additionalDegrees)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>rotate</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a3c90ff24adf5821c62e13a8848d040ac</anchor>
      <arglist>(const math::QuaternionR &amp;additionalRot)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>scale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a53dafd0ad5b6b31698de86ac1ff3dab8</anchor>
      <arglist>(real uniformAmount)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>scale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a6c45595bf42187b341493bb27f6f6a81</anchor>
      <arglist>(real amountX, real amountY, real amountZ)</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>scale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a4f5cc63d98877274388a79664009d61b</anchor>
      <arglist>(const math::Vector3R &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getPos</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a7561ab1af66f735c5e2e1bc2fc12eb30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::QuaternionR</type>
      <name>getRot</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a014d806cdce896538f9543661205c0b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3R</type>
      <name>getScale</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a0d15ca6d908f8c1b143b91c6639d3e5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TDecomposedTransform&lt; real &gt;</type>
      <name>getDecomposed</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a2555c8bec9c5b78b5c04249a34b87467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::StaticAffineTransform</type>
      <name>getForwardStaticAffine</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a4d53050629d8fe57bd816386aa9209b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::StaticAffineTransform</type>
      <name>getInverseStaticAffine</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>ab2528445c0bef6ce2399fa233b8af0b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::StaticRigidTransform</type>
      <name>getForwardStaticRigid</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>ab4fa97e7a6fb20fbfcf9659082c207b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::StaticRigidTransform</type>
      <name>getInverseStaticRigid</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>ad71a25b014f626827633e8c9133ea919</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransformInfo &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a55e7f91ec39d8a7efb87181f0fb00957</anchor>
      <arglist>(const math::TDecomposedTransform&lt; real &gt; &amp;decomposed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_STRUCT</name>
      <anchorfile>classph_1_1_transform_info.html</anchorfile>
      <anchor>a7c63f0b3cc2933e218424b7f43d6d612</anchor>
      <arglist>(TSdlOwnerStruct&lt; TransformInfo &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TransientResourceCache</name>
    <filename>classph_1_1_transient_resource_cache.html</filename>
    <base>ph::CookedResourceCollectionBase</base>
    <member kind="function">
      <type>std::string</type>
      <name>getStats</name>
      <anchorfile>classph_1_1_transient_resource_cache.html</anchorfile>
      <anchor>a733626472bb65dbb0e03a3313ad2ebbb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement *</type>
      <name>makeVisualElement</name>
      <anchorfile>classph_1_1_transient_resource_cache.html</anchorfile>
      <anchor>a7c23c3d4b117ac90c68220fb36cef2f3</anchor>
      <arglist>(const SdlResourceId id, DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>const TransientVisualElement *</type>
      <name>getVisualElement</name>
      <anchorfile>classph_1_1_transient_resource_cache.html</anchorfile>
      <anchor>ac25171e43b018f0c08490069c1de6e2f</anchor>
      <arglist>(const SdlResourceId id) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TransientVisualElement</name>
    <filename>classph_1_1_transient_visual_element.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classph_1_1_transient_visual_element.html</anchorfile>
      <anchor>ad72976999f79e7557601f55250692211</anchor>
      <arglist>(const Primitive *primitive)</arglist>
    </member>
    <member kind="function">
      <type>TransientVisualElement &amp;</type>
      <name>add</name>
      <anchorfile>classph_1_1_transient_visual_element.html</anchorfile>
      <anchor>a9607d3670763f20f8a63817972e454e6</anchor>
      <arglist>(const TransientVisualElement &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const Intersectable * &gt;</type>
      <name>intersectables</name>
      <anchorfile>classph_1_1_transient_visual_element.html</anchorfile>
      <anchor>a9e606783a2d18a65c2cbb1328c92581e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const Emitter * &gt;</type>
      <name>emitters</name>
      <anchorfile>classph_1_1_transient_visual_element.html</anchorfile>
      <anchor>adda9253cd5130667e13d87629b470470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const Primitive * &gt;</type>
      <name>primitivesView</name>
      <anchorfile>classph_1_1_transient_visual_element.html</anchorfile>
      <anchor>ae67280bebc8f8357e3372babab763897</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TranslucentMicrofacet</name>
    <filename>classph_1_1_translucent_microfacet.html</filename>
    <base>ph::SurfaceOptics</base>
    <member kind="function">
      <type></type>
      <name>TranslucentMicrofacet</name>
      <anchorfile>classph_1_1_translucent_microfacet.html</anchorfile>
      <anchor>a86d5781653c1ae5c5c6ce32f2f57fb2f</anchor>
      <arglist>(const std::shared_ptr&lt; DielectricFresnel &gt; &amp;fresnel, const std::shared_ptr&lt; Microfacet &gt; &amp;microfacet)</arglist>
    </member>
    <member kind="function">
      <type>ESurfacePhenomenon</type>
      <name>getPhenomenonOf</name>
      <anchorfile>classph_1_1_translucent_microfacet.html</anchorfile>
      <anchor>a06af462617090506f95e4be98a1fe760</anchor>
      <arglist>(SurfaceElemental elemental) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_translucent_microfacet.html</anchorfile>
      <anchor>ac8a44aa79e4d226daa52d21bf77a16f3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TReceiverMeasurementEstimator</name>
    <filename>classph_1_1_t_receiver_measurement_estimator.html</filename>
    <templarg>typename SamplingFilmType</templarg>
    <templarg>typename EstimationType</templarg>
    <base>ph::IReceivedRayProcessor</base>
    <member kind="typedef">
      <type>TIRayEstimator&lt; EstimationType &gt;</type>
      <name>Estimator</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>ac196fedd97afec6a116ae613700251ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TReceiverMeasurementEstimator</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a8a7dc8f634c6e27ebe7c97dd6ff9ed25</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TReceiverMeasurementEstimator</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a857a3e01e05ded24d9999c5c4ac960cc</anchor>
      <arglist>(std::size_t numFilms, std::size_t numEstimations, Integrand integrand, SampleFilter filter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TReceiverMeasurementEstimator</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a35ce88ea05e067e60ed6a3955b9925d7</anchor>
      <arglist>(TReceiverMeasurementEstimator &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a28f2062e15486100414d7398e3a68f31</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const Ray &amp;sensedRay, const math::Spectrum &amp;quantityWeight, SampleFlow &amp;sampleFlow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEstimator</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a2cfca8f6a83d40e7c93292ca62b0235b</anchor>
      <arglist>(const Estimator *estimator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFilmEstimation</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a4e9cf1b5557e4b83ec734e6529fd2168</anchor>
      <arglist>(std::size_t filmIndex, std::size_t estimationIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilmDimensions</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a3e7f31bdd62f9d67e17d488f271713f6</anchor>
      <arglist>(const math::TVector2&lt; int64 &gt; &amp;actualResPx, const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindowPx, bool useSoftEdge=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearFilms</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a56f07078eae8b4b122060a219856584b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearFilm</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a2b51b69aa1999a1126427fd543883145</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeFilmTo</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>ae60907a2e4e9a768a4c0dab39d3285af</anchor>
      <arglist>(std::size_t fromIndex, SamplingFilmType &amp;toFilm)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numEstimations</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>aaf11deb3f22d8ffed68537864399a4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>getFilmEffectiveWindowPx</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a79077f8a63428f95e797c6e424a9bc3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SamplingFilmDimensions</type>
      <name>getFilmDimensions</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a544d292a2348025d1ca38e3259e50e84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSoftEdgedFilm</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a08834f3010c29da59faeb0dac9ee1826</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TReceiverMeasurementEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a386e1a4b804e52b40d263ed6a1587adb</anchor>
      <arglist>(TReceiverMeasurementEstimator &amp;&amp;other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt;</type>
      <name>EstimationToFilmMap</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a5876043720f06fa5fd585cee59771cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SampleFilter</type>
      <name>m_filter</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a5836f39a64015e8b84201c47b775cb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TEstimationArray&lt; EstimationType &gt;</type>
      <name>m_estimations</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a6ce9eb7817677006d1fc41184be5ce72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>math::Vector2D</type>
      <name>m_filmActualResFPx</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>aad895d0bd84d75125b58172e272a2813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SamplingFilmType &gt;</type>
      <name>m_films</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a1e873b0b4c129139693e8e8b4c63e97c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const Estimator * &gt;</type>
      <name>m_estimators</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>ac72ae63a2a6df5d826d537377d55083c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integrand</type>
      <name>m_integrand</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>af3bb1b1852a8123f054a301ae3e49646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EstimationToFilmMap</type>
      <name>m_estimationToFilm</name>
      <anchorfile>classph_1_1_t_receiver_measurement_estimator.html</anchorfile>
      <anchor>a0af0d6308680deb3e89015a68d532452</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::TReferencedPrimitiveGetter</name>
    <filename>structph_1_1_t_referenced_primitive_getter.html</filename>
    <templarg>CDerived&lt; Primitive &gt; PrimitiveType</templarg>
    <member kind="function">
      <type></type>
      <name>TReferencedPrimitiveGetter</name>
      <anchorfile>structph_1_1_t_referenced_primitive_getter.html</anchorfile>
      <anchor>a17a677312ad35154d603affae28d5641</anchor>
      <arglist>(const PrimitiveType *const primitive)</arglist>
    </member>
    <member kind="function">
      <type>const PrimitiveType *</type>
      <name>operator()</name>
      <anchorfile>structph_1_1_t_referenced_primitive_getter.html</anchorfile>
      <anchor>a40148d5c7eea8d0df79c9831708b48a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const PrimitiveType *</type>
      <name>primitive</name>
      <anchorfile>structph_1_1_t_referenced_primitive_getter.html</anchorfile>
      <anchor>a6774c00b784ae9e7bd1eb7b9725369e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TRelaxedAtomic</name>
    <filename>classph_1_1_t_relaxed_atomic.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TRelaxedAtomic</name>
      <anchorfile>classph_1_1_t_relaxed_atomic.html</anchorfile>
      <anchor>a6044f74fedc045d7c17748d685be8fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TRelaxedAtomic</name>
      <anchorfile>classph_1_1_t_relaxed_atomic.html</anchorfile>
      <anchor>a2ac6f9a58c9699fff1392cdeafcfe1ac</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>relaxedRead</name>
      <anchorfile>classph_1_1_t_relaxed_atomic.html</anchorfile>
      <anchor>a95caf6f25cae0b472ea395f40867ca57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxedWrite</name>
      <anchorfile>classph_1_1_t_relaxed_atomic.html</anchorfile>
      <anchor>ae2bab6464016de163e51afbc1f3042a7</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>relaxedFetchAdd</name>
      <anchorfile>classph_1_1_t_relaxed_atomic.html</anchorfile>
      <anchor>ae2f2473933d8e0f3c8fcad50a5be6d8d</anchor>
      <arglist>(T value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TriFace</name>
    <filename>classph_1_1_tri_face.html</filename>
    <member kind="function">
      <type></type>
      <name>TriFace</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>a98859dd2c5894ccb83690eaf0ab6baf2</anchor>
      <arglist>(std::size_t index, std::array&lt; math::Vector3R, 3 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoords</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>ab1dcf69e9200eac9f1e0cf99fb6b1bb3</anchor>
      <arglist>(std::array&lt; math::Vector3R, 3 &gt; texCoords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShadingNormals</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>a4cda0e0598fea28476613dc353fa24cd</anchor>
      <arglist>(std::array&lt; math::Vector3R, 3 &gt; shadingNormals)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getIndex</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>a4788770320226623f0f5c5044e847c44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; math::Vector3R, 3 &gt; &amp;</type>
      <name>getVertices</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>aaf2a8a9cf537f3f5cf97c3337df3ac33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; math::Vector3R, 3 &gt; &amp;</type>
      <name>getTexCoords</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>a13ceaeb99e11ba4700d765d44e6efe1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; math::Vector3R, 3 &gt; &amp;</type>
      <name>getShadingNormals</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>a10c165a6e4e4009a6b6f4afb986cb9ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoords</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>aaf4860624142fd4edf76db5a4018dfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasShadingNormals</name>
      <anchorfile>classph_1_1_tri_face.html</anchorfile>
      <anchor>a2f3c5d78bfb04e8f1a373012e1f9af88</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TrowbridgeReitz</name>
    <filename>classph_1_1_trowbridge_reitz.html</filename>
    <base>ph::ShapeInvariantMicrofacet</base>
    <member kind="function">
      <type></type>
      <name>TrowbridgeReitz</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>aa767f1d57eeef778bc84b2f5d3a91915</anchor>
      <arglist>(EMaskingShadowing maskingShadowingType)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::array&lt; real, 2 &gt;</type>
      <name>getAlphas</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>a0ffebe60527177de92f632fc0effd28f</anchor>
      <arglist>(const SurfaceHit &amp;X) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>real</type>
      <name>lambda</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>a6c878329d85a7adeea045e0204e496ee</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;unitDir, const std::array&lt; real, 2 &gt; &amp;alphas) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>real</type>
      <name>distribution</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>a2aa124197f17767b9c7b7b29ac061371</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>sampleH</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>ab18b918f2bd6300ea031fa670c14ab1b</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleVisibleH</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>a31b5c6a5165f4aec00aae2b704f6a951</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;V, const std::array&lt; real, 2 &gt; &amp;sample, math::Vector3R *out_H) const override</arglist>
    </member>
    <member kind="function">
      <type>lta::PDF</type>
      <name>pdfSampleVisibleH</name>
      <anchorfile>classph_1_1_trowbridge_reitz.html</anchorfile>
      <anchor>a6dbf40b5a8c21337a6bc76947b75214e</anchor>
      <arglist>(const SurfaceHit &amp;X, const math::Vector3R &amp;N, const math::Vector3R &amp;H, const math::Vector3R &amp;V) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TSampledSpectrum</name>
    <filename>classph_1_1math_1_1_t_sampled_spectrum.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>typename T</templarg>
    <templarg>CSpectralSampleProps Props</templarg>
    <base>ph::math::TSpectrumBase&lt; TSampledSpectrum&lt; COLOR_SPACE, T, Props &gt;, COLOR_SPACE, T, Props::NUM_SAMPLES &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSampledSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a61032decbe99e6b5fcbcd5471abab85c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSampledSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>abb3a69aab6a2edc976ac2f3c2b147544</anchor>
      <arglist>(const TSampledSpectrum &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSampledSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a68fe4fd81693cc959721b1c0a4e13412</anchor>
      <arglist>(TSampledSpectrum &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>TSampledSpectrum &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a7af6abce99905dc028402c084c99830c</anchor>
      <arglist>(const TSampledSpectrum &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TSampledSpectrum &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a6c1352bea73eaf17dc5adbedccb7ed79</anchor>
      <arglist>(TSampledSpectrum &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TSampledSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a321c1d3e2c3f8d41ee18ef7ca3389e0a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSampledSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>abad7d1b9188b8d565101b9df536f9865</anchor>
      <arglist>(const TSampledSpectrum&lt; COLOR_SPACE, U, Props &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>makeResampled</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a077964dded2f1b98718596386e9416e5</anchor>
      <arglist>(const U *const wavelengthsNM, const U *const values, const std::size_t numPoints) -&gt; TSampledSpectrum</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval std::size_t</type>
      <name>numSamples</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a5aa2e1da30b39d61c420f2118a055369</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval std::size_t</type>
      <name>minWavelengthNM</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a224a0ed1f707ee4e3e3b0d7a7cfe13cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval std::size_t</type>
      <name>maxWavelengthNM</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>ae4231c811517c834d642c233e4b88c9d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr T</type>
      <name>sampleInterval</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a73bd287b0e267bd114e30e07ba9b4a58</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::pair&lt; T, T &gt;</type>
      <name>wavelengthRangeOf</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>acc83f67144d055128653dc6eddf15431</anchor>
      <arglist>(std::size_t sampleIndex) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TSampledSpectrum</type>
      <name>makeResampled</name>
      <anchorfile>classph_1_1math_1_1_t_sampled_spectrum.html</anchorfile>
      <anchor>a6ac0233d097d5f08d6355d1dfb4c4098</anchor>
      <arglist>(const U *wavelengthsNM, const U *values, std::size_t numPoints)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSampler</name>
    <filename>classph_1_1_t_sampler.html</filename>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type></type>
      <name>TSampler</name>
      <anchorfile>classph_1_1_t_sampler.html</anchorfile>
      <anchor>aeb94490458344a4c19807c61d44f7266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSampler</name>
      <anchorfile>classph_1_1_t_sampler.html</anchorfile>
      <anchor>afc64ec72579729c7a1b07f85adc60dfd</anchor>
      <arglist>(const math::EColorUsage sampleUsage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSampler</name>
      <anchorfile>classph_1_1_t_sampler.html</anchorfile>
      <anchor>a5f13d45380996ebf4ab56e948b80a696</anchor>
      <arglist>(const math::EColorUsage sampleUsage, const uint32 sampledChannel)</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_sampler.html</anchorfile>
      <anchor>a2f8f0c79c5c13b1df3e6750733605cc6</anchor>
      <arglist>(const TTexture&lt; OutputType &gt; &amp;texture, const SurfaceHit &amp;X) const</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_sampler.html</anchorfile>
      <anchor>ae4ec85c23665e40b14641503fcb569f5</anchor>
      <arglist>(const TTexture&lt; OutputType &gt; &amp;texture, const math::Vector3R &amp;uvw) const</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_sampler.html</anchorfile>
      <anchor>aa6bffad35350f2f99106e35045a748d7</anchor>
      <arglist>(const TTexture&lt; OutputType &gt; &amp;texture, const math::Vector2R &amp;uv) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSamplingFilm</name>
    <filename>classph_1_1_t_sampling_film.html</filename>
    <templarg>typename Sample</templarg>
    <base>ph::Film</base>
    <member kind="function">
      <type></type>
      <name>TSamplingFilm</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a0553b4a03944b4e63884579539fbe759</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSamplingFilm</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a76a3129a3f87db4402a4d70c3edca96f</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const SampleFilter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSamplingFilm</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a33c56f0b5f45f5cbb41f0f7243052127</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindowPx, const SampleFilter &amp;filter)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addSample</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a661e59e3e38663aea46eac384ffbdf6a</anchor>
      <arglist>(float64 xPx, float64 yPx, const Sample &amp;sample)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPixel</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a25ee16bbf7cccb59f25eecccbebc9309</anchor>
      <arglist>(float64 xPx, float64 yPx, const Sample &amp;sample)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a02aa2aceb9305f3f12e00ce6ffb7e170</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEffectiveWindowPx</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>aea4047228dec43fe7dcc33583c11694c</anchor>
      <arglist>(const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftEdge</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a379201ba7e3870a7f4c9c315631ad20a</anchor>
      <arglist>(bool useSoftEdge, float32 softness=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; float64 &gt;</type>
      <name>getSampleResPx</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a379969d774abecc6737efcfc112b8552</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::TAABB2D&lt; float64 &gt; &amp;</type>
      <name>getSampleWindowPx</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>ac7c2aaa7181feba14db68e85371ca2fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SampleFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a26b3d7004e65048a07c3a6874c8d1cd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SamplingFilmDimensions</type>
      <name>getDimensions</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>afe6337b459d40a5f83e9d1709ac34673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSoftEdged</name>
      <anchorfile>classph_1_1_t_sampling_film.html</anchorfile>
      <anchor>a6e56f532a54b42d6041aad95d8ae4806</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TScalarPixelTexture2D</name>
    <filename>classph_1_1_t_scalar_pixel_texture2_d.html</filename>
    <templarg>typename T</templarg>
    <base>ph::TNumericPixelTexture2D&lt; T, 1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TScalarPixelTexture2D</name>
      <anchorfile>classph_1_1_t_scalar_pixel_texture2_d.html</anchorfile>
      <anchor>aaf1fb05251c2e735a1b902f985b743d1</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::EPixelLayout alphaLayout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TScalarPixelTexture2D</name>
      <anchorfile>classph_1_1_t_scalar_pixel_texture2_d.html</anchorfile>
      <anchor>a9fce4802c96d34d02c385a17de7e50a3</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, std::size_t pixelElementIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TScalarPixelTexture2D</name>
      <anchorfile>classph_1_1_t_scalar_pixel_texture2_d.html</anchorfile>
      <anchor>a095534446e2864e51c0c67f7f7524414</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, pixel_texture::EPixelLayout alphaLayout, pixel_texture::ESampleMode sampleMode, pixel_texture::EWrapMode wrapModeS, pixel_texture::EWrapMode wrapModeT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TScalarPixelTexture2D</name>
      <anchorfile>classph_1_1_t_scalar_pixel_texture2_d.html</anchorfile>
      <anchor>ac6d27c4db32c3c177bc85ab3abeeedc1</anchor>
      <arglist>(const std::shared_ptr&lt; PixelBuffer2D &gt; &amp;pixelBuffer, std::size_t pixelElementIndex, pixel_texture::ESampleMode sampleMode, pixel_texture::EWrapMode wrapModeS, pixel_texture::EWrapMode wrapModeT)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sampleScalar</name>
      <anchorfile>classph_1_1_t_scalar_pixel_texture2_d.html</anchorfile>
      <anchor>aac0ccc58104631733c4140a7858ad2f7</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TScalarToSpectrum</name>
    <filename>classph_1_1texfunc_1_1_t_scalar_to_spectrum.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_scalar_to_spectrum.html</anchorfile>
      <anchor>a55f281414379f95be2f3e979c9e4fca0</anchor>
      <arglist>(const T scalarValue) const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_scalar_to_spectrum.html</anchorfile>
      <anchor>a47845664ab5bd143e80a507f5c22bcb3</anchor>
      <arglist>(const std::array&lt; T, 1 &gt; &amp;scalarValue) const</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_scalar_to_spectrum.html</anchorfile>
      <anchor>a512700f2f79ec66351af34b3784f128d</anchor>
      <arglist>(const math::TArithmeticArray&lt; T, 1 &gt; &amp;scalarValue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdl</name>
    <filename>classph_1_1_t_sdl.html</filename>
    <templarg>typename StaticT</templarg>
  </compound>
  <compound kind="class">
    <name>ph::TSdl&lt; T &gt;</name>
    <filename>classph_1_1_t_sdl_3_01_t_01_4.html</filename>
    <templarg>CSdlResource T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr ESdlTypeCategory</type>
      <name>getCategory</name>
      <anchorfile>classph_1_1_t_sdl_3_01_t_01_4.html</anchorfile>
      <anchor>a8ee96977b5ceb5d0a4595e8bb235c26a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; T &gt;</type>
      <name>makeResource</name>
      <anchorfile>classph_1_1_t_sdl_3_01_t_01_4.html</anchorfile>
      <anchor>ac760ecdae17b55b866e6f6c79d980df4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>make</name>
      <anchorfile>classph_1_1_t_sdl_3_01_t_01_4.html</anchorfile>
      <anchor>ade0a4aea2fffbf87a27b0fcc68a1139b</anchor>
      <arglist>(DeducedArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; T &gt;</type>
      <name>loadResource</name>
      <anchorfile>classph_1_1_t_sdl_3_01_t_01_4.html</anchorfile>
      <anchor>a8d2244c96bfabfe2e0ec614130fbf393</anchor>
      <arglist>(const Path &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>saveResource</name>
      <anchorfile>classph_1_1_t_sdl_3_01_t_01_4.html</anchorfile>
      <anchor>a47fd32f5ad2a91129d83fd488c90ba96</anchor>
      <arglist>(const std::shared_ptr&lt; T &gt; &amp;resource, const Path &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdl&lt; void &gt;</name>
    <filename>classph_1_1_t_sdl_3_01void_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>makeResource</name>
      <anchorfile>classph_1_1_t_sdl_3_01void_01_4.html</anchorfile>
      <anchor>a3eff7ea237b50001863262b0603dd3e5</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlAbstractValue</name>
    <filename>classph_1_1_t_sdl_abstract_value.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Owner</templarg>
    <base>ph::TSdlOwnedField&lt; Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlAbstractValue</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>ad906545a624880c6b73a3cb33338fd2c</anchor>
      <arglist>(std::string typeName, std::string valueName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlAbstractValue</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>ac06073bb0c9f0f35d259dd0d9a3c4a2b</anchor>
      <arglist>(std::string typeName, std::string valueName, std::string typeSignature)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>a2fc84cde951e3b9fbcd1e24d460452de</anchor>
      <arglist>(const T &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>a201be0b8fd5495f86a697cc76c604bb4</anchor>
      <arglist>(Owner &amp;owner, T value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>a71eb27a0c108f1b9522debd765a15d60</anchor>
      <arglist>(Owner &amp;owner) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const T *</type>
      <name>getConstValue</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>a7c1f2866bb456c30a9a767f75d4ec3a4</anchor>
      <arglist>(const Owner &amp;owner) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>af41291d1127e38310ee384e1fc25b4ee</anchor>
      <arglist>(Owner &amp;owner) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>ab92e6210089863cdc1f60c61b366a152</anchor>
      <arglist>(Owner &amp;owner) const override=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueToString</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>a0c77854a8cb1c67f8fe7fb9b0ce0bb7f</anchor>
      <arglist>(const Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedResources</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>a9225bc40b3b3d390ad8607186fb745f1</anchor>
      <arglist>(const Owner &amp;owner, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>ad2346c39a0eaac51ae8e9da8a2bcd4e2</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_abstract_value.html</anchorfile>
      <anchor>aa3d61b8d91705ed5a738744d6350060d</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlAccessorVariant</name>
    <filename>classph_1_1_t_sdl_accessor_variant.html</filename>
    <templarg>typename Variant</templarg>
    <member kind="typedef">
      <type>Variant</type>
      <name>VariantType</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>a1ea9fcce9f59b55084433d360dd840de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlAccessorVariant</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>aa10d43109289d345bbfc4eef24b05282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlAccessorVariant</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>a464cfe28dbe9fea03654160016f49f45</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlAccessorVariant</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>ac1ec7c6b3e7e7767aa62e82e7fd26031</anchor>
      <arglist>(VariantType variant)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>a89f8340cd35caf7f3cac6a83ce84a0e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>a2654bf148e4e4429445f5b167f234661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>af77583389dd340b4d4724860121e2a55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>ac7eef8828f425d662f40db20f91bfe2c</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>adeb801ddf7dd0ad3d2b311c351990324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>aa3c0faeac4d7325a4e67cebd8861fec6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getVariant</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>a88c9b73f7cc59a250d5683cdfdcb0068</anchor>
      <arglist>() -&gt; VariantType &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getVariant</name>
      <anchorfile>classph_1_1_t_sdl_accessor_variant.html</anchorfile>
      <anchor>a7876b1933b3566ebb91de075b8f31e09</anchor>
      <arglist>() const -&gt; const VariantType &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlAnyInstance</name>
    <filename>classph_1_1_t_sdl_any_instance.html</filename>
    <templarg>bool IS_CONST</templarg>
    <member kind="function">
      <type></type>
      <name>TSdlAnyInstance</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a47de546d8e25937c98fd8405129db0cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlAnyInstance</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a382c12097f7beff39b38f14cfff84440</anchor>
      <arglist>(std::nullptr_t target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlAnyInstance</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a29efa116ba99f92e669f6c2e5e9939c3</anchor>
      <arglist>(T *target)</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a61433a680c88d952fff6fa7011670469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlClass *</type>
      <name>getClass</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a26e19e41dc4ef43bc2f5e05d034afd3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlStruct *</type>
      <name>getStruct</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a2c2adf949c203e3ce9b7f9274c4297a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SdlFunction *</type>
      <name>getFunction</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a50d576217b2aff214e7c035a05819313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClass</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a4f6690daaa6e29e179f3c1f93ef04ea0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStruct</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a223b4a78d2a94a5f4def4b5491dff5ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFunction</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a2c571c00f4f3705df6fe46b588d9db66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ISdlInstantiable *</type>
      <name>getInstantiable</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>a2c16a470d7e61577274a198713aed346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_t_sdl_any_instance.html</anchorfile>
      <anchor>ae6169cfab90a37f826cc094abf4f5589</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlBool</name>
    <filename>classph_1_1_t_sdl_bool.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlBool</name>
      <anchorfile>classph_1_1_t_sdl_bool.html</anchorfile>
      <anchor>a7bd50827020198601cd8474656e4d0c3</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_bool.html</anchorfile>
      <anchor>a750939fef085f6786a3b7c9f54aa1a47</anchor>
      <arglist>(const bool &amp;value) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_bool.html</anchorfile>
      <anchor>ac43920c2447f8a47119bdacccee440b0</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_bool.html</anchorfile>
      <anchor>aa8a9bf281610615acdfbeef23dac7aff</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_bool.html</anchorfile>
      <anchor>a554bc71a4c56129d60b8d2dc19b5c193</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlBruteForceFieldSet</name>
    <filename>classph_1_1_t_sdl_brute_force_field_set.html</filename>
    <templarg>typename BaseFieldType</templarg>
    <templarg>std::size_t MAX_FIELDS</templarg>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="typedef">
      <type>BaseFieldType</type>
      <name>FieldType</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>a87808b70ef6a69d7db13986205bb3e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>a654ed198169274c357fda43c20ba8e51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BaseFieldType *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>ae60f0a96ae9b1e2c48e04f31a3e93453</anchor>
      <arglist>(const std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addField</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>ac4be67154288e58c9585dced7c0fcb96</anchor>
      <arglist>(T field) -&gt; TSdlBruteForceFieldSet &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addFields</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>a83616d63b9e0ae8c289f53aad935a2a4</anchor>
      <arglist>(TSdlBruteForceFieldSet&lt; OtherBaseFieldType, OTHER_MAX_FIELDS &gt; fields) -&gt; TSdlBruteForceFieldSet &amp;</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>findFieldIndex</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>a5c220fb0c1fb5ad9336ea7ca33b9dc67</anchor>
      <arglist>(const std::string_view typeName, const std::string_view fieldName) const</arglist>
    </member>
    <member kind="function">
      <type>const BaseFieldType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>ae5150eb0d3e2661598dde4283676d744</anchor>
      <arglist>(const std::size_t index) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TSdlBruteForceFieldSet</name>
      <anchorfile>classph_1_1_t_sdl_brute_force_field_set.html</anchorfile>
      <anchor>a54599725ccf86a40f6b927371db3c09e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlEnum</name>
    <filename>classph_1_1_t_sdl_enum.html</filename>
    <templarg>typename EnumType</templarg>
    <member kind="function">
      <type>EnumType</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_sdl_enum.html</anchorfile>
      <anchor>ad4283338409ae03e8df86e38f2131eab</anchor>
      <arglist>(std::string_view entryName) const</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_sdl_enum.html</anchorfile>
      <anchor>a5bfc9f8d8fe04b9d1918c73a25644e6b</anchor>
      <arglist>(EnumType enumValue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlEnumField</name>
    <filename>classph_1_1_t_sdl_enum_field.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename EnumType</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlEnumField</name>
      <anchorfile>classph_1_1_t_sdl_enum_field.html</anchorfile>
      <anchor>a10a5f758693a6aed98e77701a1510e1e</anchor>
      <arglist>(ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlEnumField</name>
      <anchorfile>classph_1_1_t_sdl_enum_field.html</anchorfile>
      <anchor>a39ede216212e7bba7b202ed3fb514c00</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_enum_field.html</anchorfile>
      <anchor>ade9b2ea5c013e6b29bab375ffc8a9851</anchor>
      <arglist>(const EnumType &amp;value) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_enum_field.html</anchorfile>
      <anchor>af5d1a8e3c6242806f8ecc81b2851fbf7</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_enum_field.html</anchorfile>
      <anchor>a8eb51634bf5d2a035bc94b97578376a6</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_enum_field.html</anchorfile>
      <anchor>acfe7b08900461b64da77d5709d3ff374</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlGeneralEnum</name>
    <filename>classph_1_1_t_sdl_general_enum.html</filename>
    <templarg>typename InEnumType</templarg>
    <templarg>std::size_t MAX_ENTRIES</templarg>
    <base>ph::SdlEnum</base>
    <member kind="typedef">
      <type>InEnumType</type>
      <name>EnumType</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>a714d3895935a01b657ebeb63c08a9404</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlGeneralEnum</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>a4fcc78641003284c6cb86964361f1340</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>Entry</type>
      <name>getEntry</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>ab101bc00a421bdfde5daed8059e8fc3c</anchor>
      <arglist>(const std::size_t entryIndex) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numEntries</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>ac5376c1b963a76abd60bcc5a30ab0e69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>TSdlGeneralEnum &amp;</type>
      <name>addEntry</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>a88fdafb3ffa9afe6e6a95e0f65db3132</anchor>
      <arglist>(const EnumType enumValue, const std::string_view valueName, std::string description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>TEntry&lt; EnumType &gt;</type>
      <name>getTypedEntry</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>a68e1d861b93fd28d8134559b21b14c37</anchor>
      <arglist>(const std::size_t entryIndex) const</arglist>
    </member>
    <member kind="function">
      <type>TEntry&lt; EnumType &gt;</type>
      <name>getTypedEntry</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>aee950db12882c299081d419573508aff</anchor>
      <arglist>(const std::string_view entryName) const</arglist>
    </member>
    <member kind="function">
      <type>TEntry&lt; EnumType &gt;</type>
      <name>getTypedEntry</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>addf21463214a80777e6e8582e7988f00</anchor>
      <arglist>(const EnumType enumValue) const</arglist>
    </member>
    <member kind="function">
      <type>TSdlGeneralEnum &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_general_enum.html</anchorfile>
      <anchor>a222451544ae5b11e3634e89492017fba</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlInteger</name>
    <filename>classph_1_1_t_sdl_integer.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename IntType</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlInteger</name>
      <anchorfile>classph_1_1_t_sdl_integer.html</anchorfile>
      <anchor>a816bc1be06c2660436d25d16007b1925</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_integer.html</anchorfile>
      <anchor>ae5abf6fb17f3d42ef1d66cb5a61a8615</anchor>
      <arglist>(const IntType &amp;value) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_integer.html</anchorfile>
      <anchor>aa1aeff5612e9e38c7d743682e60d169f</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_integer.html</anchorfile>
      <anchor>ae80994107eb0816aacd9ef0a7b80f202</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_integer.html</anchorfile>
      <anchor>ab85b766271f083f70a1caa9ab8da8b57</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlMethod</name>
    <filename>classph_1_1_t_sdl_method.html</filename>
    <templarg>typename MethodStruct</templarg>
    <templarg>typename TargetType</templarg>
    <base>ph::SdlFunction</base>
    <member kind="typedef">
      <type>MethodStruct</type>
      <name>OwnerType</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>a489fbf1759932e46d17c59ccc3f4624d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlMethod</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>ae363dfe72186bd55e5862683e4ca3757</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>a10b614755e5c11deda44baffac85d6af</anchor>
      <arglist>(ISdlResource *resource, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numParams</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>a5044f7b08619f6262172a532f25feff7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const SdlField *</type>
      <name>getParam</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>a1ecf4719f6f20a351a4d082e7cb5ce45</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callMethod</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>a53519efb611453272cee1b8b50902655</anchor>
      <arglist>(TargetType &amp;targetType, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadParameters</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>ae8b18bdf89b3337551be88e2addf177f</anchor>
      <arglist>(MethodStruct &amp;parameterStruct, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>TSdlMethod &amp;</type>
      <name>addParam</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>aef5ab81bebf20c55c2502681d10251fb</anchor>
      <arglist>(T sdlField)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>ac1d2374d13aa4561a4772d6be3c26e40</anchor>
      <arglist>(std::string descriptionStr) -&gt; TSdlMethod &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addParam</name>
      <anchorfile>classph_1_1_t_sdl_method.html</anchorfile>
      <anchor>a7a040c56992ed0f0a85c62a6badb0d4a</anchor>
      <arglist>(T sdlField) -&gt; TSdlMethod &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlNestedField</name>
    <filename>classph_1_1_t_sdl_nested_field.html</filename>
    <templarg>typename OuterType</templarg>
    <templarg>typename InnerType</templarg>
    <base>ph::TSdlOwnedField&lt; OuterType &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlNestedField</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>aa13b54e1406c48581f8b70d211bf318d</anchor>
      <arglist>(InnerType OuterType::*innerObjPtr, const TSdlOwnedField&lt; InnerType &gt; *innerObjField)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>abeca7f31e9182d7147b061943a1927bf</anchor>
      <arglist>(OuterType &amp;outerObj) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueToString</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>af3cc9e04a0dcc69644f4dc362553c16b</anchor>
      <arglist>(const OuterType &amp;outerObj) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedResources</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>add5c309ab364e4a63631494eaac45b09</anchor>
      <arglist>(const OuterType &amp;outerObj, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>abc5fee23b1a6664a98f66f128ab10d88</anchor>
      <arglist>(OuterType &amp;outerObj) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>a97b4e51aff6b6ec15a9959f8e4e339e4</anchor>
      <arglist>(OuterType &amp;outerObj, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_nested_field.html</anchorfile>
      <anchor>a872fce0e12970e3d3fa09f800622ca04</anchor>
      <arglist>(const OuterType &amp;outerObj, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlOptionalValue</name>
    <filename>classph_1_1_t_sdl_optional_value.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Owner</templarg>
    <base>ph::TSdlAbstractValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlOptionalValue</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a45f80c42c303a7ac9636398259949ef6</anchor>
      <arglist>(std::string typeName, std::string valueName, std::optional&lt; T &gt; Owner::*valuePtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlOptionalValue</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a6ba111276dbc452e3598b2470b880e52</anchor>
      <arglist>(std::string typeName, std::string valueName, std::string typeSignature, std::optional&lt; T &gt; Owner::*valuePtr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a8ef0ad22ee17269044d7b7710f7614a8</anchor>
      <arglist>(const T &amp;value) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a459398dc34337a8e6133877365e912c2</anchor>
      <arglist>(Owner &amp;owner) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>abdac65e4ea33ebe1f5c883bfdec292f3</anchor>
      <arglist>(Owner &amp;owner, T value) const override</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>ac6abb23d44aa536892490aacda29f1d7</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getConstValue</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>ae90540279c3b888c2934501c0b9c794a</anchor>
      <arglist>(const Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a47df432c7657584b567c4a1c7a7d2ccc</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>TSdlOptionalValue &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>ab013e45ce27f9330a5bf3f15979721da</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>ababf3f094aa6418b333d05dee3cc0d87</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a616097cbcfbbd5215a16a4146a7a5a4b</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::optional&lt; T &gt; &amp;</type>
      <name>valueRef</name>
      <anchorfile>classph_1_1_t_sdl_optional_value.html</anchorfile>
      <anchor>a5c7887ee4fa5dc8831fb623f8ecd9469</anchor>
      <arglist>(Owner &amp;owner) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlOwnedField</name>
    <filename>classph_1_1_t_sdl_owned_field.html</filename>
    <templarg>typename Owner</templarg>
    <base>ph::SdlField</base>
    <member kind="function">
      <type></type>
      <name>TSdlOwnedField</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>aa65fa26eb4ea9bce115bd662d35d7835</anchor>
      <arglist>(std::string typeName, std::string valueName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlOwnedField</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a425ee860a6ab3c7b56549d1e1c181155</anchor>
      <arglist>(std::string typeName, std::string valueName, std::string typeSignature)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>ae04bf607ee06dbf3c52861cd3c463f74</anchor>
      <arglist>(Owner &amp;owner) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>valueToString</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a20ac6cf69d24558e15eb287c10fe7ea8</anchor>
      <arglist>(const Owner &amp;owner) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ownedResources</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a32c42a0d97d1ad645a095d29347f3a5a</anchor>
      <arglist>(const Owner &amp;owner, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a4b2408598240fe2ba57173c4d5637751</anchor>
      <arglist>(Owner &amp;owner) const =0</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>nativeData</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>aa809f705521119c23cd360352a26ac4c</anchor>
      <arglist>(SdlNonConstInstance instance) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromSdl</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a4c5f9946c3856e3c8c24557d07e673ca</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toSdl</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a00689959197a3049e417692979df58e0</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a21b21e74ad5b8c197abce34a7966a1c3</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a2fc810cbea9e79576103b4d4a3ed824e</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const =0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TSdlNestedField</name>
      <anchorfile>classph_1_1_t_sdl_owned_field.html</anchorfile>
      <anchor>a00318eeb6a7db3ac1e4ccbf8030eff36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlOwnerClass</name>
    <filename>classph_1_1_t_sdl_owner_class.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename FieldSet</templarg>
    <base>ph::SdlClass</base>
    <member kind="typedef">
      <type>Owner</type>
      <name>OwnerType</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a6a7ae406483f6acb9753978067165bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlOwnerClass</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a56a7cf7c60df98b0f7958898257151ff</anchor>
      <arglist>(std::string displayName)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>createResource</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a3045ee607dfd901242ee1e6990ac75b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initResource</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a5594a36d254f62132602c513c59600e8</anchor>
      <arglist>(ISdlResource &amp;resource, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initDefaultResource</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a0b8b40cd627e33c5986f1e262b3519c9</anchor>
      <arglist>(ISdlResource &amp;resource) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveResource</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>ac8e23c3ff4dc142192e6927e646714e5</anchor>
      <arglist>(const ISdlResource &amp;resource, SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a6272e3c7cbd3b5b6d3ac5f2db03c8ab2</anchor>
      <arglist>(std::string_view funcName, ISdlResource *resource, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>referencedResources</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a131d2dec7086d7248c1559f6f05aed43</anchor>
      <arglist>(const ISdlResource *targetResource, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>ac7bc33c1b0e44216ff3dce62ade8bf8c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const SdlField *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a5d0fad2a5f682b624dc410992a4a6e32</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFunctions</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>adae015ec780de787b5de939f68cea748</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const SdlFunction *</type>
      <name>getFunction</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>ada8e0ce801b13a159f80bcbee5992e76</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFieldsFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a51bc4455366694517ec859032d195bac</anchor>
      <arglist>(Owner &amp;owner, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFieldsToSdl</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a50c9f219266ce8e41493b88768143a89</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx) const</arglist>
    </member>
    <member kind="function">
      <type>const TSdlOwnedField&lt; Owner &gt; *</type>
      <name>getOwnedField</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a10054cf45110204663ff9cdc16f11a18</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerClass &amp;</type>
      <name>addField</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a6b4cf50218461ccd568eccb87a8ace35</anchor>
      <arglist>(SdlFieldType sdlField)</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerClass &amp;</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a463db4ed5deba7a7bc865b5f667f4778</anchor>
      <arglist>(StructType Owner::*structObjPtr)</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerClass &amp;</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a1046da2b3983393e3e52902442ba79c7</anchor>
      <arglist>(StructType Owner::*structObjPtr, const SdlStructFieldStump &amp;structFieldStump)</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerClass &amp;</type>
      <name>addFunction</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>ab9321b51f838c424e04abd546b28b79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a6ae857dd32691cd531c228a86332c674</anchor>
      <arglist>(std::string descriptionStr) -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>docName</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a2fa9def4a3eaffe13e9b032be0abfe55</anchor>
      <arglist>(std::string docName) -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>baseOn</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a8b4f89761ee386cfa73a01ee21be48c6</anchor>
      <arglist>() -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>allowCreateFromClass</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a4442a8e40663d4f43d05c016af8d3be2</anchor>
      <arglist>(bool allowCreateFromClass) -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addField</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a265e375c1fb7ae75c5e89f9c78c19e47</anchor>
      <arglist>(SdlFieldType sdlField) -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a9a8faa0d0f08b28235ad83b8f79a285a</anchor>
      <arglist>(StructType Owner::*const structObjPtr) -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a2e6b8b3f5a20af737fa53392be1b2395</anchor>
      <arglist>(StructType Owner::*const structObjPtr, const SdlStructFieldStump &amp;structFieldStump) -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addFunction</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>ad9b2aa80ba551717f402956439073b96</anchor>
      <arglist>() -&gt; TSdlOwnerClass &amp;</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowCreateFromClass</name>
      <anchorfile>classph_1_1_t_sdl_owner_class.html</anchorfile>
      <anchor>a5981e83bbf50e724728155754f89badc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlOwnerStruct</name>
    <filename>classph_1_1_t_sdl_owner_struct.html</filename>
    <templarg>typename StructType</templarg>
    <base>ph::SdlStruct</base>
    <member kind="typedef">
      <type>StructType</type>
      <name>OwnerType</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a175f744af2f89749d2c6bae73986649a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlOwnerStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>ab46ae4f7f6d2b8662bcc8b1d7aff4c6d</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initObject</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a44b870f3e37c9351c308dad29ccfcbe5</anchor>
      <arglist>(AnyNonConstPtr obj, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initDefaultObject</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a7547935d012a2f946e11d9e47b453f6f</anchor>
      <arglist>(AnyNonConstPtr obj) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveObject</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a08c61eee7cb5424a7c9e66d6f09f272f</anchor>
      <arglist>(AnyConstPtr obj, SdlOutputClauses &amp;clauses, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>referencedResources</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a2ebf69633ef31fcdb3c8dd3e80768583</anchor>
      <arglist>(AnyConstPtr obj, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initDefaultStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>ab127262a8d4c504adba1e202613b46c8</anchor>
      <arglist>(StructType &amp;structObj) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numFields</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a67e1f78fd7f25bc8a2f4564cef384eb3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const SdlField *</type>
      <name>getField</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>ae96324fb421f8462b09d704456e251c0</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerStruct &amp;</type>
      <name>addField</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>afbd7b9dec9b82ba2e29ca52cd7960298</anchor>
      <arglist>(T sdlField)</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerStruct &amp;</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a1abbafec2d4111feb68fb2ca6e7d846b</anchor>
      <arglist>(StructObjType StructType::*structObjPtr)</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerStruct &amp;</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a3b0379686a4682887f683ca0cd4544a5</anchor>
      <arglist>(StructObjType StructType::*structObjPtr, const SdlStructFieldStump &amp;structFieldStump)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getFields</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a8820075fcff582f27a61c65a368e9b00</anchor>
      <arglist>() const -&gt; const TSdlBruteForceFieldSet&lt; TSdlOwnedField&lt; StructType &gt; &gt; &amp;</arglist>
    </member>
    <member kind="function">
      <type>TSdlOwnerStruct &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a744ca68d5ac640c74318370297a546f1</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addField</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a31c49023d0af7eff6714b689d101aa9e</anchor>
      <arglist>(T sdlField) -&gt; TSdlOwnerStruct &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a08aa5e74a8bc62bca8686e81bd2ad954</anchor>
      <arglist>(StructObjType StructType::*const structObjPtr) -&gt; TSdlOwnerStruct &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addStruct</name>
      <anchorfile>classph_1_1_t_sdl_owner_struct.html</anchorfile>
      <anchor>a2a8c240e37344e596e8acfd63065721e</anchor>
      <arglist>(StructObjType StructType::*const structObjPtr, const SdlStructFieldStump &amp;structFieldStump) -&gt; TSdlOwnerStruct &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlPath</name>
    <filename>classph_1_1_t_sdl_path.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlPath</name>
      <anchorfile>classph_1_1_t_sdl_path.html</anchorfile>
      <anchor>a18b685ae14d62fe21dfbd479da1de7cb</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_path.html</anchorfile>
      <anchor>a8aeeebdbee22292f279b92d9757f8b04</anchor>
      <arglist>(const Path &amp;path) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_path.html</anchorfile>
      <anchor>a08c829dd730dcdbb0e72b39be70a5720</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_path.html</anchorfile>
      <anchor>a8f24e301f93421684a86a2ebc89bd64d</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_path.html</anchorfile>
      <anchor>a086095d95b194b169f7a5ad729ce747d</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlQuaternion</name>
    <filename>classph_1_1_t_sdl_quaternion.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename Element</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlQuaternion</name>
      <anchorfile>classph_1_1_t_sdl_quaternion.html</anchorfile>
      <anchor>a3d67c4d5ea8d04fd90562db5951040da</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_quaternion.html</anchorfile>
      <anchor>adf04a0628289a885a997d0d2ae66293b</anchor>
      <arglist>(const math::TQuaternion&lt; Element &gt; &amp;quat) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_quaternion.html</anchorfile>
      <anchor>a4a5a1d25531762adde9b83d3a87f780d</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_quaternion.html</anchorfile>
      <anchor>a320fb857f94a2ded622d8f0571b31331</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_quaternion.html</anchorfile>
      <anchor>ae73bdef6fc9ae9274552b1195aa155a8</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlReal</name>
    <filename>classph_1_1_t_sdl_real.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename FloatType</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlReal</name>
      <anchorfile>classph_1_1_t_sdl_real.html</anchorfile>
      <anchor>a20869280c9525f15009024ef1522f994</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_real.html</anchorfile>
      <anchor>a87d819660ece20993c9246361ec23d4a</anchor>
      <arglist>(const FloatType &amp;value) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_real.html</anchorfile>
      <anchor>a8e0df7dd74e06dca79b27f7186d94a02</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_real.html</anchorfile>
      <anchor>a52c28d05bcecfcb9c69bbaf78d5660ed</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_real.html</anchorfile>
      <anchor>a62401d3c931e6a2f3a1d12ef9be94d29</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlRealArray</name>
    <filename>classph_1_1_t_sdl_real_array.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename Element</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlRealArray</name>
      <anchorfile>classph_1_1_t_sdl_real_array.html</anchorfile>
      <anchor>a18be4ea237f9a6b55a64ea4ed6515746</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_real_array.html</anchorfile>
      <anchor>a68eeb09067d116a2220d63566fc35112</anchor>
      <arglist>(const std::vector&lt; Element &gt; &amp;realArray) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_real_array.html</anchorfile>
      <anchor>a85bbbd6cde85b0475b459d75bb583d23</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_real_array.html</anchorfile>
      <anchor>a7f4009c1db7186f176fbc90f35f4d880</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_real_array.html</anchorfile>
      <anchor>a98fa2dd19f2ca19c8a4f9cc81751d378</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlReference</name>
    <filename>classph_1_1_t_sdl_reference.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Owner</templarg>
    <base>ph::TSdlOwnedField&lt; Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlReference</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a840c5fdc21fb129882de6384c55848e4</anchor>
      <arglist>(std::string valueName, std::shared_ptr&lt; T &gt; Owner::*valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a17269378da830243a27b3b20a01a685e</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueToString</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a5764a127433be552fcb40e974c95c329</anchor>
      <arglist>(const Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedResources</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>abde378a01589e1c706d87920e24e4427</anchor>
      <arglist>(const Owner &amp;owner, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a3f655da1144129c79ff1de6d4360d822</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueRef</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>acf83e882fb49bb619a4c32839b6e17e4</anchor>
      <arglist>(Owner &amp;owner, std::shared_ptr&lt; T &gt; value) const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; T &gt; &amp;</type>
      <name>getValueRef</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a6e8bfebd43ac39ffa91847f58b86ae41</anchor>
      <arglist>(const Owner &amp;owner) const</arglist>
    </member>
    <member kind="function">
      <type>TSdlReference &amp;</type>
      <name>withImportance</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>ab8690fb635d783635d9b47d44d8cccca</anchor>
      <arglist>(EFieldImportance importance)</arglist>
    </member>
    <member kind="function">
      <type>TSdlReference &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a9b5ab92135f8ef909e6a9c3d90bbdfce</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function">
      <type>TSdlReference &amp;</type>
      <name>optional</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a165eb0f913b33349d1603e70c5335c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlReference &amp;</type>
      <name>niceToHave</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>aaa507312c26e71cdf481ea782f2d2cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlReference &amp;</type>
      <name>required</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a3b692ac4831b423e078b1acbf2997352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; ResourceType &gt;</type>
      <name>loadReference</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a2f7071609e0578c820572876d04fb0d7</anchor>
      <arglist>(const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; ResourceType &gt;</type>
      <name>loadReference</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a35363d48e0ba64aec5fd6013cb902156</anchor>
      <arglist>(std::string_view referenceName, const SdlInputContext &amp;ctx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>a3671c32593c06c0b47ee6a12a99305ca</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_reference.html</anchorfile>
      <anchor>ad52c13b2724cf8352bd765db2c6dea83</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlReferenceArray</name>
    <filename>classph_1_1_t_sdl_reference_array.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Owner</templarg>
    <base>ph::TSdlOwnedField&lt; Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlReferenceArray</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a258059a3e7037aa4a48467219004e67d</anchor>
      <arglist>(std::string valueName, std::vector&lt; std::shared_ptr&lt; T &gt; &gt; Owner::*valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a17bd1bc5f1e95562d886f86eaf383ca5</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueToString</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a4c5f9bafb9e516fa00d303bc7bdfa52b</anchor>
      <arglist>(const Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedResources</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a295fab787a4ae906aee3389a500c7b6d</anchor>
      <arglist>(const Owner &amp;owner, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a0a07c4ec56c48b9c42a22c757052bfa4</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueVec</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a66d5e3e820c03b6a7fa4ebbf27b5bd7a</anchor>
      <arglist>(Owner &amp;owner, std::vector&lt; std::shared_ptr&lt; T &gt; &gt; value) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; T &gt; &gt; &amp;</type>
      <name>getValueVec</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a1d49f2f3095d78793f7fb7a2a0387ac9</anchor>
      <arglist>(const Owner &amp;owner) const</arglist>
    </member>
    <member kind="function">
      <type>TSdlReferenceArray &amp;</type>
      <name>withImportance</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a8661ba0699a155c692c5d1abbbdcae31</anchor>
      <arglist>(EFieldImportance importance)</arglist>
    </member>
    <member kind="function">
      <type>TSdlReferenceArray &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a066f6201db8467ab72230ba6aea5fa81</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function">
      <type>TSdlReferenceArray &amp;</type>
      <name>optional</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a1bac560475bb23c3ff2728a0c914fb37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlReferenceArray &amp;</type>
      <name>niceToHave</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a3e9091d8fe693434a0c81314afaff38d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlReferenceArray &amp;</type>
      <name>required</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>ab21aa5c564472e4e0a53a7e7de518774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::shared_ptr&lt; T &gt; &gt;</type>
      <name>loadReferenceArray</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a0537c67f14016930be1107bf2bf933f8</anchor>
      <arglist>(const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>aea6b17ed56057193bafa44f1bf6d10c9</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_reference_array.html</anchorfile>
      <anchor>a5310538cad185e193f48ff27d859c32a</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlResourceBase</name>
    <filename>classph_1_1_t_sdl_resource_base.html</filename>
    <templarg>ESdlTypeCategory TYPE_CATEGORY</templarg>
    <base>ph::SdlResourceBase</base>
    <member kind="function">
      <type>ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>a3076d5c30d53b0f944141f1c8ab93a80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr ESdlTypeCategory</type>
      <name>CATEGORY</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>a1a068fe41fafa176fe5fc9526f794cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TSdlResourceBase</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>af2d14c87b87e65e94993611922c06113</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TSdlResourceBase</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>aca85d9f621bdbabf74c021a20c6bbbc4</anchor>
      <arglist>(const TSdlResourceBase &amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TSdlResourceBase</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>ab4b632a0d314414b2b594a49c309c61d</anchor>
      <arglist>(TSdlResourceBase &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TSdlResourceBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>a84825ae22d7d064f7039d4e2590c5543</anchor>
      <arglist>(const TSdlResourceBase &amp;rhs)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TSdlResourceBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_sdl_resource_base.html</anchorfile>
      <anchor>a2467f191a98775e7e3da0600fd2f79e8</anchor>
      <arglist>(TSdlResourceBase &amp;&amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlResourceIdentifier</name>
    <filename>classph_1_1_t_sdl_resource_identifier.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>bool IS_SRI</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlResourceIdentifier</name>
      <anchorfile>classph_1_1_t_sdl_resource_identifier.html</anchorfile>
      <anchor>ac00e9e24fcd34744707aa1d73f0bd592</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_resource_identifier.html</anchorfile>
      <anchor>a0e2430b4bff61ff4b8216bb4dc9ef874</anchor>
      <arglist>(const ResourceIdentifier &amp;pri) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_resource_identifier.html</anchorfile>
      <anchor>a82a2cecb2b1258885d1857bd492ac7a9</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_resource_identifier.html</anchorfile>
      <anchor>a95b967688e8303012d52d94c92eb6602</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_resource_identifier.html</anchorfile>
      <anchor>af30c1d50dfa71bc947b319690250a626</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlSpectrum</name>
    <filename>classph_1_1_t_sdl_spectrum.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlSpectrum</name>
      <anchorfile>classph_1_1_t_sdl_spectrum.html</anchorfile>
      <anchor>ac3d7509ee7943c77639713a835f95f5c</anchor>
      <arglist>(std::string valueName, const math::EColorUsage usage, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_spectrum.html</anchorfile>
      <anchor>a34eff7b1294ea28b83e58af2450686f1</anchor>
      <arglist>(const math::Spectrum &amp;spectrum) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_spectrum.html</anchorfile>
      <anchor>adf5328496d28b69c79ce6b278793a2a4</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_spectrum.html</anchorfile>
      <anchor>ad00ab6da3dd417fac00938cb8cbe304c</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_spectrum.html</anchorfile>
      <anchor>a1ed93e0412fdcee0348f22b2c72620be</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlString</name>
    <filename>classph_1_1_t_sdl_string.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlString</name>
      <anchorfile>classph_1_1_t_sdl_string.html</anchorfile>
      <anchor>a21ae7d28f20aa9f3f83b6ecb4d8a5c73</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_string.html</anchorfile>
      <anchor>a04f51d18a0539ace8f748552224adbf2</anchor>
      <arglist>(const std::string &amp;str) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_string.html</anchorfile>
      <anchor>ae02f2fe705d7582ae2ddd6c3a7bf64ff</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_string.html</anchorfile>
      <anchor>aad5f885bc791e9e2cbcf461aa29a6f11</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_string.html</anchorfile>
      <anchor>a78d2a5a2373d8ce25e124c1d61192736</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlStructArray</name>
    <filename>classph_1_1_t_sdl_struct_array.html</filename>
    <templarg>typename Struct</templarg>
    <templarg>typename Owner</templarg>
    <base>ph::TSdlOwnedField&lt; Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlStructArray</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a3eb24a397d285023f30b41eb52b91edb</anchor>
      <arglist>(std::string valueName, std::vector&lt; Struct &gt; Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a3618e27f8fa971c4eafc79e10e5b3bd4</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueToString</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>aaf94dcd9a2d605e9298ca90bd451c6e2</anchor>
      <arglist>(const Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedResources</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>affae3a3be7e61eed8f6fb81f9ed1b2b8</anchor>
      <arglist>(const Owner &amp;owner, std::vector&lt; const ISdlResource * &gt; &amp;out_resources) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a6d0dba37dcdb65deb71fd38c45b52652</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueVec</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>aef29a9456f390b83b68f7adbb82805de</anchor>
      <arglist>(Owner &amp;owner, std::vector&lt; Struct &gt; value) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Struct &gt; &amp;</type>
      <name>getValueVec</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a46950da6849037b929d045f3a30e8285</anchor>
      <arglist>(const Owner &amp;owner) const</arglist>
    </member>
    <member kind="function">
      <type>TSdlStructArray &amp;</type>
      <name>withImportance</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a962b9f46a827ca420f90280e204eef11</anchor>
      <arglist>(EFieldImportance importance)</arglist>
    </member>
    <member kind="function">
      <type>TSdlStructArray &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>abece52f62ede370959dba24dbf8c9e05</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function">
      <type>TSdlStructArray &amp;</type>
      <name>optional</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a5a9fe5953289fa916bf339c7f0058dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlStructArray &amp;</type>
      <name>niceToHave</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a4a0d1d2c5e910a6abc16f62ce15a9e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlStructArray &amp;</type>
      <name>required</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a5594e1bff029cb7963b5fa466c8af52a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a30b1900b3ab3615258b691490926f726</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a2a790838b75a2f1bdc393833f0a235e5</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::vector&lt; Struct &gt;</type>
      <name>loadStructArray</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a95948e741efc596f295de22ce4bd79f0</anchor>
      <arglist>(const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Struct</type>
      <name>loadStruct</name>
      <anchorfile>classph_1_1_t_sdl_struct_array.html</anchorfile>
      <anchor>a051d99fc944bde101816a480af62d2b7</anchor>
      <arglist>(std::string_view packetName, const SdlInputContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlValue</name>
    <filename>classph_1_1_t_sdl_value.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Owner</templarg>
    <base>ph::TSdlAbstractValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlValue</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a653f74bee1d7d8678cb5407692207b42</anchor>
      <arglist>(std::string typeName, std::string valueName, T Owner::*valuePtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSdlValue</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a5a854ad6e7bb1b98e22ca58648baa26c</anchor>
      <arglist>(std::string typeName, std::string valueName, std::string typeSignature, T Owner::*valuePtr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a33edd52855c057fdfa245bb262ce411d</anchor>
      <arglist>(const T &amp;value) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>adde07175fe1471c67a41a4db5bc61940</anchor>
      <arglist>(Owner &amp;owner) const override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a10a624c8ee21919ff7d95b5b67ac0746</anchor>
      <arglist>(Owner &amp;owner, T value) const override</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a706565be62e0104124f619c27d9f924a</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getConstValue</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a2980df26bdcefcafa2a7b235db2adf58</anchor>
      <arglist>(const Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ownedValueToDefault</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>ad359cfd99a5ba3af2d4b6fd06b093476</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getDefaultValue</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a678cdc4b8cf9471145a181bb54c3d8a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>defaultTo</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a8fd4f58c79486f537e2b5be3e5fea90d</anchor>
      <arglist>(T defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>noDefault</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>aaf3a5d8f0706185fcdc89dce00e57dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>withImportance</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>ac453ef461a90447c102b554d73c0c1c4</anchor>
      <arglist>(EFieldImportance importance)</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>description</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a16526e9153d5b25f6c4747a0dc7c1a03</anchor>
      <arglist>(std::string descriptionStr)</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>optional</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a8bee7662ed734bc6b6a57594bf3db536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>niceToHave</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>aedef1dd30568392be6c162c93489c457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>required</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>ae51505dde9bd06bb632ec19b28a9474f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSdlValue &amp;</type>
      <name>enableFallback</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>ab4af2a87fe4547644ad2b92f1743ac65</anchor>
      <arglist>(bool isFallbackEnabled)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a055ed88dc8f4061d70e1ab2b69027304</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>aa4ea44692e991b57dfacd7994b7876b5</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T &amp;</type>
      <name>valueRef</name>
      <anchorfile>classph_1_1_t_sdl_value.html</anchorfile>
      <anchor>a9fab99684804233aab237cdd50130aa1</anchor>
      <arglist>(Owner &amp;owner) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlVector2</name>
    <filename>classph_1_1_t_sdl_vector2.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename Element</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlVector2</name>
      <anchorfile>classph_1_1_t_sdl_vector2.html</anchorfile>
      <anchor>afe0836c2086baf9aa7dcbdf8d79b2a38</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_vector2.html</anchorfile>
      <anchor>a82679748e76a3563f56acccbc20517c4</anchor>
      <arglist>(const math::TVector2&lt; Element &gt; &amp;vec2) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_vector2.html</anchorfile>
      <anchor>a98be87cf3eadf670855599bad1937527</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector2.html</anchorfile>
      <anchor>ae1e5de0cf03f1faaa659776e82bdccb2</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector2.html</anchorfile>
      <anchor>a3186651a64ef1e93cf8aab8882cf5aca</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlVector3</name>
    <filename>classph_1_1_t_sdl_vector3.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename Element</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlVector3</name>
      <anchorfile>classph_1_1_t_sdl_vector3.html</anchorfile>
      <anchor>a854bfd6648d9af14355d69e372e06da3</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_vector3.html</anchorfile>
      <anchor>a6386f0a3b3faebd9000c2365d197e5af</anchor>
      <arglist>(const math::TVector3&lt; Element &gt; &amp;vec3) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_vector3.html</anchorfile>
      <anchor>a211186e67fb4ec947d6d0d03d07a8e7b</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector3.html</anchorfile>
      <anchor>ae2a22122bde286214a0552983f61169c</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector3.html</anchorfile>
      <anchor>aee00c84f808132b185a10dbabd7a4158</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlVector3Array</name>
    <filename>classph_1_1_t_sdl_vector3_array.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename Element</templarg>
    <templarg>typename SdlValueType</templarg>
    <member kind="function">
      <type></type>
      <name>TSdlVector3Array</name>
      <anchorfile>classph_1_1_t_sdl_vector3_array.html</anchorfile>
      <anchor>ae53e60ad13160aeaea76d2acce902766</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_vector3_array.html</anchorfile>
      <anchor>aaaec0777e71ee9b494acd8ad971b5151</anchor>
      <arglist>(const std::vector&lt; math::TVector3&lt; Element &gt; &gt; &amp;vec3Array) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_vector3_array.html</anchorfile>
      <anchor>a85dc982bb979ac36c901c983f9677a7f</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector3_array.html</anchorfile>
      <anchor>ab817bf18d8792b6e062c5c33d7e0f71b</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector3_array.html</anchorfile>
      <anchor>a848c9c6b2ef12b34a5289f3961fd0f1c</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSdlVector4</name>
    <filename>classph_1_1_t_sdl_vector4.html</filename>
    <templarg>typename Owner</templarg>
    <templarg>typename Element</templarg>
    <templarg>typename SdlValueType</templarg>
    <base>ph::TSdlValue&lt; T, Owner &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSdlVector4</name>
      <anchorfile>classph_1_1_t_sdl_vector4.html</anchorfile>
      <anchor>ad9b3361a05a3d4d5a7782918eda37002</anchor>
      <arglist>(std::string valueName, ValueType Owner::*const valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>valueAsString</name>
      <anchorfile>classph_1_1_t_sdl_vector4.html</anchorfile>
      <anchor>af70a004a04ac41e97e3c316082074de0</anchor>
      <arglist>(const math::TVector4&lt; Element &gt; &amp;vec4) const override</arglist>
    </member>
    <member kind="function">
      <type>SdlNativeData</type>
      <name>ownedNativeData</name>
      <anchorfile>classph_1_1_t_sdl_vector4.html</anchorfile>
      <anchor>adecdec8c75a61cdf26a66a3a7cf3f443</anchor>
      <arglist>(Owner &amp;owner) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadFromSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector4.html</anchorfile>
      <anchor>a84e4984b1f0ebcdc5480b155110a44f2</anchor>
      <arglist>(Owner &amp;owner, const SdlInputClause &amp;clause, const SdlInputContext &amp;ctx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveToSdl</name>
      <anchorfile>classph_1_1_t_sdl_vector4.html</anchorfile>
      <anchor>ae7ec6c0ad32859ccd2e8f013941b02b4</anchor>
      <arglist>(const Owner &amp;owner, SdlOutputClause &amp;out_clause, const SdlOutputContext &amp;ctx) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ph::math::detail::TSmitsSPDBasis</name>
    <filename>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</filename>
    <templarg>typename T</templarg>
    <templarg>CSpectralSampleProps SampleProps</templarg>
    <member kind="function">
      <type></type>
      <name>TSmitsSPDBasis</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>a20cf2c03e48bba7566c6c140d72bf6b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>white</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>a287dac4946cecd76b8036d8948937004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>cyan</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>a55294e675b9f649ad55c76b7c13af00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>magenta</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>ad0e607ef2516dc8a67187a4e79b22fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>yellow</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>a861db5563090d63af1d8dc65ee945653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>red</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>aeaad8b3a19ccb55ba3935b8ebd742817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>green</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>ae3ea5ff3465de0761058876666e97629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TArithmeticArray&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>blue</name>
      <anchorfile>structph_1_1math_1_1detail_1_1_t_smits_s_p_d_basis.html</anchorfile>
      <anchor>aa54ee65e3563fc9c2cf53186b139c046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSortedMap</name>
    <filename>classph_1_1_t_sorted_map.html</filename>
    <templarg>typename KeyType</templarg>
    <templarg>typename ValueType</templarg>
    <templarg>typename IsLess</templarg>
    <member kind="function">
      <type></type>
      <name>TSortedMap</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>ab4d1009f33cfa0894ec357875c527fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSortedMap</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a4ae51165500fbc163803f4a3ecb8a636</anchor>
      <arglist>(const std::size_t initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSortedMap</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a82d0736769586a6561fd2c4cca1afe89</anchor>
      <arglist>(std::size_t initialCapacity, IsLess isLess)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>map</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>acdd0b1a98a0fed91eb4cabeb7ce7a7e3</anchor>
      <arglist>(KeyType key, ValueType value)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>mapUnique</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>abdcfbbf36bec64c2812de1d36a2c282f</anchor>
      <arglist>(KeyType key, ValueType value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unmap</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>ac64673c9b3d8ef7cb4b72db1ee8f77bd</anchor>
      <arglist>(const KeyType &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unmapValues</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a2fd43a3485409f698e9e581c0543d3d0</anchor>
      <arglist>(const KeyType &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmapByIndex</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>af495ed3895a868a141eecc5292b22e9a</anchor>
      <arglist>(std::size_t valueIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numValues</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>ac82b23b4f3689ba90ef1c50cb0cbf9b2</anchor>
      <arglist>(const KeyType &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>ae0d145ad78057f90a03bf54ceef90215</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a713b9d67e3b0ca9f5db69cad29622bc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a4fef01760ee576939f73b6da2e67c102</anchor>
      <arglist>(const KeyType &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a8b7b1a2e968a4f55fb6eb54cd615225e</anchor>
      <arglist>(const KeyType &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a88be081060394582424fc06fb9d19444</anchor>
      <arglist>(const KeyType &amp;key, std::size_t ithValue) const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a18ff3bce59e18d4914cb2e6d39cd25fa</anchor>
      <arglist>(const KeyType &amp;key, std::size_t ithValue)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a609805c316a2ee2a5f98227411d378c7</anchor>
      <arglist>(std::size_t valueIndex) const</arglist>
    </member>
    <member kind="function">
      <type>ValueType &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a901326be69a5979b6c4e2cf2ecdddca6</anchor>
      <arglist>(std::size_t valueIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const KeyType &amp;, const ValueType &amp; &gt;</type>
      <name>getKeyAndValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a49691f5abed40cd286503e2bd1fffe7e</anchor>
      <arglist>(std::size_t valueIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const KeyType &amp;, ValueType &amp; &gt;</type>
      <name>getKeyAndValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a576dec4b52d31d6bcd3baced72f404ec</anchor>
      <arglist>(std::size_t valueIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>afdebc9b8afd5dc99df8f02e3bef520a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>afe41bc4e9bc9f7873787f0c65442e1a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a4fef01760ee576939f73b6da2e67c102</anchor>
      <arglist>(const KeyType &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a8b7b1a2e968a4f55fb6eb54cd615225e</anchor>
      <arglist>(const KeyType &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a88be081060394582424fc06fb9d19444</anchor>
      <arglist>(const KeyType &amp;key, std::size_t ithValue) const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>getValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a18ff3bce59e18d4914cb2e6d39cd25fa</anchor>
      <arglist>(const KeyType &amp;key, std::size_t ithValue)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a609805c316a2ee2a5f98227411d378c7</anchor>
      <arglist>(std::size_t valueIndex) const</arglist>
    </member>
    <member kind="function">
      <type>ValueType &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a901326be69a5979b6c4e2cf2ecdddca6</anchor>
      <arglist>(std::size_t valueIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const KeyType &amp;, const ValueType &amp; &gt;</type>
      <name>getKeyAndValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a49691f5abed40cd286503e2bd1fffe7e</anchor>
      <arglist>(std::size_t valueIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const KeyType &amp;, ValueType &amp; &gt;</type>
      <name>getKeyAndValue</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>a576dec4b52d31d6bcd3baced72f404ec</anchor>
      <arglist>(std::size_t valueIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>afdebc9b8afd5dc99df8f02e3bef520a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_sorted_map.html</anchorfile>
      <anchor>afe41bc4e9bc9f7873787f0c65442e1a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSortedVector</name>
    <filename>classph_1_1_t_sorted_vector.html</filename>
    <templarg>typename ValueType</templarg>
    <templarg>typename IsLess</templarg>
    <member kind="function">
      <type></type>
      <name>TSortedVector</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>acab5f4c2cb7df55290aa9ac95ffa35db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSortedVector</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a33bdce8b4aabafd3ac788795b1ce2667</anchor>
      <arglist>(const std::size_t initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSortedVector</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a741ced14d9d4d94dce6f3d44158a921e</anchor>
      <arglist>(std::size_t initialCapacity, IsLess isLess)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addValue</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a5816457bfc349781c33b6f842d647f8d</anchor>
      <arglist>(ValueType value)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>addUniqueValue</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a14d0eba2620c0966e1aff27a85060045</anchor>
      <arglist>(ValueType value)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>removeValue</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>afc250886ae4b10c3b1f5222e3f94f0fa</anchor>
      <arglist>(const ValueType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>removeValues</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>aa9d0e6ae3ed8ea5a5e52d5b60169a8af</anchor>
      <arglist>(const ValueType &amp;value, std::size_t *out_numRemovedValues=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>removeValueByIndex</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a621b320bfa8fb082042c211a44de382a</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a59d21aced60f91a51247aaf919fa5d56</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>indexOfValue</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a56fb01e3369e8c4edc65a0e23c3a09f8</anchor>
      <arglist>(const ValueType &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValue</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a6f18b027f127a4826a1a80251c17bab5</anchor>
      <arglist>(const ValueType &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numValues</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>aa209b49a0e68efa7e58a2a49f68489d5</anchor>
      <arglist>(const ValueType &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a59728805d60f13130ab6014b5e477a13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a6e3d95b78e20b095022809190a07b1b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>ae8914242294aaa2b90de1dc85e3e4214</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a4d59e52bfb038ea82988017af9c9806c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>ae8914242294aaa2b90de1dc85e3e4214</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ValueType &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_sorted_vector.html</anchorfile>
      <anchor>a4d59e52bfb038ea82988017af9c9806c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TSpectralColorSpaceDefinitionHelper</name>
    <filename>classph_1_1math_1_1_t_spectral_color_space_definition_helper.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>EColorSpace BOUND_TRISTIMULUS_COLOR_SPACE</templarg>
    <base protection="private">ph::IUninstantiable</base>
    <member kind="function" static="yes">
      <type>static consteval EColorSpace</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1math_1_1_t_spectral_color_space_definition_helper.html</anchorfile>
      <anchor>abc3ecacaa11ecc0d264e37add7d9f264</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval bool</type>
      <name>isTristimulus</name>
      <anchorfile>classph_1_1math_1_1_t_spectral_color_space_definition_helper.html</anchorfile>
      <anchor>aed34efb7593f58fb28de83b59715ae80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval EColorSpace</type>
      <name>getBoundTristimulusColorSpace</name>
      <anchorfile>classph_1_1math_1_1_t_spectral_color_space_definition_helper.html</anchorfile>
      <anchor>aee56316692198f17e19d357d0d4056f5</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TSpectrumBase</name>
    <filename>classph_1_1math_1_1_t_spectrum_base.html</filename>
    <templarg>typename Derived</templarg>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::math::TArithmeticArrayBase&lt; Derived, T, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSpectrumBase</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a13793f1b03da3fc8ae0758c8b74bea4b</anchor>
      <arglist>(const TRawColorValues&lt; U, N &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minComponent</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>af4b979cb217fc9cc782aecb88574bd3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxComponent</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5fa6c4336403db43770331c5035248b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setTransformed</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a0dcecb2f81e37f7f062e2520ce70a334</anchor>
      <arglist>(const auto &amp;srcColorValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setTransformed</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a36b87a456b0ccd59f10076aecc56e570</anchor>
      <arglist>(const ImplType &amp;srcColorValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>toTransformed</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab6899d93e82ae749473baff74be9d416</anchor>
      <arglist>(EColorUsage usage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformFrom</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5a8a4e57d88958c9e9768ecc8cc0d4bf</anchor>
      <arglist>(const auto &amp;srcColorValues, EColorSpace srcColorSpace, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformTo</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a234c98f5c092b5e01c88e07d6bd11571</anchor>
      <arglist>(auto *out_dstColorValues, EColorSpace dstColorSpace, EColorUsage usage) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setSpectral</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ae108d06dbcb8d3c10a6a054e4182e37b</anchor>
      <arglist>(const TSpectralSampleValues&lt; T &gt; &amp;sampleValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setSpectral</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>adb79829e5562723b57e907ff487c8613</anchor>
      <arglist>(const ImplType &amp;sampleValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T &gt;</type>
      <name>toSpectral</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>abbedcfdb5b487191ca316092b24c616b</anchor>
      <arglist>(EColorUsage usage) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>relativeLuminance</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5120053ee6a7d02f4d1f38119552ac2d</anchor>
      <arglist>(EColorUsage usage=EColorUsage::EMR) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinearSRGB</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>acbc1ca16de15ca5ac1f33fdd12af2401</anchor>
      <arglist>(const TRawColorValues&lt; T, 3 &gt; &amp;linearSRGB, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>TRawColorValues&lt; T, 3 &gt;</type>
      <name>toLinearSRGB</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a0519ad66f1ed0eeae6b2867e238c6a35</anchor>
      <arglist>(EColorUsage usage) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>putEnergy</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a96fa48d2d0732e5114163e62c090fb46</anchor>
      <arglist>(T energyLevel)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>setTransformed</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a6b664e4e79cb0b962e33413714e3d174</anchor>
      <arglist>(const auto &amp;srcColorValues, const EColorUsage usage) -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>setTransformed</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aec454dc934f708661bfcf9e26fde044a</anchor>
      <arglist>(const ImplType &amp;srcColorValues, const EColorUsage usage) -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>setSpectral</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aaa90e772a56f9f9ec3e5d5cc3124e545</anchor>
      <arglist>(const TSpectralSampleValues&lt; T &gt; &amp;sampleValues, const EColorUsage usage) -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>setSpectral</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ad5fbc44405da116a975772647fcb8659</anchor>
      <arglist>(const ImplType &amp;sampleValues, const EColorUsage usage) -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ad58cdb9489c07d271045fb770b461eed</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a85dc45510760e6026d759ceea0a3aea5</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>addLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a87644527c2610a09cee0bcf0f2fb92e9</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>addLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab52d1f75429c733f40cc1bf67cea9cde</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a8ef096d70a1bc8e75e4c7e7ae48e5b62</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5fea77fb91c8f995cb8a794990e13f19</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>subLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ad744ed0f908909ee03836d23611318ea</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>subLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a19a4b20333481455ebb44e0b3f708dc0</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a15602e64861b8d4b90033e87b168b846</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a3531b3d72cdee209df8075de302399ec</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab2c2c0e821a2752db5eab046a8b945a3</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aef2162b043c6e34587709916774a931d</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>div</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a90e51e4c7b0bf070959cc95ed9784288</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>div</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aa9943171a69d3c7ec425b7882bbe5f5f</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>divLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a6273db08da0c40dfde410f1eeca60fb3</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>divLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aff35cc5d69d947d5002f93de9e884c4c</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a262f8eb4c31cc5be7ae32135320e1ee7</anchor>
      <arglist>(U exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a1baaf83772ecee9aef92d76686ed2b1f</anchor>
      <arglist>(const Derived &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>adbf8ecf427a78628a7f3901cca049ea8</anchor>
      <arglist>(U exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a0049fe2ad27bea95370ce6ac38207be8</anchor>
      <arglist>(const Derived &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a10d20d0085c7f75c1cd09ea86baa357d</anchor>
      <arglist>(U exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>afc20a4a19b6712a79f08d4586fe4fcc7</anchor>
      <arglist>(const Derived &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5892fd2200f9d6d190bafa0798998678</anchor>
      <arglist>(U exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a31bc3d0d7dcfa963b5bf88bdf7bd199b</anchor>
      <arglist>(const Derived &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>sqrt</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a4083fab5bb93cfb01c24f9ac2f65ea98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>sqrtLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a54885af82b78ccf8ad4a74c85049da40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a7b50e0448ed7cc40e01ee77aed1ed0ac</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab3ac183e2e33046262b612399e4c402b</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ad2b8a87560ab65188ec7a7795eb4179d</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a4535032412a9de38c30eb5308b1d9769</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5945374aaaee95ac178306ee3bcf1d5a</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a877ad009e538b850c950464f73471e34</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a54908315882651cc81ddbfeef0563c60</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a666030e870acbd9666360893ca2049ce</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>abs</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a9dc304b7c2933c68133bf76c8683b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>absLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a6bd4a79d5a2a201602d32b2b958a4aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>rcp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>afca307cdbbb18eeb29b05968ec67e0a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>rcpLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a9d545dc5233a0f2cfc3fe8498ab2287e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>complement</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a49a3930581705ba2c88558e3e301410f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>complementLocal</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aee07bdd2bf6ad2a8fc6cccf2d9214c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a12dea26c2cb7371796c0bbdc06d8a6e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>avg</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a43155c4e80247cd2b2831599e9adbcba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a9d7c74ed57f9eb3b148e93aa58acc93d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>min</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a306125f226763f667b339d227d629794</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ac8f6534906d279ce79b81ccfc4e615e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>max</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a8db16a1737dacbcec0629f042ccba828</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>ceil</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aedee759eab6d4ba1fc96b4a110298baa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>floor</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a4c60bc682281c483ba904ec377038f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5017418f0b8b2fd8b14dc9ec97dc8c5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>lerp</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a8b30c7ef9e8c3b01cf4491862eb947ec</anchor>
      <arglist>(const Derived &amp;rhs, U factor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a11ab9e6a744eabdd639954f771223e48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNonNegative</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ac90f555143144708032eecd6910c980f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aabbf0b0d4f4d90122f70331d072aaaa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a10350fd399635b3d1ece36d85b9143bd</anchor>
      <arglist>() noexcept -&gt; typename std::array&lt; T, N &gt;::iterator</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>af4c04c18027c589965c28283c400a878</anchor>
      <arglist>() const noexcept -&gt; typename std::array&lt; T, N &gt;::const_iterator</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a6997b8f5fc568f16e38ddb359f5999ed</anchor>
      <arglist>() noexcept -&gt; typename std::array&lt; T, N &gt;::iterator</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a306531a5b52d94a8663664da7eb940b6</anchor>
      <arglist>() const noexcept -&gt; typename std::array&lt; T, N &gt;::const_iterator</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>adbc3c75c377dfa6e3e0cb236079c584a</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab687653f08af35d5a1abec23280a19d9</anchor>
      <arglist>(const Derived &amp;other, T margin) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a945f66ed8e65964d232f259b223debd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>toVector</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a423d2b7e2c2207fdad5cdc3e027d3caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setColorValues</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>af58432a65fc463fe653700d1736dfc2a</anchor>
      <arglist>(const TRawColorValues&lt; T, N &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setColorValues</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab55ac3e7a00df8e5dcf928f1b2f01546</anchor>
      <arglist>(T rawColorValue)</arglist>
    </member>
    <member kind="function">
      <type>const TRawColorValues&lt; T, N &gt; &amp;</type>
      <name>getColorValues</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a52a9f52ef8dc1e125266d8e492af633d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval EColorSpace</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a5e4aef0489eb731dc866b16ce8d17331</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>NUM_VALUES</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>af931cebc21b94191c5ee76ecb0837de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>aabf79a07f5f8811adc3f182a846c5c63</anchor>
      <arglist>(TSpectrumBase)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; T, N &gt;</type>
      <name>m</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a3da28ca9690edd63fd4536e2f01b5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setColorValues</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>af58432a65fc463fe653700d1736dfc2a</anchor>
      <arglist>(const TRawColorValues&lt; T, N &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setColorValues</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>ab55ac3e7a00df8e5dcf928f1b2f01546</anchor>
      <arglist>(T rawColorValue)</arglist>
    </member>
    <member kind="function">
      <type>const TRawColorValues&lt; T, N &gt; &amp;</type>
      <name>getColorValues</name>
      <anchorfile>classph_1_1math_1_1_t_spectrum_base.html</anchorfile>
      <anchor>a52a9f52ef8dc1e125266d8e492af633d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TSphere</name>
    <filename>classph_1_1math_1_1_t_sphere.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TSphere</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ae243baae22dd1006ac1a53b3e363b9fa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSphere</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>aaf56693e69cfd0c36c82bda33f16e256</anchor>
      <arglist>(T radius)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>af7b74dfb3c157cc22610512479e85678</anchor>
      <arglist>(const TLineSegment&lt; T &gt; &amp;segment, real *out_hitT) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a1fce08069ea53b6d55d05d76260e9f7f</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRadius</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a90f7a64a81c28785f9cd7de6481b889e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getArea</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a40953921efc58de7d774bc4abf67e1a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAABB3D&lt; T &gt;</type>
      <name>getAABB</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a52d25d0ec3ad48297444d08fa99e10bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayOverlapVolume</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>aca90b735abbabdb683b0d7feb7638982</anchor>
      <arglist>(const TAABB3D&lt; T &gt; &amp;volume) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uniformSurfaceSamplePdfA</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a90c17725b7c3c8dc5b170ee8ab70cc73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>surfaceToLatLong01</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a2b0372bb3fa26dba56ceb59370dc6f19</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>latLong01ToPhiTheta</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a8169234843c46e90276088676bb5c061</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;latLong01) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>latLong01ToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a23aa887f35059be5c35d3c226e5c49d8</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;latLong01) const</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>surfaceToPhiTheta</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a11e120d1c4c848b60c6283cb92db5386</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>phiThetaToSurface</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a6437eabb3effe3f5eb34a38e090f3fda</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;phiTheta) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TVector3&lt; T &gt;, TVector3&lt; T &gt; &gt;</type>
      <name>surfaceDerivativesWrtUv</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ae5d55bf20849f35e8347915e0b89ff8f</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;surface, SurfaceToUv surfaceToUv, T hInRadians=to_radians&lt; T &gt;(1)) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceArchimedes</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ac6900873c3c0c85a96003705a742c9b7</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceArchimedes</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ad537a29c901fd042f11cdddbedf03127</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceAbsCosThetaWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ac8b370a7fefa900a990fe52bd7421c16</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceAbsCosThetaWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a7a859e32a5d4da54f12162ed9929cc8d</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TSphere</type>
      <name>makeUnit</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a0cb0289b08521cf74ec7832fe67de73e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceArchimedes</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ac6900873c3c0c85a96003705a742c9b7</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceArchimedes</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ad537a29c901fd042f11cdddbedf03127</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceAbsCosThetaWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>ac8b370a7fefa900a990fe52bd7421c16</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>sampleToSurfaceAbsCosThetaWeighted</name>
      <anchorfile>classph_1_1math_1_1_t_sphere.html</anchorfile>
      <anchor>a7a859e32a5d4da54f12162ed9929cc8d</anchor>
      <arglist>(const std::array&lt; T, 2 &gt; &amp;sample, T *out_pdfA) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSPPMRadianceEvaluator</name>
    <filename>classph_1_1_t_s_p_p_m_radiance_evaluator.html</filename>
    <templarg>CViewpoint Viewpoint</templarg>
    <templarg>CPhoton Photon</templarg>
    <base>ph::TViewPathHandler&lt; TSPPMRadianceEvaluator&lt; Viewpoint, Photon &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>TSPPMRadianceEvaluator</name>
      <anchorfile>classph_1_1_t_s_p_p_m_radiance_evaluator.html</anchorfile>
      <anchor>af1af0a264a88247e83b7bfed3af379e4</anchor>
      <arglist>(TSpan&lt; Viewpoint &gt; viewpoints, const TPhotonMap&lt; Photon &gt; *photonMap, const Scene *scene, TSamplingFilm&lt; math::Spectrum &gt; *film, const Region &amp;statisticsRegion, const math::TVector2&lt; int64 &gt; &amp;statisticsRes, std::size_t totalPhotonPaths, std::size_t numViewRadianceSamples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>impl_onReceiverSampleStart</name>
      <anchorfile>classph_1_1_t_s_p_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a11eb0c4763692879d4666cc1d00eb936</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const math::Vector2S &amp;sampleIndex, const math::Spectrum &amp;pathThroughput)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>impl_onPathHitSurface</name>
      <anchorfile>classph_1_1_t_s_p_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a4bb8873afcfdb231798f12dbe3f87d94</anchor>
      <arglist>(std::size_t pathLength, const SurfaceHit &amp;surfaceHit, const math::Spectrum &amp;pathThroughput) -&gt; ViewPathTracingPolicy</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_onReceiverSampleEnd</name>
      <anchorfile>classph_1_1_t_s_p_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a284568f74bda6b839f19667947bdd705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_onSampleBatchFinished</name>
      <anchorfile>classph_1_1_t_s_p_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a825d9cbaee2751b45180c666566a6010</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSPSCExecutor</name>
    <filename>classph_1_1_t_s_p_s_c_executor.html</filename>
    <templarg>typename Work</templarg>
    <member kind="function">
      <type></type>
      <name>TSPSCExecutor</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a9f6b5ce0addb84a3de6294984c9612a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSPSCExecutor</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a6dfdf73fc1054ad47c06b9370768b58f</anchor>
      <arglist>(std::function&lt; void(const Work &amp;work)&gt; workProcessor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TSPSCExecutor</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a98a11651bfe5596cb1acb4d5125c45fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a0d4416821710b9c3c01b9798376a9f4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWork</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a348023aebd44b96af2d54e6aacda79a0</anchor>
      <arglist>(DeducedWork &amp;&amp;work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitAllWorks</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a75b1bd75567ccb5adcd30bdd592b42ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTermination</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a52bee5c6bbc09397af7f73ef55969c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForTermination</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>ace6ac9244a6753e4a2da159fabd10d8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::thread::id</type>
      <name>getId</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a7dd7b547217281c83d117359584375b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStarted</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>ac550b3718b38d56f5684e1ea546ee7d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkProcessor</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>aff408fe833f82bb136083d0e62ff8592</anchor>
      <arglist>(std::function&lt; void(const Work &amp;work)&gt; workProcessor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOnConsumerStart</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a3352d75b6451c17a0093f81900597d3f</anchor>
      <arglist>(std::function&lt; void(void)&gt; onConsumerStart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOnConsumerTerminate</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>ae1ccd9b88d8123367b8a194ee2a0d79d</anchor>
      <arglist>(std::function&lt; void(void)&gt; onConsumerTerminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkProcessor</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>aff408fe833f82bb136083d0e62ff8592</anchor>
      <arglist>(std::function&lt; void(const Work &amp;work)&gt; workProcessor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOnConsumerStart</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>a3352d75b6451c17a0093f81900597d3f</anchor>
      <arglist>(std::function&lt; void(void)&gt; onConsumerStart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOnConsumerTerminate</name>
      <anchorfile>classph_1_1_t_s_p_s_c_executor.html</anchorfile>
      <anchor>ae1ccd9b88d8123367b8a194ee2a0d79d</anchor>
      <arglist>(std::function&lt; void(void)&gt; onConsumerTerminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSPSCRingBuffer</name>
    <filename>classph_1_1_t_s_p_s_c_ring_buffer.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <class kind="class">ph::TSPSCRingBuffer::ConsumerGuard</class>
    <class kind="class">ph::TSPSCRingBuffer::ProducerGuard</class>
    <member kind="function">
      <type></type>
      <name>TSPSCRingBuffer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a6d6eb5deb401efda5bc5c3dcc9276f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginProduce</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>af992502e630f83e2cc73c2c88f5a719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endProduce</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>aeb59a91417d14efc6f6f40b8e16d815c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginConsume</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a9836fa5e4d4ce18d9d61d347cfdfd999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endConsume</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a13025045d3cd62d8765594964a2bdafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getHeadDistanceDirectly</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ac64eec0798a5e9d5698cd0d2aec338f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getProduceHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ad5f6ead15cf3cc87561683d57b355776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConsumeHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a903de33790d49a9d279a4ddb433d0d48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayWaitToProduce</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>af22627d9fef129b2dd6053959ae538bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayWaitToConsume</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ac46938eba07fc0e082ad615f84116cd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProducing</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>aec31b9ec9bfcfbc492b595c8babea2be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsuming</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a351cdb88dd21aa2629f17ff594b8408a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guardedProduce</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>aa2d1a5f241e2ac3e19301357343428a9</anchor>
      <arglist>(ProducerFunc func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guardedConsume</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ad8d4ab3891c65448e057e03cd8c454f3</anchor>
      <arglist>(ConsumerFunc func)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getBufferForProducer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a13671a7bf8463906834d597ffd997d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getBufferForProducer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a2991ecf63b7711cf058250b54fd839bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getBufferForConsumer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a22bd6f22356667bab0e9407fc4cd78e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getBufferForConsumer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a1cd397f38d757bb82acb3bd89ad31c01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>unsafeGetProduceHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a5b53c378bd544846f3f709db57064986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>unsafeGetConsumeHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ab27ac4c9552c62de9d1c8b83b0a85ec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>unsafeGetBufferReference</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a45b19f1f683e2ce703a9361e5212914a</anchor>
      <arglist>(const std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unsafeGetBufferReference</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ab0f98c05368d0ceb636f06ca51990d87</anchor>
      <arglist>(const std::size_t index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>nextProducerConsumerHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a01e9af14556c42635a42d4d516641792</anchor>
      <arglist>(const std::size_t currentProducerConsumerHead, const std::size_t numAdvancements=1)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getBufferForProducer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a13671a7bf8463906834d597ffd997d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getBufferForProducer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a2991ecf63b7711cf058250b54fd839bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getBufferForConsumer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a22bd6f22356667bab0e9407fc4cd78e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getBufferForConsumer</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a1cd397f38d757bb82acb3bd89ad31c01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>unsafeGetProduceHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a5b53c378bd544846f3f709db57064986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>unsafeGetConsumeHead</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ab27ac4c9552c62de9d1c8b83b0a85ec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>unsafeGetBufferReference</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>a45b19f1f683e2ce703a9361e5212914a</anchor>
      <arglist>(const std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unsafeGetBufferReference</name>
      <anchorfile>classph_1_1_t_s_p_s_c_ring_buffer.html</anchorfile>
      <anchor>ab0f98c05368d0ceb636f06ca51990d87</anchor>
      <arglist>(const std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TStableIndexDenseVector</name>
    <filename>classph_1_1_t_stable_index_dense_vector.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::integral SIndex</templarg>
    <member kind="function">
      <type></type>
      <name>TStableIndexDenseVector</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a2d2e1aca01d1661f9ad2d682417381eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TStableIndexDenseVector</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>add3cfb9b252583ac60f6c85671d73ac2</anchor>
      <arglist>(std::size_t initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type>SIndex</type>
      <name>add</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a8b32deaf8ab647802847fed8affc8c92</anchor>
      <arglist>(U &amp;&amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a5c03438dbfa96ae7effb7dffaa10e984</anchor>
      <arglist>(SIndex stableIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a8acf901b2bde3c6b638c577ab2c02c97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a72efc1170bad8b3200fd5ddf8b5d037a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIndex</type>
      <name>nextStableIndex</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>af24200f4615d0e161e6a6cd7d4dd7bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStableIndexValid</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a0d38b6e4f5952719533409c6f91c2b46</anchor>
      <arglist>(SIndex stableIndex) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>add</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>aa396ca6d3b7f9548c15d088956cb22eb</anchor>
      <arglist>(U &amp;&amp;object) -&gt; SIndex</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a874a7d59fe057c570edef8af99f513a6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a83860dba308058d3735cb1df131afeb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>acc2700e2c63684bfc6e934c20d510aa5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a3a3806f41a9e08a352685f94957d7814</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>aaa5ffd967f29d70ed6569d28ae024e8e</anchor>
      <arglist>(SIndex stableIndex)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a52c847291a8a13eaafe5710682a9c8e4</anchor>
      <arglist>(SIndex stableIndex) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>ad0fc8ca10ae316b6a3d2222d3245f36e</anchor>
      <arglist>(SIndex stableIndex)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a6c12de8f6cdb851bf1658b4e4a1f2ca9</anchor>
      <arglist>(SIndex stableIndex) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>INVALID_STABLE_INDEX</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>ac692b656ce665dc3bfaa941811b43ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a874a7d59fe057c570edef8af99f513a6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a83860dba308058d3735cb1df131afeb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>acc2700e2c63684bfc6e934c20d510aa5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a3a3806f41a9e08a352685f94957d7814</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>aaa5ffd967f29d70ed6569d28ae024e8e</anchor>
      <arglist>(SIndex stableIndex)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a52c847291a8a13eaafe5710682a9c8e4</anchor>
      <arglist>(SIndex stableIndex) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>ad0fc8ca10ae316b6a3d2222d3245f36e</anchor>
      <arglist>(SIndex stableIndex)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_stable_index_dense_vector.html</anchorfile>
      <anchor>a6c12de8f6cdb851bf1658b4e4a1f2ca9</anchor>
      <arglist>(SIndex stableIndex) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TStackSentinel</name>
    <filename>classph_1_1_t_stack_sentinel.html</filename>
    <templarg>std::size_t BUFFER_BYTES</templarg>
    <member kind="function">
      <type></type>
      <name>TStackSentinel</name>
      <anchorfile>classph_1_1_t_stack_sentinel.html</anchorfile>
      <anchor>a06e7619c2fca374b1ccf45d0d62d143a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TStackSentinel</name>
      <anchorfile>classph_1_1_t_stack_sentinel.html</anchorfile>
      <anchor>a802ecc2608bd5f7d9bd1ba22850905ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>makeUnique</name>
      <anchorfile>classph_1_1_t_stack_sentinel.html</anchorfile>
      <anchor>a4e6c9839aca51b6d213d7e25c996401f</anchor>
      <arglist>() -&gt; std::unique_ptr&lt; TStackSentinel &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TStepperReceiverMeasurementEstimator</name>
    <filename>classph_1_1_t_stepper_receiver_measurement_estimator.html</filename>
    <templarg>typename SamplingFilmType</templarg>
    <templarg>typename EstimationType</templarg>
    <base>ph::TReceiverMeasurementEstimator&lt; SamplingFilmType, EstimationType &gt;</base>
    <member kind="typedef">
      <type>TReceiverMeasurementEstimator&lt; SamplingFilmType, EstimationType &gt;</type>
      <name>Parent</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>ae37a17d27dd973d717be60dfbb83896e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TStepperReceiverMeasurementEstimator</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>aa784092ba44b791f36dd9d937f4e47ca</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TStepperReceiverMeasurementEstimator</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>a105fe1fcb67fb63a769078f72a064a2a</anchor>
      <arglist>(std::size_t numFilms, std::size_t numEstimations, Integrand integrand, SampleFilter filter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TStepperReceiverMeasurementEstimator</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>abaccc03bf5b6c173212fa5fd43b5c0a6</anchor>
      <arglist>(TStepperReceiverMeasurementEstimator &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBatchStart</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>ae768ad8ea06f9d15da622a5c4d71e838</anchor>
      <arglist>(uint64 batchNumber) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>a0512548dbad5c7ab7fddd65966304646</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const Ray &amp;ray, const math::Spectrum &amp;quantityWeight, SampleFlow &amp;sampleFlow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilmStepSize</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>a77429e243e4cb859e0fc255221842fbd</anchor>
      <arglist>(std::size_t filmIndex, std::size_t stepSize)</arglist>
    </member>
    <member kind="function">
      <type>TStepperReceiverMeasurementEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1_t_stepper_receiver_measurement_estimator.html</anchorfile>
      <anchor>a425cc25420d5c31b9db76a4adcd95ae0</anchor>
      <arglist>(TStepperReceiverMeasurementEstimator &amp;&amp;other)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TSubtract</name>
    <filename>classph_1_1texfunc_1_1_t_subtract.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_subtract.html</anchorfile>
      <anchor>a37a2ae2b010381ca6765aed7c5e2f6f6</anchor>
      <arglist>(const InputTypeA &amp;inputValueA, const InputTypeB &amp;inputValueB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TSwizzledTexture</name>
    <filename>classph_1_1_t_swizzled_texture.html</filename>
    <templarg>typename InputT</templarg>
    <templarg>typename OutputT</templarg>
    <templarg>std::size_t OUTPUT_N</templarg>
    <base>ph::TTexture&lt; OutputT &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputT &gt; &gt;</type>
      <name>InputTexRes</name>
      <anchorfile>classph_1_1_t_swizzled_texture.html</anchorfile>
      <anchor>acb92cc8b6ce1ea2eb96157b52447ef60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cvref_t&lt; decltype(std::declval&lt; InputT &gt;()[std::declval&lt; std::size_t &gt;()])&gt;</type>
      <name>InputElement</name>
      <anchorfile>classph_1_1_t_swizzled_texture.html</anchorfile>
      <anchor>aafc0f94e0ff6e90a778ba18dea6ad3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cvref_t&lt; decltype(std::declval&lt; OutputT &gt;()[std::declval&lt; std::size_t &gt;()])&gt;</type>
      <name>OutputElement</name>
      <anchorfile>classph_1_1_t_swizzled_texture.html</anchorfile>
      <anchor>a8d9cfb00abaef2fac3afc3b61446dda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSwizzledTexture</name>
      <anchorfile>classph_1_1_t_swizzled_texture.html</anchorfile>
      <anchor>a8afa19133fae7dd66a475a08711bdedc</anchor>
      <arglist>(InputTexRes inputTexture, std::array&lt; uint8, OUTPUT_N &gt; swizzleMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_swizzled_texture.html</anchorfile>
      <anchor>ace8f0408b85c72d1307ef8c6e1319b0c</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputT *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TTernaryTextureOperator</name>
    <filename>classph_1_1_t_ternary_texture_operator.html</filename>
    <templarg>typename InputTypeA</templarg>
    <templarg>typename InputTypeB</templarg>
    <templarg>typename InputTypeC</templarg>
    <templarg>typename OutputType</templarg>
    <templarg>texfunc::CTernaryOperator&lt; InputTypeA, InputTypeB, InputTypeC, OutputType &gt; OperatorType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputTypeA &gt; &gt;</type>
      <name>InputTexResA</name>
      <anchorfile>classph_1_1_t_ternary_texture_operator.html</anchorfile>
      <anchor>a8fb5701aa6923a4d6fcee9786e2c615f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputTypeB &gt; &gt;</type>
      <name>InputTexResB</name>
      <anchorfile>classph_1_1_t_ternary_texture_operator.html</anchorfile>
      <anchor>a8c3015757f34c63bf4a787f9b51488fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputTypeC &gt; &gt;</type>
      <name>InputTexResC</name>
      <anchorfile>classph_1_1_t_ternary_texture_operator.html</anchorfile>
      <anchor>a4e0cb811aa3c73bba5783507569f9eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTernaryTextureOperator</name>
      <anchorfile>classph_1_1_t_ternary_texture_operator.html</anchorfile>
      <anchor>a61112118e8aa02b41c056eebad3ff2a6</anchor>
      <arglist>(InputTexResA inputA, InputTexResB inputB, InputTexResC inputC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTernaryTextureOperator</name>
      <anchorfile>classph_1_1_t_ternary_texture_operator.html</anchorfile>
      <anchor>a3fbb727d0391d3e377993362fe1da32d</anchor>
      <arglist>(InputTexResA inputA, InputTexResB inputB, InputTexResC inputC, OperatorType op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_ternary_texture_operator.html</anchorfile>
      <anchor>a87c748fdba894a756b2ddfb9346a5185</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TTexture</name>
    <filename>classph_1_1_t_texture.html</filename>
    <templarg>typename OutputType</templarg>
    <member kind="typedef">
      <type>OutputType</type>
      <name>Output</name>
      <anchorfile>classph_1_1_t_texture.html</anchorfile>
      <anchor>a2787048f6aa536c6473203a5e925f75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTexture</name>
      <anchorfile>classph_1_1_t_texture.html</anchorfile>
      <anchor>a62e4c2afbd7c0f9bdca3b6b231f794d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TTexture</name>
      <anchorfile>classph_1_1_t_texture.html</anchorfile>
      <anchor>a7b34a75f892315e9483962c7f0ead053</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_texture.html</anchorfile>
      <anchor>aebdd56b8f1a66955cbfb9129bd43b414</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, Output *out_value) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TTriangle</name>
    <filename>classph_1_1math_1_1_t_triangle.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TBasicTriangle&lt; T &gt;</base>
  </compound>
  <compound kind="class">
    <name>ph::TTrilinearPixelTex2D</name>
    <filename>classph_1_1_t_trilinear_pixel_tex2_d.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::TMipmap&lt; T, N &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TTrilinearPixelTex2D</name>
      <anchorfile>classph_1_1_t_trilinear_pixel_tex2_d.html</anchorfile>
      <anchor>a0d60b8428614afacfb1214bbe28d18cf</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_trilinear_pixel_tex2_d.html</anchorfile>
      <anchor>a59cd939d04f66fb9f7ea8086bf52b297</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, TTexPixel&lt; T, N &gt; *const out_value) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMipLevel</name>
      <anchorfile>classph_1_1_t_trilinear_pixel_tex2_d.html</anchorfile>
      <anchor>a1c5c536302237261eeb511802f890c50</anchor>
      <arglist>(const std::size_t level, std::unique_ptr&lt; TAbstractPixelTex2D&lt; T, N &gt; &gt; texture)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TTristimulusColorSpaceDefinitionHelper</name>
    <filename>classph_1_1math_1_1_t_tristimulus_color_space_definition_helper.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>EReferenceWhite REF_WHITE</templarg>
    <base protection="private">ph::IUninstantiable</base>
    <member kind="function" static="yes">
      <type>static consteval EColorSpace</type>
      <name>getColorSpace</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_color_space_definition_helper.html</anchorfile>
      <anchor>a5a9cbf8d653e7f6a17e3dc6f5bef25fc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval bool</type>
      <name>isTristimulus</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_color_space_definition_helper.html</anchorfile>
      <anchor>a88d568e02e3b8582124def84cfb3d97c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval EReferenceWhite</type>
      <name>getReferenceWhite</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_color_space_definition_helper.html</anchorfile>
      <anchor>aa0a6b1d55a14bcb46af1bbb4fee43c75</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TTristimulusSpectrum</name>
    <filename>classph_1_1math_1_1_t_tristimulus_spectrum.html</filename>
    <templarg>EColorSpace COLOR_SPACE</templarg>
    <templarg>typename T</templarg>
    <base>ph::math::TSpectrumBase&lt; TTristimulusSpectrum&lt; COLOR_SPACE, T &gt;, COLOR_SPACE, T, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TTristimulusSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>a7b246366aabfbb0b0047bbad6d93782b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTristimulusSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>a5ca9d13baf818b5b38bdd903642f039f</anchor>
      <arglist>(const TTristimulusSpectrum &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTristimulusSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>abd28b12435a644b2b086264600ea77e2</anchor>
      <arglist>(TTristimulusSpectrum &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusSpectrum &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>a3e72512c35bf735246b97b28e111c6f0</anchor>
      <arglist>(const TTristimulusSpectrum &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusSpectrum &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>ad766257e17e3d05a02d656b235188ff8</anchor>
      <arglist>(TTristimulusSpectrum &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TTristimulusSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>a181806dcb46b3a72171851e7c855cf1a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTristimulusSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>a09fc9777fb2648e34f63137b06f63f9b</anchor>
      <arglist>(T c0, T c1, T c2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTristimulusSpectrum</name>
      <anchorfile>classph_1_1math_1_1_t_tristimulus_spectrum.html</anchorfile>
      <anchor>ab148d378142e7250dbb36c07fa9e0077</anchor>
      <arglist>(const TTristimulusSpectrum&lt; COLOR_SPACE, U &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TUnaryFromBinary</name>
    <filename>classph_1_1texfunc_1_1_t_unary_from_binary.html</filename>
    <templarg>typename InputType</templarg>
    <templarg>typename ConstantType</templarg>
    <templarg>typename OutputType</templarg>
    <templarg>CBinaryOperator&lt; InputType, ConstantType, OutputType &gt; BinaryOperatorType</templarg>
    <member kind="function">
      <type></type>
      <name>TUnaryFromBinary</name>
      <anchorfile>classph_1_1texfunc_1_1_t_unary_from_binary.html</anchorfile>
      <anchor>a8625bc150e8b0d441e23d4341bc10549</anchor>
      <arglist>(ConstantType constant)</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_unary_from_binary.html</anchorfile>
      <anchor>a4513c82732fa0e1313223aeffd2f693e</anchor>
      <arglist>(const InputType &amp;inputValue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::texfunc::TUnaryFromTernary</name>
    <filename>classph_1_1texfunc_1_1_t_unary_from_ternary.html</filename>
    <templarg>typename InputType</templarg>
    <templarg>typename ConstantTypeA</templarg>
    <templarg>typename ConstantTypeB</templarg>
    <templarg>typename OutputType</templarg>
    <templarg>CTernaryOperator&lt; InputType, ConstantTypeA, ConstantTypeB, OutputType &gt; TernaryOperatorType</templarg>
    <member kind="function">
      <type></type>
      <name>TUnaryFromTernary</name>
      <anchorfile>classph_1_1texfunc_1_1_t_unary_from_ternary.html</anchorfile>
      <anchor>a992a3286b779891841332440fea422a7</anchor>
      <arglist>(ConstantTypeA constantA, ConstantTypeB constantB)</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classph_1_1texfunc_1_1_t_unary_from_ternary.html</anchorfile>
      <anchor>a4eeb25d300398a22fb6d97842facf219</anchor>
      <arglist>(const InputType &amp;inputValue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TUnaryTextureOperator</name>
    <filename>classph_1_1_t_unary_texture_operator.html</filename>
    <templarg>typename InputType</templarg>
    <templarg>typename OutputType</templarg>
    <templarg>texfunc::CUnaryOperator&lt; InputType, OutputType &gt; OperatorType</templarg>
    <base>ph::TTexture&lt; OutputType &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TTexture&lt; InputType &gt; &gt;</type>
      <name>InputTexRes</name>
      <anchorfile>classph_1_1_t_unary_texture_operator.html</anchorfile>
      <anchor>ad7d1c0c7067c329b623c949531e485fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TUnaryTextureOperator</name>
      <anchorfile>classph_1_1_t_unary_texture_operator.html</anchorfile>
      <anchor>a63bdf0e3ab7b191a3fc026237e41ade7</anchor>
      <arglist>(InputTexRes inputTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TUnaryTextureOperator</name>
      <anchorfile>classph_1_1_t_unary_texture_operator.html</anchorfile>
      <anchor>a4f2231a9537c013c487ce34a76ff2dd5</anchor>
      <arglist>(InputTexRes inputTexture, OperatorType op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_t_unary_texture_operator.html</anchorfile>
      <anchor>a96eaed5578704b7738a8b1705f28ed4e</anchor>
      <arglist>(const SampleLocation &amp;sampleLocation, OutputType *const out_value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TUniformRandomBitGenerator</name>
    <filename>classph_1_1math_1_1_t_uniform_random_bit_generator.html</filename>
    <templarg>typename Derived</templarg>
    <templarg>typename Bits</templarg>
    <member kind="typedef">
      <type>Bits</type>
      <name>BitsType</name>
      <anchorfile>classph_1_1math_1_1_t_uniform_random_bit_generator.html</anchorfile>
      <anchor>aa13f29ce389f9ca6923db6d57c321f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Bits</type>
      <name>generate</name>
      <anchorfile>classph_1_1math_1_1_t_uniform_random_bit_generator.html</anchorfile>
      <anchor>a7d80a8039331e2598bcf810f040c34d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TargetBits</type>
      <name>generate</name>
      <anchorfile>classph_1_1math_1_1_t_uniform_random_bit_generator.html</anchorfile>
      <anchor>a17426cbcd7f907353f69c8fd221ea613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TargetSample</type>
      <name>generateSample</name>
      <anchorfile>classph_1_1math_1_1_t_uniform_random_bit_generator.html</anchorfile>
      <anchor>a4f41fd59f45b3ffa4c0b87aaac2b4110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpAhead</name>
      <anchorfile>classph_1_1math_1_1_t_uniform_random_bit_generator.html</anchorfile>
      <anchor>a5625f2352734462e59bb9b8e1312415a</anchor>
      <arglist>(uint64 distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_uniform_random_bit_generator.html</anchorfile>
      <anchor>a1d1b134b34b60f96bf2249be367d377f</anchor>
      <arglist>(TUniformRandomBitGenerator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TUniquePtrVector</name>
    <filename>classph_1_1_t_unique_ptr_vector.html</filename>
    <templarg>typename BaseType</templarg>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type>T *</type>
      <name>add</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a70ad843fa802ef567675c901a5673837</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; uniquePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAll</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a7a3071290fe2ea27f9a4498624eef0b0</anchor>
      <arglist>(TUniquePtrVector&lt; T &gt; &amp;uniquePtrs)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BaseType &gt;</type>
      <name>remove</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a16a74e4426744c01984b3d758bf8163f</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BaseType &gt;</type>
      <name>remove</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>af436908ed2cbb2abb5f74afca05281fa</anchor>
      <arglist>(const BaseType *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BaseType &gt;</type>
      <name>removeLast</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a4f2502aa6543bc93c05baa47538880a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BaseType &gt;</type>
      <name>removeBySwapPop</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a9bec39622b367399d32b4f06cdca0791</anchor>
      <arglist>(const BaseType *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a45643bfda0eafa1b11d86fc97e5c94a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a0cf0c1768f88a00206e5b3a1ed34eb7f</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRange</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a4e8f125de99cb6aadd6bb799534a80bf</anchor>
      <arglist>(std::size_t beginIndex, std::size_t endIndex)</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>af7b4dc54c2a99fdccd67677fbbd7b1d1</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>first</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a40c80ce41808d2b3bf37a5adc7b66dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>last</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a4a5d6cb31bb19334c079a9900186507c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BaseType &gt; &amp;</type>
      <name>getUniquePtr</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a5e096507a6cc4687e7ee9e931b8ef30d</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const std::unique_ptr&lt; BaseType &gt; &amp;</type>
      <name>getUniquePtr</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a304fe4c9a6071e5a45d79e15f84f7bf6</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>ae0769f23b056e0bf0b2d3fce8871f844</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::size_t &gt;</type>
      <name>indexOf</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a6897dac3f6ac84d9b242b063f16a574d</anchor>
      <arglist>(const BaseType *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>abf90c7062daac272bca480906917efe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>operator[]</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a4f0975d8a0dcbfa9adde4df5ddda99f2</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a85178282d675c9f5dff53f4957c7d24a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>acdfc5e1db35db1f1b256b6e197af2da3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a98c68351260813c4d69489a3691d8d1e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a25aefdb7ea190d7b839470448e71a5c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a85178282d675c9f5dff53f4957c7d24a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>acdfc5e1db35db1f1b256b6e197af2da3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a98c68351260813c4d69489a3691d8d1e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; BaseType &gt; &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classph_1_1_t_unique_ptr_vector.html</anchorfile>
      <anchor>a25aefdb7ea190d7b839470448e71a5c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TUrbg32x2</name>
    <filename>classph_1_1math_1_1_t_urbg32x2.html</filename>
    <templarg>CURBG URBG1</templarg>
    <templarg>CURBG URBG2</templarg>
    <base>ph::math::TUniformRandomBitGenerator&lt; TUrbg32x2&lt; URBG1, URBG1 &gt;, uint64 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_urbg32x2.html</anchorfile>
      <anchor>a2443836a75beb35edd08b4e2964956ad</anchor>
      <arglist>(TUrbg32x2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TUrbg32x2</name>
      <anchorfile>classph_1_1math_1_1_t_urbg32x2.html</anchorfile>
      <anchor>a28700e0f941a78d2e23da97491ed5576</anchor>
      <arglist>(URBG1 urbg1, URBG2 urbg2)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>impl_generate</name>
      <anchorfile>classph_1_1math_1_1_t_urbg32x2.html</anchorfile>
      <anchor>a0b11b5a9db0aa1bb1ea55e436d7eed6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jumpAhead</name>
      <anchorfile>classph_1_1math_1_1_t_urbg32x2.html</anchorfile>
      <anchor>a471b6bb666c5e6a920fe8e4cd64b8687</anchor>
      <arglist>(uint64 distance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TVector2</name>
    <filename>classph_1_1math_1_1_t_vector2.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TVectorNBase&lt; TVector2&lt; T &gt;, T, 2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TVector2</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a39312b6d40af77d6339b4c04c2d3a2e5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector2</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a4dd57b4fac813680908729c76391f340</anchor>
      <arglist>(const TVector2 &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector2</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a6055b72c8970fdd84aaf56040d883da1</anchor>
      <arglist>(TVector2 &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>TVector2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a36dda63694e8b959e62e15c8537b18f5</anchor>
      <arglist>(const TVector2 &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TVector2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a46ab1de9decd89ae49cf03ac82647348</anchor>
      <arglist>(TVector2 &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TVector2</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a5ec6673fe878ee2e4147f0795c4d048b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector2</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a11e68ce4c19595d54cd60cfdeaf0bdc8</anchor>
      <arglist>(T vx, T vy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector2</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>ac7705018968dcdca72a0c7187bf044dd</anchor>
      <arglist>(const TVector2&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; U &gt;</type>
      <name>losslessCast</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a0dd2a0a16cc1b42f3b999102357c8eb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a03c5e56839820da78b52d2db0281f065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>af3065a5fa872cdb3f2291a84824d5d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a91edae4031154e23f9406acaefd12a69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a1c876abb41e5d04f4e2af29a523388df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>u</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>ae24dc73e8bb8bf3dfbf56b51ae855938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>v</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>ae837e07929b406003be210c2a4986f65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>u</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>a2653530391513ac1a83e463566cabcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>v</name>
      <anchorfile>classph_1_1math_1_1_t_vector2.html</anchorfile>
      <anchor>ac31515ceecfeef45119ce3b13b93ff53</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TVector3</name>
    <filename>classph_1_1math_1_1_t_vector3.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TVectorNBase&lt; TVector3&lt; T &gt;, T, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>aa439205ee8bbc31427949ec1d8333b63</anchor>
      <arglist>(TVector3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>aa037e1d46f98b670d3e20c8e64a03371</anchor>
      <arglist>(T vx, T vy, T vz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>ae6a9fedcf2ee394b872bd91a65362d23</anchor>
      <arglist>(const TVector3&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>rotate</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a9ae90d501206096e82065e6cb41914e2</anchor>
      <arglist>(const TQuaternion&lt; T &gt; &amp;rotation) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a66e0aaed97539f378d8beb1f04005860</anchor>
      <arglist>(const TQuaternion&lt; T &gt; &amp;rotation, TVector3 *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>cross</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>af997e9ea9607169887f9065835d760c0</anchor>
      <arglist>(const TVector3 &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cross</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>aa844c114831b671e91b3bdb66978fbeb</anchor>
      <arglist>(const TVector3 &amp;rhs, TVector3 *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>maddLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a2a4d184546453e7438f498f88a869af1</anchor>
      <arglist>(T multiplier, const TVector3 &amp;adder)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>reflect</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>ae7c764af4b9fdc3f2df2c84f83964d78</anchor>
      <arglist>(const TVector3 &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>reflectLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a43c7966a1ff5c4b6c39efea8fb5d591e</anchor>
      <arglist>(const TVector3 &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a942aa342bbec80ae855819c1fb54f900</anchor>
      <arglist>(TVector3 *out_result) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a8d0eb557cecca2a3e07326c409b2c16b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a0a5f0880f6b82a8519416ca9a987818b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>z</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a34d51b9c12196175c8ad04c2cd9c59ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>adeadc5ae4d7e27df3606a6c28551932b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a7e31b8f7b64dee128335cda720e6be9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>z</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a94c017c39481ba5ba44e499bd2d3d632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>r</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>ab7d370df0f9a455f564b783ef06b2a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>g</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>af6aaff5a605a81a6b87de3aaa6d2c93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>b</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>aeb33d446be21b99021edb91ed9e0de0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>r</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a2531cf6d15cb33bb184c1cdcc17f0a67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>g</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>a6f39192d00e5fcd097ca11e837d7bb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>b</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>ac9c4738a1fbd7475d69dfe01023b8ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TVector3</type>
      <name>weightedSum</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>aa6bda4ccbf865e8b73964e61ddf8eba8</anchor>
      <arglist>(const TVector3 &amp;vA, T wA, const TVector3 &amp;vB, T wB, const TVector3 &amp;vC, T wC)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TVector3</type>
      <name>lerp</name>
      <anchorfile>classph_1_1math_1_1_t_vector3.html</anchorfile>
      <anchor>ab2090d199e3e7eab7bd58f752533182d</anchor>
      <arglist>(const TVector3 &amp;vA, const TVector3 &amp;vB, T parametricT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TVector4</name>
    <filename>classph_1_1math_1_1_t_vector4.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TVectorNBase&lt; TVector4&lt; T &gt;, T, 4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>ab5ae805c1ffffc74ffe31445b74781b8</anchor>
      <arglist>(TVector4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector4</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>ab66d1daabd8928f57836fa17baed7d49</anchor>
      <arglist>(T vx, T vy, T vz, T vw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector4</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a80379fae78a9c461f2d39cc432c6cc89</anchor>
      <arglist>(const TVector4&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>ab89f2fc2fdc4447d1a24fde790a55bfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a7b243bbb45ac0c1c2aef11c89d457de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>z</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>ae192edc36e1a5da4e1b3c1899ecc9875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>w</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a5d951102492826371b89327b2aec446e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>x</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a54d6b657be944f07ac87cf0812da377f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>y</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a97c73e9b5934b49f2c9ce665217b9780</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>z</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>acc1c4060c18a694a5e3577ca6c5afef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>w</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a43b696f3a667776c7a8b42cb595fb76a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>r</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a1fa28093fecb4f8c04617cdd44deb90a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>g</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a36e62e19f7d772709eeb55fa7af36ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>b</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>af0c7bb80c77c390c5a2dbdad330136b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>a</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>afe487283d4928e86ca6ebdeb50922856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>r</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>aede5c57e0bd1d3f964c43071bf9b1e80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>g</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a31ed0261ffd3f3c0dc38a700744a4135</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>b</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>a0108f3f6491752fd29c95c66374bf16f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>a</name>
      <anchorfile>classph_1_1math_1_1_t_vector4.html</anchorfile>
      <anchor>aae3f38694e9d421ff70bae870a136ddd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TVectorN</name>
    <filename>classph_1_1math_1_1_t_vector_n.html</filename>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::math::TVectorNBase&lt; TVectorN&lt; T, N &gt;, T, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>TVectorN</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>aeb8dd8dfb759994f58a2dceb482e0e21</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVectorN</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>a34ed0ebcb0fdc3a899b5a0f820965082</anchor>
      <arglist>(const TVectorN &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVectorN</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>a72eaad6d89dff3eaec70f7a415763b59</anchor>
      <arglist>(TVectorN &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>TVectorN &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>a57e899804c77b1ff0abbebf57b6e2d2f</anchor>
      <arglist>(const TVectorN &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TVectorN &amp;</type>
      <name>operator=</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>a15c72ed7770ae6429079a97e5a6d5277</anchor>
      <arglist>(TVectorN &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TVectorN</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>af6b45a5f60138f64964d7f129856970b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVectorN</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n.html</anchorfile>
      <anchor>ae951f0cb6319829130bd3e25b057b7bc</anchor>
      <arglist>(const TVectorN&lt; U, N &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TVectorNBase</name>
    <filename>classph_1_1math_1_1_t_vector_n_base.html</filename>
    <templarg>typename Derived</templarg>
    <templarg>typename T</templarg>
    <templarg>std::size_t N</templarg>
    <base>ph::math::TArithmeticArrayBase&lt; Derived, T, N &gt;</base>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a798d064dc3ff4c11b536919418b2e2d5</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a0c7e2ef1b295d908811101b26e9caa56</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>absDot</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab2bbb5734f5be195c7b0d34e5324f9e1</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>absDot</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>af9c42f1621aa8cb25fed2723feeca673</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a3e6e348db5ae530ac1813402d5227fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lengthSquared</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>acfa70203a3b892f2a545a344d5ab9e43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>safeNormalize</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aa9a25a22f7889500a3b5ff3d817b1d3d</anchor>
      <arglist>(const Derived &amp;fallback=Derived{}) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>negate</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a95415915a06f92953d0b06baba7a87f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>negateLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>acea949ae92d8c2b7c572f8618f9d1465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minDimension</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>af9d1d3b795493af388eda032711dd465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDimension</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ad68c91765bd85291c0ff2ba9c825e8e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator-</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aca4b3d38136802c92e4872ffe526695a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>negate</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a080bf9a6d99ac90c30ab6d41d55548cb</anchor>
      <arglist>() const -&gt; Derived</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>negateLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>af52afeeb4a5271c971468fd830eae289</anchor>
      <arglist>() -&gt; Derived &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aef98b3ffebf23a93abe97513e4413eb4</anchor>
      <arglist>() const -&gt; Derived</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ad9b3c4056c2371ff9bf6d680a1031b12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ad58cdb9489c07d271045fb770b461eed</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>add</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a85dc45510760e6026d759ceea0a3aea5</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>addLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a87644527c2610a09cee0bcf0f2fb92e9</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>addLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab52d1f75429c733f40cc1bf67cea9cde</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a8ef096d70a1bc8e75e4c7e7ae48e5b62</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>sub</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a5fea77fb91c8f995cb8a794990e13f19</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>subLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ad744ed0f908909ee03836d23611318ea</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>subLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a19a4b20333481455ebb44e0b3f708dc0</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a15602e64861b8d4b90033e87b168b846</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>mul</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a3531b3d72cdee209df8075de302399ec</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab2c2c0e821a2752db5eab046a8b945a3</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>mulLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aef2162b043c6e34587709916774a931d</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>div</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a90e51e4c7b0bf070959cc95ed9784288</anchor>
      <arglist>(const Derived &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>div</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aa9943171a69d3c7ec425b7882bbe5f5f</anchor>
      <arglist>(T rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>divLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a6273db08da0c40dfde410f1eeca60fb3</anchor>
      <arglist>(const Derived &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>divLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aff35cc5d69d947d5002f93de9e884c4c</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a262f8eb4c31cc5be7ae32135320e1ee7</anchor>
      <arglist>(U exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>pow</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a1baaf83772ecee9aef92d76686ed2b1f</anchor>
      <arglist>(const Derived &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>adbf8ecf427a78628a7f3901cca049ea8</anchor>
      <arglist>(U exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>powLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a0049fe2ad27bea95370ce6ac38207be8</anchor>
      <arglist>(const Derived &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a10d20d0085c7f75c1cd09ea86baa357d</anchor>
      <arglist>(U exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>exp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>afc20a4a19b6712a79f08d4586fe4fcc7</anchor>
      <arglist>(const Derived &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a5892fd2200f9d6d190bafa0798998678</anchor>
      <arglist>(U exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>expLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a31bc3d0d7dcfa963b5bf88bdf7bd199b</anchor>
      <arglist>(const Derived &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>sqrt</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a4083fab5bb93cfb01c24f9ac2f65ea98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>sqrtLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a54885af82b78ccf8ad4a74c85049da40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a7b50e0448ed7cc40e01ee77aed1ed0ac</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>clamp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab3ac183e2e33046262b612399e4c402b</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ad2b8a87560ab65188ec7a7795eb4179d</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>clampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a4535032412a9de38c30eb5308b1d9769</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a5945374aaaee95ac178306ee3bcf1d5a</anchor>
      <arglist>(T lowerBound, T upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>safeClamp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a877ad009e538b850c950464f73471e34</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a54908315882651cc81ddbfeef0563c60</anchor>
      <arglist>(T lowerBound, T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>safeClampLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a666030e870acbd9666360893ca2049ce</anchor>
      <arglist>(const Derived &amp;lowerBound, const Derived &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>abs</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a9dc304b7c2933c68133bf76c8683b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>absLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a6bd4a79d5a2a201602d32b2b958a4aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>rcp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>afca307cdbbb18eeb29b05968ec67e0a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>rcpLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a9d545dc5233a0f2cfc3fe8498ab2287e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>complement</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a49a3930581705ba2c88558e3e301410f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>complementLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aee07bdd2bf6ad2a8fc6cccf2d9214c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a12dea26c2cb7371796c0bbdc06d8a6e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>avg</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a43155c4e80247cd2b2831599e9adbcba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a5017418f0b8b2fd8b14dc9ec97dc8c5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a9d7c74ed57f9eb3b148e93aa58acc93d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>min</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a306125f226763f667b339d227d629794</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minIndex</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>abeff772645e1958b68435cc842ad52de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ac8f6534906d279ce79b81ccfc4e615e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>max</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a8db16a1737dacbcec0629f042ccba828</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxIndex</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab1777714ed85b2abc26115af89f039ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>ceil</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aedee759eab6d4ba1fc96b4a110298baa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>floor</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a4c60bc682281c483ba904ec377038f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>lerp</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a8b30c7ef9e8c3b01cf4491862eb947ec</anchor>
      <arglist>(const Derived &amp;rhs, U factor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a11ab9e6a744eabdd639954f771223e48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNonNegative</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ac90f555143144708032eecd6910c980f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>aabbf0b0d4f4d90122f70331d072aaaa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a66bef10def6b7cfc11adea52b28094e0</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ac7a8e0e0a67a56c9e1af64b9e77881fa</anchor>
      <arglist>(std::size_t index, T value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>set</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a7ee175d24dbb281117b96a60b7f1d6c5</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a10350fd399635b3d1ece36d85b9143bd</anchor>
      <arglist>() noexcept -&gt; typename std::array&lt; T, N &gt;::iterator</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>af4c04c18027c589965c28283c400a878</anchor>
      <arglist>() const noexcept -&gt; typename std::array&lt; T, N &gt;::const_iterator</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a6997b8f5fc568f16e38ddb359f5999ed</anchor>
      <arglist>() noexcept -&gt; typename std::array&lt; T, N &gt;::iterator</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a306531a5b52d94a8663664da7eb940b6</anchor>
      <arglist>() const noexcept -&gt; typename std::array&lt; T, N &gt;::const_iterator</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>adbc3c75c377dfa6e3e0cb236079c584a</anchor>
      <arglist>(const Derived &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab687653f08af35d5a1abec23280a19d9</anchor>
      <arglist>(const Derived &amp;other, T margin) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a945f66ed8e65964d232f259b223debd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>toVector</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a423d2b7e2c2207fdad5cdc3e027d3caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;</type>
      <name>toArray</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a4fc4de014adb7946df69ce2ca873d78c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TSpan&lt; T, N &gt;</type>
      <name>toSpan</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>ab31fa7a608a3b3330e39351c0e7acf9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpanView&lt; T, N &gt;</type>
      <name>toView</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a5acfe2ab947966811c66ec6241f7c723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>normalize</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a83faa5cec9beeb81bb58af4a8b1d13b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>normalizeLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a6266290d05c9bfe92d324e39f0c316fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>NUM_ELEMENTS</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>acf85cb4e182f1c93672e6ff6793119d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a5954081dfb4541480f46487b82f27b6e</anchor>
      <arglist>(TVectorNBase)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; T, N &gt;</type>
      <name>m</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a3da28ca9690edd63fd4536e2f01b5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>normalize</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a83faa5cec9beeb81bb58af4a8b1d13b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>normalizeLocal</name>
      <anchorfile>classph_1_1math_1_1_t_vector_n_base.html</anchorfile>
      <anchor>a6266290d05c9bfe92d324e39f0c316fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TViewPathHandler</name>
    <filename>classph_1_1_t_view_path_handler.html</filename>
    <templarg>typename Derived</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>ViewPathHandlerTag</name>
      <anchorfile>classph_1_1_t_view_path_handler.html</anchorfile>
      <anchor>a94118006857b7b66375b5dfe93330c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>onReceiverSampleStart</name>
      <anchorfile>classph_1_1_t_view_path_handler.html</anchorfile>
      <anchor>af2c06b953abe65d4daa3c6ce75e43a94</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const math::Vector2S &amp;sampleIndex, const math::Spectrum &amp;pathThroughput)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>onPathHitSurface</name>
      <anchorfile>classph_1_1_t_view_path_handler.html</anchorfile>
      <anchor>a5ff72abf1224c6261d36203ba5da2afb</anchor>
      <arglist>(std::size_t pathLength, const SurfaceHit &amp;surfaceHit, const math::Spectrum &amp;pathThroughput) -&gt; ViewPathTracingPolicy</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onReceiverSampleEnd</name>
      <anchorfile>classph_1_1_t_view_path_handler.html</anchorfile>
      <anchor>a53c51b990f59efa546b0016b55a396a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSampleBatchFinished</name>
      <anchorfile>classph_1_1_t_view_path_handler.html</anchorfile>
      <anchor>a15d46f6f742c2a61113000e29946179e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1_t_view_path_handler.html</anchorfile>
      <anchor>aa792b617bdf9303db422ef7b686d5f18</anchor>
      <arglist>(TViewPathHandler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TViewPathTracingWork</name>
    <filename>classph_1_1_t_view_path_tracing_work.html</filename>
    <templarg>CViewPathHandler Handler</templarg>
    <base>ph::RenderWork</base>
    <member kind="function">
      <type></type>
      <name>TViewPathTracingWork</name>
      <anchorfile>classph_1_1_t_view_path_tracing_work.html</anchorfile>
      <anchor>a849ab12964ed1600be90ad650ab893b9</anchor>
      <arglist>(Handler *handler, const Scene *scene, const Receiver *receiver, SampleGenerator *sampleGenerator, const math::TAABB2D&lt; float64 &gt; &amp;rasterSampleWindowPx, const math::TVector2&lt; int64 &gt; &amp;sampleRes)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector2S &amp;</type>
      <name>getSampleRes</name>
      <anchorfile>classph_1_1_t_view_path_tracing_work.html</anchorfile>
      <anchor>a981a93ad17e0b8686254cbf4a1f3718e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TViewpoint</name>
    <filename>classph_1_1_t_viewpoint.html</filename>
    <templarg>typename Derived</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>PMViewpointTag</name>
      <anchorfile>classph_1_1_t_viewpoint.html</anchorfile>
      <anchor>a6a223d079fc7327ea30bc52bfa837c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>get</name>
      <anchorfile>classph_1_1_t_viewpoint.html</anchorfile>
      <anchor>a3f75bf495b583037346f0a3b123d5472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classph_1_1_t_viewpoint.html</anchorfile>
      <anchor>a32f66ea7270f476e92bf66612c6cea3b</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>has</name>
      <anchorfile>classph_1_1_t_viewpoint.html</anchorfile>
      <anchor>ad7c4fb174e312457047e8983ebee9af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PH_DEFINE_INLINE_RULE_OF_5_MEMBERS</name>
      <anchorfile>classph_1_1_t_viewpoint.html</anchorfile>
      <anchor>aef09597d6edc9ed3d6d9330ca4cbfc2e</anchor>
      <arglist>(TViewpoint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::TVPMRadianceEvaluator</name>
    <filename>classph_1_1_t_v_p_m_radiance_evaluator.html</filename>
    <templarg>CPhoton Photon</templarg>
    <templarg>typename PhotonMap</templarg>
    <base>ph::TViewPathHandler&lt; Derived &gt;</base>
    <member kind="function">
      <type></type>
      <name>TVPMRadianceEvaluator</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>adba5a5177bf89372492205b3646c2636</anchor>
      <arglist>(const PhotonMap *photonMap, const Scene *scene, TSamplingFilm&lt; math::Spectrum &gt; *film)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>impl_onReceiverSampleStart</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a56dc75ebf56212ddc86173560c663bb3</anchor>
      <arglist>(const math::Vector2D &amp;rasterCoord, const math::Vector2S &amp;sampleIndex, const math::Spectrum &amp;pathThroughput)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>impl_onPathHitSurface</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>ac8d7685d11ffc94a869f18ea2c6b3225</anchor>
      <arglist>(std::size_t pathLength, const SurfaceHit &amp;surfaceHit, const math::Spectrum &amp;pathThroughput) -&gt; ViewPathTracingPolicy</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_onReceiverSampleEnd</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a1da5047b4b4643f131d24df62243e51a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_onSampleBatchFinished</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>ae89d6070084325410c9f3bab3963732a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatistics</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a6b3943b612086984a6ccfc0ce421d611</anchor>
      <arglist>(PMAtomicStatistics *statistics)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernelRadius</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>a4aefe09fa566ec3cbaadfb42071d04be</anchor>
      <arglist>(real radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStochasticSampleBeginLength</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>ad6bd402d4cf24fff91a08c7ca79daf8c</anchor>
      <arglist>(std::size_t stochasticSampleBeginLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullPathLengthRange</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>abb0e73d102515410cedf7f35fd694925</anchor>
      <arglist>(std::size_t minFullPathLength, std::size_t maxFullPathLength=PMCommonParams::DEFAULT_MAX_PATH_LENGTH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlossyMergeBeginLength</name>
      <anchorfile>classph_1_1_t_v_p_m_radiance_evaluator.html</anchorfile>
      <anchor>ab2b908e1e0262ccc77b1e6dec9258c62</anchor>
      <arglist>(uint32 glossyMergeBeginLength)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::math::TWatertightTriangle</name>
    <filename>classph_1_1math_1_1_t_watertight_triangle.html</filename>
    <templarg>typename T</templarg>
    <base>ph::math::TBasicTriangle&lt; T &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classph_1_1math_1_1_t_watertight_triangle.html</anchorfile>
      <anchor>adc72859ad8b10c66b5ef9a9e583f40ef</anchor>
      <arglist>(const TLineSegment&lt; T &gt; &amp;segment, T *out_hitT, TVector3&lt; T &gt; *out_hitBarycentricCoords) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::UniformRandomSampleSource</name>
    <filename>classph_1_1_uniform_random_sample_source.html</filename>
    <base>ph::RuntimeSampleSource</base>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_uniform_random_sample_source.html</anchorfile>
      <anchor>adcd7251add7c7d0b0bc30779fd83a56c</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_uniform_random_sample_source.html</anchorfile>
      <anchor>a1547d93a0bc7d685e6c92b669d865b0f</anchor>
      <arglist>(TSdlOwnerClass&lt; UniformRandomSampleSource &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::UvwMapper</name>
    <filename>classph_1_1_uvw_mapper.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UvwMapper</name>
      <anchorfile>classph_1_1_uvw_mapper.html</anchorfile>
      <anchor>a737514062ad8db6e32afe481c0c52541</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>posToUvw</name>
      <anchorfile>classph_1_1_uvw_mapper.html</anchorfile>
      <anchor>af0947bf95d083e9b80366c8a45244981</anchor>
      <arglist>(const math::Vector3R &amp;pos, math::Vector3R *out_uvw) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dirToUvw</name>
      <anchorfile>classph_1_1_uvw_mapper.html</anchorfile>
      <anchor>abb742ae00d391e1ef7bcae3ca3689964</anchor>
      <arglist>(const math::Vector3R &amp;dir, math::Vector3R *out_uvw) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>uvwToPos</name>
      <anchorfile>classph_1_1_uvw_mapper.html</anchorfile>
      <anchor>a8c979067f00f5d573ef3d7cbf9a7f6a0</anchor>
      <arglist>(const math::Vector3R &amp;uvw, math::Vector3R *out_pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>uvwToDir</name>
      <anchorfile>classph_1_1_uvw_mapper.html</anchorfile>
      <anchor>aff92783b50ae6005683c47124a54bddb</anchor>
      <arglist>(const math::Vector3R &amp;uvw, math::Vector3R *out_dir) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VAbsorptionOnly</name>
    <filename>classph_1_1_v_absorption_only.html</filename>
    <base>ph::VolumeMaterial</base>
    <member kind="function">
      <type></type>
      <name>VAbsorptionOnly</name>
      <anchorfile>classph_1_1_v_absorption_only.html</anchorfile>
      <anchor>a02bd905165dcc8dfb8ddbc4970bb8e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VAbsorptionOnly</name>
      <anchorfile>classph_1_1_v_absorption_only.html</anchorfile>
      <anchor>a405715b44e24a181b9d4f6c3870700b5</anchor>
      <arglist>(const math::Vector3R &amp;absorptionCoeffSrgb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VAbsorptionOnly</name>
      <anchorfile>classph_1_1_v_absorption_only.html</anchorfile>
      <anchor>ab0afd5f492509c04f45db1263063bc0f</anchor>
      <arglist>(const math::Spectrum &amp;absorptionCoeff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genVolume</name>
      <anchorfile>classph_1_1_v_absorption_only.html</anchorfile>
      <anchor>a76d73124344b5d2b314bca19f96c2aa8</anchor>
      <arglist>(const CookingContext &amp;ctx, VolumeBehavior &amp;behavior) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VanillaPMRenderer</name>
    <filename>classph_1_1_vanilla_p_m_renderer.html</filename>
    <base>ph::PMRendererBase</base>
    <member kind="function">
      <type></type>
      <name>VanillaPMRenderer</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>ab310c6eca41e3f7cdae1291bb4e8858c</anchor>
      <arglist>(PMCommonParams commonParams, Viewport viewport, SampleFilter filter, uint32 numWorkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doRender</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>a24f069d31aa72ced984f4b31e85d373b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retrieveFrame</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>a667477ac61f2981d36ef4a728ca16345</anchor>
      <arglist>(std::size_t layerIndex, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderStats</type>
      <name>asyncQueryRenderStats</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>af4e7929d62870914e7a5a3db0fa4c5b9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RenderProgress</type>
      <name>asyncQueryRenderProgress</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>a448cd4383ad88658b5e964e757e8342d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asyncPeekFrame</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>ab17937e01cf165c3fd33a3284ef82566</anchor>
      <arglist>(std::size_t layerIndex, const Region &amp;region, HdrRgbFrame &amp;out_frame) override</arglist>
    </member>
    <member kind="function">
      <type>RenderObservationInfo</type>
      <name>getObservationInfo</name>
      <anchorfile>classph_1_1_vanilla_p_m_renderer.html</anchorfile>
      <anchor>ad2afb7011642ab50e31de780504c8f4d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Vector3Film</name>
    <filename>classph_1_1_vector3_film.html</filename>
    <base>ph::TSamplingFilm&lt; math::Vector3R &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector3Film</name>
      <anchorfile>classph_1_1_vector3_film.html</anchorfile>
      <anchor>a60a8280742e7e5e0bcaf7946763afe43</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const SampleFilter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3Film</name>
      <anchorfile>classph_1_1_vector3_film.html</anchorfile>
      <anchor>a7ead172949b81c8b82ef88621640ea56</anchor>
      <arglist>(int64 actualWidthPx, int64 actualHeightPx, const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindowPx, const SampleFilter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSample</name>
      <anchorfile>classph_1_1_vector3_film.html</anchorfile>
      <anchor>aab544e68d3225d318fbe0cd44e790219</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3R &amp;sample) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classph_1_1_vector3_film.html</anchorfile>
      <anchor>a19794a29b2da7f29f6d48341224cd0d4</anchor>
      <arglist>(float64 xPx, float64 yPx, const math::Vector3R &amp;sample) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classph_1_1_vector3_film.html</anchorfile>
      <anchor>a38db3d41a25d438bd5fc172ff351bad8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEffectiveWindowPx</name>
      <anchorfile>classph_1_1_vector3_film.html</anchorfile>
      <anchor>a9cbe702d2dcf84777c60d8dfe5fd8dcc</anchor>
      <arglist>(const math::TAABB2D&lt; int64 &gt; &amp;effectiveWindow) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::ViewPathTracingPolicy</name>
    <filename>classph_1_1_view_path_tracing_policy.html</filename>
    <member kind="function">
      <type></type>
      <name>ViewPathTracingPolicy</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a0eabc2761ed152200cd15e1abe53b4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ViewPathTracingPolicy &amp;</type>
      <name>kill</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a271c1f9cf115af124dd6a36f911768d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ViewPathTracingPolicy &amp;</type>
      <name>useRussianRoulette</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a2a8a7d15dc8dc289f0a913d5c2e7276f</anchor>
      <arglist>(bool useRR)</arglist>
    </member>
    <member kind="function">
      <type>ViewPathTracingPolicy &amp;</type>
      <name>traceSinglePathFor</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>aade4ebce75c46a604628867583946571</anchor>
      <arglist>(SurfaceElemental elemental)</arglist>
    </member>
    <member kind="function">
      <type>ViewPathTracingPolicy &amp;</type>
      <name>traceBranchedPathFor</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a5fa214d57f82aaa1c9663f0fa1a591c9</anchor>
      <arglist>(SurfacePhenomena phenomena)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKilled</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a7b4e826d1a0753dd6ffb3a9c1bba7827</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useRussianRoulette</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a684665c719dc381218eeeccf83beba67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EViewPathSampleMode</type>
      <name>getSampleMode</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>ac5208883abdf4cf14b48511aee702b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfacePhenomena</type>
      <name>getTargetPhenomena</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a029f4b685132ac330ffa4ba7f3e23c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceElemental</type>
      <name>getTargetElemental</name>
      <anchorfile>classph_1_1_view_path_tracing_policy.html</anchorfile>
      <anchor>a58900bfaa323772346b35e307399a319</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Viewport</name>
    <filename>classph_1_1_viewport.html</filename>
    <member kind="function">
      <type></type>
      <name>Viewport</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a6f0fb81cc5512dc6f6b6bc2ee9294b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Viewport</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a7d792655748dc21d234c52fa48d44db2</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; baseSizePx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Viewport</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a6cf31a431047d80de0f9ca469b6fe52e</anchor>
      <arglist>(math::TVector2&lt; uint32 &gt; baseSizePx, math::TAABB2D&lt; int64 &gt; windowPx)</arglist>
    </member>
    <member kind="function">
      <type>const math::TVector2&lt; uint32 &gt; &amp;</type>
      <name>getBaseSizePx</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a88999fadc6b4978786962c095c607861</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const math::TAABB2D&lt; int64 &gt; &amp;</type>
      <name>getWindowPx</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a8c4f856d47c47e608e14d985b7760752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>getCroppedRegionPx</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>acb9d5fb94e520499cb863f987c95d60b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBasePixels</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a835c76d96ed97ab55aab71f4da49355e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numCroppedRegionPixels</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a3f39f96184b923de8e348435fea79c18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasView</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>a030c63a0c0a149666fa4614f3bb9244e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_viewport.html</anchorfile>
      <anchor>ae38e51106e74f5a1f21c1940a2de33ee</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Visualizer</name>
    <filename>classph_1_1_visualizer.html</filename>
    <base>ph::CoreSdlResource</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_visualizer.html</anchorfile>
      <anchor>ab4160c8240dfc9b2ea34785f6f73571e</anchor>
      <arglist>(const CoreCookingContext &amp;ctx, CoreCookedUnit &amp;cooked) override=0</arglist>
    </member>
    <member kind="function">
      <type>ESdlTypeCategory</type>
      <name>getDynamicCategory</name>
      <anchorfile>classph_1_1_visualizer.html</anchorfile>
      <anchor>a1d34253fe03c62169da9f8715418cb65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_CLASS</name>
      <anchorfile>classph_1_1_visualizer.html</anchorfile>
      <anchor>aba417228759d786f663aef869a4c37c3</anchor>
      <arglist>(TSdlOwnerClass&lt; Visualizer &gt;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr ESdlTypeCategory</type>
      <name>CATEGORY</name>
      <anchorfile>classph_1_1_visualizer.html</anchorfile>
      <anchor>a5f313d4d6f62410f2eff42fc1fa15af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VisualWorld</name>
    <filename>classph_1_1_visual_world.html</filename>
    <base protection="private">ph::IMoveOnly</base>
    <member kind="function">
      <type></type>
      <name>VisualWorld</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>aab7a6f1697a835b25b92b7c53849e2ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cook</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>a440614c7b197700d0b8904f341d43d76</anchor>
      <arglist>(const SceneDescription &amp;rawScene, const CoreCookingContext &amp;coreCtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceiverPosition</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>a2d96ff894e0e929e34f45d89f5ad29f1</anchor>
      <arglist>(const math::Vector3R &amp;receiverPos)</arglist>
    </member>
    <member kind="function">
      <type>const Intersector *</type>
      <name>getIntersector</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>a5bbc20dad53090d24a4be34732f5268e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EmitterSampler *</type>
      <name>getEmitterSampler</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>ac9000343d6d6e1302accc07d92f38464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scene *</type>
      <name>getScene</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>a9820c6bf14cf875f3a97a4f8d7446c25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CookedResourceCollection *</type>
      <name>getCookedResources</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>af2e1d0b3aa9a65c738c06dd0ac353e77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransientResourceCache *</type>
      <name>getCache</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>ab7f027cc27848604008e6d48fea606ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>getRootActorsBound</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>a8e2415c583c2a52b16d43e79309949c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::AABB3D</type>
      <name>getLeafActorsBound</name>
      <anchorfile>classph_1_1_visual_world.html</anchorfile>
      <anchor>ae3c33c3e88cf9521aa29eafb3e5037f4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VoHomoAbsorption</name>
    <filename>classph_1_1_vo_homo_absorption.html</filename>
    <base>ph::VolumeOptics</base>
    <member kind="function">
      <type></type>
      <name>VoHomoAbsorption</name>
      <anchorfile>classph_1_1_vo_homo_absorption.html</anchorfile>
      <anchor>a6e57a99b28305e08ee2570e4e6394c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoHomoAbsorption</name>
      <anchorfile>classph_1_1_vo_homo_absorption.html</anchorfile>
      <anchor>a328abe78a9729675ac3be6485998a502</anchor>
      <arglist>(const std::shared_ptr&lt; BfConstant &gt; &amp;blockFunc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VoHomoAbsorption</name>
      <anchorfile>classph_1_1_vo_homo_absorption.html</anchorfile>
      <anchor>a4937c20ded69a7c1d8bc73eb7768532e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VolumeBehavior</name>
    <filename>classph_1_1_volume_behavior.html</filename>
    <member kind="function">
      <type>const VolumeOptics *</type>
      <name>getOptics</name>
      <anchorfile>classph_1_1_volume_behavior.html</anchorfile>
      <anchor>ad1a5fa8ebf9128dfd3c96735d7d76912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptics</name>
      <anchorfile>classph_1_1_volume_behavior.html</anchorfile>
      <anchor>ac6430d830717fc16b8d9dc614e2e0acc</anchor>
      <arglist>(const std::shared_ptr&lt; VolumeOptics &gt; &amp;optics)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VolumeDistanceSample</name>
    <filename>classph_1_1_volume_distance_sample.html</filename>
    <class kind="class">ph::VolumeDistanceSample::Input</class>
    <class kind="class">ph::VolumeDistanceSample::Output</class>
    <member kind="function">
      <type>bool</type>
      <name>isMaxDistReached</name>
      <anchorfile>classph_1_1_volume_distance_sample.html</anchorfile>
      <anchor>aaa676ed1c55a033482cb5ac23f84e2be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Input</type>
      <name>inputs</name>
      <anchorfile>classph_1_1_volume_distance_sample.html</anchorfile>
      <anchor>a4ca42206dc89598e39549a3cfd406610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Output</type>
      <name>outputs</name>
      <anchorfile>classph_1_1_volume_distance_sample.html</anchorfile>
      <anchor>af3a3742c094b2b52873d079dcb315b8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VolumeMaterial</name>
    <filename>classph_1_1_volume_material.html</filename>
    <base>ph::Material</base>
    <member kind="enumeration">
      <type></type>
      <name>ESidedness</name>
      <anchorfile>classph_1_1_volume_material.html</anchorfile>
      <anchor>ac2017c0e9fd99fed10ae2aa777ea4c9c</anchor>
      <arglist></arglist>
      <enumvalue file="classph_1_1_volume_material.html" anchor="ac2017c0e9fd99fed10ae2aa777ea4c9caff6036f8ea763cda3177ef14f633e396">INTERIOR</enumvalue>
      <enumvalue file="classph_1_1_volume_material.html" anchor="ac2017c0e9fd99fed10ae2aa777ea4c9ca275ff52c0d43ea11e057b037be21d30e">EXTERIOR</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>VolumeMaterial</name>
      <anchorfile>classph_1_1_volume_material.html</anchorfile>
      <anchor>a82b675fa928c757106bb4d418a906994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>genVolume</name>
      <anchorfile>classph_1_1_volume_material.html</anchorfile>
      <anchor>a0ec45c858e0859f44d6ceb094032a2da</anchor>
      <arglist>(const CookingContext &amp;ctx, VolumeBehavior &amp;behavior) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genBehaviors</name>
      <anchorfile>classph_1_1_volume_material.html</anchorfile>
      <anchor>a5654f336c3c0aa9b0ad1b5ec85383cf5</anchor>
      <arglist>(const CookingContext &amp;ctx, PrimitiveMetadata &amp;metadata) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSidedness</name>
      <anchorfile>classph_1_1_volume_material.html</anchorfile>
      <anchor>adc49442d5f6075a90e683a1d74671f74</anchor>
      <arglist>(ESidedness sidedness)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::VolumeOptics</name>
    <filename>classph_1_1_volume_optics.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~VolumeOptics</name>
      <anchorfile>classph_1_1_volume_optics.html</anchorfile>
      <anchor>ad79d2dc2144855fed49be305ea2816f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classph_1_1_volume_optics.html</anchorfile>
      <anchor>a91b7acf2fb10f2e0d7b21aaf62f99a9c</anchor>
      <arglist>(VolumeDistanceSample &amp;sample) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Workflow</name>
    <filename>classph_1_1_workflow.html</filename>
    <base protection="private">ph::INoCopyAndMove</base>
    <class kind="class">ph::Workflow::WorkHandle</class>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>Work</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>ab556ec427a6d86be24df2693f8168064</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Workflow</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>a24474d9ee650c7abfd6d0070267af93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Workflow</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>abc43f31db30614b72ef594d2eb477982</anchor>
      <arglist>(std::size_t numExpectedWorks)</arglist>
    </member>
    <member kind="function">
      <type>WorkHandle</type>
      <name>addWork</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>a312379d33e53fedea630d83f6a7f825a</anchor>
      <arglist>(Work work)</arglist>
    </member>
    <member kind="function">
      <type>WorkHandle</type>
      <name>acquireWork</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>a2d9b729666e311c44e8a190b0c21d383</anchor>
      <arglist>(std::size_t workIndex)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>addWorks</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>a625333f7eaa1fe7f4c74b5eccb4f8ab3</anchor>
      <arglist>(WorkTypes &amp;&amp;... works)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dependsOn</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>a2fbf337ca9c10c0f6bc47d08bec282dd</anchor>
      <arglist>(WorkHandle target, WorkHandle targetDependency)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAndWaitAllWorks</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>ab979f126c01b842a5ed95267d838d3f9</anchor>
      <arglist>(FixedSizeThreadPool &amp;workers)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numWorks</name>
      <anchorfile>classph_1_1_workflow.html</anchorfile>
      <anchor>a51d2fb1f24b9527a428ebcf042bbccfd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::Workflow::WorkHandle</name>
    <filename>classph_1_1_workflow_1_1_work_handle.html</filename>
    <member kind="function">
      <type></type>
      <name>WorkHandle</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a47f2351007d66595582ddcaa7be97513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runsBefore</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>aafd1337b0e69c148200473360e4b08a5</anchor>
      <arglist>(WorkHandle succeedingWork)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runsAfter</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a9210f57fb848a14390a97b354ee6ebbe</anchor>
      <arglist>(WorkHandle preceedingWork)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runsBefore</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a260881de04f8e15f432fa563b6ec4338</anchor>
      <arglist>(TSpanView&lt; WorkHandle &gt; succeedingWorks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runsAfter</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>ae2c831b54c682657ff2ddb1d5c11dbf2</anchor>
      <arglist>(TSpanView&lt; WorkHandle &gt; preceedingWorks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runsBefore</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a8ca6bdf14238d6d0896f9653b816befa</anchor>
      <arglist>(std::array&lt; WorkHandle, N &gt; succeedingWorks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runsAfter</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a46db8eff0240f5469506e32f2d11e33a</anchor>
      <arglist>(std::array&lt; WorkHandle, N &gt; preceedingWorks)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getWorkId</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a7a36bb699b4fc4b20b76f4c719c3cd77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Workflow *</type>
      <name>getWorkflow</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>aa88682690d5d757ec2b3776589929502</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>a804baf9c009fb16b072a29ff98f8460c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Workflow</name>
      <anchorfile>classph_1_1_workflow_1_1_work_handle.html</anchorfile>
      <anchor>afa07847c7cb432b260e61a0c18025ba3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::WorkScheduler</name>
    <filename>classph_1_1_work_scheduler.html</filename>
    <base>ph::IWorkDispatcher</base>
    <member kind="function">
      <type></type>
      <name>WorkScheduler</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a883f80a5c5b0e47d18ba881ab5251b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorkScheduler</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>aa171dfa8f9897c544e4342d26883d7e2</anchor>
      <arglist>(std::size_t numWorkers, const WorkUnit &amp;totalWorkUnit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dispatch</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>ad8b870d2489a6e249ab156f445c80114</anchor>
      <arglist>(WorkUnit *out_workUnit) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>schedule</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a2903b9d4d450a47d397d2450ee56d8ee</anchor>
      <arglist>(WorkUnit *out_workUnit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleAll</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a9141abbc241f0973781488d037244c76</anchor>
      <arglist>(std::vector&lt; WorkUnit &gt; &amp;out_workUnits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>submit</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>af2b4ed49ae45c64ee5f20c1aabf3f93c</anchor>
      <arglist>(const WorkUnit &amp;workUnit)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScheduledFraction</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a7c92a304f7df4d80f9a8945e11c757b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSubmittedFraction</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>ac4273bef355b7d256d24a20b16bb3bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>ab1055785bbb680ab6f2710e87bc36cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numWorkers</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>add086a102f673f58dceefbc5029a9f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WorkUnit</type>
      <name>m_totalWorkUnit</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a4cd851df1c4ab76ec2b4c25cc2c6fabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_totalVolume</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a5ed99c64539b1b7413bc86a489b3a468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_scheduledVolume</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a02ce4ce0c4ce2bc5c55216aae0aa4676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_submittedVolume</name>
      <anchorfile>classph_1_1_work_scheduler.html</anchorfile>
      <anchor>a7392b1918423092eadd0e139cfe2a19e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ph::WorkUnit</name>
    <filename>classph_1_1_work_unit.html</filename>
    <member kind="function">
      <type></type>
      <name>WorkUnit</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>a191abcf8d0349435c23ed57fcc109688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorkUnit</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>a4b5724a4fc0d7059d37a40ecd93c8197</anchor>
      <arglist>(const Region &amp;region)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorkUnit</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>ab84230b9af44001910b0b120c4af3935</anchor>
      <arglist>(const Region &amp;region, std::size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>Region</type>
      <name>getRegion</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>a53dc72cbe5e24dca1167bf0190038700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getWidth</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>af4bc7f9fa4602db839985767df559315</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getHeight</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>ab0c0c19704b2c0622abc0d0ccd92566f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDepth</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>aec0b887d6fd90b599c0d507b63549ee8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getVolume</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>a1302ee4859cf25828d8da33b973c22e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>getAspectRatio</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>a88e84c0bbee8e219283ff0afc7f263b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classph_1_1_work_unit.html</anchorfile>
      <anchor>aa322b0be0f490b0e9a409f297442ea64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="concept">
    <name>ph::CBase</name>
    <filename>conceptph_1_1_c_base.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CCanAdd</name>
    <filename>conceptph_1_1_c_can_add.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CCanDivide</name>
    <filename>conceptph_1_1_c_can_divide.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CCanMultiply</name>
    <filename>conceptph_1_1_c_can_multiply.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CCanSubtract</name>
    <filename>conceptph_1_1_c_can_subtract.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CDerived</name>
    <filename>conceptph_1_1_c_derived.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CEnum</name>
    <filename>conceptph_1_1_c_enum.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CEnumWithSizeInfo</name>
    <filename>conceptph_1_1_c_enum_with_size_info.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CHasSdlClassDefinition</name>
    <filename>conceptph_1_1_c_has_sdl_class_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CHasSdlEnumDefinition</name>
    <filename>conceptph_1_1_c_has_sdl_enum_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CHasSdlFunctionDefinition</name>
    <filename>conceptph_1_1_c_has_sdl_function_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CHasSdlStructDefinition</name>
    <filename>conceptph_1_1_c_has_sdl_struct_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CHasStaticSdlCategoryInfo</name>
    <filename>conceptph_1_1_c_has_static_sdl_category_info.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CNotSame</name>
    <filename>conceptph_1_1_c_not_same.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CNumber</name>
    <filename>conceptph_1_1_c_number.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CPhoton</name>
    <filename>conceptph_1_1_c_photon.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CSame</name>
    <filename>conceptph_1_1_c_same.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CSdlInstance</name>
    <filename>conceptph_1_1_c_sdl_instance.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CSdlResource</name>
    <filename>conceptph_1_1_c_sdl_resource.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CSdlStructSupportsInitToDefault</name>
    <filename>conceptph_1_1_c_sdl_struct_supports_init_to_default.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CSubscriptable</name>
    <filename>conceptph_1_1_c_subscriptable.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CViewPathHandler</name>
    <filename>conceptph_1_1_c_view_path_handler.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::CViewpoint</name>
    <filename>conceptph_1_1_c_viewpoint.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::detail::CPrimitiveGetter</name>
    <filename>conceptph_1_1detail_1_1_c_primitive_getter.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::detail::CPrimitiveMetaGetter</name>
    <filename>conceptph_1_1detail_1_1_c_primitive_meta_getter.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::frame_detail::CIsGetAndSetPixelOp</name>
    <filename>conceptph_1_1frame__detail_1_1_c_is_get_and_set_pixel_op.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::frame_detail::CIsGetAndSetPixelWithCoordsOp</name>
    <filename>conceptph_1_1frame__detail_1_1_c_is_get_and_set_pixel_with_coords_op.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::frame_detail::CIsGetPixelOp</name>
    <filename>conceptph_1_1frame__detail_1_1_c_is_get_pixel_op.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::frame_detail::CIsGetPixelWithCoordsOp</name>
    <filename>conceptph_1_1frame__detail_1_1_c_is_get_pixel_with_coords_op.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::frame_detail::CIsSetPixelOp</name>
    <filename>conceptph_1_1frame__detail_1_1_c_is_set_pixel_op.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::frame_detail::CIsSetPixelWithCoordsOp</name>
    <filename>conceptph_1_1frame__detail_1_1_c_is_set_pixel_with_coords_op.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::function_detail::CConstCallableMethodForm</name>
    <filename>conceptph_1_1function__detail_1_1_c_const_callable_method_form.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::function_detail::CEmptyFunctorForm</name>
    <filename>conceptph_1_1function__detail_1_1_c_empty_functor_form.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::function_detail::CFreeFunctionForm</name>
    <filename>conceptph_1_1function__detail_1_1_c_free_function_form.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::function_detail::CNonConstCallableMethodForm</name>
    <filename>conceptph_1_1function__detail_1_1_c_non_const_callable_method_form.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::function_detail::CNonEmptyFunctorForm</name>
    <filename>conceptph_1_1function__detail_1_1_c_non_empty_functor_form.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CChromaticAdaptationDefinition</name>
    <filename>conceptph_1_1math_1_1_c_chromatic_adaptation_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CColorSpaceDefinition</name>
    <filename>conceptph_1_1math_1_1_c_color_space_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CColorValuesInterface</name>
    <filename>conceptph_1_1math_1_1_c_color_values_interface.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CHasColorSpaceProperties</name>
    <filename>conceptph_1_1math_1_1_c_has_color_space_properties.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CIndexedPointKdtreeItemStorage</name>
    <filename>conceptph_1_1math_1_1_c_indexed_point_kdtree_item_storage.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CItemSegmentIntersectionTester</name>
    <filename>conceptph_1_1math_1_1_c_item_segment_intersection_tester.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CItemSegmentIntersectionTesterVanilla</name>
    <filename>conceptph_1_1math_1_1_c_item_segment_intersection_tester_vanilla.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CItemSegmentIntersectionTesterWithIndex</name>
    <filename>conceptph_1_1math_1_1_c_item_segment_intersection_tester_with_index.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CRawColorValues</name>
    <filename>conceptph_1_1math_1_1_c_raw_color_values.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CSpectralColorSpaceDefinition</name>
    <filename>conceptph_1_1math_1_1_c_spectral_color_space_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CSpectralSampleProps</name>
    <filename>conceptph_1_1math_1_1_c_spectral_sample_props.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CSupportsSpectralConversions</name>
    <filename>conceptph_1_1math_1_1_c_supports_spectral_conversions.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CSupportsTristimulusConversions</name>
    <filename>conceptph_1_1math_1_1_c_supports_tristimulus_conversions.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CTristimulusColorSpaceDefinition</name>
    <filename>conceptph_1_1math_1_1_c_tristimulus_color_space_definition.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::math::CURBG</name>
    <filename>conceptph_1_1math_1_1_c_u_r_b_g.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::texfunc::CBinaryOperator</name>
    <filename>conceptph_1_1texfunc_1_1_c_binary_operator.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::texfunc::CTernaryOperator</name>
    <filename>conceptph_1_1texfunc_1_1_c_ternary_operator.html</filename>
  </compound>
  <compound kind="concept">
    <name>ph::texfunc::CUnaryOperator</name>
    <filename>conceptph_1_1texfunc_1_1_c_unary_operator.html</filename>
  </compound>
  <compound kind="namespace">
    <name>ph</name>
    <filename>namespaceph.html</filename>
    <namespace>ph::constant</namespace>
    <namespace>ph::detail</namespace>
    <namespace>ph::field_set_op</namespace>
    <namespace>ph::fixed_integer_map_detail</namespace>
    <namespace>ph::frame_detail</namespace>
    <namespace>ph::frame_utils</namespace>
    <namespace>ph::function_detail</namespace>
    <namespace>ph::halton_detail</namespace>
    <namespace>ph::io_utils</namespace>
    <namespace>ph::lbconv</namespace>
    <namespace>ph::lta</namespace>
    <namespace>ph::math</namespace>
    <namespace>ph::pixel_buffer</namespace>
    <namespace>ph::pixel_texture</namespace>
    <namespace>ph::sdl</namespace>
    <namespace>ph::sdl_parser</namespace>
    <namespace>ph::texfunc</namespace>
    <class kind="class">ph::AAreaLight</class>
    <class kind="class">ph::AbradedOpaque</class>
    <class kind="class">ph::AbradedSurface</class>
    <class kind="class">ph::AbradedTranslucent</class>
    <class kind="class">ph::Actor</class>
    <class kind="class">ph::ActorCookException</class>
    <class kind="class">ph::AdaptiveSamplingRenderer</class>
    <class kind="class">ph::ADome</class>
    <class kind="class">ph::AGeometricLight</class>
    <class kind="class">ph::AIesAttenuatedLight</class>
    <class kind="class">ph::AImageDome</class>
    <class kind="class">ph::ALight</class>
    <class kind="class">ph::AltPath</class>
    <class kind="class">ph::AModel</class>
    <class kind="class">ph::AModelLight</class>
    <class kind="class">ph::AnisoTrowbridgeReitz</class>
    <class kind="class">ph::APhantomModel</class>
    <class kind="class">ph::ApiDatabase</class>
    <class kind="class">ph::ApiHelper</class>
    <class kind="class">ph::APointLight</class>
    <class kind="class">ph::APreethamDome</class>
    <class kind="class">ph::AreaSource</class>
    <class kind="class">ph::ARectangleLight</class>
    <class kind="class">ph::ASphereLight</class>
    <class kind="class">ph::ATransformedInstance</class>
    <class kind="class">ph::AttributeRenderer</class>
    <class kind="class">ph::AttributeTags</class>
    <class kind="class">ph::BfConstant</class>
    <class kind="class">ph::BinaryFileInputStream</class>
    <class kind="class">ph::BinaryFileOutputStream</class>
    <class kind="class">ph::BinaryFileReader</class>
    <class kind="class">ph::BinaryMixedImage</class>
    <class kind="class">ph::BinaryMixedSurfaceMaterial</class>
    <class kind="class">ph::BlackBodyRadiationImage</class>
    <class kind="class">ph::BlockFunction</class>
    <class kind="class">ph::BNEEPTEstimator</class>
    <class kind="class">ph::BruteForceIntersector</class>
    <class kind="class">ph::BsdfEvalInput</class>
    <class kind="class">ph::BsdfEvalOutput</class>
    <class kind="class">ph::BsdfEvalQuery</class>
    <class kind="class">ph::BsdfHelper</class>
    <class kind="class">ph::BsdfPdfInput</class>
    <class kind="class">ph::BsdfPdfOutput</class>
    <class kind="class">ph::BsdfPdfQuery</class>
    <class kind="class">ph::BsdfQueryContext</class>
    <class kind="class">ph::BsdfSampleInput</class>
    <class kind="class">ph::BsdfSampleOutput</class>
    <class kind="class">ph::BsdfSampleQuery</class>
    <class kind="class">ph::BvhBuilder</class>
    <class kind="class">ph::BvhInfoNode</class>
    <class kind="class">ph::BvhIntersectableInfo</class>
    <class kind="class">ph::BvhLinearNode</class>
    <class kind="class">ph::BvhSahBucket</class>
    <class kind="class">ph::BVPTDLEstimator</class>
    <class kind="class">ph::BVPTEstimator</class>
    <class kind="class">ph::ByteBuffer</class>
    <class kind="class">ph::ByteBufferInputStream</class>
    <class kind="class">ph::CheckerboardImage</class>
    <class kind="class">ph::ClassicBvhIntersector</class>
    <class kind="class">ph::ConductiveInterfaceInfo</class>
    <class kind="class">ph::ConductorFresnel</class>
    <class kind="class">ph::ConstantImage</class>
    <class kind="class">ph::ConstantVelocityMotion</class>
    <class kind="class">ph::CookedDataStorage</class>
    <class kind="class">ph::CookedGeometry</class>
    <class kind="class">ph::CookedMotion</class>
    <class kind="class">ph::CookedNamedResource</class>
    <class kind="class">ph::CookedResourceCollection</class>
    <class kind="class">ph::CookedResourceCollectionBase</class>
    <class kind="class">ph::CookException</class>
    <class kind="class">ph::CookingConfig</class>
    <class kind="class">ph::CookingContext</class>
    <class kind="class">ph::CookOrder</class>
    <class kind="class">ph::CoreCookedUnit</class>
    <class kind="class">ph::CoreCookingContext</class>
    <class kind="class">ph::CoreResource</class>
    <class kind="class">ph::CoreSdlResource</class>
    <class kind="class">ph::CsvFile</class>
    <class kind="class">ph::CsvFileRow</class>
    <class kind="class">ph::DammertzDispatcher</class>
    <class kind="class">ph::DielectricFresnel</class>
    <class kind="class">ph::DielectricInterfaceInfo</class>
    <class kind="class">ph::DiffuseSurfaceEmitter</class>
    <class kind="class">ph::DiffuseSurfaceEmitterBase</class>
    <class kind="class">ph::DirectEnergyPdfInput</class>
    <class kind="class">ph::DirectEnergyPdfOutput</class>
    <class kind="class">ph::DirectEnergyPdfQuery</class>
    <class kind="class">ph::DirectEnergySampleInput</class>
    <class kind="class">ph::DirectEnergySampleOutput</class>
    <class kind="class">ph::DirectEnergySampleQuery</class>
    <class kind="struct">ph::DomeRadianceFunctionInfo</class>
    <class kind="struct">ph::EmbeddedPrimitiveMetaGetter</class>
    <class kind="class">ph::EmitFunction</class>
    <class kind="class">ph::Emitter</class>
    <class kind="class">ph::EmitterBuildingMaterial</class>
    <class kind="class">ph::EmitterSampler</class>
    <class kind="class">ph::EnergyEmissionSampleInput</class>
    <class kind="class">ph::EnergyEmissionSampleOutput</class>
    <class kind="class">ph::EnergyEmissionSampleQuery</class>
    <class kind="class">ph::Engine</class>
    <class kind="class">ph::EngineInitSettings</class>
    <class kind="class">ph::EqualSamplingRenderer</class>
    <class kind="class">ph::ESPowerFavoring</class>
    <class kind="class">ph::ESUniformRandom</class>
    <class kind="class">ph::ExactConductorFresnel</class>
    <class kind="class">ph::ExactDielectricFresnel</class>
    <class kind="class">ph::ExrFileReader</class>
    <class kind="class">ph::ExrFileWriter</class>
    <class kind="class">ph::Filesystem</class>
    <class kind="class">ph::Film</class>
    <class kind="class">ph::FilteredInputStream</class>
    <class kind="class">ph::FixedSizeThreadPool</class>
    <class kind="class">ph::FormattedTextInputStream</class>
    <class kind="class">ph::FormattedTextOutputStream</class>
    <class kind="class">ph::FrameOperator</class>
    <class kind="class">ph::FrameProcessingPipeline</class>
    <class kind="class">ph::FrameProcessor</class>
    <class kind="class">ph::FrameVisualizer</class>
    <class kind="class">ph::FresnelEffect</class>
    <class kind="class">ph::FullMaterial</class>
    <class kind="class">ph::FullPhoton</class>
    <class kind="class">ph::FullRay</class>
    <class kind="class">ph::FullRayEnergyEstimator</class>
    <class kind="class">ph::FullViewpoint</class>
    <class kind="class">ph::GammaCorrection</class>
    <class kind="class">ph::GCuboid</class>
    <class kind="class">ph::GEmpty</class>
    <class kind="class">ph::Geometry</class>
    <class kind="class">ph::GeometrySoup</class>
    <class kind="class">ph::GIndexedTriangleMesh</class>
    <class kind="class">ph::GMengerSponge</class>
    <class kind="class">ph::GPlyPolygonMesh</class>
    <class kind="class">ph::GradientImage</class>
    <class kind="class">ph::GRectangle</class>
    <class kind="class">ph::GridScheduler</class>
    <class kind="class">ph::GroupedDiffuseSurfaceEmitter</class>
    <class kind="class">ph::GSphere</class>
    <class kind="class">ph::GTriangle</class>
    <class kind="class">ph::GTriangleMesh</class>
    <class kind="class">ph::GWave</class>
    <class kind="class">ph::HaltonSampleSource</class>
    <class kind="class">ph::HdrOperator</class>
    <class kind="class">ph::HdrRgbFilm</class>
    <class kind="class">ph::HdrRgbTexture2D</class>
    <class kind="class">ph::HenyeyGreenstein</class>
    <class kind="class">ph::HitDetail</class>
    <class kind="class">ph::HitInfo</class>
    <class kind="class">ph::HitProbe</class>
    <class kind="class">ph::IDataStream</class>
    <class kind="class">ph::IdealAbsorber</class>
    <class kind="class">ph::IdealDielectric</class>
    <class kind="class">ph::IdealReflector</class>
    <class kind="class">ph::IdealSubstance</class>
    <class kind="class">ph::IdealTransmitter</class>
    <class kind="class">ph::IesAttenuatedSource</class>
    <class kind="class">ph::IesData</class>
    <class kind="class">ph::IesFile</class>
    <class kind="class">ph::IInputStream</class>
    <class kind="class">ph::Image</class>
    <class kind="class">ph::IMoveOnly</class>
    <class kind="class">ph::IndexedTriangle</class>
    <class kind="class">ph::IndexedTriMesh</class>
    <class kind="class">ph::IndexedUIntBuffer</class>
    <class kind="class">ph::IndexedVertexBuffer</class>
    <class kind="class">ph::InitiallyPausedThread</class>
    <class kind="class">ph::INoCopyAndMove</class>
    <class kind="class">ph::Integrand</class>
    <class kind="class">ph::InterfaceStatistics</class>
    <class kind="class">ph::Intersectable</class>
    <class kind="class">ph::Intersector</class>
    <class kind="class">ph::IOutputStream</class>
    <class kind="class">ph::IRayEnergyEstimator</class>
    <class kind="class">ph::IReceivedRayProcessor</class>
    <class kind="class">ph::IResourceIdentifierResolver</class>
    <class kind="struct">ph::IsBuildable</class>
    <class kind="struct">ph::IsBuildable&lt; Built, From, std::enable_if_t&lt; std::is_convertible_v&lt; From, Built &gt;||std::is_constructible_v&lt; Built, From &gt; &gt; &gt;</class>
    <class kind="class">ph::ISdlDataPacketGroup</class>
    <class kind="class">ph::ISdlInstantiable</class>
    <class kind="class">ph::ISdlReferenceGroup</class>
    <class kind="class">ph::ISdlResource</class>
    <class kind="class">ph::IsoBeckmann</class>
    <class kind="class">ph::IsoTrowbridgeReitz</class>
    <class kind="class">ph::IsoTrowbridgeReitzConstant</class>
    <class kind="class">ph::IsoTrowbridgeReitzTextured</class>
    <class kind="class">ph::IUninstantiable</class>
    <class kind="class">ph::IWorkDispatcher</class>
    <class kind="class">ph::JRToneMapping</class>
    <class kind="class">ph::KdtreeAABB</class>
    <class kind="class">ph::KdtreeIntersector</class>
    <class kind="class">ph::KdtreeNode</class>
    <class kind="class">ph::LambertianDiffuse</class>
    <class kind="class">ph::LatLongEnvEmitter</class>
    <class kind="class">ph::LayeredSurface</class>
    <class kind="class">ph::LbLayer</class>
    <class kind="class">ph::LbLayeredSurface</class>
    <class kind="class">ph::LdrRgbTexture2D</class>
    <class kind="class">ph::LerpedSurfaceOptics</class>
    <class kind="class">ph::LightSource</class>
    <class kind="class">ph::Material</class>
    <class kind="class">ph::MathImage</class>
    <class kind="class">ph::MatteOpaque</class>
    <class kind="class">ph::MemoryArena</class>
    <class kind="class">ph::MetaRecordingProcessor</class>
    <class kind="class">ph::Microfacet</class>
    <class kind="class">ph::MicrosurfaceInfo</class>
    <class kind="class">ph::mipmapgen</class>
    <class kind="class">ph::ModelParser</class>
    <class kind="class">ph::ModelSource</class>
    <class kind="class">ph::MotionCookConfig</class>
    <class kind="class">ph::MotionSource</class>
    <class kind="class">ph::NaiveReinhardToneMapping</class>
    <class kind="class">ph::Object</class>
    <class kind="class">ph::Observer</class>
    <class kind="class">ph::OmniModulatedEmitter</class>
    <class kind="class">ph::OpaqueMicrofacet</class>
    <class kind="class">ph::Option</class>
    <class kind="class">ph::OrenNayar</class>
    <class kind="class">ph::OrientedRasterObserver</class>
    <class kind="class">ph::PartialRayEnergyEstimator</class>
    <class kind="class">ph::PathTracingVisualizer</class>
    <class kind="class">ph::PBasicSphere</class>
    <class kind="class">ph::PEmpty</class>
    <class kind="class">ph::PeriodicSingleThreadExecutor</class>
    <class kind="class">ph::PfmFile</class>
    <class kind="class">ph::PhotonMappingVisualizer</class>
    <class kind="class">ph::PhysicalActor</class>
    <class kind="class">ph::PictureData</class>
    <class kind="class">ph::PictureMeta</class>
    <class kind="class">ph::PinholeCamera</class>
    <class kind="class">ph::PixelBuffer2D</class>
    <class kind="class">ph::PlateScheduler</class>
    <class kind="class">ph::PLatLong01Sphere</class>
    <class kind="class">ph::PLatLongEnvSphere</class>
    <class kind="struct">ph::PlyElement</class>
    <class kind="class">ph::PlyFile</class>
    <class kind="struct">ph::PlyIOConfig</class>
    <class kind="struct">ph::PlyProperty</class>
    <class kind="class">ph::PlyPropertyListValues</class>
    <class kind="class">ph::PlyPropertyValues</class>
    <class kind="class">ph::PMAtomicStatistics</class>
    <class kind="class">ph::PMCommonParams</class>
    <class kind="class">ph::PMRendererBase</class>
    <class kind="class">ph::PointSource</class>
    <class kind="class">ph::PreCookReport</class>
    <class kind="class">ph::PreCookResourceCollectionProxy</class>
    <class kind="class">ph::PreethamTexture</class>
    <class kind="class">ph::Primitive</class>
    <class kind="class">ph::PrimitiveBuildingMaterial</class>
    <class kind="class">ph::PrimitiveChannel</class>
    <class kind="class">ph::PrimitiveMetadata</class>
    <class kind="class">ph::PrimitivePosPdfInput</class>
    <class kind="class">ph::PrimitivePosPdfOutput</class>
    <class kind="class">ph::PrimitivePosPdfQuery</class>
    <class kind="class">ph::PrimitivePosSampleInput</class>
    <class kind="class">ph::PrimitivePosSampleOutput</class>
    <class kind="class">ph::PrimitivePosSampleQuery</class>
    <class kind="class">ph::ProbabilisticProgressivePMRenderer</class>
    <class kind="class">ph::ProgressivePMRenderer</class>
    <class kind="class">ph::PTriangle</class>
    <class kind="class">ph::RadianceSensor</class>
    <class kind="class">ph::RasterFileImage</class>
    <class kind="class">ph::RasterImageBase</class>
    <class kind="class">ph::RawResourceCollection</class>
    <class kind="class">ph::Ray</class>
    <class kind="class">ph::RayDifferential</class>
    <class kind="class">ph::Receiver</class>
    <class kind="class">ph::ReceiverSamplingWork</class>
    <class kind="class">ph::RectangleSource</class>
    <class kind="class">ph::RectangularSensorReceiver</class>
    <class kind="struct">ph::ReferencedPrimitiveMetaGetter</class>
    <class kind="class">ph::RegularPicture</class>
    <class kind="class">ph::RegularPictureFormat</class>
    <class kind="class">ph::Renderer</class>
    <class kind="class">ph::RendererProxy</class>
    <class kind="class">ph::RenderObservationInfo</class>
    <class kind="class">ph::RenderProgress</class>
    <class kind="class">ph::RenderRegionStatus</class>
    <class kind="class">ph::RenderSession</class>
    <class kind="class">ph::RenderStats</class>
    <class kind="class">ph::RenderWork</class>
    <class kind="class">ph::RenderWorker</class>
    <class kind="class">ph::ResourceIdentifier</class>
    <class kind="class">ph::RoughnessToAlphaMapping</class>
    <class kind="class">ph::RuntimeSampleSource</class>
    <class kind="class">ph::Sample</class>
    <class kind="class">ph::SampleContext</class>
    <class kind="class">ph::SampleFilter</class>
    <class kind="class">ph::SampleFlow</class>
    <class kind="class">ph::SampleGenerator</class>
    <class kind="class">ph::SampleLocation</class>
    <class kind="class">ph::SamplesND</class>
    <class kind="class">ph::SamplesNDHandle</class>
    <class kind="class">ph::SamplesNDStream</class>
    <class kind="class">ph::SampleSource</class>
    <class kind="class">ph::SampleStage</class>
    <class kind="class">ph::SampleStageReviser</class>
    <class kind="struct">ph::SamplingFilmDimensions</class>
    <class kind="class">ph::SamplingRenderer</class>
    <class kind="struct">ph::SamplingStatistics</class>
    <class kind="class">ph::ScatterFunction</class>
    <class kind="class">ph::Scene</class>
    <class kind="class">ph::SceneDescription</class>
    <class kind="class">ph::SchlickApproxConductorFresnel</class>
    <class kind="class">ph::SchlickApproxDielectricFresnel</class>
    <class kind="class">ph::SdlClass</class>
    <class kind="class">ph::SdlCommandGenerator</class>
    <class kind="class">ph::SdlCommandParser</class>
    <class kind="class">ph::SdlDataPacketCollection</class>
    <class kind="class">ph::SdlDataPacketInterface</class>
    <class kind="class">ph::SdlDependencyResolver</class>
    <class kind="class">ph::SdlEnum</class>
    <class kind="class">ph::SdlException</class>
    <class kind="class">ph::SdlField</class>
    <class kind="class">ph::SdlFunction</class>
    <class kind="class">ph::SdlInlinePacketInterface</class>
    <class kind="class">ph::SdlInputClause</class>
    <class kind="class">ph::SdlInputClauses</class>
    <class kind="class">ph::SdlInputContext</class>
    <class kind="class">ph::SdlIOContext</class>
    <class kind="class">ph::SdlLoadError</class>
    <class kind="class">ph::SdlNamedOutputClauses</class>
    <class kind="class">ph::SdlNativeData</class>
    <class kind="class">ph::SdlOutputClause</class>
    <class kind="class">ph::SdlOutputClauses</class>
    <class kind="class">ph::SdlOutputContext</class>
    <class kind="class">ph::SdlResourceBase</class>
    <class kind="class">ph::SdlResourceLocator</class>
    <class kind="class">ph::SdlSaveError</class>
    <class kind="class">ph::SdlSceneFileReader</class>
    <class kind="class">ph::SdlSceneFileWriter</class>
    <class kind="class">ph::SdlStruct</class>
    <class kind="class">ph::SdlStructFieldStump</class>
    <class kind="class">ph::SemanticVersion</class>
    <class kind="class">ph::SGHalton</class>
    <class kind="class">ph::SGStratified</class>
    <class kind="class">ph::SGUniformRandom</class>
    <class kind="class">ph::SGUtil</class>
    <class kind="class">ph::ShapeInvariantMicrofacet</class>
    <class kind="class">ph::SingleFrameRenderSession</class>
    <class kind="class">ph::SingleLensObserver</class>
    <class kind="class">ph::SphereSource</class>
    <class kind="class">ph::SphericalMapper</class>
    <class kind="class">ph::SpiralGridScheduler</class>
    <class kind="class">ph::SpiralScheduler</class>
    <class kind="class">ph::Statistics</class>
    <class kind="class">ph::StdInputStream</class>
    <class kind="class">ph::StdOutputStream</class>
    <class kind="class">ph::StochasticProgressivePMRenderer</class>
    <class kind="class">ph::StratifiedSampleSource</class>
    <class kind="class">ph::StripeScheduler</class>
    <class kind="class">ph::SurfaceAttributeEstimator</class>
    <class kind="class">ph::SurfaceBehavior</class>
    <class kind="class">ph::SurfaceEmitter</class>
    <class kind="class">ph::SurfaceHit</class>
    <class kind="class">ph::SurfaceLayerInfo</class>
    <class kind="class">ph::SurfaceMaterial</class>
    <class kind="class">ph::SurfaceOptics</class>
    <class kind="class">ph::SwizzledImage</class>
    <class kind="class">ph::TableFGD</class>
    <class kind="class">ph::TableTIR</class>
    <class kind="class">ph::TAbstractPixelTex2D</class>
    <class kind="class">ph::TAnyPtr</class>
    <class kind="class">ph::TAosTriMesh</class>
    <class kind="class">ph::TArrayStack</class>
    <class kind="class">ph::TArrayVector</class>
    <class kind="class">ph::TAtomicQuasiQueue</class>
    <class kind="class">ph::TBilinearPixelTex2D</class>
    <class kind="class">ph::TBinaryTextureOperator</class>
    <class kind="class">ph::TBitFlags</class>
    <class kind="class">ph::TBlockableAtomicQuasiQueue</class>
    <class kind="class">ph::TCheckerboardTexture</class>
    <class kind="class">ph::TColorPixelTexture2D</class>
    <class kind="class">ph::TConstantSpectralTexture</class>
    <class kind="class">ph::TConstantTexture</class>
    <class kind="class">ph::TConstantTristimulusTexture</class>
    <class kind="class">ph::TConstIteratorProxy</class>
    <class kind="struct">ph::TEmbeddedPrimitiveGetter</class>
    <class kind="class">ph::TEstimationArray</class>
    <class kind="class">ph::TestPoint</class>
    <class kind="class">ph::TextFileLoader</class>
    <class kind="class">ph::TextureLoader</class>
    <class kind="class">ph::TFixedMapBase</class>
    <class kind="class">ph::TFixedMapEntry</class>
    <class kind="class">ph::TFrame</class>
    <class kind="class">ph::TFrameBuffer2D</class>
    <class kind="class">ph::ThinDielectricFilm</class>
    <class kind="class">ph::ThinFilm</class>
    <class kind="class">ph::ThinLensCamera</class>
    <class kind="class">ph::TileScheduler</class>
    <class kind="class">ph::Time</class>
    <class kind="class">ph::Timer</class>
    <class kind="class">ph::TIndexedKdtreeIntersector</class>
    <class kind="class">ph::TIndexedPolygonBuffer</class>
    <class kind="class">ph::TIRayEstimator</class>
    <class kind="class">ph::TIteratorProxy</class>
    <class kind="class">ph::TLinearGradientTexture</class>
    <class kind="class">ph::TMergeableFilmProxy</class>
    <class kind="class">ph::TMetaInjectionPrimitive</class>
    <class kind="class">ph::TMipmap</class>
    <class kind="class">ph::TMRSWResource</class>
    <class kind="class">ph::TNearestPixelTex2D</class>
    <class kind="struct">ph::TNonTypeTemplateArgDummy</class>
    <class kind="class">ph::TNumericPixelTexture2D</class>
    <class kind="class">ph::Tokenizer</class>
    <class kind="class">ph::ToneMapper</class>
    <class kind="class">ph::TPhoton</class>
    <class kind="class">ph::TPhotonMap</class>
    <class kind="class">ph::TPhotonMapInfo</class>
    <class kind="class">ph::TPhotonPathTracingWork</class>
    <class kind="class">ph::TPIndexedKdTreeTriangleMesh</class>
    <class kind="class">ph::TPixelTex2D</class>
    <class kind="class">ph::TPixelTexture2D</class>
    <class kind="class">ph::TPPMRadianceEvaluationWork</class>
    <class kind="class">ph::TPPMViewpointCollector</class>
    <class kind="class">ph::TransformedIntersectable</class>
    <class kind="class">ph::TransformedPrimitive</class>
    <class kind="class">ph::TransformInfo</class>
    <class kind="class">ph::TransientResourceCache</class>
    <class kind="class">ph::TransientVisualElement</class>
    <class kind="class">ph::TranslucentMicrofacet</class>
    <class kind="class">ph::TReceiverMeasurementEstimator</class>
    <class kind="struct">ph::TReferencedPrimitiveGetter</class>
    <class kind="class">ph::TRelaxedAtomic</class>
    <class kind="class">ph::TriFace</class>
    <class kind="class">ph::TrowbridgeReitz</class>
    <class kind="class">ph::TSampler</class>
    <class kind="class">ph::TSamplingFilm</class>
    <class kind="class">ph::TScalarPixelTexture2D</class>
    <class kind="class">ph::TSdl</class>
    <class kind="class">ph::TSdl&lt; T &gt;</class>
    <class kind="class">ph::TSdl&lt; void &gt;</class>
    <class kind="class">ph::TSdlAbstractValue</class>
    <class kind="class">ph::TSdlAccessorVariant</class>
    <class kind="class">ph::TSdlAnyInstance</class>
    <class kind="class">ph::TSdlBool</class>
    <class kind="class">ph::TSdlBruteForceFieldSet</class>
    <class kind="class">ph::TSdlEnum</class>
    <class kind="class">ph::TSdlEnumField</class>
    <class kind="class">ph::TSdlGeneralEnum</class>
    <class kind="class">ph::TSdlInteger</class>
    <class kind="class">ph::TSdlMethod</class>
    <class kind="class">ph::TSdlNestedField</class>
    <class kind="class">ph::TSdlOptionalValue</class>
    <class kind="class">ph::TSdlOwnedField</class>
    <class kind="class">ph::TSdlOwnerClass</class>
    <class kind="class">ph::TSdlOwnerStruct</class>
    <class kind="class">ph::TSdlPath</class>
    <class kind="class">ph::TSdlQuaternion</class>
    <class kind="class">ph::TSdlReal</class>
    <class kind="class">ph::TSdlRealArray</class>
    <class kind="class">ph::TSdlReference</class>
    <class kind="class">ph::TSdlReferenceArray</class>
    <class kind="class">ph::TSdlResourceBase</class>
    <class kind="class">ph::TSdlResourceIdentifier</class>
    <class kind="class">ph::TSdlSpectrum</class>
    <class kind="class">ph::TSdlString</class>
    <class kind="class">ph::TSdlStructArray</class>
    <class kind="class">ph::TSdlValue</class>
    <class kind="class">ph::TSdlVector2</class>
    <class kind="class">ph::TSdlVector3</class>
    <class kind="class">ph::TSdlVector3Array</class>
    <class kind="class">ph::TSdlVector4</class>
    <class kind="class">ph::TSortedMap</class>
    <class kind="class">ph::TSortedVector</class>
    <class kind="class">ph::TSPPMRadianceEvaluator</class>
    <class kind="class">ph::TSPSCExecutor</class>
    <class kind="class">ph::TSPSCRingBuffer</class>
    <class kind="class">ph::TStableIndexDenseVector</class>
    <class kind="class">ph::TStackSentinel</class>
    <class kind="class">ph::TStepperReceiverMeasurementEstimator</class>
    <class kind="class">ph::TSwizzledTexture</class>
    <class kind="class">ph::TTernaryTextureOperator</class>
    <class kind="class">ph::TTexture</class>
    <class kind="class">ph::TTrilinearPixelTex2D</class>
    <class kind="class">ph::TUnaryTextureOperator</class>
    <class kind="class">ph::TUniquePtrVector</class>
    <class kind="class">ph::TViewPathHandler</class>
    <class kind="class">ph::TViewPathTracingWork</class>
    <class kind="class">ph::TViewpoint</class>
    <class kind="class">ph::TVPMRadianceEvaluator</class>
    <class kind="class">ph::UniformRandomSampleSource</class>
    <class kind="class">ph::UvwMapper</class>
    <class kind="class">ph::VAbsorptionOnly</class>
    <class kind="class">ph::VanillaPMRenderer</class>
    <class kind="class">ph::Vector3Film</class>
    <class kind="class">ph::ViewPathTracingPolicy</class>
    <class kind="class">ph::Viewport</class>
    <class kind="class">ph::Visualizer</class>
    <class kind="class">ph::VisualWorld</class>
    <class kind="class">ph::VoHomoAbsorption</class>
    <class kind="class">ph::VolumeBehavior</class>
    <class kind="class">ph::VolumeDistanceSample</class>
    <class kind="class">ph::VolumeMaterial</class>
    <class kind="class">ph::VolumeOptics</class>
    <class kind="class">ph::Workflow</class>
    <class kind="class">ph::WorkScheduler</class>
    <class kind="class">ph::WorkUnit</class>
    <concept>ph::CPhoton</concept>
    <concept>ph::CViewPathHandler</concept>
    <concept>ph::CViewpoint</concept>
    <concept>ph::CSdlResource</concept>
    <concept>ph::CHasStaticSdlCategoryInfo</concept>
    <concept>ph::CHasSdlClassDefinition</concept>
    <concept>ph::CHasSdlStructDefinition</concept>
    <concept>ph::CHasSdlFunctionDefinition</concept>
    <concept>ph::CHasSdlEnumDefinition</concept>
    <concept>ph::CSdlInstance</concept>
    <concept>ph::CSdlStructSupportsInitToDefault</concept>
    <concept>ph::CCanAdd</concept>
    <concept>ph::CCanSubtract</concept>
    <concept>ph::CCanMultiply</concept>
    <concept>ph::CCanDivide</concept>
    <concept>ph::CSubscriptable</concept>
    <concept>ph::CEnum</concept>
    <concept>ph::CEnumWithSizeInfo</concept>
    <concept>ph::CNumber</concept>
    <concept>ph::CSame</concept>
    <concept>ph::CNotSame</concept>
    <concept>ph::CDerived</concept>
    <concept>ph::CBase</concept>
    <member kind="typedef">
      <type>TSdlSpectrum&lt; Owner, TSdlOptionalValue&lt; math::Spectrum, Owner &gt; &gt;</type>
      <name>TSdlOptionalSpectrum</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af0ff42b7c3e8f2de030bf56ef56d4183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEnumFlags&lt; EEmitterFeatureSet &gt;</type>
      <name>EmitterFeatureSet</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4616be60c1aeff887439d1133975d273</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEnumFlags&lt; EFaceTopology &gt;</type>
      <name>FaceTopology</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a11ef37ef626d3b16e84e3c1fd09563be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIndexedPolygonBuffer&lt; 3 &gt;</type>
      <name>IndexedTriangleBuffer</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a78a92fc691ffdc0cc813126fc2ff1024</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIndexedPolygonBuffer&lt; 4 &gt;</type>
      <name>IndexedQuadBuffer</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad429b643013658e535b35c0b5c0d710b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>math::TAABB2D&lt; int64 &gt;</type>
      <name>Region</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>acd27ed918ae0cbe8f569b976cd5451a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEnumFlags&lt; ESurfacePhenomenon &gt;</type>
      <name>SurfacePhenomena</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa6c0768badc216b23bd8e33df21325ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>SurfaceElemental</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7d654ccfb3f6bfe1a63ea7f3d1849e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEnumFlags&lt; ESurfaceHitReason &gt;</type>
      <name>SurfaceHitReason</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aec9f625abb71c23aef0d6af79acb24ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryTextureOperator&lt; InputType, OutputType, texfunc::TDefaultConversion&lt; InputType, OutputType &gt; &gt;</type>
      <name>TConversionTexture</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a427f9b452dac96eead6f8110980f1ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>math::TArithmeticArray&lt; T, N &gt;</type>
      <name>TTexPixel</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ab97e6a60b4dc7b237877d0564a393c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AltPath</type>
      <name>Path</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad4d517b7c9bbb562004680aeb970abaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8</type>
      <name>LdrComponent</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3de4b9d460d2c991a09e9736eeb0d1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float32</type>
      <name>HdrComponent</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7a9db669761b3f363c93db64cf5e6d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFrame&lt; LdrComponent, 3 &gt;</type>
      <name>LdrRgbFrame</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aaf425cdfe00df3512d1e3786edaa35cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFrame&lt; HdrComponent, 3 &gt;</type>
      <name>HdrRgbFrame</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6cb342b38d32fd46d08ca0ec0f69fe3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlAccessorVariant&lt; std::variant&lt; std::monostate, int64, float64, SdlConstInstance, AnyConstPtr &gt; &gt;</type>
      <name>SdlGetterVariant</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a1439b4daddebad05d308974519cb1ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlAccessorVariant&lt; std::variant&lt; std::monostate, int64, float64, SdlNonConstInstance, AnyNonConstPtr &gt; &gt;</type>
      <name>SdlSetterVariant</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a990883307b77c82e6ad38c53379b80b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlEnumField&lt; Owner, EnumType, TSdlOptionalValue&lt; EnumType, Owner &gt; &gt;</type>
      <name>TSdlOptionalEnumField</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa5a7dc4d1a0e0bc5e318eb67c85a6dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, IntType, TSdlOptionalValue&lt; IntType, Owner &gt; &gt;</type>
      <name>TSdlOptionalInteger</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a00a8c69f9f3a61f85886ea6700cad80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, int8 &gt;</type>
      <name>TSdlInt8</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a519e2bbce81591e2eae9de33814d6cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, uint8 &gt;</type>
      <name>TSdlUint8</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a47b6f137bf1043ac4c06ceed0c22e89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, int16 &gt;</type>
      <name>TSdlInt16</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>acd5590b10b21d94e0d71c00b6361e383</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, uint16 &gt;</type>
      <name>TSdlUint16</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7eda77bbea71d90c31978922a9f0190d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, int32 &gt;</type>
      <name>TSdlInt32</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a03a2acc6f431ec945bbc3c29b9d4c9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, uint32 &gt;</type>
      <name>TSdlUInt32</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af88c400b4049f044287e3b38bc046f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, int64 &gt;</type>
      <name>TSdlInt64</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a443d082e360d80c268ce94c7996b64f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, uint64 &gt;</type>
      <name>TSdlUInt64</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a18eb1988c5b2c023afec2acebf124e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlInteger&lt; Owner, std::size_t &gt;</type>
      <name>TSdlSize</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>add876349c46dc4478ff513981efd1d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, int8 &gt;</type>
      <name>TSdlOptionalInt8</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0714a8bae6f0be16c9e0968d2a732a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, uint8 &gt;</type>
      <name>TSdlOptionalUint8</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a16e393faf03d718c84fb0d1fcc0f6a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, int16 &gt;</type>
      <name>TSdlOptionalInt16</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aedc7f74e0d66ee02dd122ff5d777b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, uint16 &gt;</type>
      <name>TSdlOptionalUint16</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a04babf18c2d6adefe191b2f7b38d176c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, int32 &gt;</type>
      <name>TSdlOptionalInt32</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a695260783805b973a1dd63ee5cb3ff1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, uint32 &gt;</type>
      <name>TSdlOptionalUint32</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad099da59a8a33a227c4c0e912816e461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, int64 &gt;</type>
      <name>TSdlOptionalInt64</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a690dfe006c3b6621f9a3229e7c3ac4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, uint64 &gt;</type>
      <name>TSdlOptionalUint64</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad4911a44d5f38b87c0067e5dca6c106c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalInteger&lt; Owner, std::size_t &gt;</type>
      <name>TSdlOptionalSize</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a22338c97a77c418487f61c88cba3ac2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlQuaternion&lt; Owner, Element, TSdlOptionalValue&lt; math::TQuaternion&lt; Element &gt;, Owner &gt; &gt;</type>
      <name>TSdlOptionalQuaternion</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a37174d3bbffc90bf3e8672588b52e8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlReal&lt; Owner, FloatType, TSdlOptionalValue&lt; FloatType, Owner &gt; &gt;</type>
      <name>TSdlOptionalReal</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0091da03120d2b8b7e31d7d746cc12d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlReal&lt; Owner, float &gt;</type>
      <name>TSdlFloat</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af65636483232b0df5faa48e683086378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlReal&lt; Owner, double &gt;</type>
      <name>TSdlDouble</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a705ae6d003b933fc8c7ae10db1da29b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlReal&lt; Owner, float32 &gt;</type>
      <name>TSdlFloat32</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a38845a2207812d5704de01345286a816</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlReal&lt; Owner, float64 &gt;</type>
      <name>TSdlFloat64</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4840e22ba36fb85ffaf73ca6d2217a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalReal&lt; Owner, float &gt;</type>
      <name>TSdlOptionalFloat</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a81db01a1c95980a7ff00e16d3a208b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalReal&lt; Owner, double &gt;</type>
      <name>TSdlOptionalDouble</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9c5b912d2831773cfc87722bc3c41e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalReal&lt; Owner, float32 &gt;</type>
      <name>TSdlOptionalFloat32</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5c844f657285056a8c473753d736aae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalReal&lt; Owner, float64 &gt;</type>
      <name>TSdlOptionalFloat64</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a37742354a66e202966304a79dbd81adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlVector2&lt; Owner, Element, TSdlOptionalValue&lt; math::TVector2&lt; Element &gt;, Owner &gt; &gt;</type>
      <name>TSdlOptionalVector2</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a903e17961c51e8673866233998f71fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlVector2&lt; Owner, real &gt;</type>
      <name>TSdlVector2R</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4c1a3edbe4cde79931dead0a79dab3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlVector2&lt; Owner, std::size_t &gt;</type>
      <name>TSdlVector2S</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3c74f941b9ea47e0687ffd0bfcd9398f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalVector2&lt; Owner, real &gt;</type>
      <name>TSdlOptionalVector2R</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>adfbd241161c5c861dcab720127c7bb5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlOptionalVector2&lt; Owner, std::size_t &gt;</type>
      <name>TSdlOptionalVector2S</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a1eded0c779bceef87bee51347a5a95f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlVector3&lt; Owner, Element, TSdlOptionalValue&lt; math::TVector3&lt; Element &gt;, Owner &gt; &gt;</type>
      <name>TSdlOptionalVector3</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae1c95c1779ff7740a8b06abbc9501757</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlVector4&lt; Owner, Element, TSdlOptionalValue&lt; math::TVector4&lt; Element &gt;, Owner &gt; &gt;</type>
      <name>TSdlOptionalVector4</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9c05809a60b227576686f6d5bfc66b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlAnyInstance&lt; true &gt;</type>
      <name>SdlConstInstance</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6104d5410dba0cc05cd01e68a66282a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSdlAnyInstance&lt; false &gt;</type>
      <name>SdlNonConstInstance</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>afadfffbb48dd1e98af127b0e303db772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>SdlResourceId</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9fb37b88616e2b97fc2a1756fb8fd765</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAnyPtr&lt; true &gt;</type>
      <name>AnyConstPtr</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3597b04390bac91e1da93a999434a93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAnyPtr&lt; false &gt;</type>
      <name>AnyNonConstPtr</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0fb0ff3cce7d4159198bcdf8a935d1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBitFlags&lt; std::underlying_type_t&lt; EnumType &gt;, EnumType &gt;</type>
      <name>TEnumFlags</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3f4f4fe0baf012e4ad619b1da1706d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFixedMapEntry&lt; decltype(KEY), KEY, Value &gt;</type>
      <name>TFixedEnumMapEntry</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>adce9eabdbf38989c6a47917d57d3ccd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFixedMapBase&lt; Entries... &gt;</type>
      <name>TFixedEnumMap</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae58bb39772ba88739adfc83f2ee591c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFixedMapEntry&lt; fixed_integer_map_detail::Key, KEY, Value &gt;</type>
      <name>TFixedIntegerMapEntry</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0ac9bfdd383afe048118cdd3f71f183e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFixedMapBase&lt; Entries... &gt;</type>
      <name>TFixedIntegerMap</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae7665e2f424e68733a739219a2d6cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>function_detail::TFunction&lt; Func, MIN_SIZE_HINT &gt;</type>
      <name>TFunction</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ada0b8a3952aa28723b1425b91e284eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; Ts &gt;()[0])</type>
      <name>TSubscriptedTypeOf</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a50bb86682230583a8a7af51de3364a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::span&lt; T, EXTENT &gt;</type>
      <name>TSpan</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5390437e1d7fd7d167c847677ea146e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::span&lt; const T, EXTENT &gt;</type>
      <name>TSpanView</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a06c532bb78132f63638ec3ef52d46ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8</type>
      <name>CookPriority</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a286db9e0c70df683dcdccbb66275ec24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8</type>
      <name>CookLevel</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad15caa8691cbb04e085ff3914e3f4df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EEngineProject</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aff42ef94a4b6b6f5c793abc70beee644</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a7bfa30721c5e726ff17e3f972237a82c">Engine</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a325d07761e3c8b18a06f5620dca12807">EngineTest</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a96fa8b7c7ccf7eb972c09115476cf978">SDLGen</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a09b1331514c4e8e8f97b2a9cd06303bb">SDLGenCLI</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644aebdb11fc05b41c36db88d41ee3a40e35">PhotonCLI</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a344a7f427fb765610ef96eb7bce95257">Editor</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644aaf3825c5cae546eeccf651ce17158920">EditorLib</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a895980a0ebcd15465d0cf980f8504c25">EditorTest</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aff42ef94a4b6b6f5c793abc70beee644a69cc92a3d8f539741900e112e46963f8">IntersectError</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESurfaceRefineMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a30265de866d1bbbd547fe9133e32e2ac</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a30265de866d1bbbd547fe9133e32e2acae1ba155a9f2e8c3be94020eef32a0301">Manual</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a30265de866d1bbbd547fe9133e32e2aca71dac3f0f562eb0fbbfdf1e456dfad3e">Empirical</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a30265de866d1bbbd547fe9133e32e2aca701d2133d12ea3a960045f52be3d34b6">Iterative</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a30265de866d1bbbd547fe9133e32e2aca7a1920d61156abc05a60135aefe8bc67">Default</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EMathImageOp</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a57a17c5b6ec3b4a3672d77c819377fab</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377fabaec211f7c20af43e742bf2570c3cb84f9">Add</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377faba1d9baf077ee87921f57a8fe42d510b65">Subtract</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377fabae257376d913f3b53cbb4a9b19d770648">Multiply</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377faba0b914e196182d02615487e9793ecff3d">Divide</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377fabadd4fe0cc913f704600b97d1f5dd285de">Power</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377fabab51ca26c6c89cfc9bec338f7a0d3e0c8">Absolute</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57a17c5b6ec3b4a3672d77c819377faba08825280e3f8137556325061ba67ff8c">Clamp</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EImageSampleMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2f48403e7b58cd9fad4d93f919335cda</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a2f48403e7b58cd9fad4d93f919335cdaa6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f48403e7b58cd9fad4d93f919335cdaaaf17c98bbd83c27d6426d2ff3fa81d7f">Bilinear</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f48403e7b58cd9fad4d93f919335cdaa60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f48403e7b58cd9fad4d93f919335cdaa969a7b6f1f3951ef293b3ff281dc293d">Trilinear</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EImageWrapMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af0c6de5f0cbfd30ac84f7b0af8529b55</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="af0c6de5f0cbfd30ac84f7b0af8529b55a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="af0c6de5f0cbfd30ac84f7b0af8529b55a74556551231333c36debc3d373261134">ClampToEdge</enumvalue>
      <enumvalue file="namespaceph.html" anchor="af0c6de5f0cbfd30ac84f7b0af8529b55a7020426cfb0a204051be4b3053d2acc8">Repeat</enumvalue>
      <enumvalue file="namespaceph.html" anchor="af0c6de5f0cbfd30ac84f7b0af8529b55a897226ff039be1a3fb27e97e34552d18">FlippedClampToEdge</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESurfaceMaterialMixMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aecddf825affa0d182e369460ebcd93ed</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="aecddf825affa0d182e369460ebcd93eda412cb411cecf9196f717d6bc9c272c62">Lerp</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EInterfaceFresnel</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a048faf1b37d3a8ea674213e6a7f9cae4</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a048faf1b37d3a8ea674213e6a7f9cae4a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a048faf1b37d3a8ea674213e6a7f9cae4a21380fa682ca497ee223b93be1f9953b">Schlick</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a048faf1b37d3a8ea674213e6a7f9cae4a1649aed298f99d587e2eb30c1db5946b">Exact</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EInterfaceMicrosurface</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>adc27a9e67654dae7969a693c5a098a3a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="adc27a9e67654dae7969a693c5a098a3aa6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="adc27a9e67654dae7969a693c5a098a3aa6a5e30a900a5a4e904a907cbc8c491d2">TrowbridgeReitz</enumvalue>
      <enumvalue file="namespaceph.html" anchor="adc27a9e67654dae7969a693c5a098a3aad2709c197188889c61725cecd7e02d08">Beckmann</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ERoughnessToAlpha</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0cdbba0cf5ad47eb99146ac3b2d912e7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a0cdbba0cf5ad47eb99146ac3b2d912e7a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a0cdbba0cf5ad47eb99146ac3b2d912e7a429df89d49d2483879e54923fdcaf121">Equaled</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a0cdbba0cf5ad47eb99146ac3b2d912e7a78c292a97a97d823610fa2722e8a980b">Squared</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a0cdbba0cf5ad47eb99146ac3b2d912e7a17b6ca87c58375a31c05a8deb5b0506e">PbrtV3</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EIdealSubstance</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2aa26a9c11d0ea8479e4535a280a8f7e</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a2aa26a9c11d0ea8479e4535a280a8f7ea59988751eea31359e0983b22e1531b70">Absorber</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2aa26a9c11d0ea8479e4535a280a8f7ea1af0f6884fdf4904994be2202a0f2ee6">DielectricReflector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2aa26a9c11d0ea8479e4535a280a8f7ea3f21e5ccdd3297eea03afc7025b0eeed">MetallicReflector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2aa26a9c11d0ea8479e4535a280a8f7ea39d6734cb0fef11456b9b52a03ed7a15">Transmitter</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2aa26a9c11d0ea8479e4535a280a8f7ea9d5ce2208818f6863beffd5f8834ca32">Dielectric</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECoordSys</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a586c922092ae1fe5b4123bee53c9a404</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a586c922092ae1fe5b4123bee53c9a404af5a7924e621e84c9280a9a27e1bcb7f6">World</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a586c922092ae1fe5b4123bee53c9a404a509820290d57f333403f490dde7316f4">Local</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a586c922092ae1fe5b4123bee53c9a404a62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EEmitterFeatureSet</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a16b931b405833c11fca5c86a7514e603</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a16b931b405833c11fca5c86a7514e603aca9f7df16118c955d832641a24a208d1">ZeroBounceSample</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a16b931b405833c11fca5c86a7514e603a5009a2197d7e7d6a3fd59251182bea9e">BsdfSample</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a16b931b405833c11fca5c86a7514e603aa3757c2711f95523b455cc8d06863a00">DirectSample</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a16b931b405833c11fca5c86a7514e603ad535f71962b1df95f5984de5ea462309">EmissionSample</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a16b931b405833c11fca5c86a7514e603a7a1920d61156abc05a60135aefe8bc67">Default</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EFaceTopology</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a1dc2c49d4eab6261d803a5e3ec99dfb9</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a1dc2c49d4eab6261d803a5e3ec99dfb9a0db377921f4ce762c62526131097968f">General</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a1dc2c49d4eab6261d803a5e3ec99dfb9a93a097009b6443e711996c50b5354adf">Planar</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a1dc2c49d4eab6261d803a5e3ec99dfb9a766cae017fab4bcc1d1e83fbb9af87c3">Convex</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a1dc2c49d4eab6261d803a5e3ec99dfb9a1cb290ed5917afdbf2532bb2bf6f0192">Concave</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a1dc2c49d4eab6261d803a5e3ec99dfb9a241f88afa7becb8633ca074c48e0d77c">Triangular</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a1dc2c49d4eab6261d803a5e3ec99dfb9ab1aa854f21a681be6412a6df6340ab00">Quadrilateral</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EBvhType</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a905055bd65c81f2ec4e8c000e033722a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a905055bd65c81f2ec4e8c000e033722aa87e955627b59c274ec4cbdd3a130f9bb">HALF</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a905055bd65c81f2ec4e8c000e033722aaafa8fd4b90a3f8123b4bd30446518a7e">MIDPOINT</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a905055bd65c81f2ec4e8c000e033722aa253aea2d07611aeb89ce012571903289">SAH_BUCKET</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a905055bd65c81f2ec4e8c000e033722aaab7566cd685ce0d9856d8e5a24992ada">SAH_EDGE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EVertexAttribute</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7e33dd6c4833698ef95d3dcfe04f0a0f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0fa2bcdbedf7a76a5d8d76873d033caff0a">Position_0</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0fa584a226372849b59fcc9dd72317337fe">Normal_0</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0fa9bb81c69942d0ccea748ca1d9c3dfe1d">Tangent_0</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0fa7d078cb52b0f5a0cedb8b74cd0aaa0d8">TexCoord_0</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0fae4351004fb5284c47325b69df2216354">TexCoord_1</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0faccf8c0749aec88174f3941b634b91578">Color_0</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7e33dd6c4833698ef95d3dcfe04f0a0fa62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EVertexElement</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa337ebb3d9ef8a3f187703426deebe77</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77a166495adc0d0f53bee6baecc577f5204">Float32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77a26e6ed77470c6f2f830ecf874e6c0d55">Float16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77ac06129f6e6e15c09328365e553f1dc31">Int32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77a39bc2ae44b184207f560ff8619823208">Int16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77a777e98c67bf963015f229e97635d9bf9">OctahedralUnitVec3_32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77abcbf0110339bfb8c55b0e6ee6d7bf8a2">OctahedralUnitVec3_24</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aa337ebb3d9ef8a3f187703426deebe77a62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EAttribute</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a11c9affc6f83fcc2a03443c050b0224b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba8ff93218b26ccf6cee0593b2531b4eb5">LIGHT_ENERGY</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba0673ac94786c19bbdef2c51acb6d16a6">LIGHT_ENERGY_HALF_EFFORT</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba7b5bc857edd70b3792c8f96f0f9d0f02">LIGHT_ENERGY_INDEXED</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba1e23852820b9154316c7c06e2b7ba051">NORMAL</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224baaa1780b4fcce2d5d9af13dc25386d111">DEPTH</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba352cc90b456cca2ac3c6fd8def123e54">TEXTURE_COORDINATE</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba90b4ba73224408e82ade8a072a3712c1">POSITION</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a11c9affc6f83fcc2a03443c050b0224ba62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ERegionStatus</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af3aab646b468fc89b9303fa5e31aae24</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="af3aab646b468fc89b9303fa5e31aae24a4bbb8f967da6d1a610596d7257179c2b">Invalid</enumvalue>
      <enumvalue file="namespaceph.html" anchor="af3aab646b468fc89b9303fa5e31aae24a8f3d10eb21bd36347c258679eba9e92b">Finished</enumvalue>
      <enumvalue file="namespaceph.html" anchor="af3aab646b468fc89b9303fa5e31aae24a6909beea5b50605780e3411f879fe916">Updating</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPhotonData</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2f105bf7a6233cdb646a691b6055d71d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a2f105bf7a6233cdb646a691b6055d71da41fafd368452a2128ac8bdc3934d4cb5">ThroughputRadiance</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f105bf7a6233cdb646a691b6055d71dafea4e0fe069dc6f6171dd6044abb2365">Pos</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f105bf7a6233cdb646a691b6055d71daee99ad64c489a5fa63f46f42f78e37e2">FromDir</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f105bf7a6233cdb646a691b6055d71da551879a34d6ed879f4716e33d7b1cd92">GeometryNormal</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a2f105bf7a6233cdb646a691b6055d71da1a383a1c74749bfaaabb286b854b2f4c">PathLength</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EViewpointData</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7d646adaf4c44ccfcbbe787120a7cb1f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1fa2eee368b673cbaedbb7a829562fa85d7">SurfaceHit</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1faa03022bf680492c4c7e9a0723ed7cd71">RasterCoord</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1fad1106ccca74e98877ed6d7890c70bb2c">Radius</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1fa119fba41118f04e03c5f46ff06b79da1">NumPhotons</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1faf3f155d55288e275dbad53d835b03757">Tau</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1fa0737ad937b6f497fd48cf5b484ed4c9b">ViewThroughput</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1fa19eec7ab9f3a463f76c6b158371b05c5">ViewDir</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a7d646adaf4c44ccfcbbe787120a7cb1fa5aefb2b156a27259f3f640c349bf6f93">ViewRadiance</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EViewPathSampleMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a57656cbaf1b805ac50daee0f84abc13d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a57656cbaf1b805ac50daee0f84abc13da7f865686024b06cce3a9f086efe10b8e">SinglePath</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a57656cbaf1b805ac50daee0f84abc13da7a4c3b54c3454e0dd272e21c3f4a4cdf">ElementalBranch</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EHaltonPermutation</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6f9cec199c98aceea98eb3ffbec5a13b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a6f9cec199c98aceea98eb3ffbec5a13ba6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a6f9cec199c98aceea98eb3ffbec5a13ba4457d440870ad6d42bab9082d9bf9b61">Fixed</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a6f9cec199c98aceea98eb3ffbec5a13badcb1cd0b41cbe56d7255fc7598503e86">PerDigit</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a6f9cec199c98aceea98eb3ffbec5a13baaf0bc706fca5c47970afe73c144fe6fd">Owen</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EHaltonSequence</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a8cbd49e3924f328a4384a500016945a2</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a8cbd49e3924f328a4384a500016945a2a0a52da7a03a6de3beefe54f8c03ad80d">Original</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a8cbd49e3924f328a4384a500016945a2ad0bf83bf5396b08b6435d781c969c228">Leap</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a8cbd49e3924f328a4384a500016945a2accacf7f98607883290a38afb9b5b5428">RandomLeap</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a8cbd49e3924f328a4384a500016945a2ac571ee7c6e4a91dc6a3bff6a54778b80">RandomStart</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EScheduler</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aee2a083456e7081b6351a649a27bc9c1</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1a4c3246a186dddf08c2c1165f04c2276d">Bulk</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1ace7566d1d08cc094b74cf283cf9c56a5">Stripe</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1a5174d1309f275ba6f275db3af9eb3e18">Grid</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1ac5457c5f3cfb4da8638ce7190f8e5152">Tile</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1ac978545ade9f5ce21bfa0353c04feda9">Spiral</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee2a083456e7081b6351a649a27bc9c1a624d8393339a24776a0ed071ae9ddfd2">SpiralGrid</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EMaskingShadowing</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0c0fa392ffb753722f245acbe724095f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a0c0fa392ffb753722f245acbe724095faa87be3fbbfdee88228800d38d3c9246f">HightCorrelated</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a0c0fa392ffb753722f245acbe724095fa218140cc94a645f77dd15a2af6f640c2">Separable</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a0c0fa392ffb753722f245acbe724095fa825264b26cbc9ca8644b00dd60a302b7">DirectionCorrelated</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a0c0fa392ffb753722f245acbe724095fa64b4251e86241ad733ecea97639e9492">HeightDirectionCorrelated</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESurfacePhenomenon</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a596116c16341de64c97b20395d758456</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456a96b6d5999da0dee7f6be9ed568bb11b3">DiffuseReflection</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456a0d9b4e1d210bf9c211c445814263df99">NearDiffuseReflection</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456a6a08e398f84e0c348effb4341042b207">DeltaReflection</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456ac8e33f42e15c4d38920faff1dd1ca4e5">GlossyReflection</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456a3699ab93b11d737252d3587b2355bcb9">DiffuseTransmission</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456a30697ad6a8d3ed45c8c2e64df6bd82f9">NearDiffuseTransmission</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456a1b72c07dc09193b5c23aec91a665a751">DeltaTransmission</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a596116c16341de64c97b20395d758456abfc8a569b7687c064e61b4cf701cc0c8">GlossyTransmission</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESurfaceHitReason</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3624e7ffb99b556c1cf59f3bbfbc6afa</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a3624e7ffb99b556c1cf59f3bbfbc6afaa4bbb8f967da6d1a610596d7257179c2b">Invalid</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3624e7ffb99b556c1cf59f3bbfbc6afaa88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3624e7ffb99b556c1cf59f3bbfbc6afaad0fa933fa8c2bf79571c16d657ee0383">IncidentRay</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3624e7ffb99b556c1cf59f3bbfbc6afaa6ffca551d875be000c71d6ae0ceea16d">SampledPos</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3624e7ffb99b556c1cf59f3bbfbc6afaa1dffcca819566351b10a22017129b9d2">SampledDir</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3624e7ffb99b556c1cf59f3bbfbc6afaa60bb5154dab623db355be36cf93cfdf2">SampledPosDir</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETexWrapMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a688ddbdef5155c5446bd8547de456e02</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a688ddbdef5155c5446bd8547de456e02a5be68175be14dfaa080165456c2e9555">REPEAT</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a688ddbdef5155c5446bd8547de456e02aca305cdc5d749d643055111218063f26">CLAMP_TO_EDGE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPictureFile</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad8edde251ef79a653acc8df14db78b9e</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9ea88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9ea55505ba281b015ec31f03ccb151b2a34">PNG</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9ea92769fe7c40229f4301d6125e0a9e928">JPG</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9eaa5d5ca1447586e23dc011f8c0cc0a6db">BMP</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9ea64efd9bcf7b83f22fe9796967255e103">TGA</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9ea6cad826248cd3f4e93da71e7b49928e3">HDR</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9eaeb63de47b8691d315fefa05620191725">EXR</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9eabe58eaf3213b73159d62141db01075e8">HighPrecisionEXR</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad8edde251ef79a653acc8df14db78b9ea8ab7c767521dbb64df23bc64d37cc53b">PFM</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPlyDataFormat</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9e6ed9b88a8d1405f78b22272a97d9fe</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a9e6ed9b88a8d1405f78b22272a97d9fead2cd8253361a9c732d21ca1d336599cc">ASCII</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a9e6ed9b88a8d1405f78b22272a97d9fea09d714092131885d741dd4738f2ebe4f">BinaryLittleEndian</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a9e6ed9b88a8d1405f78b22272a97d9feab60d771fdf58d1046f9e617725edf8d9">BinaryBigEndian</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a9e6ed9b88a8d1405f78b22272a97d9fea44119bf3bae5d40a8d0766b91c304aac">NUM</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPlyDataType</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a97a9109e30bbf746d1cc750fd37866b7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7a7d839b2c12bfd40ac121b4cc9e81c539">Int8</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7ab31df9c476d20e85ff898121efe11b5a">UInt8</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7a39bc2ae44b184207f560ff8619823208">Int16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7a8bd950a9d7779b83f5c30046c9aaf1cf">UInt16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7ac06129f6e6e15c09328365e553f1dc31">Int32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7ae7956ed7be1c5025a27ed3cb42a396bd">UInt32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7a166495adc0d0f53bee6baecc577f5204">Float32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7ad2b556d8a8f5c8ac323f51a4b82e79a0">Float64</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a97a9109e30bbf746d1cc750fd37866b7a44119bf3bae5d40a8d0766b91c304aac">NUM</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EAccelerator</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae3bb0a7d6923b55d615af996ece4e2c4</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="ae3bb0a7d6923b55d615af996ece4e2c4a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ae3bb0a7d6923b55d615af996ece4e2c4a434d59f863a023077b7d8e8d9607a955">BruteForce</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ae3bb0a7d6923b55d615af996ece4e2c4a9f81c52bdd5797801a0bd46508fa27a6">BVH</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ae3bb0a7d6923b55d615af996ece4e2c4a811c1544db380e5715594be8ee0c958d">Kdtree</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ae3bb0a7d6923b55d615af996ece4e2c4a3e6d462fa076c0f260b12ecc21222ddc">IndexedKdtree</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPhotonMappingMode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>acae1a4214e781895f3275c4923f42faa</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="acae1a4214e781895f3275c4923f42faaa7d3cf600bf044a1aaf9324807bd8d13e">Vanilla</enumvalue>
      <enumvalue file="namespaceph.html" anchor="acae1a4214e781895f3275c4923f42faaa9712e73e86ea0fe944ca2ce3f9f7dd87">Progressive</enumvalue>
      <enumvalue file="namespaceph.html" anchor="acae1a4214e781895f3275c4923f42faaaab0213436dd58e9f121285930cffbffc">StochasticProgressive</enumvalue>
      <enumvalue file="namespaceph.html" anchor="acae1a4214e781895f3275c4923f42faaa7fe29a6a6b41ec888830d5da5f36e948">ProbabilisticProgressive</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ERayEnergyEstimator</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad2b2972641b7279cac3ed861bfd53962</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="ad2b2972641b7279cac3ed861bfd53962a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad2b2972641b7279cac3ed861bfd53962ae3e04c1e37661f65affb615b35725e17">BVPT</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad2b2972641b7279cac3ed861bfd53962a5e01925d0c4009dfe9340bf2ba68b61a">BNEEPT</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ad2b2972641b7279cac3ed861bfd53962a920171568786ba0c4b69411e8bd37cc7">BVPTDL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESampleFilter</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a89a12b6c4ceab0a76aa0b86762750b07</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a89a12b6c4ceab0a76aa0b86762750b07a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a89a12b6c4ceab0a76aa0b86762750b07a3cfce651e667ab85486dd42a8185f98a">Box</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a89a12b6c4ceab0a76aa0b86762750b07afedf7ba6075fb5526a7ace0b9385528d">Gaussian</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a89a12b6c4ceab0a76aa0b86762750b07a1c97f70353c86dda616b7fe5263322b1">MitchellNetravali</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a89a12b6c4ceab0a76aa0b86762750b07a7c83be4d47a76f1b8b9657d7e6a00c00">BlackmanHarris</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPicturePixelComponent</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a23ecfa075f794993e5d9436e0d54d5f0</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0ace2c8aed9c2fa0cfbed56cbda4d8bf07">Empty</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0a7d839b2c12bfd40ac121b4cc9e81c539">Int8</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0ab31df9c476d20e85ff898121efe11b5a">UInt8</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0a39bc2ae44b184207f560ff8619823208">Int16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0a8bd950a9d7779b83f5c30046c9aaf1cf">UInt16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0ac06129f6e6e15c09328365e553f1dc31">Int32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0ae7956ed7be1c5025a27ed3cb42a396bd">UInt32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0afbde23b11d7e59af7828e81144c8b487">Int64</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0aaf71234725f0470ccf993e263a8b820a">UInt64</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0a26e6ed77470c6f2f830ecf874e6c0d55">Float16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0a166495adc0d0f53bee6baecc577f5204">Float32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a23ecfa075f794993e5d9436e0d54d5f0ad2b556d8a8f5c8ac323f51a4b82e79a0">Float64</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESdlDataFormat</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ace69f5c0a73308d2c88c512f8b70016e</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea66ba162102bbf6ae31b522aec561735e">Single</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea1bebc5ae2822f8e361fb0ce57b5e09e2">Vector2</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea02b4dab58bbc49e0851fb3fd8df520cc">Vector3</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016eacf637ffa2663b40ae52857aa0bdb1ec3">Vector4</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea3743af167c53361d795405561faac2b2">Quaternion</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea57dea6f5039281b7fee517fc43bf3110">Vector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea7decf65e5ac729bc6b05ea5973f82634">Vector2Vector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016eada9a464174196456e8bdc1875e1e3402">Vector3Vector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016eae80557d8b9529acb879b12a559b2f4f4">QuaternionVector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016eacb67865004a547563fb81509c97eb208">SharedPtrVector</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016eade28634b657af8f02ddc02770b583590">SharedPointer</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016eaa2c9fc8e1cc50a063d9f1a556d606a0e">UniquePointer</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ace69f5c0a73308d2c88c512f8b70016ea62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESdlDataType</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ada33bb2d4bc26b3ec1da2acb348ef4eb</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba7d839b2c12bfd40ac121b4cc9e81c539">Int8</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebab31df9c476d20e85ff898121efe11b5a">UInt8</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba39bc2ae44b184207f560ff8619823208">Int16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba8bd950a9d7779b83f5c30046c9aaf1cf">UInt16</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebac06129f6e6e15c09328365e553f1dc31">Int32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebae7956ed7be1c5025a27ed3cb42a396bd">UInt32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebafbde23b11d7e59af7828e81144c8b487">Int64</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebaaf71234725f0470ccf993e263a8b820a">UInt64</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba166495adc0d0f53bee6baecc577f5204">Float32</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebad2b556d8a8f5c8ac323f51a4b82e79a0">Float64</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebac26f15e86e3de4c398a8273272aba034">Bool</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba27118326006d3829667a400ad23d5d98">String</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebaac70412e939d72a9234cdebb1af5867b">Path</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebaeb222d153d13a436ed254a8eabc42700">ResourceIdentifier</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebac0d49cbee3b571a77b483aaceb20270f">Spectrum</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebacf20423ed48998082c20099488a0917c">Enum</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba886ef5dbd655a6c97726d7091c6b173e">Struct</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebad9c6333623e6357515fcbf17be806273">Geometry</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebad92a8333dd3ccb895cc65f7455b71206">Material</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba8226588f03da49b857e5ddf8c508dd2d">Motion</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba4cbb187bee11b3b06558284cd3e17d8d">LightSource</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba1cc84619677de81ee6e44149845270a3">Actor</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebabe53a0541a6d36f6ecb879fa2c584b08">Image</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba3c61c04825dd7c0cc614b51840b0e433">FrameProcessor</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba83d694b8b98b155b8817ac412c4d3e9c">Observer</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4ebaba50656fda764a074dd26ab06d13b3d7">SampleSource</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba246eb6da3962c4c606501926a42d0b71">Visualizer</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba054b4f3ea543c990f6b125f41af6ebf7">Option</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba497031794414a552435f90151ac3b54b">Object</enumvalue>
      <enumvalue file="namespaceph.html" anchor="ada33bb2d4bc26b3ec1da2acb348ef4eba62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESdlTypeCategory</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aee9d551563491bc7930c4ca21e22204b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba7b77aed5146529c3116a67b97c3a3ee3">Ref_Geometry</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba4bd225eceaf89433e0bc847a60b185da">Ref_Material</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204bae532102d42b963b65896f61673c0709b">Ref_Motion</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba82ffa509a63f0d2c294e6de3ccc31573">Ref_LightSource</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204baefde95994b59471d0a11721ea557c049">Ref_Image</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204bad9bad7a78004290b75b7e614b273807e">Ref_Actor</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba5a81d2b7ba0d731c083d2528a88be222">Ref_FrameProcessor</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204bab85c12598381f8f8b8e512f4dcf5e916">Ref_Observer</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204baa417aeca7536fb7779b3017d4a2bee91">Ref_SampleSource</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204baddf30737283494e0c82660063013c290">Ref_Visualizer</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba4963cade08bc6dd93e303ddb29991261">Ref_Option</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204bad490977845b37e83c7e2cd129f414134">Ref_Object</enumvalue>
      <enumvalue file="namespaceph.html" anchor="aee9d551563491bc7930c4ca21e22204ba62e5cef85d46f1a5a2144d9fd463b79e">SIZE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EFieldImportance</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3f81b078141211109d7e3b340d0525cc</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a3f81b078141211109d7e3b340d0525ccaebb061953c0454b2c8ee7b0ac615ebcd">Optional</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3f81b078141211109d7e3b340d0525cca0cfbb34b0d0b5ecbec9383c0e7fd4337">NiceToHave</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a3f81b078141211109d7e3b340d0525ccab651efdb98a5d6bd2b3935d0c3f4a5e2">Required</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESdlClauseValue</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7669e02dae8904277fce9e122644856d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>General</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7669e02dae8904277fce9e122644856da5897cb629fc4e569aa0aeb43fea64e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PersistentTargetName</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7669e02dae8904277fce9e122644856da1d475f8ff2d4f1ad18e81db0cc32a9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CachedTargetName</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7669e02dae8904277fce9e122644856daee520b374117a59f08d6677a179a20d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESdlCommandType</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a748a9a96952018f789a076563beb0eea</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaa88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaa1d47b3daf92c302138270c38d820865c">Directive</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaaf19dbf2edb3a0bd74b0524d960ff21eb">Load</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaaad7dcd0ec48cd500746a3e9ef80c0a9b">Removal</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaa06933067aafd48425d67bcb01bba5cb6">Update</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaa8f44785c8c19412c5b6611db30984514">Execution</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaa2e33bf520f9ef0c0a06294f6cf6dd3d4">NamedDataPacket</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a748a9a96952018f789a076563beb0eeaaf0a43d6e5eea19af337a176e9836acdd">Phantom</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESriType</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a13cdff6c8d3b4261e594c78d87e970bf</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a13cdff6c8d3b4261e594c78d87e970bfa88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a13cdff6c8d3b4261e594c78d87e970bfa94c51f19c37f96ed231f5a0ae512b2a8">Bundle</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a13cdff6c8d3b4261e594c78d87e970bfab206a1b4ea1097761f78e8876f6da779">External</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECookPriority</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a201cf6953978d616dd79db826163626d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a201cf6953978d616dd79db826163626da655d20c1ca69519ca647684edbb2db35">High</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a201cf6953978d616dd79db826163626da960b44c579bc2f6818d2daaf9e4c16f0">Normal</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a201cf6953978d616dd79db826163626da28d0edd045e05cf5af64e35ae0c4c6ef">Low</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECookLevel</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6f9f9c205359845b3b02105599f9355e</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph.html" anchor="a6f9f9c205359845b3b02105599f9355ea7fb55ed0b7a30342ba6da306428cae04">First</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a6f9f9c205359845b3b02105599f9355ea960b44c579bc2f6818d2daaf9e4c16f0">Normal</enumvalue>
      <enumvalue file="namespaceph.html" anchor="a6f9f9c205359845b3b02105599f9355ead55b30607c2a9a2616347d6edb789f6b">Last</enumvalue>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>to_string</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>adecb230bffadee8258a10560793943e0</anchor>
      <arglist>(EEngineProject project)</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>refine_mode_to_str</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad926da1f841759aaceaf4e0a01728cce</anchor>
      <arglist>(const ESurfaceRefineMode mode)</arglist>
    </member>
    <member kind="function">
      <type>ESurfaceRefineMode</type>
      <name>str_to_refine_mode</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a8068f447441136ef3344aca3d8f23f4c</anchor>
      <arglist>(std::string_view mode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init_render_engine</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a60da5e7ab42a0d3a36a7f295bc195104</anchor>
      <arglist>(std::optional&lt; EngineInitSettings &gt; settings=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exit_render_engine</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aca5bc49554ff9661d84c2ccd0177ee1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const SdlClass *const &gt;</type>
      <name>get_registered_engine_classes</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aab09925f354e81c4c7ca9de8b0254f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const SdlEnum *const &gt;</type>
      <name>get_registered_engine_enums</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a8f595262f727d42186f93246a4c8c59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>get_config_directory</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a77f71b917ce19447bdf3beecbbf60297</anchor>
      <arglist>(EEngineProject project)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>get_internal_resource_directory</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2ffd8eebd1d2acfefaf1e263f940e275</anchor>
      <arglist>(EEngineProject project)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>get_resource_directory</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa1a778265943c0debe5b5629b88232f2</anchor>
      <arglist>(EEngineProject project)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>get_script_directory</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a08e937fb6acacf601e7a5e5d40818fd3</anchor>
      <arglist>(EEngineProject project)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a22de7fa53c3e037a2cc035ebf920a11a</anchor>
      <arglist>(DomeActor, Actor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3c7738661a9bcfabaa33393d24375fe4</anchor>
      <arglist>(AModel, Actor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a21df628aa392b0052a46995040d14bdb</anchor>
      <arglist>(TransformedInstanceActor, Actor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aadcf1c84c79cdf2b5af76fb50dd0ae50</anchor>
      <arglist>(PreethamDomeActor, Actor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ab8e4ea1b32368bf12905e3f6dfe9dbca</anchor>
      <arglist>(Geometry, Geometry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a803ff27d39205d340e7e6aed45b68823</anchor>
      <arglist>(GPlyPolygonMesh, Geometry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5d5c372527b62fa2fd6d65f60656f957</anchor>
      <arglist>(BinaryMixedImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a701e045c0f76b6407417880756078adb</anchor>
      <arglist>(BlackBodyRadiationImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa9011132dc975c828adf0e1be60ccde7</anchor>
      <arglist>(CheckerboardImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae837306a665092ee1742aa9bddd08c12</anchor>
      <arglist>(ConstantImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad1b3e599bbd39f829fc1fc50ced179f3</anchor>
      <arglist>(MathImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aedf82d563067a357169d6507f995e4b5</anchor>
      <arglist>(TSdlGeneralEnum&lt; EMathImageOp &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5b12f0fe4f68c0c012f1bace3a2970fd</anchor>
      <arglist>(RasterFileImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af87a634c0c2fb812c88a9dee27b05a2c</anchor>
      <arglist>(TSdlGeneralEnum&lt; EImageSampleMode &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a567a9e0fa9bc44956712408b3194601d</anchor>
      <arglist>(TSdlGeneralEnum&lt; EImageWrapMode &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a372ba70737cdd6e553b3fd4c835ca81f</anchor>
      <arglist>(SwizzledImage, Image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aad121cfbb57a4fdbeb7cc74161a59efc</anchor>
      <arglist>(AGeometricLight, Actor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aee54c3b850419b0ecd478fbf41be2546</anchor>
      <arglist>(AIesAttenuatedLight, Actor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a72d6d07a034be5296df43ed89b04b87e</anchor>
      <arglist>(IESAttenuatedSource, Light)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a280d69cc78031c56bfbe34915e9b5c5c</anchor>
      <arglist>(ModelSource, Light)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aedf07b8b26894d1609136f15fa75f0ea</anchor>
      <arglist>(BinaryMixedSurfaceMaterial, Material)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6809091726c49c5224780e2c656ff8a4</anchor>
      <arglist>(TSdlGeneralEnum&lt; ESurfaceMaterialMixMode &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5a269ea92e79d65f15f6f383e8b0e14e</anchor>
      <arglist>(ConductiveInterfaceInfo, BSDF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a415fb12fe5c9c4699fbe27dec49ffc4f</anchor>
      <arglist>(DielectricInterfaceInfo, BSDF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aaa72f09a432d6cc7eee4e55ed2227cd3</anchor>
      <arglist>(MicrosurfaceInfo, BSDF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9891596228fa00362f4f2899dbc7df4a</anchor>
      <arglist>(TSdlGeneralEnum&lt; EInterfaceFresnel &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ac11403956e6e0d53db6acb19a893554d</anchor>
      <arglist>(TSdlGeneralEnum&lt; EInterfaceMicrosurface &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7054eecf94211f2b85d06aab02800419</anchor>
      <arglist>(TSdlGeneralEnum&lt; ERoughnessToAlpha &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ac9f39a9895e68929b346be8ffe2e2576</anchor>
      <arglist>(TSdlGeneralEnum&lt; EMaskingShadowing &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>afe6136894b583cab28073b9d5dddaa12</anchor>
      <arglist>(FullMaterial, Material)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3353eaba808a21be56eda6311cc4ede2</anchor>
      <arglist>(IdealSubstance, Material)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a8a6fcea16f5c4888bd94adc8006fad9b</anchor>
      <arglist>(TSdlGeneralEnum&lt; EIdealSubstance &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a54b638edecc520a9be4e15dd15d97b7f</anchor>
      <arglist>(TSdlGeneralEnum&lt; math::EColorSpace &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ab7dc8fa710127db9bf2431839128202c</anchor>
      <arglist>(TSdlGeneralEnum&lt; math::EColorUsage &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af8d22cf306042080a0359590cd0e2449</anchor>
      <arglist>(ApiDatabase, Core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a80d974a06e4c6688aa073fb29167a094</anchor>
      <arglist>(InitAndExit, Engine)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init_engine_core</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a88835ac567e5eb62c8e75d6161ded599</anchor>
      <arglist>(const EngineInitSettings &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init_engine_IO_infrastructure</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a899c29679777ed53118d557aa0e268ac</anchor>
      <arglist>(const EngineInitSettings &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>after_engine_init</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7c6ad024eb242dde37f585ec8dfb9455</anchor>
      <arglist>(const EngineInitSettings &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>before_engine_exit</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa5795c26f595a389514837de551d7dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exit_API_database</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2f6f5008c69294f8129701bfff40aaf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0f07f47ab93951f83f972a8366d131a7</anchor>
      <arglist>(CppAPI, Engine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadTestScene</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a108e15f6d6a7e214ca9f906d87097317</anchor>
      <arglist>(VisualWorld *const out_world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCornellBox</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a882d4f58e6302cee015760770172cbff</anchor>
      <arglist>(VisualWorld *const out_world, const real boxSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCbox3ObjScene</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a10abe887f58a85052819b13c00a4b5cf</anchor>
      <arglist>(VisualWorld *const out_world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load5bScene</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>afe50265099a40986dd7370928dbf868f</anchor>
      <arglist>(VisualWorld *const out_world)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_ENUM_FLAG_OPERATORS</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aeca242d059b1e6a4c6ea726cada61526</anchor>
      <arglist>(EEmitterFeatureSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aafe2ec2a48c84b11d9041f1e944a10a0</anchor>
      <arglist>(LatLongEnvEmitter, Emitter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa75bf6eeacb4c6472df20d094e931453</anchor>
      <arglist>(PowerFavoringEmitterSampler, EmitterSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5401e661c547db2defb19091e36f109a</anchor>
      <arglist>(Engine, Core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aaa29b662fca4136b57746c974297246c</anchor>
      <arglist>(Update, Engine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a49574d74ae86df3b07f5851aa02c00d3</anchor>
      <arglist>(Render, Engine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7d7b8ab2c5366a28d74ee735bb31f1a1</anchor>
      <arglist>(LoadCommands, Engine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a57bc2503d1f1e441532a1e03f6c541a1</anchor>
      <arglist>(FullEstimation, Render_BNEEPTEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a94c5deaff082f6b199dae44ced6aa59c</anchor>
      <arglist>(ZeroBounceDirect, Render_BNEEPTEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0f43dc21e4a600d5bc3527d9b5809f34</anchor>
      <arglist>(DirectLightSampling, Render_BNEEPTEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a8f84782167bd8287f3d28bd1c5fc1684</anchor>
      <arglist>(BSDFAndIndirectLightSampling, Render_BNEEPTEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_ENUM_FLAG_OPERATORS</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2a664f656f69f203a6328c8930e607d8</anchor>
      <arglist>(EFaceTopology)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3c5521265a432f954dd4398f06370c20</anchor>
      <arglist>(IndexedUIntBuffer, Core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a86f9fcf59f6c28215ff030d7d206c142</anchor>
      <arglist>(IndexedVertexBuffer, Core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa677c52575a936346cb47c539bdc492f</anchor>
      <arglist>(PrimitiveMetadata, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5fbfa4add559805a05df04f357a89abe</anchor>
      <arglist>(Receiver, Receiver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a119259705cc0087cef8a3905bcfa0b46</anchor>
      <arglist>(AttributeRenderer, Renderer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accept_photon_by_surface_topology</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ab9d4b27758a195a566ee213c1f41f96f</anchor>
      <arglist>(const Photon &amp;photon, const math::Vector3R &amp;Ng, const math::Vector3R &amp;Ns, const math::Vector3R &amp;L, const math::Vector3R &amp;V, const lta::SidednessAgreement &amp;sidedness)</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>estimate_certainly_lost_energy</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a7bddcd600f81212f4e8ff4071dc640b7</anchor>
      <arglist>(const std::size_t viewPathLength, const SurfaceHit &amp;X, const math::Spectrum &amp;viewPathThroughput, const TPhotonMapInfo&lt; Photon &gt; &amp;photonMapInfo, const Scene *scene, const std::size_t minFullPathLength=1, const std::size_t maxFullPathLength=PMCommonParams::DEFAULT_MAX_PATH_LENGTH)</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>estimate_lost_energy_for_extending</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4157e74ef0b3f83ee81fb342f3cdb0b8</anchor>
      <arglist>(const std::size_t viewPathLength, const SurfaceHit &amp;X, const math::Spectrum &amp;viewPathThroughput, const TPhotonMapInfo&lt; Photon &gt; &amp;photonMapInfo, const Scene *scene, const std::size_t minFullPathLength=1, const std::size_t maxFullPathLength=PMCommonParams::DEFAULT_MAX_PATH_LENGTH)</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>estimate_lost_energy_for_merging</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a45199b25a540099512e7209137092fdf</anchor>
      <arglist>(const std::size_t viewPathLength, const SurfaceHit &amp;X, const math::Spectrum &amp;viewPathThroughput, const TPhotonMapInfo&lt; Photon &gt; &amp;photonMapInfo, const Scene *scene, const std::size_t minFullPathLength=1, const std::size_t maxFullPathLength=PMCommonParams::DEFAULT_MAX_PATH_LENGTH)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a38dce708993529ab7ca465edcee8beb4</anchor>
      <arglist>(PMRenderer, Renderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DECLARE_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a816bf626d54388ef6a32ceec5da38dcb</anchor>
      <arglist>(PMRenderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>afd6ac975585232b779c7810a17c6c039</anchor>
      <arglist>(Renderer, Renderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ac0a59b7d48fee05529757e929682bb84</anchor>
      <arglist>(EqualSamplingRenderer, Renderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_ENUM_FLAG_OPERATORS</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0e94768bd94280304bcdd6840fcef7f7</anchor>
      <arglist>(ESurfacePhenomenon)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4a128256e0d0ed6f58830c7065c2245a</anchor>
      <arglist>(TableFGD, BSDF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5a9b4a28e77e0964885aff0ac9522131</anchor>
      <arglist>(TableTIR, BSDF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INLINE_ENUM_FLAG_OPERATORS</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad4dde21b6fca2c67970845292bc452e0</anchor>
      <arglist>(ESurfaceHitReason)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ada04794a3fa1976eee46108b634451e1</anchor>
      <arglist>(PreethamTexture, Texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3aa9846b6f5a5e46e1c9603e03ec6576</anchor>
      <arglist>(BinaryFileReader, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad79ff4f40ce964f8af86284577846b9d</anchor>
      <arglist>(IesData, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af5c98ca9f99f04ad0b3c40525788a678</anchor>
      <arglist>(IesFile, DataIO)</arglist>
    </member>
    <member kind="function">
      <type>EPictureFile</type>
      <name>picture_file_type_from_extension</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0d8eb62ffb67824498be550c9eb1d797</anchor>
      <arglist>(std::string_view ext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa943e0720870f0b06f20835a9c6e0ae5</anchor>
      <arglist>(ExrFileReader, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a130911a0b30e47cad029871990eae72c</anchor>
      <arglist>(PfmFile, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ac32d4239918c18a0c11dc864b736c504</anchor>
      <arglist>(PlyFile, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2753f9a35470869d59bf688e5fecb6c6</anchor>
      <arglist>(TSdlGeneralEnum&lt; EPictureFile &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0a177fdefc749936831e01ebc59b4fdc</anchor>
      <arglist>(FormattedTextInputStream, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3c6cba714409c7d55e0a88ca75a0b4cb</anchor>
      <arglist>(TextFileLoader, DataIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2adb896e1157d30a707f1ae40991b770</anchor>
      <arglist>(CoreCookedUnit, Core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a5cd166648ba00d35ff8ae32d4fe4b88e</anchor>
      <arglist>(OrientedRasterObserver, Observer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2a6ff9a160785de1bcf95d44cdf48aaa</anchor>
      <arglist>(TSdlGeneralEnum&lt; EHaltonPermutation &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a1e78bfaf7c40a41dbbb10fa7b8f8502e</anchor>
      <arglist>(TSdlGeneralEnum&lt; EHaltonSequence &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a86d5004d07a8aa90f4b32659e5713446</anchor>
      <arglist>(TSdlGeneralEnum&lt; EAccelerator &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9bb63a88582f2ef1632f2690da884ceb</anchor>
      <arglist>(SingleFrameRenderSession, RenderSession)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a8238e0fcd9af1311e21b3aa3905ac10f</anchor>
      <arglist>(PathTracingVisualizer, Visualizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa49e28df538f4d0ab96e67e5e781115d</anchor>
      <arglist>(PhotonMappingVisualizer, Visualizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a221c34ac839ea8cbabfa16a0dd84ba1d</anchor>
      <arglist>(TSdlGeneralEnum&lt; EPhotonMappingMode &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>affbc1ea1d7e7166c60eb57348ac80e3e</anchor>
      <arglist>(TSdlGeneralEnum&lt; ERayEnergyEstimator &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3fb2a9fefb213b9bea298e9cb740f13e</anchor>
      <arglist>(TSdlGeneralEnum&lt; ESampleFilter &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_SDL_ENUM</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ac208706c51a4384f670b133c9f4dc6b2</anchor>
      <arglist>(TSdlGeneralEnum&lt; EScheduler &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a405fa2af2369bd9c2f0cf36cd4c6fde5</anchor>
      <arglist>(FrameUtilities, Frame)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>num_bytes_in_component</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a79ce18c05d52f4bf7e48b1c359bda57e</anchor>
      <arglist>(const EPicturePixelComponent componentType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3452c096a71aa1d9fc8d317957bcce38</anchor>
      <arglist>(SdlClass, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3c11f1d25601af654c4863969c1c9228</anchor>
      <arglist>(SdlField, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aae252465a4b0963cc0a0a3bca3b35171</anchor>
      <arglist>(SdlFunction, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>acdd05bb656625785a18e6c6351f36ae2</anchor>
      <arglist>(SdlStruct, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a106cbe54d29fc84e49586574d817ebac</anchor>
      <arglist>(RawResourceCollection, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ad15b9e3ee385917ccb87ee6763f4b969</anchor>
      <arglist>(SceneDescription, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4dfe99ff9f9e69504f654d4621d0b8b7</anchor>
      <arglist>(SdlCommandGenerator, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6a9c26e5099b69b820460fa5c4f81d6b</anchor>
      <arglist>(SdlCommandParser, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a39a1acc3c2aefe2e42b5fe57bbbdcf2b</anchor>
      <arglist>(ParseCommandTotal, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3cc1fd5bbce43496f09580fd6bd449b1</anchor>
      <arglist>(ParseLoadCommand, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aaf68bb5c0404d3e4e8320e2dd87b9d46</anchor>
      <arglist>(ParseExecutionCommand, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a1d138698add606a394a34b724892e4c0</anchor>
      <arglist>(ParseDirectiveCommand, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a112aed18b3ffd9bfa444ad4345b19498</anchor>
      <arglist>(ParseNamedDataPacketCommand, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2fff0d1e8022ed73c41d945c4604d3e4</anchor>
      <arglist>(GetCommandHeader, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a3bc8c01fc6b7e3fe06debe7d010552c3</anchor>
      <arglist>(GetClauses, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a99ab0cdc69b09e9e15c84eca643d8888</anchor>
      <arglist>(GetSDLClass, SdlCommandParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a754597b2508af77f22397ed2349b1991</anchor>
      <arglist>(SdlDataPacketCollection, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ab01d1fb086019d8e7490fff9096406c0</anchor>
      <arglist>(SdlDependencyResolver, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a05ffddfbcaf2980325dcd3481fdbb7fb</anchor>
      <arglist>(SdlNamedOutputClauses, SDL)</arglist>
    </member>
    <member kind="function">
      <type>SdlResourceId</type>
      <name>gen_sdl_resource_id</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa2b9cc88fda3a1eac57a9c4d6a5cecb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa048ccdf10753b09e6e5fc32071bbd3e</anchor>
      <arglist>(SdlSceneFileReader, SDL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2ac4051ebfc527bcf2302b5245689fe2</anchor>
      <arglist>(SdlSceneFileWriter, SDL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_work</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4bb82cb7d948a7f9feca7dffb744e02f</anchor>
      <arglist>(const std::size_t numWorkers, std::function&lt; void(std::size_t workerIdx) &gt; work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_work</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af97a91c8284655b7b30f7e815137585a</anchor>
      <arglist>(const std::size_t totalWorkSize, const std::size_t numWorkers, std::function&lt; void(std::size_t workerIdx, std::size_t workBegin, std::size_t workEnd) &gt; work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_work</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae17e9e02b729060f7221d4fe9b9636b2</anchor>
      <arglist>(FixedSizeThreadPool &amp;workers, const std::size_t totalWorkSize, std::function&lt; void(std::size_t workerIdx, std::size_t workBegin, std::size_t workEnd) &gt; work)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9dc26f15ed5b02d504bdb55d98ef6538</anchor>
      <arglist>(Workflow, Concurrent)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>pointer_access</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>adc22002ce22a2c36d495dbc0eae3f103</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>regular_access</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a088f88ce0c13cb136e0578ba5e45627d</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Target</type>
      <name>bitwise_cast</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a74286ca8596f0e37fdc3650c3e72c691</anchor>
      <arglist>(const Source &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>consteval bool</type>
      <name>is_big_endian</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a6c349a68b88d7c9de75e72be90894a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>consteval std::size_t</type>
      <name>sizeof_in_bits</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>af8b01b99e42b7dd15dca28359ac1bf9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>enum_to_value</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae490c9f4fa11ad921cdb383d4c84445c</anchor>
      <arglist>(const EnumType enumValue)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>enum_to_string</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2e8e601f93efff74360a027ba59d4232</anchor>
      <arglist>(const EnumType enumValue)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>enum_size</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a0d3e015dc9f7674dbf795a75385cda0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2b9ecdafbf7b0658a51ce38ed886914b</anchor>
      <arglist>(CookedNamedResource, World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a13dde8639dcb2ef57ce3be6d1913285d</anchor>
      <arglist>(CookedResourceCollection, World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aaba6a726e3df9d018c46357d10f2a446</anchor>
      <arglist>(CookedResourceCollectionBase, World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a2ebc31bb9b5b15e44e85611f368b2692</anchor>
      <arglist>(CookingContext, World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ab3bdb6d266747ed655c241d71728c0dd</anchor>
      <arglist>(TransientResourceCache, World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a87c8598e7a320591f9ca2104ce9f4057</anchor>
      <arglist>(VisualWorld, World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aa12e341b52d12ec3f997c98f7af0a3bb</anchor>
      <arglist>(CookActorLevels, VisualWorld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a82e55f503fa2e0e462bab57c41afe32d</anchor>
      <arglist>(UpdateAccelerators, VisualWorld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_TIMER_STAT</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a9c558c75ee7803f435576aa26cd04c81</anchor>
      <arglist>(UpdateLightSamplers, VisualWorld)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ESurfacePhenomenon</type>
      <name>ALL_SURFACE_PHENOMENA</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aabe77df4e760c2bcfffe395279637254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ESurfacePhenomenon</type>
      <name>DIFFUSE_SURFACE_PHENOMENA</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>aaaa32f41a9ebef78b7140b84be224e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ESurfacePhenomenon</type>
      <name>DELTA_SURFACE_PHENOMENA</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a4fc648c9255debfc7f2fc587b7c017cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ESurfacePhenomenon</type>
      <name>GLOSSY_SURFACE_PHENOMENA</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>a977d196601c9db7f3b1b7be34769d1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr SurfaceElemental</type>
      <name>ALL_SURFACE_ELEMENTALS</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ac2562eda4f90efe4267c1f774fd211bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr SdlResourceId</type>
      <name>EMPTY_SDL_RESOURCE_ID</name>
      <anchorfile>namespaceph.html</anchorfile>
      <anchor>ae9a4a45222070d004082cfbcfc6fd9e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::constant</name>
    <filename>namespaceph_1_1constant.html</filename>
  </compound>
  <compound kind="namespace">
    <name>ph::detail</name>
    <filename>namespaceph_1_1detail.html</filename>
    <concept>ph::detail::CPrimitiveMetaGetter</concept>
    <concept>ph::detail::CPrimitiveGetter</concept>
    <member kind="typedef">
      <type>uint8</type>
      <name>EmitterFlagIntType</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a28be57d5ff0fc9e06d3980ebb8e7409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8</type>
      <name>SurfaceHitReasonIntType</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a66cc86df67a0c260b76459b78264b580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ISdlResource &gt;</type>
      <name>load_single_resource</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a12ea344db21bc39b18958af984af070a</anchor>
      <arglist>(const SdlClass *resourceClass, const Path &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_single_resource</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a5eb2dcf1450d496ce75711442c1d6051</anchor>
      <arglist>(const std::shared_ptr&lt; ISdlResource &gt; &amp;resource, const Path &amp;file)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>efs_zero_bounce_sample_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a45553709e22a4c60edbb6b00ff8cb84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>efs_bsdf_sample_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a3fec5995c96eb8d32ac8126f52738ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>efs_direct_sample_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a0901b0fd2f114bc743b4445259c9f262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>efs_emission_sample_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a1051864e1a0147b9c6b2d8cd917eea2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>shr_unknown_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>ad6294352d5c32a45eb1386caccf76e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>shr_incident_ray_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a119285860228c108c59da6358f651fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>shr_sampled_pos_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a102fa6b0e28324bfd88f8cce244a27b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>shr_sampled_dir_bits</name>
      <anchorfile>namespaceph_1_1detail.html</anchorfile>
      <anchor>a75888fe8da875a22d86245dfcfc487d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::field_set_op</name>
    <filename>namespaceph_1_1field__set__op.html</filename>
    <class kind="struct">ph::field_set_op::NoOpNoticeReceiver</class>
    <member kind="function">
      <type>void</type>
      <name>load_fields_from_sdl</name>
      <anchorfile>namespaceph_1_1field__set__op.html</anchorfile>
      <anchor>a79ed90f2437a8f2caf1a958dffd9d4c1</anchor>
      <arglist>(Owner &amp;owner, FieldSet &amp;fieldSet, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx, NoticeReceiver noticeReceiver=NoOpNoticeReceiver())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_fields_from_sdl_with_redundant_clauses</name>
      <anchorfile>namespaceph_1_1field__set__op.html</anchorfile>
      <anchor>ab11e22444f68057b00a8b86fc071b7d6</anchor>
      <arglist>(Owner &amp;owner, FieldSet &amp;fieldSet, SdlInputClauses &amp;clauses, const SdlInputContext &amp;ctx, NoticeReceiver noticeReceiver=NoOpNoticeReceiver())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::fixed_integer_map_detail</name>
    <filename>namespaceph_1_1fixed__integer__map__detail.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>namespaceph_1_1fixed__integer__map__detail.html</anchorfile>
      <anchor>acac85a3dc082bd8bde34d22adc0ba118</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::frame_detail</name>
    <filename>namespaceph_1_1frame__detail.html</filename>
    <concept>ph::frame_detail::CIsGetPixelOp</concept>
    <concept>ph::frame_detail::CIsGetPixelWithCoordsOp</concept>
    <concept>ph::frame_detail::CIsSetPixelOp</concept>
    <concept>ph::frame_detail::CIsSetPixelWithCoordsOp</concept>
    <concept>ph::frame_detail::CIsGetAndSetPixelOp</concept>
    <concept>ph::frame_detail::CIsGetAndSetPixelWithCoordsOp</concept>
  </compound>
  <compound kind="namespace">
    <name>ph::frame_utils</name>
    <filename>namespaceph_1_1frame__utils.html</filename>
    <member kind="function">
      <type>void</type>
      <name>to_LDR</name>
      <anchorfile>namespaceph_1_1frame__utils.html</anchorfile>
      <anchor>ab471f156f3941f7323e43ac40ef6f713</anchor>
      <arglist>(const HdrRgbFrame &amp;srcFrame, LdrRgbFrame *const out_dstFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_HDR</name>
      <anchorfile>namespaceph_1_1frame__utils.html</anchorfile>
      <anchor>a0c4ec75fd6a7a3927f4b1f62cde15364</anchor>
      <arglist>(const LdrRgbFrame &amp;srcFrame, HdrRgbFrame *const out_dstFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs_diff</name>
      <anchorfile>namespaceph_1_1frame__utils.html</anchorfile>
      <anchor>a937efded0f4c69116e2d7ea0b9800236</anchor>
      <arglist>(const HdrRgbFrame &amp;frameA, const HdrRgbFrame &amp;frameB, HdrRgbFrame *const out_result)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calc_MSE</name>
      <anchorfile>namespaceph_1_1frame__utils.html</anchorfile>
      <anchor>afebdfa125f8a5f3c27c879de6ed230d6</anchor>
      <arglist>(const HdrRgbFrame &amp;expected, const HdrRgbFrame &amp;estimated)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>calc_RMSE</name>
      <anchorfile>namespaceph_1_1frame__utils.html</anchorfile>
      <anchor>a4f31a828f27933f533c60631236071ce</anchor>
      <arglist>(const HdrRgbFrame &amp;expected, const HdrRgbFrame &amp;estimated)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::function_detail</name>
    <filename>namespaceph_1_1function__detail.html</filename>
    <class kind="class">ph::function_detail::TFunction</class>
    <class kind="class">ph::function_detail::TFunction&lt; R(Args...), MIN_SIZE_HINT &gt;</class>
    <concept>ph::function_detail::CFreeFunctionForm</concept>
    <concept>ph::function_detail::CConstCallableMethodForm</concept>
    <concept>ph::function_detail::CNonConstCallableMethodForm</concept>
    <concept>ph::function_detail::CEmptyFunctorForm</concept>
    <concept>ph::function_detail::CNonEmptyFunctorForm</concept>
  </compound>
  <compound kind="namespace">
    <name>ph::halton_detail</name>
    <filename>namespaceph_1_1halton__detail.html</filename>
    <class kind="class">ph::halton_detail::FixedPermuter</class>
    <class kind="class">ph::halton_detail::OwenScrambledPermuter</class>
    <class kind="class">ph::halton_detail::PerDigitPermuter</class>
    <member kind="typedef">
      <type>uint16</type>
      <name>TableDigit</name>
      <anchorfile>namespaceph_1_1halton__detail.html</anchorfile>
      <anchor>a0c221470c062befff8f01aef0b893e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TableDigit[]&gt;</type>
      <name>PermutationTable</name>
      <anchorfile>namespaceph_1_1halton__detail.html</anchorfile>
      <anchor>aabea1d10c6c23b6f7a8400572dd47383</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PermutationTable</type>
      <name>make_table</name>
      <anchorfile>namespaceph_1_1halton__detail.html</anchorfile>
      <anchor>abce430fbfd971846f6e4d5e0c57e57b1</anchor>
      <arglist>(const std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>radical_inverse</name>
      <anchorfile>namespaceph_1_1halton__detail.html</anchorfile>
      <anchor>a9b7e2b2e2de1a123d98f894c6a643fc9</anchor>
      <arglist>(const uint64 dimIndex, const uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>radical_inverse_permuted</name>
      <anchorfile>namespaceph_1_1halton__detail.html</anchorfile>
      <anchor>aa86d64f308daaafd7a78bc87ee5d97bf</anchor>
      <arglist>(const uint64 dimIndex, const uint64 value, DigitPermuter permuter)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>MAX_DIMENSIONS</name>
      <anchorfile>namespaceph_1_1halton__detail.html</anchorfile>
      <anchor>a2292d507c66c8f3e40d2676edc8dabbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::io_utils</name>
    <filename>namespaceph_1_1io__utils.html</filename>
    <namespace>ph::io_utils::detail</namespace>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_INTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a3117b4d8e4badb212bc7bee07fe93b86</anchor>
      <arglist>(IOUtils, DataIO)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>load_text</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a2e934957a32785a8dcd9a1a7a582e77d</anchor>
      <arglist>(const Path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_LDR_support</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a18e84a0e4e48684997602b15755cf36d</anchor>
      <arglist>(std::string_view filenameExt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_HDR_support</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>afcf79c073491c5c3b9dacce09e9d3696</anchor>
      <arglist>(std::string_view filenameExt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_picture_meta</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>aff4fae423d58613eb2fec1d621edf70d</anchor>
      <arglist>(const Path &amp;picturePath, PictureMeta *out_meta, math::Vector2S *out_sizePx=nullptr, std::size_t *out_numChannels=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a381100aaa22fa86ccc5ff8c87a565589</anchor>
      <arglist>(const LdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a69813067293444e69f4d094eb7ed74f4</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a43e5af2622cf524ca1674d4c06376c70</anchor>
      <arglist>(const LdrRgbFrame &amp;frame, const Path &amp;fileDirectory, const std::string &amp;name, EPictureFile format, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>ac30ac5927735d1dd6d0993cda8a8c8c7</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, const Path &amp;fileDirectory, const std::string &amp;name, EPictureFile format, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_png</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a97a4f612c5741c568651a7352dd2a0de</anchor>
      <arglist>(const LdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_jpg</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af51cba71961ec2614f083dbe2a442042</anchor>
      <arglist>(const LdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_bmp</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>aacb20617d015bc5a72a3817d61a9ea00</anchor>
      <arglist>(const LdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_tga</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1f0d7ac35a360a9c7df2e0240db4bf7e</anchor>
      <arglist>(const LdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_hdr</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a2f06fa1897fae791d86189fd330dea3c</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_exr</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>aa18eaec9ac21b6d3d2ff0ac4fb8d87bb</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_exr_high_precision</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af90d7dae5e4ec0263734bd239de8d5a2</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_pfm</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a780356651c870e0ff5be0e502381a417</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, const Path &amp;filePath, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_exr</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>aad661467e5880ec4e35080e0cc196d71</anchor>
      <arglist>(const HdrRgbFrame &amp;frame, ByteBuffer &amp;buffer, const PictureMeta *meta=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af6b9201cabac0ca79886015e6844f0ad</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_LDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1978bc25913af8602657119f6c2a3dd9</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_HDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>acaaa62539992a1e1f8ac5af21f4223c6</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>af6b9201cabac0ca79886015e6844f0ad</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx=0)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_LDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>a1978bc25913af8602657119f6c2a3dd9</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
    <member kind="function">
      <type>RegularPicture</type>
      <name>load_HDR_picture</name>
      <anchorfile>namespaceph_1_1io__utils.html</anchorfile>
      <anchor>acaaa62539992a1e1f8ac5af21f4223c6</anchor>
      <arglist>(const Path &amp;picturePath, std::size_t layerIdx)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::io_utils::detail</name>
    <filename>namespaceph_1_1io__utils_1_1detail.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>init_picture_IO</name>
      <anchorfile>namespaceph_1_1io__utils_1_1detail.html</anchorfile>
      <anchor>ad67053f85a8c15c85846346d2b20167a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::lbconv</name>
    <filename>namespaceph_1_1lbconv.html</filename>
    <member kind="function">
      <type>real</type>
      <name>alpha_to_variance</name>
      <anchorfile>namespaceph_1_1lbconv.html</anchorfile>
      <anchor>a3e87387ee1246eabc22e211cf54b31b9</anchor>
      <arglist>(const real alpha)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>variance_to_alpha</name>
      <anchorfile>namespaceph_1_1lbconv.html</anchorfile>
      <anchor>a36b32626e9521491cc4911d1ae561591</anchor>
      <arglist>(const real variance)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>g_to_variance</name>
      <anchorfile>namespaceph_1_1lbconv.html</anchorfile>
      <anchor>adcc40348c1973e9b7f78dc9637dc9b4b</anchor>
      <arglist>(const real g)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::lta</name>
    <filename>namespaceph_1_1lta.html</filename>
    <class kind="class">ph::lta::PDF</class>
    <class kind="class">ph::lta::PtVolumetricEstimator</class>
    <class kind="class">ph::lta::RussianRoulette</class>
    <class kind="class">ph::lta::SenseEvent</class>
    <class kind="class">ph::lta::SidednessAgreement</class>
    <class kind="class">ph::lta::SurfaceHitRefinery</class>
    <class kind="class">ph::lta::SurfaceTracer</class>
    <class kind="class">ph::lta::TDirectLightEstimator</class>
    <class kind="class">ph::lta::TIndirectLightEstimator</class>
    <class kind="class">ph::lta::TMIS</class>
    <member kind="enumeration">
      <type></type>
      <name>EMISStyle</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>a780154430f4189e2ebe4fadc88efd0bb</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a780154430f4189e2ebe4fadc88efd0bba99a808d8d16122d70e44bd7f709d30fb">Balance</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a780154430f4189e2ebe4fadc88efd0bbadd4fe0cc913f704600b97d1f5dd285de">Power</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EDomain</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>a517f9714c97ec4a5bcdd5beae0eaf9dd</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9ddace2c8aed9c2fa0cfbed56cbda4d8bf07">Empty</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9dda3f8ffe43765c1baeaa1f3644b48e23b2">SolidAngle</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9dda7f68bd71d0f54b4dd0197456b146ff75">HalfSolidAngle</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9ddadeec4ff19974f12ed781cb9a59064214">Area</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9ddaf3d7d007f2c4d9612c4128a2a6a8b011">UV01</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9ddac75c6f8c5e1c2970cf2feaf8a7331651">UVW01</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a517f9714c97ec4a5bcdd5beae0eaf9dda4984667940802dedc139aa7a430a6553">Discrete</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETransport</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>a3f1c39ae8879cc69ac22c3be15f9669b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a3f1c39ae8879cc69ac22c3be15f9669ba955d9ba35580bdcc7bed3f11736b0f76">Radiance</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a3f1c39ae8879cc69ac22c3be15f9669baf0d806461f33568d758feb27d468352a">Importance</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESidednessPolicy</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>a1d33ee239cb49375e222139a0fe1c17d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a1d33ee239cb49375e222139a0fe1c17dae9bfe1a1271065147039d9a297a4c785">DoNotCare</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a1d33ee239cb49375e222139a0fe1c17da2e979835dd62324f5bfe217449ba4974">Strict</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a1d33ee239cb49375e222139a0fe1c17da4a2e14f37fb676f4c83b874ddeaf35e3">TrustGeometry</enumvalue>
      <enumvalue file="namespaceph_1_1lta.html" anchor="a1d33ee239cb49375e222139a0fe1c17dab6e0902c88f013423a338605519edaf4">TrustShading</enumvalue>
    </member>
    <member kind="function">
      <type>real</type>
      <name>pdfA_to_pdfW</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>a90b17b807b0048a147f97ee48bbaa6bd</anchor>
      <arglist>(const real pdfA, const math::Vector3R &amp;dAPosToTargetPos, const math::Vector3R &amp;dANormal)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>importance_scatter_Ns_corrector</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>a1669152400e7fb4f968fae1a6211cc2c</anchor>
      <arglist>(const math::Vector3R &amp;Ns, const math::Vector3R &amp;Ng, const math::Vector3R &amp;L, const math::Vector3R &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>importance_BSDF_Ns_corrector</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>af768ce875381b972a702a221c9800a50</anchor>
      <arglist>(const math::Vector3R &amp;Ns, const math::Vector3R &amp;Ng, const math::Vector3R &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>tamed_importance_scatter_Ns_corrector</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>ab2afad625c810a9f23c2d71d9c07031f</anchor>
      <arglist>(const math::Vector3R &amp;Ns, const math::Vector3R &amp;Ng, const math::Vector3R &amp;L, const math::Vector3R &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>tamed_importance_BSDF_Ns_corrector</name>
      <anchorfile>namespaceph_1_1lta.html</anchorfile>
      <anchor>ac017a110ee09b8cb7c2d5b0b1ff10f11</anchor>
      <arglist>(const math::Vector3R &amp;Ns, const math::Vector3R &amp;Ng, const math::Vector3R &amp;V)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math</name>
    <filename>namespaceph_1_1math.html</filename>
    <namespace>ph::math::constant</namespace>
    <namespace>ph::math::detail</namespace>
    <namespace>ph::math::radical_inverse_detail</namespace>
    <namespace>ph::math::spectral_data</namespace>
    <namespace>ph::math::table</namespace>
    <class kind="class">ph::math::ColorError</class>
    <class kind="class">ph::math::DefaultSpectralSampleProps</class>
    <class kind="class">ph::math::DeterministicSeeder</class>
    <class kind="class">ph::math::DynamicLinearTranslation</class>
    <class kind="class">ph::math::IndexedKdtreeParams</class>
    <class kind="class">ph::math::MathException</class>
    <class kind="class">ph::math::Pcg32</class>
    <class kind="class">ph::math::Pcg64DXSM</class>
    <class kind="class">ph::math::Random</class>
    <class kind="class">ph::math::Real</class>
    <class kind="class">ph::math::RigidTransform</class>
    <class kind="class">ph::math::StaticAffineTransform</class>
    <class kind="class">ph::math::StaticRigidTransform</class>
    <class kind="class">ph::math::TAABB2D</class>
    <class kind="class">ph::math::TAABB3D</class>
    <class kind="class">ph::math::TAnalyticalIntegrator1D</class>
    <class kind="class">ph::math::TArithmeticArray</class>
    <class kind="class">ph::math::TArithmeticArrayBase</class>
    <class kind="class">ph::math::TBasicTriangle</class>
    <class kind="class">ph::math::TBlackmanHarris2D</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::Bradford, T &gt;</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::VonKries, T &gt;</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinition&lt; EChromaticAdaptation::XYZScaling, T &gt;</class>
    <class kind="class">ph::math::TChromaticAdaptationDefinitionHelper</class>
    <class kind="class">ph::math::TColorSpaceDefinition</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::ACEScg, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::CIE_xyY, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::CIE_XYZ, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::Linear_sRGB, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::Spectral_Smits, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinition&lt; EColorSpace::sRGB, T &gt;</class>
    <class kind="class">ph::math::TColorSpaceDefinitionHelper</class>
    <class kind="class">ph::math::TConstant2D</class>
    <class kind="class">ph::math::TDecomposedTransform</class>
    <class kind="class">ph::math::TDisk</class>
    <class kind="class">ph::math::TFraction</class>
    <class kind="class">ph::math::TGaussian2D</class>
    <class kind="class">ph::math::THeavisideStep2D</class>
    <class kind="class">ph::math::THemisphere</class>
    <class kind="struct">ph::math::TIndexedItemEndpoint</class>
    <class kind="class">ph::math::TIndexedKdtree</class>
    <class kind="class">ph::math::TIndexedKdtreeNode</class>
    <class kind="class">ph::math::TIndexedPointKdtree</class>
    <class kind="class">ph::math::TIndexedVector3</class>
    <class kind="class">ph::math::TLinearGradient2D</class>
    <class kind="class">ph::math::TLineSegment</class>
    <class kind="class">ph::math::TMathFunction2D</class>
    <class kind="class">ph::math::TMatrix2</class>
    <class kind="class">ph::math::TMatrix3</class>
    <class kind="class">ph::math::TMatrix4</class>
    <class kind="class">ph::math::TMatrixMxNBase</class>
    <class kind="class">ph::math::TMatrixNBase</class>
    <class kind="class">ph::math::TMitchellNetravaliCubic2D</class>
    <class kind="class">ph::math::TMt19937</class>
    <class kind="class">ph::math::TOrthonormalBasis3</class>
    <class kind="class">ph::math::TPiecewiseLinear1D</class>
    <class kind="class">ph::math::TPwcDistribution1D</class>
    <class kind="class">ph::math::TPwcDistribution2D</class>
    <class kind="class">ph::math::TQuaternion</class>
    <class kind="class">ph::math::Transform</class>
    <class kind="class">ph::math::TSampledSpectrum</class>
    <class kind="class">ph::math::TSpectralColorSpaceDefinitionHelper</class>
    <class kind="class">ph::math::TSpectrumBase</class>
    <class kind="class">ph::math::TSphere</class>
    <class kind="class">ph::math::TTriangle</class>
    <class kind="class">ph::math::TTristimulusColorSpaceDefinitionHelper</class>
    <class kind="class">ph::math::TTristimulusSpectrum</class>
    <class kind="class">ph::math::TUniformRandomBitGenerator</class>
    <class kind="class">ph::math::TUrbg32x2</class>
    <class kind="class">ph::math::TVector2</class>
    <class kind="class">ph::math::TVector3</class>
    <class kind="class">ph::math::TVector4</class>
    <class kind="class">ph::math::TVectorN</class>
    <class kind="class">ph::math::TVectorNBase</class>
    <class kind="class">ph::math::TWatertightTriangle</class>
    <concept>ph::math::CItemSegmentIntersectionTesterVanilla</concept>
    <concept>ph::math::CItemSegmentIntersectionTesterWithIndex</concept>
    <concept>ph::math::CItemSegmentIntersectionTester</concept>
    <concept>ph::math::CIndexedPointKdtreeItemStorage</concept>
    <concept>ph::math::CChromaticAdaptationDefinition</concept>
    <concept>ph::math::CSpectralSampleProps</concept>
    <concept>ph::math::CColorValuesInterface</concept>
    <concept>ph::math::CRawColorValues</concept>
    <concept>ph::math::CHasColorSpaceProperties</concept>
    <concept>ph::math::CSupportsTristimulusConversions</concept>
    <concept>ph::math::CSupportsSpectralConversions</concept>
    <concept>ph::math::CTristimulusColorSpaceDefinition</concept>
    <concept>ph::math::CSpectralColorSpaceDefinition</concept>
    <concept>ph::math::CColorSpaceDefinition</concept>
    <concept>ph::math::CURBG</concept>
    <member kind="typedef">
      <type>real</type>
      <name>ColorValue</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49168cf166e251842d147b4817b81451</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; T, N &gt;</type>
      <name>TRawColorValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a12658ecededdac55092a57c4f9febfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TRawColorValues&lt; T, 3 &gt;</type>
      <name>TTristimulusValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9d9c64dd71192e59bad3d1a729ce7e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TRawColorValues&lt; T, SampleProps::NUM_SAMPLES &gt;</type>
      <name>TSpectralSampleValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1b3bd4f6ba91a04531f5255c5412ff0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TRawColorValues&lt; T, 2 &gt;</type>
      <name>TChromaticityValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ab71252d1381fb143766d7896203da1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TTristimulusValues&lt; ColorValue &gt;</type>
      <name>TristimulusValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7d1ffe02a63011a87bb8f07f84f0599a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpectralSampleValues&lt; ColorValue &gt;</type>
      <name>SpectralSampleValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2dca4d0c3ba12850dad1c78cb2eedc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TChromaticityValues&lt; ColorValue &gt;</type>
      <name>ChromaticityValues</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8c45466605166051ca2b0bdec9fdf342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TColorSpaceDefinition&lt; COLOR_SPACE, ColorValue &gt;</type>
      <name>TColorSpaceDef</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ab3e21d6b5a4a4c8e9fe688503985d0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TTristimulusSpectrum&lt; EColorSpace::Linear_sRGB, ColorValue &gt;</type>
      <name>LinearSRGBSpectrum</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a07ca259e58d4026d72b73226f50f4284</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TTristimulusSpectrum&lt; EColorSpace::ACEScg, ColorValue &gt;</type>
      <name>ACESSpectrum</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8761cd5a4bcc6da06a6939afc7e4809f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSampledSpectrum&lt; EColorSpace::Spectral, ColorValue, DefaultSpectralSampleProps &gt;</type>
      <name>SampledSpectrum</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3e0de37aa6bd1b81c757c72aa9dbcc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearSRGBSpectrum</type>
      <name>Spectrum</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad1ddf3801f5a9ea201227d49747987ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; T, N &gt;</type>
      <name>TRawRowVector</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9c5f3c73da314594366d55e13b2f0bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; T, M &gt;</type>
      <name>TRawColVector</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5aa250c98d6629854f22463e66641a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; std::array&lt; T, N &gt;, M &gt;</type>
      <name>TRawMatrix</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9b74bbe66f5d40ab627a922a70067d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAABB2D&lt; real &gt;</type>
      <name>AABB2D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aa27d1888edfba7c31c0f15d5160425d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAABB3D&lt; real &gt;</type>
      <name>AABB3D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a79409e9e8aea24d984f98f3acb483937</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector2&lt; int32f &gt;</type>
      <name>Vector2I</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafb860ee092ad350998e421ec301f1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector2&lt; uint32f &gt;</type>
      <name>Vector2UI</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad5f56ce24184913580be02e86153730c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector2&lt; real &gt;</type>
      <name>Vector2R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5895ae9c1c8e89f96302ff21d9f15df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector2&lt; float32 &gt;</type>
      <name>Vector2F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0d46fd778c3ed33c97280c6d9a1e3090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector2&lt; float64 &gt;</type>
      <name>Vector2D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a130315e9eff82a9a70624253b5e6de50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector2&lt; std::size_t &gt;</type>
      <name>Vector2S</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>acaabd5e409a78972a00c7164c0c48eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector3&lt; int32f &gt;</type>
      <name>Vector3I</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4735f418b96ade0373a4df823a7f33f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector3&lt; uint32f &gt;</type>
      <name>Vector3UI</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a27617ba98ba673d0170bf1cab5ccbfd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector3&lt; real &gt;</type>
      <name>Vector3R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7f5d9bea70db00eb52ece79b05e544c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector3&lt; float32 &gt;</type>
      <name>Vector3F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aaa9b3db4f55c5821900d14013d215933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector3&lt; float64 &gt;</type>
      <name>Vector3D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad0f41824cfe5e85bdbde57f0f779e230</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector3&lt; std::size_t &gt;</type>
      <name>Vector3S</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae65f6687182eac31a149eacdccd4cf7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector4&lt; real &gt;</type>
      <name>Vector4R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a71b2e063e0bf4831b58dfea00fe62214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector4&lt; float32 &gt;</type>
      <name>Vector4F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aeecd95f45574f3a4ea7df770904ba904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector4&lt; float64 &gt;</type>
      <name>Vector4D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a67755ff531b1b0e9a00c0278ac5ae2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVector4&lt; std::size_t &gt;</type>
      <name>Vector4S</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aee456ded8cdfb7b2adad0565ecefad84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuaternion&lt; real &gt;</type>
      <name>QuaternionR</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>adee0f3690eabc71a94eb5973f510fc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuaternion&lt; float32 &gt;</type>
      <name>QuaternionF</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a99d75be7f2ec5d70b2398a52bced9df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuaternion&lt; float64 &gt;</type>
      <name>QuaternionD</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7c35c4621ab96f1173aa2c8e7ce71fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix2&lt; real &gt;</type>
      <name>Matrix2R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af245bac5367a3ded8ef0450d69a3bdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix2&lt; float32 &gt;</type>
      <name>Matrix2F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0ca7173a84bf74d736f3113a8982056d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix2&lt; float64 &gt;</type>
      <name>Matrix2D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4e9a64a57abc2aaf4684c8925af26013</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix3&lt; real &gt;</type>
      <name>Matrix3R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ab851dc7df48c211ae4833937d53e3659</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix3&lt; float32 &gt;</type>
      <name>Matrix3F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a801224d2d098fa34fccc8d9dc2ac87ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix3&lt; float64 &gt;</type>
      <name>Matrix3D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8013bb719cc5f01bbf14efd7f05ae955</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix4&lt; real &gt;</type>
      <name>Matrix4R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a253b37e1d4d39b0d83ccedef34e49df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix4&lt; float32 &gt;</type>
      <name>Matrix4F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae372d63feb913145cf8070a01804d408</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix4&lt; float64 &gt;</type>
      <name>Matrix4D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a55dc1b11aca23a1047fec9ffa15741c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOrthonormalBasis3&lt; real &gt;</type>
      <name>Basis3R</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a782f65af919c2d08a4826b1c9e8b8389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOrthonormalBasis3&lt; float32 &gt;</type>
      <name>Basis3F</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aa55846871797dfcf1791b9def400fb35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOrthonormalBasis3&lt; float64 &gt;</type>
      <name>Basis3D</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad6e816c88c79b5542db5a724ffbffa13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EEndpoint</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae7853802be4d35a3625b5f313151d1ba</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1math.html" anchor="ae7853802be4d35a3625b5f313151d1baace31e2a082d17e038fcc6e3006166653">MIN</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ae7853802be4d35a3625b5f313151d1baa26a4b44a837bf97b972628509912b4a5">MAX</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EColorSpace</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a957eab3ceed525ebce5c24b6b57eb975</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975aa0722d9dcf7cc7b24ba4de9888238cfb">CIE_XYZ</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975ab6fb9dfbcbbcea21d6d2529b82d9903e">CIE_xyY</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975a09459a025b9bd3e49c14a141f26f1168">Linear_sRGB</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975a9ed33d9be17d174aeb4393a989586ed9">sRGB</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975a1cd2db83c1165ec3c7e7ca28694c92ee">ACEScg</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975ad105cc4d913228315335035aa21669a8">Spectral_Smits</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975a44119bf3bae5d40a8d0766b91c304aac">NUM</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a957eab3ceed525ebce5c24b6b57eb975ae37975b8856f3f6d3225897f27a442b4">Spectral</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EReferenceWhite</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac8bbf5c13da6b60663011e0be1acb6c4</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a7fc56270e7a70fa81a5935b72eacbe29">A</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a9d5ed678fe57bcca610140957afab571">B</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a0d61f8370cad1d412f80b84d143e1257">C</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a7290aac68db9eb1ff4d4836da44a0d1d">D50</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a6ce3e0cc84978dd0c1d80e118eae1519">D55</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a85f9317be9fe12cdd816246498344fab">D60</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a440c2a945f3a652a52ebefab6a30f515">D65</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a1506a078e9ad06b4a73489e089e618f4">D75</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a3a3ea00cfc35332cedf6e5e9a32e94da">E</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4ae1dffc8709f31a4987c8a88334107e89">F1</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4afe5c3684dce76cdd9f7f42430868aa74">F2</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a4b6bf4b531770872d4328ce69bef5627">F3</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4ae7e0e72401a9f2718ed0f39f2861d702">F4</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a37f438df6a6d5ba4c17ef8ca58562f00">F5</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a1faf42f2823f184eb2c9f0dffe5d73f2">F6</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a47489eb597b7db34caa24b1fc78fc839">F7</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a4787509ad9f9d747a81a30e9dde3d4a7">F8</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a892a245e287c163080b23db737d3c4c9">F9</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4ab213ce22ca6ad4eda8db82966b9b6e5a">F10</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a643b0662422d1d0dffa3fca2e2bf28a8">F11</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4ae902674982fc99aa343cdd94da7476c3">F12</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a2f092b86209ba38c1d275870505a0d55">LED_B1</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a894a03e77170cd9bdb6635d317cc0538">LED_B2</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4ab2667af341d2229f6689cd504e6ec5a5">LED_B3</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a93852f42947803aeb2888c92acbf58f4">LED_B4</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a7681d32deddb41d311d83f26326d808b">LED_B5</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a9fae58afb567d2a74ac337723baf6f80">LED_BH1</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a0791ff479f9c43f7478c8da8c691dd4c">LED_RGB1</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4aab258aebb8e9576fd8a2912539bcc0cc">LED_V1</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a4757dde20c9c2285f13b629efc6a23f1">LED_V2</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a01ec90d9624dce53f3f3492882841fe6">ACES</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="ac8bbf5c13da6b60663011e0be1acb6c4a44119bf3bae5d40a8d0766b91c304aac">NUM</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EChromaticAdaptation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aeb6d400f8c4f85be266ab51b3cd65951</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1math.html" anchor="aeb6d400f8c4f85be266ab51b3cd65951a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="aeb6d400f8c4f85be266ab51b3cd65951a3fd49dab43044bf83a81e5e7ab067402">XYZScaling</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="aeb6d400f8c4f85be266ab51b3cd65951aaa6039aa9501f740afe28823ab6a2419">Bradford</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="aeb6d400f8c4f85be266ab51b3cd65951a68248943bdadb8d6c76e9d9c7dee38e8">VonKries</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="aeb6d400f8c4f85be266ab51b3cd65951a7a1920d61156abc05a60135aefe8bc67">Default</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EColorUsage</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a821af6da20aaed56cc09ad440633d067</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1math.html" anchor="a821af6da20aaed56cc09ad440633d067a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a821af6da20aaed56cc09ad440633d067a633d6abff0a3fc22404347728d195059">RAW</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a821af6da20aaed56cc09ad440633d067a8d4c0b2cef256d21ab680366c8b1c6bf">EMR</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a821af6da20aaed56cc09ad440633d067a13eb1af433fe09e8ee2e6b89001c3843">ECF</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESpectralResample</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a74a2188a938a5c0a52127f654cfa8b06</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1math.html" anchor="a74a2188a938a5c0a52127f654cfa8b06a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a74a2188a938a5c0a52127f654cfa8b06a53cbb44cfbee2ac4966344016112465a">PiecewiseAveraged</enumvalue>
      <enumvalue file="namespaceph_1_1math.html" anchor="a74a2188a938a5c0a52127f654cfa8b06a7a1920d61156abc05a60135aefe8bc67">Default</enumvalue>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>chromatic_adapt</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a57a79918ca16800547722e927119aa60</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;srcCIEXYZColor, EReferenceWhite srcRefWhite, EReferenceWhite dstRefWhite)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3&lt; T &gt;</type>
      <name>create_von_kries_linear_CAT_matrix</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7bf83fdc8c49c4fec93e35a91cb671ca</anchor>
      <arglist>(const TMatrix3&lt; T &gt; &amp;CIEXYZToConeResponse, const TMatrix3&lt; T &gt; &amp;ConeResponseToCIEXYZ, const EReferenceWhite srcRefWhite, const EReferenceWhite dstRefWhite)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3&lt; T &gt;</type>
      <name>create_von_kries_linear_CAT_matrix</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a12f4f5d0c9c20519566fcf2ecd83e3c8</anchor>
      <arglist>(const TMatrix3&lt; T &gt; &amp;CIEXYZToConeResponse, const TMatrix3&lt; T &gt; &amp;ConeResponseToCIEXYZ, const TTristimulusValues&lt; T &gt; &amp;srcRefWhite, const TTristimulusValues&lt; T &gt; &amp;dstRefWhite)</arglist>
    </member>
    <member kind="function">
      <type>TChromaticityValues&lt; T &gt;</type>
      <name>chromaticity_of</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4466b9f393d20ad035c33c30066ceec6</anchor>
      <arglist>(const EReferenceWhite refWhite)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>CIEXYZ_of_custom_reference_white</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad2f06bfe6b47cecf717f38929f68d821</anchor>
      <arglist>(const TChromaticityValues&lt; T &gt; &amp;refWhite)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>CIEXYZ_of</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a43b1d3cfd69b7670eef57a752e641687</anchor>
      <arglist>(const EReferenceWhite refWhite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_tristimulus</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abe1a45b3ea4179b27954f963695cae32</anchor>
      <arglist>(EColorSpace colorSpace)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_compatible</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f9e5426a4fdf63a119b6fac5a86eb98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform_color</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a57a6066f091fead6bc616fb811b42b21</anchor>
      <arglist>(const auto &amp;srcColorValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>relative_luminance</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2982839b6392253fc67bb096add9a44f</anchor>
      <arglist>(const auto &amp;srcColorValues, EColorUsage usage=EColorUsage::EMR)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>estimate_color_energy</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2b0482067dc614d1eeafbf75b8b10996</anchor>
      <arglist>(const auto &amp;srcColorValues)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>normalize_color_energy</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aaaa5875dae95653f7145e11b81e90459</anchor>
      <arglist>(const auto &amp;srcColorValues)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>put_color_energy</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a036e6132c8c8a769c292f29b8427112b</anchor>
      <arglist>(const auto &amp;srcColorValues, T energyLevel)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>sRGB_nonlinear_to_linear</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af073289717f681f13febdf1888d38d5b</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;nonlinearSRGB)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>sRGB_linear_to_nonlinear</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad70f4b84a56b15f96d640ee5dfe83c58</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;linearSRGB)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform_from_sRGB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4b760ffa2dd0b2fb8b0c477fffd7c097</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;nonlinearSRGB, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform_from_linear_sRGB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9d227a2cbf1065eaa4e4b5d51d71f30c</anchor>
      <arglist>(const TTristimulusValues&lt; T &gt; &amp;linearSRGB, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>transform_to_sRGB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad3164ab55096d5ac1fd9a7158c8ea6d4</anchor>
      <arglist>(const auto &amp;srcColorValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>transform_to_linear_sRGB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9a607a63db401274a7e3d77c0895dcaf</anchor>
      <arglist>(const auto &amp;srcColorValues, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>wavelength_interval_of</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af8b0e704f3e50c9861e6b066a9dccdf3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; T, T &gt;</type>
      <name>wavelength_range_of</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae0bf06deb23f354119b454c52b275878</anchor>
      <arglist>(std::size_t sampleIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>estimate_samples_energy</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aab219259171b1d3575da2b5224edcb93</anchor>
      <arglist>(const TSpectralSampleValues&lt; T, SampleProps &gt; &amp;srcSamples)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>normalize_samples_energy</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a413c0ea914fc11e1f26bfabd44d2c162</anchor>
      <arglist>(const TSpectralSampleValues&lt; T, SampleProps &gt; &amp;srcSamples)</arglist>
    </member>
    <member kind="function">
      <type>constexpr TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>constant_spectral_samples</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1adffee7416319ef84ebfb7a67a6b347</anchor>
      <arglist>(T constant)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_spectral_samples</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8ae6d9df536ec07a0411c503df56fee6</anchor>
      <arglist>(const U *wavelengthsNM, const U *values, std::size_t numPoints, ESpectralResample algorithm=ESpectralResample::Default)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_black_body</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>affd528849118d3a6a18bc509629ea485</anchor>
      <arglist>(T temperatureK)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_black_body_radiance</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9f6174bc51d3f6c8d98447fa0150d0a4</anchor>
      <arglist>(T temperatureK)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_black_body_spectral_radiance</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abe29bcb4e664f137617284d654a768ec</anchor>
      <arglist>(T temperatureK)</arglist>
    </member>
    <member kind="function">
      <type>TTristimulusValues&lt; T &gt;</type>
      <name>spectral_samples_to_CIE_XYZ</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4e8c5be354cae25f8639d0ebd4a9df17</anchor>
      <arglist>(const TSpectralSampleValues&lt; T, SampleProps &gt; &amp;srcSamples, EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>wavelength_range_of</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ade79110c31d4daed508e1924de67dac4</anchor>
      <arglist>(const std::size_t sampleIndex) noexcept -&gt; std::pair&lt; T, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>octahedron_unit_vector_encode</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a726764d140f2eb38f51cca01a6e0740a</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;unitVec)</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>octahedron_unit_vector_decode</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a97853fb83b95a1bd4eb7c30cfce31938</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;encodedVal)</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>sun_sky_phi_theta</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aea61422c22a925abcb12792d024217cc</anchor>
      <arglist>(const T solarTime24H, const T julianDate, const T siteLatitudeRadians)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>discrete_spatial_hash</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae4917cd3e0f831b6bd3308fa7c445016</anchor>
      <arglist>(Integer x, Integer y, Integer z, std::size_t hashTableSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>discrete_spatial_hash</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2c27c006cdd87270cab6bb88e7036136</anchor>
      <arglist>(Integer x, Integer y, std::size_t hashTableSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>discrete_spatial_hash</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a6aba3655a0d1efaff5695372288ca95e</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;point, std::size_t hashTableSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>discrete_spatial_hash</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ad78d553d429b5c5168c9df82f3f1a932</anchor>
      <arglist>(const TVector3&lt; T &gt; &amp;point, const TVector3&lt; T &gt; &amp;cellSize, std::size_t hashTableSize)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>murmur3_bit_mix_32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9c59773f54074f6e5f0e32c5ef4c0a96</anchor>
      <arglist>(uint32 v)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>murmur3_bit_mix_64</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a01043fa9b4769c1a7444e7e8fb143535</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>murmur3_v13_bit_mix_64</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>acb56174f050862060121bd5462dfe1bb</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>moremur_bit_mix_64</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e096044157a72ac3ed27025b65cc274</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>murmur3_32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a45d86025b912ecd026e05d1aa6130d2c</anchor>
      <arglist>(const T &amp;data, uint32 seed)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>murmur3_32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7c4434683d9ec2d4fb691f52d4433f85</anchor>
      <arglist>(const T *data, std::size_t dataSize, uint32 seed)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>permuted_index</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46bffa9926cc5a79c3ae8eefdcc9990e</anchor>
      <arglist>(uint32 i, uint32 l, uint32 p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>form_orthonormal_basis_frisvad</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a14234263f1191fde0644069273c63a87</anchor>
      <arglist>(const Vector3R &amp;unitYaxis, Vector3R *const out_unitXaxis, Vector3R *const out_unitZaxis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same_hemisphere</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a885a24bd55e37b45410ec47a89bfb55e</anchor>
      <arglist>(const Vector3R &amp;vector, const Vector3R &amp;N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_opposite_hemisphere</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae427fc90cb46f14b52a5cdc7a738ab69</anchor>
      <arglist>(const Vector3R &amp;vector, const Vector3R &amp;N)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>matrix2x2</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af09fabd051200745fc83ab8e6119be17</anchor>
      <arglist>(const T e00, const T e01, const T e10, const T e11) -&gt; std::array&lt; std::array&lt; T, 2 &gt;, 2 &gt;</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3d95f12613138cf607ca4b4b0c04ea48</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clamp</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af8f390358e5ac8042dde889f48d9aaa4</anchor>
      <arglist>(const T value, const T lowerBound, const T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>safe_clamp</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0090b0ad2b7785d02c6761c1766066cc</anchor>
      <arglist>(const T value, const T lowerBound, const T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_degrees</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b5aeb6bb0f2f3339e033d34fa70a894</anchor>
      <arglist>(const T radians)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_radians</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8d924d614efcdd92fcce816a3f8eebf3</anchor>
      <arglist>(const T degrees)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7377d0dddd537e4e7a04f98bd8e1114e</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>next_power_of_2</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2dd1eb154bffce7df042dbdd88aa161b</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>log2_floor</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aef693a3af48988419e383d739b935a4b</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fractional_part</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9460c87b6dab3097ee4d084d9b59a604</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wrap</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a48cf078fd719072dfc9c27d67a730c3c</anchor>
      <arglist>(T value, const T lowerBound, const T upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_even</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3d787dce79dfdd2614927831c40ab231</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_odd</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a00dacdca0d6501e4506f1e80350c6529</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NumberType</type>
      <name>bytes_to_KiB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>adb4811e9be6e476d37c2db92e3d5a17a</anchor>
      <arglist>(const std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NumberType</type>
      <name>bytes_to_MiB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a510bcaf07562b67f8897a55701399305</anchor>
      <arglist>(const std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NumberType</type>
      <name>bytes_to_GiB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2da02d8fd55ff426905d97c7297a08ad</anchor>
      <arglist>(const std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NumberType</type>
      <name>bytes_to_TiB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a37422f0d5ec9007755a40521c7bbf89d</anchor>
      <arglist>(const std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NumberType</type>
      <name>bytes_to_PiB</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aabf2fd737aa55c1ff9ca0f2315eca5e2</anchor>
      <arglist>(const std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::size_t &gt;</type>
      <name>ith_evenly_divided_range</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a830bc8cab76b0720b0756fce21828b3f</anchor>
      <arglist>(const std::size_t rangeIndex, const std::size_t totalSize, const std::size_t numDivisions)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_rcp_sqrt</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>acc970fbe8bc77521af0103b29e524baa</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_sqrt</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>adb93254f78909d9fef4bc8d7326b7670</anchor>
      <arglist>(const float x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse_bits</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2cf56679844b291df412ba311723c828</anchor>
      <arglist>(const T value)</arglist>
    </member>
    <member kind="function">
      <type>UIntType</type>
      <name>set_bits_in_range</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abbf29a619bc4b2cd6e88bbc5e3380a0f</anchor>
      <arglist>(const UIntType bits, const RangeType beginBitIdx, const RangeType endBitIdx)</arglist>
    </member>
    <member kind="function">
      <type>UIntType</type>
      <name>clear_bits_in_range</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af11f191a13f32e5ff37ba539bb731029</anchor>
      <arglist>(const UIntType bits, const RangeType beginBitIdx, const RangeType endBitIdx)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; T, N &gt;</type>
      <name>evenly_spaced_array</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5ffba8a0fe5af3a10b2b568ff3f26124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>evenly_spaced_vector</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a95653bcb43b37e51af4fe120f25e9099</anchor>
      <arglist>(const T min, const T max, const std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>normalize_integer</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4690860b243fe5e072ff6048732ae2a3</anchor>
      <arglist>(const IntType intVal)</arglist>
    </member>
    <member kind="function">
      <type>IntType</type>
      <name>quantize_normalized_float</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a403680d6446383625398ed0c057c43fd</anchor>
      <arglist>(const FloatType floatVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uint64_mul</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a996b8aaa152f5e58eea616b7340f7659</anchor>
      <arglist>(const uint64 lhs, const uint64 rhs, uint64 &amp;out_high64, uint64 &amp;out_low64)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>black_body_spectral_radiance_at</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ab6c812780186db6fffc4e5b25946f17e</anchor>
      <arglist>(const T temperatureK, const T wavelengthNM)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>black_body_spectral_radiance_curve</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2e1994639e2978dc226efa4ef08cbec5</anchor>
      <arglist>(const T temperatureK, const T lambdaMinNM, const T lambdaMaxNM, const std::size_t numCurvePoints, std::vector&lt; T &gt; *const out_lambdaValues=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>radical_inverse</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a127b033f884f9a76ea631ddf02fc1d0f</anchor>
      <arglist>(const Value value)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>radical_inverse_permuted</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aadd21e9c389d1bfc9bc7d00d06dfb775</anchor>
      <arglist>(const Value dimIndex, const Value value, DigitPermuter permuter)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; To, N &gt;</type>
      <name>sample_cast</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a9155e57616e76e5b400e6052093e491e</anchor>
      <arglist>(const std::array&lt; From, N &gt; &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pick</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a85eb3c66273614f6751cba5c227ee7df</anchor>
      <arglist>(const T pickProbability, const T sample)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reused_pick</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ae25c59a2b1c21e3de88ce32499d3fa2f</anchor>
      <arglist>(const T pickProbability, T &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle_durstenfeld_index_pairs</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03fd4cce00581b5243ec4dcec64cacc7</anchor>
      <arglist>(const std::size_t beginIndex, const std::size_t endIndex, IndexPairConsumer consumer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle_durstenfeld</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0c2373ae6879d917ab66bd42e199d245</anchor>
      <arglist>(RandomIterator begin, RandomIterator end, Swapper swapper=Swapper())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>duration_to_HMS</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aac2a958894497fc6ff4ea42e2b72bd2d</anchor>
      <arglist>(const std::chrono::duration&lt; TimeType, UnitType &gt; &amp;totalTime) -&gt; std::array&lt; TimeType, 3 &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>milliseconds_to_HMS</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3266fe3771e481e88ebfd4f2582001b</anchor>
      <arglist>(const TimeType &amp;totalTime) -&gt; std::array&lt; TimeType, 3 &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>seconds_to_HMS</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a481f56f49006955302fbd2c45928849b</anchor>
      <arglist>(const TimeType &amp;totalSeconds) -&gt; std::array&lt; TimeType, 3 &gt;</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mean_solar_time_to_solar_time_24H</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a71267e6e44c796151b9e81a747ad4860</anchor>
      <arglist>(const T standardTime24H, const T standardMeridianRadians, const T siteLongitudeRadians, const T julianDate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PH_DEFINE_EXTERNAL_LOG_GROUP</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a56bf3598ef20de4b6333e2987bfc7bda</anchor>
      <arglist>(StaticRigidTransform, Math)</arglist>
    </member>
    <member kind="function">
      <type>TVector3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aa5b5d7a200e1fac56baf6a626fafecdc</anchor>
      <arglist>(T rhs, const TVector3&lt; T &gt; &amp;lhs)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_E</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b208c3dfc7024c379877d689ae7db08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_D65</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3d128c7225063c77e89c60595769355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a423ca1404e587fb97e03569f02f95861</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafd95c335ca3cea8382e4664fcb2e071</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49a2a687b51def083e81e22e8aadd871</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a688dbf6563c86608204cf755dc0be5cd</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af88ea36316f4e3c2a63d8ff7342e3038</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46cc1344fc73d1e20da595d6e62bbb57</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7c44afb09e2610c07148d4b1120e4614</anchor>
      <arglist>(const UIntType bitIdx)</arglist>
    </member>
    <member kind="function">
      <type>consteval UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a00c7265b62195ee8215d3a07ee97d8a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>fp32_to_fp16_bits</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a91780ac8e52ddfdd3f0314cc36b882c2</anchor>
      <arglist>(const float32 value)</arglist>
    </member>
    <member kind="function">
      <type>float32</type>
      <name>fp16_bits_to_fp32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a050fd048afd360173b15c10a05c21f7c</anchor>
      <arglist>(const uint16 fp16Bits)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e1143174acd6afb8b6c9be755307c4b</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abd30caa18de616eaa04f98f75a8c9753</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7ff2861977711d396858e5b6aef1436c</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a271473c0e491fe4c7c0cb02fcfa88bb0</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0a1c02f0fa48517a643a221c4200dc1e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4d686d16a731cfaf96c02424b9215798</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4ff51da9284135e078f892589a4816cc</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2f4af840af27b7877140cb250d0b2cba</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a41e68b91f571234574a62deddcf6b47e</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f0591b11fba7210f6dd38cfbbcbc9f7</anchor>
      <arglist>(std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3cf4f52c15a3def1081a81e736a7a4f8</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a82c62fe543155f8ea8d4fa031f8f3d85</anchor>
      <arglist>(TSpan&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03f8a077523cb1f8d667a39529300e98</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vecA, const std::array&lt; T, N &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1338f031a910337ae964bb3bc4ac6fe1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vecA, const std::vector&lt; T &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8bee0579f0647a84c49161d6ae0dba6f</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vecA, TSpanView&lt; T, EXTENT &gt; vecB)</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_E</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3b208c3dfc7024c379877d689ae7db08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TSpectralSampleValues&lt; T, SampleProps &gt;</type>
      <name>resample_illuminant_D65</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>ac3d128c7225063c77e89c60595769355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a423ca1404e587fb97e03569f02f95861</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>aafd95c335ca3cea8382e4664fcb2e071</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>summation</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a49a2a687b51def083e81e22e8aadd871</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a688dbf6563c86608204cf755dc0be5cd</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>af88ea36316f4e3c2a63d8ff7342e3038</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a46cc1344fc73d1e20da595d6e62bbb57</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; values, T initialValue=1)</arglist>
    </member>
    <member kind="function">
      <type>UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7c44afb09e2610c07148d4b1120e4614</anchor>
      <arglist>(const UIntType bitIdx)</arglist>
    </member>
    <member kind="function">
      <type>consteval UIntType</type>
      <name>flag_bit</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a00c7265b62195ee8215d3a07ee97d8a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>fp32_to_fp16_bits</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a91780ac8e52ddfdd3f0314cc36b882c2</anchor>
      <arglist>(const float32 value)</arglist>
    </member>
    <member kind="function">
      <type>float32</type>
      <name>fp16_bits_to_fp32</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a050fd048afd360173b15c10a05c21f7c</anchor>
      <arglist>(const uint16 fp16Bits)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a5e1143174acd6afb8b6c9be755307c4b</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>abd30caa18de616eaa04f98f75a8c9753</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a7ff2861977711d396858e5b6aef1436c</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a271473c0e491fe4c7c0cb02fcfa88bb0</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a0a1c02f0fa48517a643a221c4200dc1e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length_squared</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4d686d16a731cfaf96c02424b9215798</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4ff51da9284135e078f892589a4816cc</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a2f4af840af27b7877140cb250d0b2cba</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p_norm</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a41e68b91f571234574a62deddcf6b47e</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a4f0591b11fba7210f6dd38cfbbcbc9f7</anchor>
      <arglist>(std::array&lt; T, N &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a3cf4f52c15a3def1081a81e736a7a4f8</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a82c62fe543155f8ea8d4fa031f8f3d85</anchor>
      <arglist>(TSpan&lt; T, EXTENT &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a03f8a077523cb1f8d667a39529300e98</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;vecA, const std::array&lt; T, N &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a1338f031a910337ae964bb3bc4ac6fe1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;vecA, const std::vector&lt; T &gt; &amp;vecB)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot_product</name>
      <anchorfile>namespaceph_1_1math.html</anchorfile>
      <anchor>a8bee0579f0647a84c49161d6ae0dba6f</anchor>
      <arglist>(TSpanView&lt; T, EXTENT &gt; vecA, TSpanView&lt; T, EXTENT &gt; vecB)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math::constant</name>
    <filename>namespaceph_1_1math_1_1constant.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>AxisIndexType</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a6399d62eb40c0ceee94dfcb7b77cb85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>pi</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>aeb217ecd643bb14c638c3d0457a031e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>rcp_pi</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a1bb40d89d819a550a57dbdb5bf950ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>two_pi</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>ad8b55217fcc8198b83c50375e1120c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>rcp_two_pi</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a6e06689143a509c5db1bea4cda40d823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>four_pi</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a74df15a988474294266e06f83a0f51fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>rcp_four_pi</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>ad94737c754eba014b00baed9a4bacea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>pi2</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a1de34fa3edf60d8404fbddd10aff51d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>sqrt_2</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a8d0417484c0b9b7716b4d5272bf1646a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>rcp_sqrt_2</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a605e5078513fc3c3e16781b5d06c7868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>h_Planck</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>af48fcbdcc85482a7dc2eb30753858336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>c_light</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>ab356262e329bf2351ca691b824a0d351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>k_Boltzmann</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a82ebc4c84e297f08a3b1e2e5aa5cf88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>KiB</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>aec2814da28a7c9f64c26e54b610e2004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>MiB</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a49ad38be8f3ddda440960e50cb5376db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>GiB</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a5bd138de6e1289a88b5cc6109b0c6bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>TiB</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>ac0d72c7c9b2610bd4c5b18bd289a48a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>PiB</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a6ada2c0aedc92f05b605e2fd6daf63e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>UNKNOWN_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2c2f5d7f6b274f594b7b09ba38ed3ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>X_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a700e65439fa95e5ea186c96d06614a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Y_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a111d5e146845b82d5e977e6d0cf6fd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Z_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2eaa067caf050a0557eae1109de58e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>UNKNOWN_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2c2f5d7f6b274f594b7b09ba38ed3ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>X_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a700e65439fa95e5ea186c96d06614a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Y_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a111d5e146845b82d5e977e6d0cf6fd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr AxisIndexType</type>
      <name>Z_AXIS</name>
      <anchorfile>namespaceph_1_1math_1_1constant.html</anchorfile>
      <anchor>a2eaa067caf050a0557eae1109de58e15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math::detail</name>
    <filename>namespaceph_1_1math_1_1detail.html</filename>
    <namespace>ph::math::detail::shuffle</namespace>
    <class kind="class">ph::math::detail::Pcg64UInt128</class>
    <class kind="struct">ph::math::detail::TCIEXYZCmfKernel</class>
    <class kind="class">ph::math::detail::TColorSpaceDummy</class>
    <class kind="struct">ph::math::detail::TSmitsSPDBasis</class>
    <member kind="typedef">
      <type>decltype(get_any_element_from_color_values(std::declval&lt; ColorValuesType &gt;()))</type>
      <name>TColorValuesElementType</name>
      <anchorfile>namespaceph_1_1math_1_1detail.html</anchorfile>
      <anchor>a8492cfad9239c735abb040def1c6deea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_chromaticity_table</name>
      <anchorfile>namespaceph_1_1math_1_1detail.html</anchorfile>
      <anchor>a973b6895b66c5463767784c8a85e5f19</anchor>
      <arglist>() -&gt; std::array&lt; TChromaticityValues&lt; T &gt;, static_cast&lt; std::size_t &gt;(EReferenceWhite::NUM)&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>get_any_element_from_color_values</name>
      <anchorfile>namespaceph_1_1math_1_1detail.html</anchorfile>
      <anchor>a28f2554c6e7ea85f7f455b3346673f61</anchor>
      <arglist>(const ColorValuesType &amp;colorValues)</arglist>
    </member>
    <member kind="function">
      <type>TVector2&lt; T &gt;</type>
      <name>octahedron_diamond_mirror</name>
      <anchorfile>namespaceph_1_1math_1_1detail.html</anchorfile>
      <anchor>a56f26ac6998799fac4fe89ea1370f3f4</anchor>
      <arglist>(const TVector2&lt; T &gt; &amp;point)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math::detail::shuffle</name>
    <filename>namespaceph_1_1math_1_1detail_1_1shuffle.html</filename>
    <class kind="struct">ph::math::detail::shuffle::StandardSwapper</class>
  </compound>
  <compound kind="namespace">
    <name>ph::math::radical_inverse_detail</name>
    <filename>namespaceph_1_1math_1_1radical__inverse__detail.html</filename>
    <member kind="function">
      <type>constexpr Value</type>
      <name>reverse_limit</name>
      <anchorfile>namespaceph_1_1math_1_1radical__inverse__detail.html</anchorfile>
      <anchor>a08eaf2c92ab31556b51a6c468373fb05</anchor>
      <arglist>(const Value nextDigit, const Base base)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>num_meaningful_digits</name>
      <anchorfile>namespaceph_1_1math_1_1radical__inverse__detail.html</anchorfile>
      <anchor>a3b137ffa4261d6ac227aee60ba61dd7c</anchor>
      <arglist>(const Base base)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Result</type>
      <name>base_2_scaler</name>
      <anchorfile>namespaceph_1_1math_1_1radical__inverse__detail.html</anchorfile>
      <anchor>ab388c5a1081df4ee09980af0520cb41c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math::spectral_data</name>
    <filename>namespaceph_1_1math_1_1spectral__data.html</filename>
    <member kind="typedef">
      <type>std::array&lt; double, 471 &gt;</type>
      <name>ArrayXYZCMF</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a76122bf8164907cad9e6c3898652ffed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; double, 531 &gt;</type>
      <name>ArrayD65</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>acdd5355d95ac691ce5f7b7f744045d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; double, 40 &gt;</type>
      <name>ArraySmits</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>ad4e0974550f743b0e2539c1450c469a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const ArrayXYZCMF &amp;</type>
      <name>XYZ_CMF_CIE_1931_2_degree_wavelengths_nm</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a81e4db6c6ac6572710056ebcb1e53f08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayXYZCMF &amp;</type>
      <name>XYZ_CMF_CIE_1931_2_degree_X</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a261f1d4cad547a3588049bd3387e5b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayXYZCMF &amp;</type>
      <name>XYZ_CMF_CIE_1931_2_degree_Y</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a92294a44ec41ccdef7bfa919e31cf6d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayXYZCMF &amp;</type>
      <name>XYZ_CMF_CIE_1931_2_degree_Z</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a36e24cdf78208f05728b17a8c246720e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayD65 &amp;</type>
      <name>CIE_D65_wavelengths_nm</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a034d31fe682fa4b0ab179729c6e5a07f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayD65 &amp;</type>
      <name>CIE_D65_values</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>adfd5012f4d34bcbad1225dcb6e22ca06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_wavelengths_nm</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>afaa615c1caaa9556d4c55defc925f383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_white</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a8c3dfc85eb86b5028068b0b59e8b5d30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_cyan</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a74b7ddb0f2504221f5ce278429268888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_magenta</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a850a027a21c7b6b050a04bb46b9c717b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_yellow</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>aedeca0937235ce764126d71f0ef54063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_red</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a6a8aba26f7c9a123b6f4e2833375092c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_green</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a8d5f437bac2f1733c2c90e9ff8fe85c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArraySmits &amp;</type>
      <name>smits_linear_sRGB_to_spectrum_E_blue</name>
      <anchorfile>namespaceph_1_1math_1_1spectral__data.html</anchorfile>
      <anchor>a083e7fac120e1c15f32c059ebfdb3f2e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math::table</name>
    <filename>namespaceph_1_1math_1_1table.html</filename>
    <namespace>ph::math::table::detail</namespace>
    <member kind="variable">
      <type>constexpr std::array&lt; uint32, 2048 &gt;</type>
      <name>PRIME</name>
      <anchorfile>namespaceph_1_1math_1_1table.html</anchorfile>
      <anchor>a6a102bd18125b6cb1b96692f49d6ef3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::array&lt; uint32, 512 &gt;</type>
      <name>GOOD_PRIME</name>
      <anchorfile>namespaceph_1_1math_1_1table.html</anchorfile>
      <anchor>aa9ceefaabb346cc604ecb6738d7e03b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::math::table::detail</name>
    <filename>namespaceph_1_1math_1_1table_1_1detail.html</filename>
    <member kind="variable">
      <type>constexpr std::array&lt; unsigned char, 256 &gt;</type>
      <name>BITS8_REVERSE</name>
      <anchorfile>namespaceph_1_1math_1_1table_1_1detail.html</anchorfile>
      <anchor>af06511c2d6e975a79a5f5a0f192f7379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::pixel_buffer</name>
    <filename>namespaceph_1_1pixel__buffer.html</filename>
    <class kind="class">ph::pixel_buffer::TPixel</class>
    <member kind="variable">
      <type>constexpr uint8</type>
      <name>MAX_PIXEL_ELEMENTS</name>
      <anchorfile>namespaceph_1_1pixel__buffer.html</anchorfile>
      <anchor>ac1848420a959a4cce0717c35fe2520eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::pixel_texture</name>
    <filename>namespaceph_1_1pixel__texture.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EWrapMode</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>a5dcb3306aae58b27f6458054da3413c2</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a5dcb3306aae58b27f6458054da3413c2a7020426cfb0a204051be4b3053d2acc8">Repeat</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a5dcb3306aae58b27f6458054da3413c2a74556551231333c36debc3d373261134">ClampToEdge</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a5dcb3306aae58b27f6458054da3413c2a897226ff039be1a3fb27e97e34552d18">FlippedClampToEdge</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESampleMode</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>ae750f043249b1210d6def67f5fc73c85</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="ae750f043249b1210d6def67f5fc73c85a60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="ae750f043249b1210d6def67f5fc73c85aaf17c98bbd83c27d6426d2ff3fa81d7f">Bilinear</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="ae750f043249b1210d6def67f5fc73c85a969a7b6f1f3951ef293b3ff281dc293d">Trilinear</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPixelLayout</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>a3b167f72734af6e016a66878c539bd9d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9daea3495a278957dc58165e48a8945469f">RGBA</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9dae1e1d3d40573127e9ee0480caf1283d6">R</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9dadfcf28d0734569a6a693bc8194de62bf">G</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9da9d5ed678fe57bcca610140957afab571">B</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9dadaf3064a82bc412c0aedd99d024df0fc">Monochromatic</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9da7fc56270e7a70fa81a5935b72eacbe29">A</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9dabac953e88f6d79514b0b6fc42eb6f3b7">RG</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9da889574aebacda6bfd3e534e2b49b8028">RGB</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9da2ad5640ebdec72fc79531d1778c6c2dc">BGR</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9dae192297ecf3602fabbec5f0a38ede758">ARGB</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9dadce7d10c2f9ffc8ed9e7b6a3f7d8ba6c">ABGR</enumvalue>
      <enumvalue file="namespaceph_1_1pixel__texture.html" anchor="a3b167f72734af6e016a66878c539bd9da5a1fe3c61c9e2fd6dbbc823589f6e697">BGRA</enumvalue>
    </member>
    <member kind="function">
      <type>float64</type>
      <name>uv_to_st_scalar</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>ad14c058e9d6dfdf7eec2fcce1bf9f915</anchor>
      <arglist>(const float64 inputUV, const EWrapMode wrapMode)</arglist>
    </member>
    <member kind="function">
      <type>math::Vector2D</type>
      <name>uv_to_st</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>a49433cbc4ff5f1c8c5fd65512942718f</anchor>
      <arglist>(const math::Vector2D &amp;inputUV, const EWrapMode wrapModeS, const EWrapMode wrapModeT)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>num_pixel_elements</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>aad75898edf6ad4e6e5d1862d2f22b5f0</anchor>
      <arglist>(const EPixelLayout layout)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>alpha_channel_index</name>
      <anchorfile>namespaceph_1_1pixel__texture.html</anchorfile>
      <anchor>abc5f13d575b092591865a60bba13e816</anchor>
      <arglist>(const EPixelLayout layout)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::sdl</name>
    <filename>namespaceph_1_1sdl.html</filename>
    <namespace>ph::sdl::detail</namespace>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>tristimulus_to_spectrum</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a8e237372c6f73a90be375afea3b93db7</anchor>
      <arglist>(const math::TVector3&lt; math::ColorValue &gt; &amp;tristimulus, math::EColorSpace colorSpace, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>math::Spectrum</type>
      <name>load_spectrum</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a921ac6469983197807b7faa6a43db59e</anchor>
      <arglist>(std::string_view sdlSpectrumStr, std::string_view tag, math::EColorUsage usage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_spectrum</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>ad4c22f873ff33cced07bdb6d635f244c</anchor>
      <arglist>(const math::Spectrum &amp;spectrum, std::string &amp;out_sdlSpectrumStr, std::string &amp;out_tag)</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>category_to_string</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a1ebba778e6cb2b1078321d70592b53f9</anchor>
      <arglist>(const ESdlTypeCategory category)</arglist>
    </member>
    <member kind="function">
      <type>ESdlTypeCategory</type>
      <name>string_to_category</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa86a902ff7f2146bb33438d14f17470d</anchor>
      <arglist>(const std::string_view categoryStr)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string_view &gt;</type>
      <name>acquire_categories</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a18c1800da16306125fe2232f0cf2e639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_field_id</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a6d7fc19827d3c14f61cd3261beca32df</anchor>
      <arglist>(const SdlField *sdlField, SdlOutputClause &amp;clause)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_all_callable_functions</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aba62fe5504009a18317e27ccdfc3d5ad</anchor>
      <arglist>(const SdlClass *callableParentClass) -&gt; std::vector&lt; std::pair&lt; const SdlFunction *, const SdlClass * &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>load_real</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>af2a28d686fe87a78317a319af22dc0fd</anchor>
      <arglist>(std::string_view sdlRealStr)</arglist>
    </member>
    <member kind="function">
      <type>integer</type>
      <name>load_integer</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a1fae33a0e0fdf54f446e35617bb4b597</anchor>
      <arglist>(std::string_view sdlIntegerStr)</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>load_float</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a9e3a060577c496cabaee6d92c2c98743</anchor>
      <arglist>(std::string_view sdlFloatStr)</arglist>
    </member>
    <member kind="function">
      <type>IntType</type>
      <name>load_int</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a37717f7c69b019e54ead1ad91a8d0dbe</anchor>
      <arglist>(std::string_view sdlIntStr)</arglist>
    </member>
    <member kind="function">
      <type>NumberType</type>
      <name>load_number</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a5831dce38b7d1501ac2fbb3ce9e926f1</anchor>
      <arglist>(std::string_view sdlNumberStr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_numbers</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a5028c4172f60e7a6bece45c742f5b3dc</anchor>
      <arglist>(std::string_view sdlNumbersStr, TSpan&lt; NumberType, EXTENT &gt; out_numbers)</arglist>
    </member>
    <member kind="function">
      <type>math::TVector2&lt; Element &gt;</type>
      <name>load_vector2</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>ac704ce841b201bdfba09d9de148be541</anchor>
      <arglist>(std::string_view sdlVec2Str)</arglist>
    </member>
    <member kind="function">
      <type>math::TVector3&lt; Element &gt;</type>
      <name>load_vector3</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>af03426f0a098e040855dba998ee535d1</anchor>
      <arglist>(std::string_view sdlVec3Str)</arglist>
    </member>
    <member kind="function">
      <type>math::TVector4&lt; Element &gt;</type>
      <name>load_vector4</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>abcd078529ce321e6d16c92162d0d4d9b</anchor>
      <arglist>(std::string_view sdlVec4Str)</arglist>
    </member>
    <member kind="function">
      <type>math::TQuaternion&lt; Element &gt;</type>
      <name>load_quaternion</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aaafa8109cd34574601a048baba5f60fc</anchor>
      <arglist>(std::string_view sdlQuatStr)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NumberType &gt;</type>
      <name>load_number_array</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>ada40fc3c41de5db3040eb09afd0176db</anchor>
      <arglist>(std::string_view sdlNumberArrayStr)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; math::TVector3&lt; Element &gt; &gt;</type>
      <name>load_vector3_array</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a5f4e3adb783f7ef607a9717cc757f646</anchor>
      <arglist>(std::string_view sdlVec3ArrayStr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_real</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a9e6e2c38740b4bffe9015f7790c68035</anchor>
      <arglist>(real value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_integer</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a5d9d055ebe129c5c616c647254364214</anchor>
      <arglist>(integer value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_float</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a9ccca4b44895cb70371ecda9b701492f</anchor>
      <arglist>(FloatType value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_int</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a42a135abb3dc9d9bc0cb9431969bad61</anchor>
      <arglist>(IntType value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_number</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a82205eb601393ffbd96f18659821e224</anchor>
      <arglist>(NumberType value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_numbers</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a899080c7add9cf3bc0a42c72d295ec3d</anchor>
      <arglist>(TSpanView&lt; NumberType, EXTENT &gt; numbers, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_vector2</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>ae7e3726272021e2f57471d5db6e1225f</anchor>
      <arglist>(const math::TVector2&lt; Element &gt; &amp;value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_vector3</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a0cf13e1d78e73b5a2ec7fc5aa2d9c72a</anchor>
      <arglist>(const math::TVector3&lt; Element &gt; &amp;value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_vector4</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a60fdde8ef6087daa0138880268f7a5d8</anchor>
      <arglist>(const math::TVector4&lt; Element &gt; &amp;value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_quaternion</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7cecd5c2054e41c552c39682b032744c</anchor>
      <arglist>(const math::TQuaternion&lt; Element &gt; &amp;value, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_number_array</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a3f644690a35bbaa5d03018d211a997fc</anchor>
      <arglist>(TSpanView&lt; NumberType &gt; values, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_vector3_array</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adfec1b1da9398d8749f5b401cd18de70</anchor>
      <arglist>(TSpanView&lt; math::TVector3&lt; Element &gt; &gt; values, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ESdlTypeCategory</type>
      <name>category_of</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a82df961475e33d5cbc1b5693d10d83c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr ESdlDataType</type>
      <name>int_type_of</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a821c8c787e1e73e26694c89197487d15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr ESdlDataType</type>
      <name>float_type_of</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>ae7e8c66484745868ebdca9c1d1b7f6cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr ESdlDataType</type>
      <name>number_type_of</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>ae2e3133fa14648771568f84db1de168a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr ESdlDataType</type>
      <name>resource_type_of</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a9e0f507e441d4a627ee74d38ac43def1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DstType *</type>
      <name>cast_to</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a591b5f6c3060f18a5452c2043d148fa6</anchor>
      <arglist>(SrcType *srcResource)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a16ba8b83316ce0f172ca13981e342faf</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa46a7b173fbfb3a13b4f6de1a803ae30</anchor>
      <arglist>(const SdlStruct *const ztruct)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a001940d07ebe975ffd1562eeb550b72a</anchor>
      <arglist>(const SdlFunction *const func)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa7230747349b1f9ad12fb50b2f9d66c8</anchor>
      <arglist>(const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a4e0808d419e52c24054d06627f1756d6</anchor>
      <arglist>(const SdlClass *const clazz, const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_title_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7603a49e4786a51e7e4c084fe147b798</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_camel_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a105dde3d8cfa84b15c8c428f6d2439c0</anchor>
      <arglist>(std::string_view sdlName, bool capitalizedFront=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_snake_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adf870754b5d0db338dd2e71d3631a31c</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a16ba8b83316ce0f172ca13981e342faf</anchor>
      <arglist>(const SdlClass *clazz)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa46a7b173fbfb3a13b4f6de1a803ae30</anchor>
      <arglist>(const SdlStruct *const ztruct)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a001940d07ebe975ffd1562eeb550b72a</anchor>
      <arglist>(const SdlFunction *const func)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>aa7230747349b1f9ad12fb50b2f9d66c8</anchor>
      <arglist>(const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gen_pretty_name</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a4e0808d419e52c24054d06627f1756d6</anchor>
      <arglist>(const SdlClass *const clazz, const SdlField *const field)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_title_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a7603a49e4786a51e7e4c084fe147b798</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_camel_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>a105dde3d8cfa84b15c8c428f6d2439c0</anchor>
      <arglist>(std::string_view sdlName, bool capitalizedFront=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_to_snake_case</name>
      <anchorfile>namespaceph_1_1sdl.html</anchorfile>
      <anchor>adf870754b5d0db338dd2e71d3631a31c</anchor>
      <arglist>(std::string_view sdlName)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::sdl::detail</name>
    <filename>namespaceph_1_1sdl_1_1detail.html</filename>
    <member kind="variable">
      <type>constexpr std::array&lt; std::string_view, static_cast&lt; std::size_t &gt;(ESdlTypeCategory::SIZE)&gt;</type>
      <name>CATEGORY_TO_STRING</name>
      <anchorfile>namespaceph_1_1sdl_1_1detail.html</anchorfile>
      <anchor>ada69f3a83ff1d73ce7c2332f08c05646</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::sdl_parser</name>
    <filename>namespaceph_1_1sdl__parser.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>is_single_name_with_specifier</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a8fec36ebe98d21e992943c701f59c653</anchor>
      <arglist>(std::string_view valueToken)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_name_with_specifier</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a1e1f17467dbd5db35b9bd1ab94152bd9</anchor>
      <arglist>(std::string_view nameToken) -&gt; std::pair&lt; std::string_view, char &gt;</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>get_reference</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a33d22ab7d598beaf1b57fefd4b9ab371</anchor>
      <arglist>(std::string_view referenceToken)</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>get_data_packet_name</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>ae62de7e60f6d4cac71283ebff8dfbeee</anchor>
      <arglist>(std::string_view dataPacketNameToken)</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>trim_double_quotes</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a30796f68319e0131241f06733fad6fef</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_double_quoted</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>ad71554f00f5fb3e7f766d352059338cd</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_specifier</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a377e27c06800dc3a9674d9bd3114e83f</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with_specifier</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a3f87641494261c5acb3e76bed0c41179</anchor>
      <arglist>(std::string_view valueToken)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>persistent_specifier</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a34cdeca96f94ccf367886f0fb8ce150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>cached_specifier</name>
      <anchorfile>namespaceph_1_1sdl__parser.html</anchorfile>
      <anchor>a07ca65b196149e9a73ca5fd497562335</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ph::texfunc</name>
    <filename>namespaceph_1_1texfunc.html</filename>
    <class kind="class">ph::texfunc::TAbsolute</class>
    <class kind="class">ph::texfunc::TAdd</class>
    <class kind="class">ph::texfunc::TClamp</class>
    <class kind="class">ph::texfunc::TDefaultConversion</class>
    <class kind="class">ph::texfunc::TDivide</class>
    <class kind="class">ph::texfunc::TMultiply</class>
    <class kind="class">ph::texfunc::TPower</class>
    <class kind="class">ph::texfunc::TScalarToSpectrum</class>
    <class kind="class">ph::texfunc::TSubtract</class>
    <class kind="class">ph::texfunc::TUnaryFromBinary</class>
    <class kind="class">ph::texfunc::TUnaryFromTernary</class>
    <concept>ph::texfunc::CBinaryOperator</concept>
    <concept>ph::texfunc::CTernaryOperator</concept>
    <concept>ph::texfunc::CUnaryOperator</concept>
    <member kind="typedef">
      <type>TAdd&lt; math::Spectrum, math::Spectrum, math::Spectrum &gt;</type>
      <name>AddSpectrum</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a9383bf48f6ed71707e25b97dd4b683ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSubtract&lt; math::Spectrum, math::Spectrum, math::Spectrum &gt;</type>
      <name>SubtractSpectrum</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a73a399e17470541547656d64294268f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMultiply&lt; math::Spectrum, math::Spectrum, math::Spectrum &gt;</type>
      <name>MultiplySpectrum</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a3f0538899b393cbcb469c0bff088a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDivide&lt; math::Spectrum, math::Spectrum, math::Spectrum &gt;</type>
      <name>DivideSpectrum</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a2a844b9e806eba1eb7b58b273208a410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPower&lt; math::Spectrum, math::Spectrum, math::Spectrum &gt;</type>
      <name>PowerSpectrum</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a02d10d9f8b95717c70a490986f26acf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TClamp&lt; math::Spectrum, math::Spectrum, math::Spectrum, math::Spectrum &gt;</type>
      <name>ClampSpectrum</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a147b1427272948fc311867e3da05042d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryFromBinary&lt; InputType, ConstantType, OutputType, TAdd&lt; InputType, ConstantType, OutputType &gt; &gt;</type>
      <name>TAddConstant</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a7cd20ca44e3e60a3ad3ba0649bef6b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryFromBinary&lt; InputType, ConstantType, OutputType, TSubtract&lt; InputType, ConstantType, OutputType &gt; &gt;</type>
      <name>TSubtractConstant</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a1423e1f246fe6318b5a0289053a53cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryFromBinary&lt; InputType, ConstantType, OutputType, TMultiply&lt; InputType, ConstantType, OutputType &gt; &gt;</type>
      <name>TMultiplyConstant</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a53513839e57d4228669c04e2af6e550d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryFromBinary&lt; InputType, ConstantType, OutputType, TDivide&lt; InputType, ConstantType, OutputType &gt; &gt;</type>
      <name>TDivideConstant</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>ae1f4399ff329e71ab3810ba80207b4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryFromBinary&lt; InputType, ConstantType, OutputType, TPower&lt; InputType, ConstantType, OutputType &gt; &gt;</type>
      <name>TPowerConstant</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a0181021c7fdb1921e16d9d0d5112b31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TUnaryFromTernary&lt; InputType, ConstantTypeA, ConstantTypeB, OutputType, TClamp&lt; InputType, ConstantTypeA, ConstantTypeB, OutputType &gt; &gt;</type>
      <name>TClampConstant</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>ac31b1445913753a73139845924800578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAddConstant&lt; math::Spectrum, math::ColorValue, math::Spectrum &gt;</type>
      <name>SpectrumAddScalar</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a9981aa491143d849660a9054b85ab358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSubtractConstant&lt; math::Spectrum, math::ColorValue, math::Spectrum &gt;</type>
      <name>SpectrumSubtractScalar</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>a1093377ab9c01d982e908db74f38f084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMultiplyConstant&lt; math::Spectrum, math::ColorValue, math::Spectrum &gt;</type>
      <name>SpectrumMultiplyScalar</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>aa5ced3db431ecd04d978dbb1fe71c098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDivideConstant&lt; math::Spectrum, math::ColorValue, math::Spectrum &gt;</type>
      <name>SpectrumDivideScalar</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>adc428b92a24d807abc7ec1131643b6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPowerConstant&lt; math::Spectrum, math::ColorValue, math::Spectrum &gt;</type>
      <name>SpectrumPowerScalar</name>
      <anchorfile>namespaceph_1_1texfunc.html</anchorfile>
      <anchor>ad9416495958af5df460a0dd65bd5dfbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::hash&lt; ph::math::TAABB2D&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; ph::math::TVector2&lt; T &gt; &gt;</class>
  </compound>
  <compound kind="page">
    <name>engine_directories</name>
    <title>Engine Directories</title>
    <filename>engine_directories.html</filename>
    <docanchor file="engine_directories.html" title="Root Directories">root</docanchor>
    <docanchor file="engine_directories.html" title="Standalone/Composite Data Containers">data_containers</docanchor>
    <docanchor file="engine_directories.html" title="Math functions">math</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Engine</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Releases">releases</docanchor>
    <docanchor file="index.html" title="About">about</docanchor>
  </compound>
</tagfile>
